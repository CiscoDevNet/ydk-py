""" Cisco_IOS_XR_mpls_lsd_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR mpls\-lsd package operational data.

This module contains definitions
for the following management objects\:
  mpls\-lsd\-nodes\: Location MPLS LSD operational data
  mpls\-lsd\: mpls lsd

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class MgmtLsdApp(Enum):
    """
    MgmtLsdApp (Enum Class)

    Mgmt lsd app

    .. data:: mgmt_lsd_app_type_none = 0

    	None

    .. data:: mgmt_lsd_app_type_int = 1

    	LSD

    .. data:: mgmt_lsd_app_type_test = 2

    	Test

    .. data:: mgmt_lsd_app_type_static = 3

    	Static

    .. data:: mgmt_lsd_app_type_ldp = 4

    	LDP

    .. data:: mgmt_lsd_app_type_te = 5

    	TE Control

    .. data:: mgmt_lsd_app_type_app_controller = 6

    	App Controller

    .. data:: mgmt_lsd_app_type_bgp_ipv4 = 7

    	BGP v4

    .. data:: mgmt_lsd_app_type_bgp_vpn_ipv4 = 8

    	BGP VPNv4

    .. data:: mgmt_lsd_app_type_l2vpn = 9

    	L2VPN

    .. data:: mgmt_lsd_app_type_bgp_spkr = 10

    	BGP Spkr

    .. data:: mgmt_lsd_app_type_bfd = 11

    	BFD

    .. data:: mgmt_lsd_app_type_pim = 12

    	PIM

    .. data:: mgmt_lsd_app_type_v2_lsd = 13

    	V2 LSD

    .. data:: mgmt_lsd_app_type_pim6 = 14

    	PIM6

    .. data:: mgmt_lsd_app_type_isis = 15

    	ISIS

    .. data:: mgmt_lsd_app_type_ospf = 16

    	OSPF

    .. data:: mgmt_lsd_app_type_cgn = 17

    	CGN

    .. data:: mgmt_lsd_app_type_dmtc = 18

    	Traffic Collector

    .. data:: mgmt_lsd_app_type_any = 19

    	Any

    """

    mgmt_lsd_app_type_none = Enum.YLeaf(0, "mgmt-lsd-app-type-none")

    mgmt_lsd_app_type_int = Enum.YLeaf(1, "mgmt-lsd-app-type-int")

    mgmt_lsd_app_type_test = Enum.YLeaf(2, "mgmt-lsd-app-type-test")

    mgmt_lsd_app_type_static = Enum.YLeaf(3, "mgmt-lsd-app-type-static")

    mgmt_lsd_app_type_ldp = Enum.YLeaf(4, "mgmt-lsd-app-type-ldp")

    mgmt_lsd_app_type_te = Enum.YLeaf(5, "mgmt-lsd-app-type-te")

    mgmt_lsd_app_type_app_controller = Enum.YLeaf(6, "mgmt-lsd-app-type-app-controller")

    mgmt_lsd_app_type_bgp_ipv4 = Enum.YLeaf(7, "mgmt-lsd-app-type-bgp-ipv4")

    mgmt_lsd_app_type_bgp_vpn_ipv4 = Enum.YLeaf(8, "mgmt-lsd-app-type-bgp-vpn-ipv4")

    mgmt_lsd_app_type_l2vpn = Enum.YLeaf(9, "mgmt-lsd-app-type-l2vpn")

    mgmt_lsd_app_type_bgp_spkr = Enum.YLeaf(10, "mgmt-lsd-app-type-bgp-spkr")

    mgmt_lsd_app_type_bfd = Enum.YLeaf(11, "mgmt-lsd-app-type-bfd")

    mgmt_lsd_app_type_pim = Enum.YLeaf(12, "mgmt-lsd-app-type-pim")

    mgmt_lsd_app_type_v2_lsd = Enum.YLeaf(13, "mgmt-lsd-app-type-v2-lsd")

    mgmt_lsd_app_type_pim6 = Enum.YLeaf(14, "mgmt-lsd-app-type-pim6")

    mgmt_lsd_app_type_isis = Enum.YLeaf(15, "mgmt-lsd-app-type-isis")

    mgmt_lsd_app_type_ospf = Enum.YLeaf(16, "mgmt-lsd-app-type-ospf")

    mgmt_lsd_app_type_cgn = Enum.YLeaf(17, "mgmt-lsd-app-type-cgn")

    mgmt_lsd_app_type_dmtc = Enum.YLeaf(18, "mgmt-lsd-app-type-dmtc")

    mgmt_lsd_app_type_any = Enum.YLeaf(19, "mgmt-lsd-app-type-any")


class MgmtLsdAppRsrcState(Enum):
    """
    MgmtLsdAppRsrcState (Enum Class)

    Mgmt lsd app rsrc state

    .. data:: mgmt_lsd_app_rsrc_state_active = 0

    	Active

    .. data:: mgmt_lsd_app_rsrc_state_pnd = 1

    	Pending

    .. data:: mgmt_lsd_app_rsrc_state_pnd_svr = 2

    	Pending Server

    """

    mgmt_lsd_app_rsrc_state_active = Enum.YLeaf(0, "mgmt-lsd-app-rsrc-state-active")

    mgmt_lsd_app_rsrc_state_pnd = Enum.YLeaf(1, "mgmt-lsd-app-rsrc-state-pnd")

    mgmt_lsd_app_rsrc_state_pnd_svr = Enum.YLeaf(2, "mgmt-lsd-app-rsrc-state-pnd-svr")


class MgmtLsdAppState(Enum):
    """
    MgmtLsdAppState (Enum Class)

    Mgmt lsd app state

    .. data:: mgmt_lsd_app_state_active = 0

    	Active

    .. data:: mgmt_lsd_app_state_zombie = 1

    	Zombie

    .. data:: mgmt_lsd_app_state_recover = 2

    	Recover

    """

    mgmt_lsd_app_state_active = Enum.YLeaf(0, "mgmt-lsd-app-state-active")

    mgmt_lsd_app_state_zombie = Enum.YLeaf(1, "mgmt-lsd-app-state-zombie")

    mgmt_lsd_app_state_recover = Enum.YLeaf(2, "mgmt-lsd-app-state-recover")


class MgmtLsdClient(Enum):
    """
    MgmtLsdClient (Enum Class)

    Mgmt lsd client

    .. data:: mgmt_lsd_client_type_app = 0

    	Application

    .. data:: mgmt_lsd_client_type_ba = 1

    	BCDL Agent

    """

    mgmt_lsd_client_type_app = Enum.YLeaf(0, "mgmt-lsd-client-type-app")

    mgmt_lsd_client_type_ba = Enum.YLeaf(1, "mgmt-lsd-client-type-ba")


class MgmtLsdFpi(Enum):
    """
    MgmtLsdFpi (Enum Class)

    Mgmt lsd fpi

    .. data:: mgmt_lsd_fpi_type_label = 0

    	Label

    .. data:: mgmt_lsd_fpi_type_te = 1

    	TE

    .. data:: mgmt_lsd_fpi_type_ipv4 = 2

    	IPv4

    .. data:: mgmt_lsd_fpi_type_ipv6 = 3

    	IPv6

    .. data:: mgmt_lsd_fpi_type_pw_list = 4

    	PW List

    .. data:: mgmt_lsd_fpi_type_te_v2 = 5

    	TE v2

    .. data:: mgmt_lsd_fpi_type_dmtc_ext_intf = 6

    	DMTC External Interface

    """

    mgmt_lsd_fpi_type_label = Enum.YLeaf(0, "mgmt-lsd-fpi-type-label")

    mgmt_lsd_fpi_type_te = Enum.YLeaf(1, "mgmt-lsd-fpi-type-te")

    mgmt_lsd_fpi_type_ipv4 = Enum.YLeaf(2, "mgmt-lsd-fpi-type-ipv4")

    mgmt_lsd_fpi_type_ipv6 = Enum.YLeaf(3, "mgmt-lsd-fpi-type-ipv6")

    mgmt_lsd_fpi_type_pw_list = Enum.YLeaf(4, "mgmt-lsd-fpi-type-pw-list")

    mgmt_lsd_fpi_type_te_v2 = Enum.YLeaf(5, "mgmt-lsd-fpi-type-te-v2")

    mgmt_lsd_fpi_type_dmtc_ext_intf = Enum.YLeaf(6, "mgmt-lsd-fpi-type-dmtc-ext-intf")


class MgmtLsdFrrState(Enum):
    """
    MgmtLsdFrrState (Enum Class)

    Mgmt lsd frr state

    .. data:: mgmt_lsd_frr_state_partial = 0

    	Partial

    .. data:: mgmt_lsd_frr_state_active = 1

    	Active

    .. data:: mgmt_lsd_frr_state_ready = 2

    	Ready

    .. data:: mgmt_lsd_frr_state_complete = 3

    	Complete

    .. data:: mgmt_lsd_frr_state_any = 4

    	Any

    .. data:: mgmt_lsd_frr_state_igp = 5

    	IGP

    """

    mgmt_lsd_frr_state_partial = Enum.YLeaf(0, "mgmt-lsd-frr-state-partial")

    mgmt_lsd_frr_state_active = Enum.YLeaf(1, "mgmt-lsd-frr-state-active")

    mgmt_lsd_frr_state_ready = Enum.YLeaf(2, "mgmt-lsd-frr-state-ready")

    mgmt_lsd_frr_state_complete = Enum.YLeaf(3, "mgmt-lsd-frr-state-complete")

    mgmt_lsd_frr_state_any = Enum.YLeaf(4, "mgmt-lsd-frr-state-any")

    mgmt_lsd_frr_state_igp = Enum.YLeaf(5, "mgmt-lsd-frr-state-igp")


class MgmtLsdIntfState(Enum):
    """
    MgmtLsdIntfState (Enum Class)

    Mgmt lsd intf state

    .. data:: mgmt_lsd_intf_state_unknown = 0

    	unknown

    .. data:: mgmt_lsd_intf_state_up = 1

    	up

    .. data:: mgmt_lsd_intf_state_down = 2

    	down

    """

    mgmt_lsd_intf_state_unknown = Enum.YLeaf(0, "mgmt-lsd-intf-state-unknown")

    mgmt_lsd_intf_state_up = Enum.YLeaf(1, "mgmt-lsd-intf-state-up")

    mgmt_lsd_intf_state_down = Enum.YLeaf(2, "mgmt-lsd-intf-state-down")


class MgmtLsdLblCtx(Enum):
    """
    MgmtLsdLblCtx (Enum Class)

    Mgmt lsd lbl ctx

    .. data:: mgmt_lsd_lbl_ctx_type_none = 0

    	None

    .. data:: mgmt_lsd_lbl_ctx_type_ipv4 = 1

    	IPv4

    .. data:: mgmt_lsd_lbl_ctx_type_ipv6 = 2

    	IPv6

    .. data:: mgmt_lsd_lbl_ctx_type_tev4 = 3

    	TE IPv4

    .. data:: mgmt_lsd_lbl_ctx_type_l3vpn_ipv4 = 4

    	L3VPN IPv4

    .. data:: mgmt_lsd_lbl_ctx_type_l3vpn_ipv6 = 5

    	L3VPN IPv6

    .. data:: mgmt_lsd_lbl_ctx_type_l3vpn_vrf = 6

    	L3VPN Per-VRF

    .. data:: mgmt_lsd_lbl_ctx_type_l3vpn_cev4 = 7

    	L3VPN IPv4 Per-CE

    .. data:: mgmt_lsd_lbl_ctx_type_l3vpn_cev6 = 8

    	L3VPN IPv6 Per-CE

    .. data:: mgmt_lsd_lbl_ctx_type_pw = 9

    	PW

    .. data:: mgmt_lsd_lbl_ctx_type_lbl_blk = 10

    	LBL BLK

    .. data:: mgmt_lsd_lbl_ctx_type_ip_sub = 11

    	IP SUB

    .. data:: mgmt_lsd_lbl_ctx_type_tev4_p2mp = 12

    	TE IPv4 P2MP

    .. data:: mgmt_lsd_lbl_ctx_type_mldpv4 = 13

    	MLDP IPv4

    .. data:: mgmt_lsd_lbl_ctx_type_pwhe = 14

    	PW HE

    .. data:: mgmt_lsd_lbl_ctx_type_tp = 15

    	MPLS TP

    .. data:: mgmt_lsd_lbl_ctx_type_gre = 16

    	GRE

    .. data:: mgmt_lsd_lbl_ctx_type_evpn = 17

    	EVPN

    .. data:: mgmt_lsd_lbl_ctx_type_blb_ipv4 = 18

    	BLB IPv4

    .. data:: mgmt_lsd_lbl_ctx_type_blb_ipv6 = 19

    	BLB IPv6

    .. data:: mgmt_lsd_lbl_ctx_type_pim_i_pmsi = 20

    	PIM I-PMSI

    .. data:: mgmt_lsd_lbl_ctx_type_pim_s_pmsi = 21

    	PIM S-PMSI

    .. data:: mgmt_lsd_lbl_ctx_type_l3vpn_nh_set = 22

    	L3VPN NH SET

    .. data:: mgmt_lsd_lbl_ctx_type_sr_pfx_seg = 23

    	SR Prefix Segment

    .. data:: mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv4 = 24

    	SR Adj Segment IPv4

    .. data:: mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv6 = 25

    	SR Adj Segment IPv6

    .. data:: mgmt_lsd_lbl_ctx_type_lbl_blk_srgb = 26

    	LBL BLK SRGB

    .. data:: mgmt_lsd_lbl_ctx_type_te_binding = 27

    	TE Binding

    .. data:: mgmt_lsd_lbl_ctx_type_gre_ipv6 = 28

    	GRE IPV6

    .. data:: mgmt_lsd_lbl_ctx_type_any = 29

    	Any

    .. data:: mgmt_lsd_lbl_ctx_type_lbl_blk_srlb = 30

    	LBL BLK SRLB

    """

    mgmt_lsd_lbl_ctx_type_none = Enum.YLeaf(0, "mgmt-lsd-lbl-ctx-type-none")

    mgmt_lsd_lbl_ctx_type_ipv4 = Enum.YLeaf(1, "mgmt-lsd-lbl-ctx-type-ipv4")

    mgmt_lsd_lbl_ctx_type_ipv6 = Enum.YLeaf(2, "mgmt-lsd-lbl-ctx-type-ipv6")

    mgmt_lsd_lbl_ctx_type_tev4 = Enum.YLeaf(3, "mgmt-lsd-lbl-ctx-type-tev4")

    mgmt_lsd_lbl_ctx_type_l3vpn_ipv4 = Enum.YLeaf(4, "mgmt-lsd-lbl-ctx-type-l3vpn-ipv4")

    mgmt_lsd_lbl_ctx_type_l3vpn_ipv6 = Enum.YLeaf(5, "mgmt-lsd-lbl-ctx-type-l3vpn-ipv6")

    mgmt_lsd_lbl_ctx_type_l3vpn_vrf = Enum.YLeaf(6, "mgmt-lsd-lbl-ctx-type-l3vpn-vrf")

    mgmt_lsd_lbl_ctx_type_l3vpn_cev4 = Enum.YLeaf(7, "mgmt-lsd-lbl-ctx-type-l3vpn-cev4")

    mgmt_lsd_lbl_ctx_type_l3vpn_cev6 = Enum.YLeaf(8, "mgmt-lsd-lbl-ctx-type-l3vpn-cev6")

    mgmt_lsd_lbl_ctx_type_pw = Enum.YLeaf(9, "mgmt-lsd-lbl-ctx-type-pw")

    mgmt_lsd_lbl_ctx_type_lbl_blk = Enum.YLeaf(10, "mgmt-lsd-lbl-ctx-type-lbl-blk")

    mgmt_lsd_lbl_ctx_type_ip_sub = Enum.YLeaf(11, "mgmt-lsd-lbl-ctx-type-ip-sub")

    mgmt_lsd_lbl_ctx_type_tev4_p2mp = Enum.YLeaf(12, "mgmt-lsd-lbl-ctx-type-tev4-p2mp")

    mgmt_lsd_lbl_ctx_type_mldpv4 = Enum.YLeaf(13, "mgmt-lsd-lbl-ctx-type-mldpv4")

    mgmt_lsd_lbl_ctx_type_pwhe = Enum.YLeaf(14, "mgmt-lsd-lbl-ctx-type-pwhe")

    mgmt_lsd_lbl_ctx_type_tp = Enum.YLeaf(15, "mgmt-lsd-lbl-ctx-type-tp")

    mgmt_lsd_lbl_ctx_type_gre = Enum.YLeaf(16, "mgmt-lsd-lbl-ctx-type-gre")

    mgmt_lsd_lbl_ctx_type_evpn = Enum.YLeaf(17, "mgmt-lsd-lbl-ctx-type-evpn")

    mgmt_lsd_lbl_ctx_type_blb_ipv4 = Enum.YLeaf(18, "mgmt-lsd-lbl-ctx-type-blb-ipv4")

    mgmt_lsd_lbl_ctx_type_blb_ipv6 = Enum.YLeaf(19, "mgmt-lsd-lbl-ctx-type-blb-ipv6")

    mgmt_lsd_lbl_ctx_type_pim_i_pmsi = Enum.YLeaf(20, "mgmt-lsd-lbl-ctx-type-pim-i-pmsi")

    mgmt_lsd_lbl_ctx_type_pim_s_pmsi = Enum.YLeaf(21, "mgmt-lsd-lbl-ctx-type-pim-s-pmsi")

    mgmt_lsd_lbl_ctx_type_l3vpn_nh_set = Enum.YLeaf(22, "mgmt-lsd-lbl-ctx-type-l3vpn-nh-set")

    mgmt_lsd_lbl_ctx_type_sr_pfx_seg = Enum.YLeaf(23, "mgmt-lsd-lbl-ctx-type-sr-pfx-seg")

    mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv4 = Enum.YLeaf(24, "mgmt-lsd-lbl-ctx-type-sr-adj-seg-ipv4")

    mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv6 = Enum.YLeaf(25, "mgmt-lsd-lbl-ctx-type-sr-adj-seg-ipv6")

    mgmt_lsd_lbl_ctx_type_lbl_blk_srgb = Enum.YLeaf(26, "mgmt-lsd-lbl-ctx-type-lbl-blk-srgb")

    mgmt_lsd_lbl_ctx_type_te_binding = Enum.YLeaf(27, "mgmt-lsd-lbl-ctx-type-te-binding")

    mgmt_lsd_lbl_ctx_type_gre_ipv6 = Enum.YLeaf(28, "mgmt-lsd-lbl-ctx-type-gre-ipv6")

    mgmt_lsd_lbl_ctx_type_any = Enum.YLeaf(29, "mgmt-lsd-lbl-ctx-type-any")

    mgmt_lsd_lbl_ctx_type_lbl_blk_srlb = Enum.YLeaf(30, "mgmt-lsd-lbl-ctx-type-lbl-blk-srlb")


class MgmtLsdLspRole(Enum):
    """
    MgmtLsdLspRole (Enum Class)

    Mgmt lsd lsp role

    .. data:: mgmt_lsd_lsp_role_head = 0

    	Head

    .. data:: mgmt_lsd_lsp_role_mid = 1

    	Midpoint

    """

    mgmt_lsd_lsp_role_head = Enum.YLeaf(0, "mgmt-lsd-lsp-role-head")

    mgmt_lsd_lsp_role_mid = Enum.YLeaf(1, "mgmt-lsd-lsp-role-mid")


class MgmtLsdMoi(Enum):
    """
    MgmtLsdMoi (Enum Class)

    Mgmt lsd moi

    .. data:: mgmt_lsd_moi_type_pop_and_lkup_ipv4 = 0

    	Pop-and-lookup IPv4

    .. data:: mgmt_lsd_moi_type_ipv4 = 1

    	IPv4

    .. data:: mgmt_lsd_moi_type_ipv6 = 2

    	IPv6

    .. data:: mgmt_lsd_moi_type_tev4 = 3

    	TE IPv4

    .. data:: mgmt_lsd_moi_type_pw = 4

    	PW

    .. data:: mgmt_lsd_moi_type_pop_and_lkup_ipv6 = 5

    	Pop-and-lookup IPv6

    .. data:: mgmt_lsd_moi_type_ip_sub = 6

    	IP Subscriber

    .. data:: mgmt_lsd_moi_type_pwhe = 7

    	PW HE

    .. data:: mgmt_lsd_moi_type_pw_list = 8

    	PW List

    .. data:: mgmt_lsd_moi_type_ipv4_stack = 9

    	IPv4 Multi-Label

    .. data:: mgmt_lsd_moi_type_pop_and_lkup_tp = 10

    	Pop-and-lookup TP

    .. data:: mgmt_lsd_moi_type_ipv6_stack = 11

    	IPv6 Multi-Label

    .. data:: mgmt_lsd_moi_type_te_head = 12

    	TE Head

    .. data:: mgmt_lsd_moi_type_dmtc_ext_intf = 13

    	Demand Matrix Traffic-Collector

    """

    mgmt_lsd_moi_type_pop_and_lkup_ipv4 = Enum.YLeaf(0, "mgmt-lsd-moi-type-pop-and-lkup-ipv4")

    mgmt_lsd_moi_type_ipv4 = Enum.YLeaf(1, "mgmt-lsd-moi-type-ipv4")

    mgmt_lsd_moi_type_ipv6 = Enum.YLeaf(2, "mgmt-lsd-moi-type-ipv6")

    mgmt_lsd_moi_type_tev4 = Enum.YLeaf(3, "mgmt-lsd-moi-type-tev4")

    mgmt_lsd_moi_type_pw = Enum.YLeaf(4, "mgmt-lsd-moi-type-pw")

    mgmt_lsd_moi_type_pop_and_lkup_ipv6 = Enum.YLeaf(5, "mgmt-lsd-moi-type-pop-and-lkup-ipv6")

    mgmt_lsd_moi_type_ip_sub = Enum.YLeaf(6, "mgmt-lsd-moi-type-ip-sub")

    mgmt_lsd_moi_type_pwhe = Enum.YLeaf(7, "mgmt-lsd-moi-type-pwhe")

    mgmt_lsd_moi_type_pw_list = Enum.YLeaf(8, "mgmt-lsd-moi-type-pw-list")

    mgmt_lsd_moi_type_ipv4_stack = Enum.YLeaf(9, "mgmt-lsd-moi-type-ipv4-stack")

    mgmt_lsd_moi_type_pop_and_lkup_tp = Enum.YLeaf(10, "mgmt-lsd-moi-type-pop-and-lkup-tp")

    mgmt_lsd_moi_type_ipv6_stack = Enum.YLeaf(11, "mgmt-lsd-moi-type-ipv6-stack")

    mgmt_lsd_moi_type_te_head = Enum.YLeaf(12, "mgmt-lsd-moi-type-te-head")

    mgmt_lsd_moi_type_dmtc_ext_intf = Enum.YLeaf(13, "mgmt-lsd-moi-type-dmtc-ext-intf")


class MgmtLsdRwId(Enum):
    """
    MgmtLsdRwId (Enum Class)

    Mgmt lsd rw id

    .. data:: mgmt_lsd_rw_id_type_none = 0

    	None

    .. data:: mgmt_lsd_rw_id_type_lbl_ctx = 1

    	Label Context

    .. data:: mgmt_lsd_rw_id_type_loc_lbl = 2

    	Local Label

    """

    mgmt_lsd_rw_id_type_none = Enum.YLeaf(0, "mgmt-lsd-rw-id-type-none")

    mgmt_lsd_rw_id_type_lbl_ctx = Enum.YLeaf(1, "mgmt-lsd-rw-id-type-lbl-ctx")

    mgmt_lsd_rw_id_type_loc_lbl = Enum.YLeaf(2, "mgmt-lsd-rw-id-type-loc-lbl")


class MgmtLsdTeBinding(Enum):
    """
    MgmtLsdTeBinding (Enum Class)

    Mgmt lsd te binding

    .. data:: mgmt_lsd_ident_p2p_tun_id = 0

    	mgmt lsd ident p2p tun id

    .. data:: mgmt_lsd_ident_p2p_grp_id = 1

    	mgmt lsd ident p2p grp id

    .. data:: mgmt_lsd_ident_p2mp_tun_id = 2

    	mgmt lsd ident p2mp tun id

    .. data:: mgmt_lsd_ident_p2mp_grp_id = 3

    	mgmt lsd ident p2mp grp id

    """

    mgmt_lsd_ident_p2p_tun_id = Enum.YLeaf(0, "mgmt-lsd-ident-p2p-tun-id")

    mgmt_lsd_ident_p2p_grp_id = Enum.YLeaf(1, "mgmt-lsd-ident-p2p-grp-id")

    mgmt_lsd_ident_p2mp_tun_id = Enum.YLeaf(2, "mgmt-lsd-ident-p2mp-tun-id")

    mgmt_lsd_ident_p2mp_grp_id = Enum.YLeaf(3, "mgmt-lsd-ident-p2mp-grp-id")



class MplsLsdNodes(Entity):
    """
    Location MPLS LSD operational data
    
    .. attribute:: mpls_lsd_node
    
    	The MPLS LSD operational data for a particular node
    	**type**\: list of  		 :py:class:`MplsLsdNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode>`
    
    

    """

    _prefix = 'mpls-lsd-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(MplsLsdNodes, self).__init__()
        self._top_entity = None

        self.yang_name = "mpls-lsd-nodes"
        self.yang_parent_name = "Cisco-IOS-XR-mpls-lsd-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([])
        self._child_list_classes = OrderedDict([("mpls-lsd-node", ("mpls_lsd_node", MplsLsdNodes.MplsLsdNode))])
        self._leafs = OrderedDict()

        self.mpls_lsd_node = YList(self)
        self._segment_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd-nodes"

    def __setattr__(self, name, value):
        self._perform_setattr(MplsLsdNodes, [], name, value)


    class MplsLsdNode(Entity):
        """
        The MPLS LSD operational data for a particular
        node
        
        .. attribute:: node_name  (key)
        
        	The identifier for the node
        	**type**\: str
        
        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
        
        .. attribute:: clients
        
        	Table of MPLS clients using LSD
        	**type**\:  :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Clients>`
        
        .. attribute:: label_summary
        
        	Dynamic label range
        	**type**\:  :py:class:`LabelSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.LabelSummary>`
        
        .. attribute:: labels
        
        	Table of labels
        	**type**\:  :py:class:`Labels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels>`
        
        .. attribute:: frr_database
        
        	FRR database
        	**type**\:  :py:class:`FrrDatabase <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase>`
        
        .. attribute:: rewrite
        
        	Table of rewrites
        	**type**\:  :py:class:`Rewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite>`
        
        .. attribute:: rewrite_summary
        
        	Rewrite Summary 
        	**type**\:  :py:class:`RewriteSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.RewriteSummary>`
        
        .. attribute:: applications
        
        	Table of MPLS applications using LSD
        	**type**\:  :py:class:`Applications <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Applications>`
        
        .. attribute:: label_summary_vrfs
        
        	Dynamic label range summary by VRF
        	**type**\:  :py:class:`LabelSummaryVrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs>`
        
        .. attribute:: label_range
        
        	Label range
        	**type**\:  :py:class:`LabelRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.LabelRange>`
        
        .. attribute:: rewrite_summary_vrfs
        
        	Rewrite Summary by VRF
        	**type**\:  :py:class:`RewriteSummaryVrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs>`
        
        .. attribute:: interfaces
        
        	Table of MPLS interfaces
        	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Interfaces>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsdNodes.MplsLsdNode, self).__init__()

            self.yang_name = "mpls-lsd-node"
            self.yang_parent_name = "mpls-lsd-nodes"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = ['node_name']
            self._child_container_classes = OrderedDict([("clients", ("clients", MplsLsdNodes.MplsLsdNode.Clients)), ("label-summary", ("label_summary", MplsLsdNodes.MplsLsdNode.LabelSummary)), ("labels", ("labels", MplsLsdNodes.MplsLsdNode.Labels)), ("frr-database", ("frr_database", MplsLsdNodes.MplsLsdNode.FrrDatabase)), ("rewrite", ("rewrite", MplsLsdNodes.MplsLsdNode.Rewrite)), ("rewrite-summary", ("rewrite_summary", MplsLsdNodes.MplsLsdNode.RewriteSummary)), ("applications", ("applications", MplsLsdNodes.MplsLsdNode.Applications)), ("label-summary-vrfs", ("label_summary_vrfs", MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs)), ("label-range", ("label_range", MplsLsdNodes.MplsLsdNode.LabelRange)), ("rewrite-summary-vrfs", ("rewrite_summary_vrfs", MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs)), ("interfaces", ("interfaces", MplsLsdNodes.MplsLsdNode.Interfaces))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('node_name', YLeaf(YType.str, 'node-name')),
            ])
            self.node_name = None

            self.clients = MplsLsdNodes.MplsLsdNode.Clients()
            self.clients.parent = self
            self._children_name_map["clients"] = "clients"
            self._children_yang_names.add("clients")

            self.label_summary = MplsLsdNodes.MplsLsdNode.LabelSummary()
            self.label_summary.parent = self
            self._children_name_map["label_summary"] = "label-summary"
            self._children_yang_names.add("label-summary")

            self.labels = MplsLsdNodes.MplsLsdNode.Labels()
            self.labels.parent = self
            self._children_name_map["labels"] = "labels"
            self._children_yang_names.add("labels")

            self.frr_database = MplsLsdNodes.MplsLsdNode.FrrDatabase()
            self.frr_database.parent = self
            self._children_name_map["frr_database"] = "frr-database"
            self._children_yang_names.add("frr-database")

            self.rewrite = MplsLsdNodes.MplsLsdNode.Rewrite()
            self.rewrite.parent = self
            self._children_name_map["rewrite"] = "rewrite"
            self._children_yang_names.add("rewrite")

            self.rewrite_summary = MplsLsdNodes.MplsLsdNode.RewriteSummary()
            self.rewrite_summary.parent = self
            self._children_name_map["rewrite_summary"] = "rewrite-summary"
            self._children_yang_names.add("rewrite-summary")

            self.applications = MplsLsdNodes.MplsLsdNode.Applications()
            self.applications.parent = self
            self._children_name_map["applications"] = "applications"
            self._children_yang_names.add("applications")

            self.label_summary_vrfs = MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs()
            self.label_summary_vrfs.parent = self
            self._children_name_map["label_summary_vrfs"] = "label-summary-vrfs"
            self._children_yang_names.add("label-summary-vrfs")

            self.label_range = MplsLsdNodes.MplsLsdNode.LabelRange()
            self.label_range.parent = self
            self._children_name_map["label_range"] = "label-range"
            self._children_yang_names.add("label-range")

            self.rewrite_summary_vrfs = MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs()
            self.rewrite_summary_vrfs.parent = self
            self._children_name_map["rewrite_summary_vrfs"] = "rewrite-summary-vrfs"
            self._children_yang_names.add("rewrite-summary-vrfs")

            self.interfaces = MplsLsdNodes.MplsLsdNode.Interfaces()
            self.interfaces.parent = self
            self._children_name_map["interfaces"] = "interfaces"
            self._children_yang_names.add("interfaces")
            self._segment_path = lambda: "mpls-lsd-node" + "[node-name='" + str(self.node_name) + "']"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd-nodes/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsdNodes.MplsLsdNode, ['node_name'], name, value)


        class Clients(Entity):
            """
            Table of MPLS clients using LSD
            
            .. attribute:: client
            
            	Data for MPLS client using LSD
            	**type**\: list of  		 :py:class:`Client <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Clients.Client>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.Clients, self).__init__()

                self.yang_name = "clients"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("client", ("client", MplsLsdNodes.MplsLsdNode.Clients.Client))])
                self._leafs = OrderedDict()

                self.client = YList(self)
                self._segment_path = lambda: "clients"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Clients, [], name, value)


            class Client(Entity):
                """
                Data for MPLS client using LSD
                
                .. attribute:: client_name  (key)
                
                	Client Instance name in the form of     'Application\-<client\_name>' or      'BCDL\_Agent\-<index\:parent\_index>'
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: client_union
                
                	Client union
                	**type**\:  :py:class:`ClientUnion <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion>`
                
                .. attribute:: client_index
                
                	Client Index Value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: node_id
                
                	Node ID
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.Clients.Client, self).__init__()

                    self.yang_name = "client"
                    self.yang_parent_name = "clients"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['client_name']
                    self._child_container_classes = OrderedDict([("client-union", ("client_union", MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('client_name', YLeaf(YType.str, 'client-name')),
                        ('client_index', YLeaf(YType.uint32, 'client-index')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                    ])
                    self.client_name = None
                    self.client_index = None
                    self.node_id = None

                    self.client_union = MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion()
                    self.client_union.parent = self
                    self._children_name_map["client_union"] = "client-union"
                    self._children_yang_names.add("client-union")
                    self._segment_path = lambda: "client" + "[client-name='" + str(self.client_name) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Clients.Client, ['client_name', 'client_index', 'node_id'], name, value)


                class ClientUnion(Entity):
                    """
                    Client union
                    
                    .. attribute:: application
                    
                    	Application client
                    	**type**\:  :py:class:`Application <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.Application>`
                    
                    .. attribute:: bcdl_agent
                    
                    	BCDL agent client
                    	**type**\:  :py:class:`BcdlAgent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.BcdlAgent>`
                    
                    .. attribute:: lsd_client_type
                    
                    	LSDClientType
                    	**type**\:  :py:class:`MgmtLsdClient <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdClient>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion, self).__init__()

                        self.yang_name = "client-union"
                        self.yang_parent_name = "client"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("application", ("application", MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.Application)), ("bcdl-agent", ("bcdl_agent", MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.BcdlAgent))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('lsd_client_type', YLeaf(YType.enumeration, 'lsd-client-type')),
                        ])
                        self.lsd_client_type = None

                        self.application = MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.Application()
                        self.application.parent = self
                        self._children_name_map["application"] = "application"
                        self._children_yang_names.add("application")

                        self.bcdl_agent = MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.BcdlAgent()
                        self.bcdl_agent.parent = self
                        self._children_name_map["bcdl_agent"] = "bcdl-agent"
                        self._children_yang_names.add("bcdl-agent")
                        self._segment_path = lambda: "client-union"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion, ['lsd_client_type'], name, value)


                    class Application(Entity):
                        """
                        Application client
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_instance
                        
                        	client\-app instance
                        	**type**\: str
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.Application, self).__init__()

                            self.yang_name = "application"
                            self.yang_parent_name = "client-union"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_instance = None
                            self.application_role_primary = None
                            self._segment_path = lambda: "application"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.Application, ['application_name', 'application_type', 'application_instance', 'application_role_primary'], name, value)


                    class BcdlAgent(Entity):
                        """
                        BCDL agent client
                        
                        .. attribute:: client_conn_index
                        
                        	BCDL Agent client connection index
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: parent_client_conn_index
                        
                        	BCDL Agent parent client connection index
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.BcdlAgent, self).__init__()

                            self.yang_name = "bcdl-agent"
                            self.yang_parent_name = "client-union"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('client_conn_index', YLeaf(YType.int32, 'client-conn-index')),
                                ('parent_client_conn_index', YLeaf(YType.int32, 'parent-client-conn-index')),
                            ])
                            self.client_conn_index = None
                            self.parent_client_conn_index = None
                            self._segment_path = lambda: "bcdl-agent"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Clients.Client.ClientUnion.BcdlAgent, ['client_conn_index', 'parent_client_conn_index'], name, value)


        class LabelSummary(Entity):
            """
            Dynamic label range
            
            .. attribute:: vrf_name_xr
            
            	VRF Name
            	**type**\: str
            
            .. attribute:: total_labels
            
            	Total labels
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: rsi_connected
            
            	Rsi connected
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: owner_count
            
            	Owner counts
            	**type**\: list of  		 :py:class:`OwnerCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.LabelSummary.OwnerCount>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.LabelSummary, self).__init__()

                self.yang_name = "label-summary"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("owner-count", ("owner_count", MplsLsdNodes.MplsLsdNode.LabelSummary.OwnerCount))])
                self._leafs = OrderedDict([
                    ('vrf_name_xr', YLeaf(YType.str, 'vrf-name-xr')),
                    ('total_labels', YLeaf(YType.uint32, 'total-labels')),
                    ('rsi_connected', YLeaf(YType.int32, 'rsi-connected')),
                ])
                self.vrf_name_xr = None
                self.total_labels = None
                self.rsi_connected = None

                self.owner_count = YList(self)
                self._segment_path = lambda: "label-summary"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.LabelSummary, ['vrf_name_xr', 'total_labels', 'rsi_connected'], name, value)


            class OwnerCount(Entity):
                """
                Owner counts
                
                .. attribute:: application_type
                
                	Application type
                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                
                .. attribute:: application_name
                
                	Application name
                	**type**\: str
                
                .. attribute:: application_role_primary
                
                	Primary/Backup role
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: application_instance
                
                	client\-app identifier
                	**type**\: str
                
                .. attribute:: number_of_labels
                
                	Number of labels
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.LabelSummary.OwnerCount, self).__init__()

                    self.yang_name = "owner-count"
                    self.yang_parent_name = "label-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('application_type', YLeaf(YType.enumeration, 'application-type')),
                        ('application_name', YLeaf(YType.str, 'application-name')),
                        ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                        ('application_instance', YLeaf(YType.str, 'application-instance')),
                        ('number_of_labels', YLeaf(YType.uint32, 'number-of-labels')),
                    ])
                    self.application_type = None
                    self.application_name = None
                    self.application_role_primary = None
                    self.application_instance = None
                    self.number_of_labels = None
                    self._segment_path = lambda: "owner-count"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.LabelSummary.OwnerCount, ['application_type', 'application_name', 'application_role_primary', 'application_instance', 'number_of_labels'], name, value)


        class Labels(Entity):
            """
            Table of labels
            
            .. attribute:: label
            
            	Data for label
            	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.Labels, self).__init__()

                self.yang_name = "labels"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("label", ("label", MplsLsdNodes.MplsLsdNode.Labels.Label))])
                self._leafs = OrderedDict()

                self.label = YList(self)
                self._segment_path = lambda: "labels"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels, [], name, value)


            class Label(Entity):
                """
                Data for label
                
                .. attribute:: label_id  (key)
                
                	Label value
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: label_context
                
                	Label context
                	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext>`
                
                .. attribute:: label
                
                	Label value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: rewrite_is_bound
                
                	Rewrite bound to label
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: rewrite_owners
                
                	Rewrite owner
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: rs_iconnected
                
                	RSI connected
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: vrf_name
                
                	VRF Name
                	**type**\: str
                
                .. attribute:: application_owner
                
                	Application owner
                	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.ApplicationOwner>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.Labels.Label, self).__init__()

                    self.yang_name = "label"
                    self.yang_parent_name = "labels"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['label_id']
                    self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext))])
                    self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Labels.Label.ApplicationOwner))])
                    self._leafs = OrderedDict([
                        ('label_id', YLeaf(YType.int32, 'label-id')),
                        ('label', YLeaf(YType.uint32, 'label')),
                        ('rewrite_is_bound', YLeaf(YType.int32, 'rewrite-is-bound')),
                        ('rewrite_owners', YLeaf(YType.uint32, 'rewrite-owners')),
                        ('rs_iconnected', YLeaf(YType.int32, 'rs-iconnected')),
                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ])
                    self.label_id = None
                    self.label = None
                    self.rewrite_is_bound = None
                    self.rewrite_owners = None
                    self.rs_iconnected = None
                    self.vrf_name = None

                    self.label_context = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext()
                    self.label_context.parent = self
                    self._children_name_map["label_context"] = "label-context"
                    self._children_yang_names.add("label-context")

                    self.application_owner = YList(self)
                    self._segment_path = lambda: "label" + "[label-id='" + str(self.label_id) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label, ['label_id', 'label', 'rewrite_is_bound', 'rewrite_owners', 'rs_iconnected', 'vrf_name'], name, value)


                class LabelContext(Entity):
                    """
                    Label context
                    
                    .. attribute:: key
                    
                    	Label Key
                    	**type**\:  :py:class:`Key <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key>`
                    
                    .. attribute:: application_data
                    
                    	Application opaque data
                    	**type**\: str
                    
                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext, self).__init__()

                        self.yang_name = "label-context"
                        self.yang_parent_name = "label"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("key", ("key", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('application_data', YLeaf(YType.str, 'application-data')),
                        ])
                        self.application_data = None

                        self.key = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key()
                        self.key.parent = self
                        self._children_name_map["key"] = "key"
                        self._children_yang_names.add("key")
                        self._segment_path = lambda: "label-context"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext, ['application_data'], name, value)


                    class Key(Entity):
                        """
                        Label Key
                        
                        .. attribute:: ipv4_data
                        
                        	IPv4 label context
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	IPv6 label context
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6Data>`
                        
                        .. attribute:: tev4_data
                        
                        	TEv4 label context
                        	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4Data>`
                        
                        .. attribute:: ipv4l3vpn_data
                        
                        	L3VPN IPv4 label context
                        	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4L3VpnData>`
                        
                        .. attribute:: ipv6l3vpn_data
                        
                        	L3VPN IPv6 label context
                        	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6L3VpnData>`
                        
                        .. attribute:: vrf_l3vpn_data
                        
                        	L3VPN VRF label context
                        	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.VrfL3VpnData>`
                        
                        .. attribute:: cev4l3vpn_data
                        
                        	L3VPN CEv4 label context
                        	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev4L3VpnData>`
                        
                        .. attribute:: cev6l3vpn_data
                        
                        	L3VPN CEv6 label context
                        	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev6L3VpnData>`
                        
                        .. attribute:: pseudowire_data
                        
                        	Pseudowire label context
                        	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireData>`
                        
                        .. attribute:: label_block_data
                        
                        	Label block context
                        	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockData>`
                        
                        .. attribute:: ip_sub_data
                        
                        	IP Subscriber context
                        	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.IpSubData>`
                        
                        .. attribute:: tev4p2mp_data
                        
                        	TEv4 P2MP context
                        	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4P2MpData>`
                        
                        .. attribute:: mld_pv4_data
                        
                        	MLDPv4 LSM\-ID context
                        	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.MldPv4Data>`
                        
                        .. attribute:: pseudowire_head_end_data
                        
                        	Pseudowire Head\-end label context
                        	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireHeadEndData>`
                        
                        .. attribute:: tp_data
                        
                        	TP context
                        	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TpData>`
                        
                        .. attribute:: generic_routing_encapsulation
                        
                        	Generic routing encapsulation context
                        	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation>`
                        
                        .. attribute:: ipv6_generic_routing_encapsulation
                        
                        	Generic routing encapsulation context
                        	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation>`
                        
                        .. attribute:: evpn_data
                        
                        	EVPN context
                        	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.EvpnData>`
                        
                        .. attribute:: ipv4blb_data
                        
                        	BFD BLB label context
                        	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4BlbData>`
                        
                        .. attribute:: ipv6blb_data
                        
                        	BFD BLB label context
                        	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6BlbData>`
                        
                        .. attribute:: pi_mi_pmsi_data
                        
                        	PIM I\-PMSI label conext
                        	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMiPmsiData>`
                        
                        .. attribute:: pi_ms_pmsi_data
                        
                        	PIM S\-PMSI label conext
                        	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMsPmsiData>`
                        
                        .. attribute:: next_hop_set_l3vpn
                        
                        	L3VPN NH SET label context
                        	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.NextHopSetL3Vpn>`
                        
                        .. attribute:: sr_prefix_segment
                        
                        	SR Prefix Segment context
                        	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrPrefixSegment>`
                        
                        .. attribute:: sr_adj_segment_ipv4
                        
                        	SR Adj Segment ipv4 context
                        	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4>`
                        
                        .. attribute:: sr_adj_segment_ipv6
                        
                        	SR Adj Segment ipv6 context
                        	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6>`
                        
                        .. attribute:: label_block_srgb_data
                        
                        	Label block SRGB context
                        	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrgbData>`
                        
                        .. attribute:: te_binding
                        
                        	MPLS TE tunnel binding context
                        	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TeBinding>`
                        
                        .. attribute:: label_block_srlb_data
                        
                        	Label block SRLB context
                        	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrlbData>`
                        
                        .. attribute:: label_context_type
                        
                        	LabelContextType
                        	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key, self).__init__()

                            self.yang_name = "key"
                            self.yang_parent_name = "label-context"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrlbData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                            ])
                            self.label_context_type = None

                            self.ipv4_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.tev4_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4Data()
                            self.tev4_data.parent = self
                            self._children_name_map["tev4_data"] = "tev4-data"
                            self._children_yang_names.add("tev4-data")

                            self.ipv4l3vpn_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4L3VpnData()
                            self.ipv4l3vpn_data.parent = self
                            self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                            self._children_yang_names.add("ipv4l3vpn-data")

                            self.ipv6l3vpn_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6L3VpnData()
                            self.ipv6l3vpn_data.parent = self
                            self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                            self._children_yang_names.add("ipv6l3vpn-data")

                            self.vrf_l3vpn_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.VrfL3VpnData()
                            self.vrf_l3vpn_data.parent = self
                            self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                            self._children_yang_names.add("vrf-l3vpn-data")

                            self.cev4l3vpn_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev4L3VpnData()
                            self.cev4l3vpn_data.parent = self
                            self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                            self._children_yang_names.add("cev4l3vpn-data")

                            self.cev6l3vpn_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev6L3VpnData()
                            self.cev6l3vpn_data.parent = self
                            self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                            self._children_yang_names.add("cev6l3vpn-data")

                            self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireData()
                            self.pseudowire_data.parent = self
                            self._children_name_map["pseudowire_data"] = "pseudowire-data"
                            self._children_yang_names.add("pseudowire-data")

                            self.label_block_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockData()
                            self.label_block_data.parent = self
                            self._children_name_map["label_block_data"] = "label-block-data"
                            self._children_yang_names.add("label-block-data")

                            self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.IpSubData()
                            self.ip_sub_data.parent = self
                            self._children_name_map["ip_sub_data"] = "ip-sub-data"
                            self._children_yang_names.add("ip-sub-data")

                            self.tev4p2mp_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4P2MpData()
                            self.tev4p2mp_data.parent = self
                            self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                            self._children_yang_names.add("tev4p2mp-data")

                            self.mld_pv4_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.MldPv4Data()
                            self.mld_pv4_data.parent = self
                            self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                            self._children_yang_names.add("mld-pv4-data")

                            self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireHeadEndData()
                            self.pseudowire_head_end_data.parent = self
                            self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                            self._children_yang_names.add("pseudowire-head-end-data")

                            self.tp_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TpData()
                            self.tp_data.parent = self
                            self._children_name_map["tp_data"] = "tp-data"
                            self._children_yang_names.add("tp-data")

                            self.generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation()
                            self.generic_routing_encapsulation.parent = self
                            self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                            self._children_yang_names.add("generic-routing-encapsulation")

                            self.ipv6_generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation()
                            self.ipv6_generic_routing_encapsulation.parent = self
                            self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                            self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                            self.evpn_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.EvpnData()
                            self.evpn_data.parent = self
                            self._children_name_map["evpn_data"] = "evpn-data"
                            self._children_yang_names.add("evpn-data")

                            self.ipv4blb_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4BlbData()
                            self.ipv4blb_data.parent = self
                            self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                            self._children_yang_names.add("ipv4blb-data")

                            self.ipv6blb_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6BlbData()
                            self.ipv6blb_data.parent = self
                            self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                            self._children_yang_names.add("ipv6blb-data")

                            self.pi_mi_pmsi_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMiPmsiData()
                            self.pi_mi_pmsi_data.parent = self
                            self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                            self._children_yang_names.add("pi-mi-pmsi-data")

                            self.pi_ms_pmsi_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMsPmsiData()
                            self.pi_ms_pmsi_data.parent = self
                            self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                            self._children_yang_names.add("pi-ms-pmsi-data")

                            self.next_hop_set_l3vpn = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.NextHopSetL3Vpn()
                            self.next_hop_set_l3vpn.parent = self
                            self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                            self._children_yang_names.add("next-hop-set-l3vpn")

                            self.sr_prefix_segment = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrPrefixSegment()
                            self.sr_prefix_segment.parent = self
                            self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                            self._children_yang_names.add("sr-prefix-segment")

                            self.sr_adj_segment_ipv4 = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4()
                            self.sr_adj_segment_ipv4.parent = self
                            self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                            self._children_yang_names.add("sr-adj-segment-ipv4")

                            self.sr_adj_segment_ipv6 = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6()
                            self.sr_adj_segment_ipv6.parent = self
                            self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                            self._children_yang_names.add("sr-adj-segment-ipv6")

                            self.label_block_srgb_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrgbData()
                            self.label_block_srgb_data.parent = self
                            self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                            self._children_yang_names.add("label-block-srgb-data")

                            self.te_binding = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TeBinding()
                            self.te_binding.parent = self
                            self._children_name_map["te_binding"] = "te-binding"
                            self._children_yang_names.add("te-binding")

                            self.label_block_srlb_data = MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrlbData()
                            self.label_block_srlb_data.parent = self
                            self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                            self._children_yang_names.add("label-block-srlb-data")
                            self._segment_path = lambda: "key"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key, ['label_context_type'], name, value)


                        class Ipv4Data(Entity):
                            """
                            IPv4 label context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	IPv4 prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	IPv4 prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: vrf_name
                            
                            	VRF Name
                            	**type**\: str
                            
                            	**length:** 0..33
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.security_id = None
                                self.vrf_name = None
                                self._segment_path = lambda: "ipv4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                        class Ipv6Data(Entity):
                            """
                            IPv6 label context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: vrf_name
                            
                            	VRF Name
                            	**type**\: str
                            
                            	**length:** 0..33
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.security_id = None
                                self.vrf_name = None
                                self._segment_path = lambda: "ipv6-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                        class Tev4Data(Entity):
                            """
                            TEv4 label context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_source
                            
                            	Tunnel source
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_dest
                            
                            	Tunnel destination
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id_extension
                            
                            	Extended tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_lsp_id
                            
                            	Tunnel LSP ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: is_srte
                            
                            	Is this an SRTE head tunnel
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4Data, self).__init__()

                                self.yang_name = "tev4-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                    ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                    ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                    ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                    ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                    ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                ])
                                self.table_id = None
                                self.tunnel_source = None
                                self.tunnel_dest = None
                                self.tunnel_id = None
                                self.tunnel_id_extension = None
                                self.tunnel_lsp_id = None
                                self.is_srte = None
                                self._segment_path = lambda: "tev4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                        class Ipv4L3VpnData(Entity):
                            """
                            L3VPN IPv4 label context
                            
                            .. attribute:: prefix
                            
                            	IPv4 prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: route_distinguisher
                            
                            	Route distinguisher
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4L3VpnData, self).__init__()

                                self.yang_name = "ipv4l3vpn-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                ])
                                self.prefix = None
                                self.prefix_length = None
                                self.route_distinguisher = None
                                self._segment_path = lambda: "ipv4l3vpn-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                        class Ipv6L3VpnData(Entity):
                            """
                            L3VPN IPv6 label context
                            
                            .. attribute:: prefix
                            
                            	IPv6 prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: route_distinguisher
                            
                            	Route distinguisher
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6L3VpnData, self).__init__()

                                self.yang_name = "ipv6l3vpn-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                ])
                                self.prefix = None
                                self.prefix_length = None
                                self.route_distinguisher = None
                                self._segment_path = lambda: "ipv6l3vpn-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                        class VrfL3VpnData(Entity):
                            """
                            L3VPN VRF label context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.VrfL3VpnData, self).__init__()

                                self.yang_name = "vrf-l3vpn-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                ])
                                self.table_id = None
                                self.security_id = None
                                self._segment_path = lambda: "vrf-l3vpn-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                        class Cev4L3VpnData(Entity):
                            """
                            L3VPN CEv4 label context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv4_next_hop
                            
                            	IPv4 nexthop
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev4L3VpnData, self).__init__()

                                self.yang_name = "cev4l3vpn-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                ])
                                self.table_id = None
                                self.ipv4_next_hop = None
                                self.security_id = None
                                self._segment_path = lambda: "cev4l3vpn-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                        class Cev6L3VpnData(Entity):
                            """
                            L3VPN CEv6 label context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ipv6_next_hop
                            
                            	IPv6 nexthop
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev6L3VpnData, self).__init__()

                                self.yang_name = "cev6l3vpn-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                ])
                                self.table_id = None
                                self.ipv6_next_hop = None
                                self.security_id = None
                                self._segment_path = lambda: "cev6l3vpn-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                        class PseudowireData(Entity):
                            """
                            Pseudowire label context
                            
                            .. attribute:: prefix
                            
                            	Address prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: pseudowire_id
                            
                            	Pseudo\-wire ID
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: remote_l2_router_id
                            
                            	Remote L2 Router ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: subinterface
                            
                            	Subinterface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireData, self).__init__()

                                self.yang_name = "pseudowire-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                    ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                    ('subinterface', YLeaf(YType.str, 'subinterface')),
                                ])
                                self.prefix = None
                                self.pseudowire_id = None
                                self.remote_l2_router_id = None
                                self.subinterface = None
                                self._segment_path = lambda: "pseudowire-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                        class LabelBlockData(Entity):
                            """
                            Label block context
                            
                            .. attribute:: service
                            
                            	Service
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: vpn_id
                            
                            	VPN ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: edge_id
                            
                            	Edge ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: offset
                            
                            	Offset
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: size
                            
                            	Number of labels
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockData, self).__init__()

                                self.yang_name = "label-block-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('service', YLeaf(YType.uint8, 'service')),
                                    ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                    ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                    ('offset', YLeaf(YType.uint32, 'offset')),
                                    ('size', YLeaf(YType.uint32, 'size')),
                                ])
                                self.service = None
                                self.vpn_id = None
                                self.edge_id = None
                                self.offset = None
                                self.size = None
                                self._segment_path = lambda: "label-block-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                        class IpSubData(Entity):
                            """
                            IP Subscriber context
                            
                            .. attribute:: table_id
                            
                            	Table Id
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: parent_interface
                            
                            	Parent interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.IpSubData, self).__init__()

                                self.yang_name = "ip-sub-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                ])
                                self.table_id = None
                                self.parent_interface = None
                                self._segment_path = lambda: "ip-sub-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.IpSubData, ['table_id', 'parent_interface'], name, value)


                        class Tev4P2MpData(Entity):
                            """
                            TEv4 P2MP context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_source
                            
                            	Tunnel source
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: p2mp_id
                            
                            	Point to multipoint ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id
                            
                            	Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id_extension
                            
                            	Tunnel ID extension
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_lsp_id
                            
                            	Tunnel LSP ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: previous_hop
                            
                            	Previous hop
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4P2MpData, self).__init__()

                                self.yang_name = "tev4p2mp-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                    ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                    ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                    ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                    ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                    ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                ])
                                self.table_id = None
                                self.tunnel_source = None
                                self.p2mp_id = None
                                self.tunnel_id = None
                                self.tunnel_id_extension = None
                                self.tunnel_lsp_id = None
                                self.previous_hop = None
                                self._segment_path = lambda: "tev4p2mp-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                        class MldPv4Data(Entity):
                            """
                            MLDPv4 LSM\-ID context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: type
                            
                            	LSM ID Type
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: lsm_id
                            
                            	LSM ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: peer_lsrid
                            
                            	Peer LSR Id
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: peer_label_space_id
                            
                            	Peer Label Space Id
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.MldPv4Data, self).__init__()

                                self.yang_name = "mld-pv4-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                    ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                    ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                ])
                                self.table_id = None
                                self.type = None
                                self.lsm_id = None
                                self.peer_lsrid = None
                                self.peer_label_space_id = None
                                self._segment_path = lambda: "mld-pv4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                        class PseudowireHeadEndData(Entity):
                            """
                            Pseudowire Head\-end label context
                            
                            .. attribute:: pwhe_intf
                            
                            	Pseudo\-wire Head\-end interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireHeadEndData, self).__init__()

                                self.yang_name = "pseudowire-head-end-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                ])
                                self.pwhe_intf = None
                                self._segment_path = lambda: "pseudowire-head-end-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                        class TpData(Entity):
                            """
                            TP context
                            
                            .. attribute:: source_global_id
                            
                            	TP source global ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: source_node_id
                            
                            	TP source node ID
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: dest_global_id
                            
                            	TP destination global ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dest_node_id
                            
                            	TP destination node ID
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: source_tunnel_id
                            
                            	TP source tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: dest_tunnel_id
                            
                            	TP destination tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: lsp_id
                            
                            	TP LSP ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TpData, self).__init__()

                                self.yang_name = "tp-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                    ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                    ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                    ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                    ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                    ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                    ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                ])
                                self.source_global_id = None
                                self.source_node_id = None
                                self.dest_global_id = None
                                self.dest_node_id = None
                                self.source_tunnel_id = None
                                self.dest_tunnel_id = None
                                self.lsp_id = None
                                self._segment_path = lambda: "tp-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                        class GenericRoutingEncapsulation(Entity):
                            """
                            Generic routing encapsulation context
                            
                            .. attribute:: gre_interface
                            
                            	Generic routing encapsulation interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation, self).__init__()

                                self.yang_name = "generic-routing-encapsulation"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                ])
                                self.gre_interface = None
                                self._segment_path = lambda: "generic-routing-encapsulation"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                        class Ipv6GenericRoutingEncapsulation(Entity):
                            """
                            Generic routing encapsulation context
                            
                            .. attribute:: greipv6_interface
                            
                            	Generic routing encapsulation IPv6 interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation, self).__init__()

                                self.yang_name = "ipv6-generic-routing-encapsulation"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                ])
                                self.greipv6_interface = None
                                self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                        class EvpnData(Entity):
                            """
                            EVPN context
                            
                            .. attribute:: evpn_id
                            
                            	EVPN ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: evpn_tag
                            
                            	EVPN TAG
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ethernet_segment
                            
                            	Ethernet Segment ID
                            	**type**\: str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.EvpnData, self).__init__()

                                self.yang_name = "evpn-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                    ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                    ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                ])
                                self.evpn_id = None
                                self.evpn_tag = None
                                self.ethernet_segment = None
                                self._segment_path = lambda: "evpn-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                        class Ipv4BlbData(Entity):
                            """
                            BFD BLB label context
                            
                            .. attribute:: blb_intf
                            
                            	BFD BLB interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: prefix
                            
                            	IPv4 prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4BlbData, self).__init__()

                                self.yang_name = "ipv4blb-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                ])
                                self.blb_intf = None
                                self.prefix = None
                                self._segment_path = lambda: "ipv4blb-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                        class Ipv6BlbData(Entity):
                            """
                            BFD BLB label context
                            
                            .. attribute:: blb_intf
                            
                            	BFD BLB interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: prefix
                            
                            	IPv6 prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6BlbData, self).__init__()

                                self.yang_name = "ipv6blb-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                ])
                                self.blb_intf = None
                                self.prefix = None
                                self._segment_path = lambda: "ipv6blb-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                        class PiMiPmsiData(Entity):
                            """
                            PIM I\-PMSI label conext
                            
                            .. attribute:: vrf_id
                            
                            	VRF ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: head
                            
                            	Head
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: v6
                            
                            	PIM6
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMiPmsiData, self).__init__()

                                self.yang_name = "pi-mi-pmsi-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                    ('head', YLeaf(YType.int32, 'head')),
                                    ('v6', YLeaf(YType.int32, 'v6')),
                                ])
                                self.vrf_id = None
                                self.head = None
                                self.v6 = None
                                self._segment_path = lambda: "pi-mi-pmsi-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                        class PiMsPmsiData(Entity):
                            """
                            PIM S\-PMSI label conext
                            
                            .. attribute:: vrf_id
                            
                            	VRF ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: source
                            
                            	Originating Router
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: head
                            
                            	Head
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: v6
                            
                            	PIM6
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: hli
                            
                            	Head LSM\-ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: seg
                            
                            	Segmented Multicast
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMsPmsiData, self).__init__()

                                self.yang_name = "pi-ms-pmsi-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                    ('head', YLeaf(YType.int32, 'head')),
                                    ('v6', YLeaf(YType.int32, 'v6')),
                                    ('hli', YLeaf(YType.uint32, 'hli')),
                                    ('seg', YLeaf(YType.int32, 'seg')),
                                ])
                                self.vrf_id = None
                                self.source = None
                                self.head = None
                                self.v6 = None
                                self.hli = None
                                self.seg = None
                                self._segment_path = lambda: "pi-ms-pmsi-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                        class NextHopSetL3Vpn(Entity):
                            """
                            L3VPN NH SET label context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: next_hop_set_id
                            
                            	Next Hop Set ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.NextHopSetL3Vpn, self).__init__()

                                self.yang_name = "next-hop-set-l3vpn"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                ])
                                self.table_id = None
                                self.next_hop_set_id = None
                                self._segment_path = lambda: "next-hop-set-l3vpn"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                        class SrPrefixSegment(Entity):
                            """
                            SR Prefix Segment context
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: segment_id
                            
                            	Prefix Segment ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrPrefixSegment, self).__init__()

                                self.yang_name = "sr-prefix-segment"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                ])
                                self.table_id = None
                                self.segment_id = None
                                self._segment_path = lambda: "sr-prefix-segment"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                        class SrAdjSegmentIpv4(Entity):
                            """
                            SR Adj Segment ipv4 context
                            
                            .. attribute:: index
                            
                            	Adjacency index
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: type
                            
                            	Adjacency type
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: intf
                            
                            	Adjacency interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: addr
                            
                            	Adjacency nexthop IPv4 address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4, self).__init__()

                                self.yang_name = "sr-adj-segment-ipv4"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('index', YLeaf(YType.uint32, 'index')),
                                    ('type', YLeaf(YType.uint32, 'type')),
                                    ('intf', YLeaf(YType.str, 'intf')),
                                    ('addr', YLeaf(YType.str, 'addr')),
                                ])
                                self.index = None
                                self.type = None
                                self.intf = None
                                self.addr = None
                                self._segment_path = lambda: "sr-adj-segment-ipv4"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                        class SrAdjSegmentIpv6(Entity):
                            """
                            SR Adj Segment ipv6 context
                            
                            .. attribute:: index
                            
                            	Adjacency index
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: type
                            
                            	Adjacency type
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: intf
                            
                            	Adjacency interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: addr
                            
                            	Adjacency nexthop IPv6 address
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6, self).__init__()

                                self.yang_name = "sr-adj-segment-ipv6"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('index', YLeaf(YType.uint32, 'index')),
                                    ('type', YLeaf(YType.uint32, 'type')),
                                    ('intf', YLeaf(YType.str, 'intf')),
                                    ('addr', YLeaf(YType.str, 'addr')),
                                ])
                                self.index = None
                                self.type = None
                                self.intf = None
                                self.addr = None
                                self._segment_path = lambda: "sr-adj-segment-ipv6"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                        class LabelBlockSrgbData(Entity):
                            """
                            Label block SRGB context
                            
                            .. attribute:: start_label
                            
                            	Start Label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: offset
                            
                            	Offset
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: size
                            
                            	Number of labels
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrgbData, self).__init__()

                                self.yang_name = "label-block-srgb-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('start_label', YLeaf(YType.uint32, 'start-label')),
                                    ('offset', YLeaf(YType.uint32, 'offset')),
                                    ('size', YLeaf(YType.uint32, 'size')),
                                ])
                                self.start_label = None
                                self.offset = None
                                self.size = None
                                self._segment_path = lambda: "label-block-srgb-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                        class TeBinding(Entity):
                            """
                            MPLS TE tunnel binding context
                            
                            .. attribute:: te_identifier
                            
                            	MPLS Traffic Engineering Tunnel or Group ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: te_type
                            
                            	Type of identifier for the binding
                            	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TeBinding, self).__init__()

                                self.yang_name = "te-binding"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                    ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                ])
                                self.te_identifier = None
                                self.te_type = None
                                self._segment_path = lambda: "te-binding"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.TeBinding, ['te_identifier', 'te_type'], name, value)


                        class LabelBlockSrlbData(Entity):
                            """
                            Label block SRLB context
                            
                            .. attribute:: start_label
                            
                            	Start Label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: offset
                            
                            	Offset
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: size
                            
                            	Number of labels
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrlbData, self).__init__()

                                self.yang_name = "label-block-srlb-data"
                                self.yang_parent_name = "key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('start_label', YLeaf(YType.uint32, 'start-label')),
                                    ('offset', YLeaf(YType.uint32, 'offset')),
                                    ('size', YLeaf(YType.uint32, 'size')),
                                ])
                                self.start_label = None
                                self.offset = None
                                self.size = None
                                self._segment_path = lambda: "label-block-srlb-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.LabelContext.Key.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                class ApplicationOwner(Entity):
                    """
                    Application owner
                    
                    .. attribute:: application_name
                    
                    	Application name
                    	**type**\: str
                    
                    .. attribute:: application_type
                    
                    	Application type
                    	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                    
                    .. attribute:: application_role_primary
                    
                    	Primary/Backup role
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: application_instance
                    
                    	Application instance Name
                    	**type**\: str
                    
                    .. attribute:: resource_state
                    
                    	Application resource state
                    	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Labels.Label.ApplicationOwner, self).__init__()

                        self.yang_name = "application-owner"
                        self.yang_parent_name = "label"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('application_name', YLeaf(YType.str, 'application-name')),
                            ('application_type', YLeaf(YType.enumeration, 'application-type')),
                            ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                            ('application_instance', YLeaf(YType.str, 'application-instance')),
                            ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                        ])
                        self.application_name = None
                        self.application_type = None
                        self.application_role_primary = None
                        self.application_instance = None
                        self.resource_state = None
                        self._segment_path = lambda: "application-owner"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Labels.Label.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


        class FrrDatabase(Entity):
            """
            FRR database
            
            .. attribute:: tunnel_midpoints
            
            	Table of FRR database entries \- Tunnel midpoints
            	**type**\:  :py:class:`TunnelMidpoints <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints>`
            
            .. attribute:: tunnel_heads
            
            	Table of FRR database entries \- Tunnel heads
            	**type**\:  :py:class:`TunnelHeads <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads>`
            
            .. attribute:: tunnel_head_summary
            
            	Summary data for FRR database entry \- Tunnel head
            	**type**\:  :py:class:`TunnelHeadSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeadSummary>`
            
            .. attribute:: summary_protected_interfaces
            
            	Sumary table of Protected Interfaces
            	**type**\:  :py:class:`SummaryProtectedInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces>`
            
            .. attribute:: tunnel_summary
            
            	Summary data for FRR database entry
            	**type**\:  :py:class:`TunnelSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelSummary>`
            
            .. attribute:: tunnel_midpoint_summary
            
            	Summary data for FRR database entry \- Tunnel midpoint
            	**type**\:  :py:class:`TunnelMidpointSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpointSummary>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.FrrDatabase, self).__init__()

                self.yang_name = "frr-database"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("tunnel-midpoints", ("tunnel_midpoints", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints)), ("tunnel-heads", ("tunnel_heads", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads)), ("tunnel-head-summary", ("tunnel_head_summary", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeadSummary)), ("summary-protected-interfaces", ("summary_protected_interfaces", MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces)), ("tunnel-summary", ("tunnel_summary", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelSummary)), ("tunnel-midpoint-summary", ("tunnel_midpoint_summary", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpointSummary))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.tunnel_midpoints = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints()
                self.tunnel_midpoints.parent = self
                self._children_name_map["tunnel_midpoints"] = "tunnel-midpoints"
                self._children_yang_names.add("tunnel-midpoints")

                self.tunnel_heads = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads()
                self.tunnel_heads.parent = self
                self._children_name_map["tunnel_heads"] = "tunnel-heads"
                self._children_yang_names.add("tunnel-heads")

                self.tunnel_head_summary = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeadSummary()
                self.tunnel_head_summary.parent = self
                self._children_name_map["tunnel_head_summary"] = "tunnel-head-summary"
                self._children_yang_names.add("tunnel-head-summary")

                self.summary_protected_interfaces = MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces()
                self.summary_protected_interfaces.parent = self
                self._children_name_map["summary_protected_interfaces"] = "summary-protected-interfaces"
                self._children_yang_names.add("summary-protected-interfaces")

                self.tunnel_summary = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelSummary()
                self.tunnel_summary.parent = self
                self._children_name_map["tunnel_summary"] = "tunnel-summary"
                self._children_yang_names.add("tunnel-summary")

                self.tunnel_midpoint_summary = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpointSummary()
                self.tunnel_midpoint_summary.parent = self
                self._children_name_map["tunnel_midpoint_summary"] = "tunnel-midpoint-summary"
                self._children_yang_names.add("tunnel-midpoint-summary")
                self._segment_path = lambda: "frr-database"


            class TunnelMidpoints(Entity):
                """
                Table of FRR database entries \- Tunnel
                midpoints
                
                .. attribute:: tunnel_midpoint
                
                	Data for FRR database entry \- Tunnel midpoint
                	**type**\: list of  		 :py:class:`TunnelMidpoint <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints, self).__init__()

                    self.yang_name = "tunnel-midpoints"
                    self.yang_parent_name = "frr-database"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("tunnel-midpoint", ("tunnel_midpoint", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint))])
                    self._leafs = OrderedDict()

                    self.tunnel_midpoint = YList(self)
                    self._segment_path = lambda: "tunnel-midpoints"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints, [], name, value)


                class TunnelMidpoint(Entity):
                    """
                    Data for FRR database entry \- Tunnel midpoint
                    
                    .. attribute:: label  (key)
                    
                    	Label value
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: frr_entry_id
                    
                    	FRR entry ID
                    	**type**\:  :py:class:`FrrEntryId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId>`
                    
                    .. attribute:: tunnel_interface
                    
                    	Tunnel interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: input_label
                    
                    	Input label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: entry_frr_state
                    
                    	MPLS FRR entry state
                    	**type**\:  :py:class:`MgmtLsdFrrState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFrrState>`
                    
                    .. attribute:: out_path
                    
                    	Out Path List
                    	**type**\: list of  		 :py:class:`OutPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.OutPath>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint, self).__init__()

                        self.yang_name = "tunnel-midpoint"
                        self.yang_parent_name = "tunnel-midpoints"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['label']
                        self._child_container_classes = OrderedDict([("frr-entry-id", ("frr_entry_id", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId))])
                        self._child_list_classes = OrderedDict([("out-path", ("out_path", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.OutPath))])
                        self._leafs = OrderedDict([
                            ('label', YLeaf(YType.int32, 'label')),
                            ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                            ('input_label', YLeaf(YType.uint32, 'input-label')),
                            ('entry_frr_state', YLeaf(YType.enumeration, 'entry-frr-state')),
                        ])
                        self.label = None
                        self.tunnel_interface = None
                        self.input_label = None
                        self.entry_frr_state = None

                        self.frr_entry_id = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId()
                        self.frr_entry_id.parent = self
                        self._children_name_map["frr_entry_id"] = "frr-entry-id"
                        self._children_yang_names.add("frr-entry-id")

                        self.out_path = YList(self)
                        self._segment_path = lambda: "tunnel-midpoint" + "[label='" + str(self.label) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint, ['label', 'tunnel_interface', 'input_label', 'entry_frr_state'], name, value)


                    class FrrEntryId(Entity):
                        """
                        FRR entry ID
                        
                        .. attribute:: head
                        
                        	head
                        	**type**\:  :py:class:`Head <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head>`
                        
                        .. attribute:: midpoint
                        
                        	midpoint
                        	**type**\:  :py:class:`Midpoint <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint>`
                        
                        .. attribute:: role
                        
                        	Role
                        	**type**\:  :py:class:`MgmtLsdLspRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLspRole>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId, self).__init__()

                            self.yang_name = "frr-entry-id"
                            self.yang_parent_name = "tunnel-midpoint"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("head", ("head", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head)), ("midpoint", ("midpoint", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('role', YLeaf(YType.enumeration, 'role')),
                            ])
                            self.role = None

                            self.head = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head()
                            self.head.parent = self
                            self._children_name_map["head"] = "head"
                            self._children_yang_names.add("head")

                            self.midpoint = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint()
                            self.midpoint.parent = self
                            self._children_name_map["midpoint"] = "midpoint"
                            self._children_yang_names.add("midpoint")
                            self._segment_path = lambda: "frr-entry-id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId, ['role'], name, value)


                        class Head(Entity):
                            """
                            head
                            
                            .. attribute:: destination_prefix
                            
                            	Destination prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: destination_prefix_length
                            
                            	Destination prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head, self).__init__()

                                self.yang_name = "head"
                                self.yang_parent_name = "frr-entry-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('destination_prefix', YLeaf(YType.str, 'destination-prefix')),
                                    ('destination_prefix_length', YLeaf(YType.uint8, 'destination-prefix-length')),
                                ])
                                self.destination_prefix = None
                                self.destination_prefix_length = None
                                self._segment_path = lambda: "head"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head, ['destination_prefix', 'destination_prefix_length'], name, value)


                        class Midpoint(Entity):
                            """
                            midpoint
                            
                            .. attribute:: source_address
                            
                            	Source IPv4 address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lspid
                            
                            	LSP ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id
                            
                            	Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint, self).__init__()

                                self.yang_name = "midpoint"
                                self.yang_parent_name = "frr-entry-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                    ('lspid', YLeaf(YType.uint32, 'lspid')),
                                    ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                ])
                                self.source_address = None
                                self.lspid = None
                                self.tunnel_id = None
                                self._segment_path = lambda: "midpoint"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint, ['source_address', 'lspid', 'tunnel_id'], name, value)


                    class OutPath(Entity):
                        """
                        Out Path List
                        
                        .. attribute:: out_interface
                        
                        	Outgoing interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: out_label
                        
                        	Outgoing label
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipv4_next_hop
                        
                        	Next hop IPv4 address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: frr_interface
                        
                        	FRR interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: frr_label
                        
                        	FRR output label
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.OutPath, self).__init__()

                            self.yang_name = "out-path"
                            self.yang_parent_name = "tunnel-midpoint"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                ('frr_interface', YLeaf(YType.str, 'frr-interface')),
                                ('frr_label', YLeaf(YType.uint32, 'frr-label')),
                            ])
                            self.out_interface = None
                            self.out_label = None
                            self.ipv4_next_hop = None
                            self.frr_interface = None
                            self.frr_label = None
                            self._segment_path = lambda: "out-path"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpoints.TunnelMidpoint.OutPath, ['out_interface', 'out_label', 'ipv4_next_hop', 'frr_interface', 'frr_label'], name, value)


            class TunnelHeads(Entity):
                """
                Table of FRR database entries \- Tunnel heads
                
                .. attribute:: tunnel_head
                
                	Data for FRR database entry \- Tunnel head
                	**type**\: list of  		 :py:class:`TunnelHead <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads, self).__init__()

                    self.yang_name = "tunnel-heads"
                    self.yang_parent_name = "frr-database"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("tunnel-head", ("tunnel_head", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead))])
                    self._leafs = OrderedDict()

                    self.tunnel_head = YList(self)
                    self._segment_path = lambda: "tunnel-heads"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads, [], name, value)


                class TunnelHead(Entity):
                    """
                    Data for FRR database entry \- Tunnel head
                    
                    .. attribute:: interface_name  (key)
                    
                    	Tunnel interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: frr_entry_id
                    
                    	FRR entry ID
                    	**type**\:  :py:class:`FrrEntryId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId>`
                    
                    .. attribute:: tunnel_interface
                    
                    	Tunnel interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: input_label
                    
                    	Input label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: entry_frr_state
                    
                    	MPLS FRR entry state
                    	**type**\:  :py:class:`MgmtLsdFrrState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFrrState>`
                    
                    .. attribute:: out_path
                    
                    	Out Path List
                    	**type**\: list of  		 :py:class:`OutPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.OutPath>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead, self).__init__()

                        self.yang_name = "tunnel-head"
                        self.yang_parent_name = "tunnel-heads"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['interface_name']
                        self._child_container_classes = OrderedDict([("frr-entry-id", ("frr_entry_id", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId))])
                        self._child_list_classes = OrderedDict([("out-path", ("out_path", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.OutPath))])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                            ('input_label', YLeaf(YType.uint32, 'input-label')),
                            ('entry_frr_state', YLeaf(YType.enumeration, 'entry-frr-state')),
                        ])
                        self.interface_name = None
                        self.tunnel_interface = None
                        self.input_label = None
                        self.entry_frr_state = None

                        self.frr_entry_id = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId()
                        self.frr_entry_id.parent = self
                        self._children_name_map["frr_entry_id"] = "frr-entry-id"
                        self._children_yang_names.add("frr-entry-id")

                        self.out_path = YList(self)
                        self._segment_path = lambda: "tunnel-head" + "[interface-name='" + str(self.interface_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead, ['interface_name', 'tunnel_interface', 'input_label', 'entry_frr_state'], name, value)


                    class FrrEntryId(Entity):
                        """
                        FRR entry ID
                        
                        .. attribute:: head
                        
                        	head
                        	**type**\:  :py:class:`Head <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head>`
                        
                        .. attribute:: midpoint
                        
                        	midpoint
                        	**type**\:  :py:class:`Midpoint <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint>`
                        
                        .. attribute:: role
                        
                        	Role
                        	**type**\:  :py:class:`MgmtLsdLspRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLspRole>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId, self).__init__()

                            self.yang_name = "frr-entry-id"
                            self.yang_parent_name = "tunnel-head"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("head", ("head", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head)), ("midpoint", ("midpoint", MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('role', YLeaf(YType.enumeration, 'role')),
                            ])
                            self.role = None

                            self.head = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head()
                            self.head.parent = self
                            self._children_name_map["head"] = "head"
                            self._children_yang_names.add("head")

                            self.midpoint = MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint()
                            self.midpoint.parent = self
                            self._children_name_map["midpoint"] = "midpoint"
                            self._children_yang_names.add("midpoint")
                            self._segment_path = lambda: "frr-entry-id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId, ['role'], name, value)


                        class Head(Entity):
                            """
                            head
                            
                            .. attribute:: destination_prefix
                            
                            	Destination prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: destination_prefix_length
                            
                            	Destination prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head, self).__init__()

                                self.yang_name = "head"
                                self.yang_parent_name = "frr-entry-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('destination_prefix', YLeaf(YType.str, 'destination-prefix')),
                                    ('destination_prefix_length', YLeaf(YType.uint8, 'destination-prefix-length')),
                                ])
                                self.destination_prefix = None
                                self.destination_prefix_length = None
                                self._segment_path = lambda: "head"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head, ['destination_prefix', 'destination_prefix_length'], name, value)


                        class Midpoint(Entity):
                            """
                            midpoint
                            
                            .. attribute:: source_address
                            
                            	Source IPv4 address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lspid
                            
                            	LSP ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id
                            
                            	Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint, self).__init__()

                                self.yang_name = "midpoint"
                                self.yang_parent_name = "frr-entry-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('source_address', YLeaf(YType.str, 'source-address')),
                                    ('lspid', YLeaf(YType.uint32, 'lspid')),
                                    ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                ])
                                self.source_address = None
                                self.lspid = None
                                self.tunnel_id = None
                                self._segment_path = lambda: "midpoint"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint, ['source_address', 'lspid', 'tunnel_id'], name, value)


                    class OutPath(Entity):
                        """
                        Out Path List
                        
                        .. attribute:: out_interface
                        
                        	Outgoing interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: out_label
                        
                        	Outgoing label
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipv4_next_hop
                        
                        	Next hop IPv4 address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: frr_interface
                        
                        	FRR interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: frr_label
                        
                        	FRR output label
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.OutPath, self).__init__()

                            self.yang_name = "out-path"
                            self.yang_parent_name = "tunnel-head"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                ('frr_interface', YLeaf(YType.str, 'frr-interface')),
                                ('frr_label', YLeaf(YType.uint32, 'frr-label')),
                            ])
                            self.out_interface = None
                            self.out_label = None
                            self.ipv4_next_hop = None
                            self.frr_interface = None
                            self.frr_label = None
                            self._segment_path = lambda: "out-path"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeads.TunnelHead.OutPath, ['out_interface', 'out_label', 'ipv4_next_hop', 'frr_interface', 'frr_label'], name, value)


            class TunnelHeadSummary(Entity):
                """
                Summary data for FRR database entry \- Tunnel
                head
                
                .. attribute:: active
                
                	Number of FRR rewrites in Active state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ready
                
                	Number of FRR rewrites in Ready state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: partial
                
                	Number of FRR rewrites in Partial state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: igp
                
                	Number of FRR rewrites in IGP state for SR\-TE
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeadSummary, self).__init__()

                    self.yang_name = "tunnel-head-summary"
                    self.yang_parent_name = "frr-database"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('active', YLeaf(YType.uint32, 'active')),
                        ('ready', YLeaf(YType.uint32, 'ready')),
                        ('partial', YLeaf(YType.uint32, 'partial')),
                        ('igp', YLeaf(YType.uint32, 'igp')),
                    ])
                    self.active = None
                    self.ready = None
                    self.partial = None
                    self.igp = None
                    self._segment_path = lambda: "tunnel-head-summary"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelHeadSummary, ['active', 'ready', 'partial', 'igp'], name, value)


            class SummaryProtectedInterfaces(Entity):
                """
                Sumary table of Protected Interfaces
                
                .. attribute:: summary_protected_interface
                
                	Data for MPLS interface
                	**type**\: list of  		 :py:class:`SummaryProtectedInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces.SummaryProtectedInterface>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces, self).__init__()

                    self.yang_name = "summary-protected-interfaces"
                    self.yang_parent_name = "frr-database"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("summary-protected-interface", ("summary_protected_interface", MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces.SummaryProtectedInterface))])
                    self._leafs = OrderedDict()

                    self.summary_protected_interface = YList(self)
                    self._segment_path = lambda: "summary-protected-interfaces"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces, [], name, value)


                class SummaryProtectedInterface(Entity):
                    """
                    Data for MPLS interface
                    
                    .. attribute:: interface_name  (key)
                    
                    	Interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: active
                    
                    	Number of FRR rewrites in Active state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ready
                    
                    	Number of FRR rewrites in Ready state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: partial
                    
                    	Number of FRR rewrites in Partial state
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: igp
                    
                    	Number of FRR rewrites in IGP state for SR\-TE
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces.SummaryProtectedInterface, self).__init__()

                        self.yang_name = "summary-protected-interface"
                        self.yang_parent_name = "summary-protected-interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['interface_name']
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('active', YLeaf(YType.uint32, 'active')),
                            ('ready', YLeaf(YType.uint32, 'ready')),
                            ('partial', YLeaf(YType.uint32, 'partial')),
                            ('igp', YLeaf(YType.uint32, 'igp')),
                        ])
                        self.interface_name = None
                        self.active = None
                        self.ready = None
                        self.partial = None
                        self.igp = None
                        self._segment_path = lambda: "summary-protected-interface" + "[interface-name='" + str(self.interface_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.SummaryProtectedInterfaces.SummaryProtectedInterface, ['interface_name', 'active', 'ready', 'partial', 'igp'], name, value)


            class TunnelSummary(Entity):
                """
                Summary data for FRR database entry
                
                .. attribute:: active
                
                	Number of FRR rewrites in Active state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ready
                
                	Number of FRR rewrites in Ready state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: partial
                
                	Number of FRR rewrites in Partial state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: igp
                
                	Number of FRR rewrites in IGP state for SR\-TE
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelSummary, self).__init__()

                    self.yang_name = "tunnel-summary"
                    self.yang_parent_name = "frr-database"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('active', YLeaf(YType.uint32, 'active')),
                        ('ready', YLeaf(YType.uint32, 'ready')),
                        ('partial', YLeaf(YType.uint32, 'partial')),
                        ('igp', YLeaf(YType.uint32, 'igp')),
                    ])
                    self.active = None
                    self.ready = None
                    self.partial = None
                    self.igp = None
                    self._segment_path = lambda: "tunnel-summary"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelSummary, ['active', 'ready', 'partial', 'igp'], name, value)


            class TunnelMidpointSummary(Entity):
                """
                Summary data for FRR database entry \- Tunnel
                midpoint
                
                .. attribute:: active
                
                	Number of FRR rewrites in Active state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ready
                
                	Number of FRR rewrites in Ready state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: partial
                
                	Number of FRR rewrites in Partial state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: igp
                
                	Number of FRR rewrites in IGP state for SR\-TE
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpointSummary, self).__init__()

                    self.yang_name = "tunnel-midpoint-summary"
                    self.yang_parent_name = "frr-database"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('active', YLeaf(YType.uint32, 'active')),
                        ('ready', YLeaf(YType.uint32, 'ready')),
                        ('partial', YLeaf(YType.uint32, 'partial')),
                        ('igp', YLeaf(YType.uint32, 'igp')),
                    ])
                    self.active = None
                    self.ready = None
                    self.partial = None
                    self.igp = None
                    self._segment_path = lambda: "tunnel-midpoint-summary"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.FrrDatabase.TunnelMidpointSummary, ['active', 'ready', 'partial', 'igp'], name, value)


        class Rewrite(Entity):
            """
            Table of rewrites
            
            .. attribute:: rewrite_pws
            
            	Table of Rewrites
            	**type**\:  :py:class:`RewritePws <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws>`
            
            .. attribute:: rewrite_ipv4s
            
            	Table of Rewrites
            	**type**\:  :py:class:`RewriteIpv4S <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S>`
            
            .. attribute:: rewrite_tes
            
            	Table of Traffic Engineering Rewrites
            	**type**\:  :py:class:`RewriteTes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes>`
            
            .. attribute:: rewrite_labels
            
            	Table of Rewrites
            	**type**\:  :py:class:`RewriteLabels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.Rewrite, self).__init__()

                self.yang_name = "rewrite"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("rewrite-pws", ("rewrite_pws", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws)), ("rewrite-ipv4s", ("rewrite_ipv4s", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S)), ("rewrite-tes", ("rewrite_tes", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes)), ("rewrite-labels", ("rewrite_labels", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.rewrite_pws = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws()
                self.rewrite_pws.parent = self
                self._children_name_map["rewrite_pws"] = "rewrite-pws"
                self._children_yang_names.add("rewrite-pws")

                self.rewrite_ipv4s = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S()
                self.rewrite_ipv4s.parent = self
                self._children_name_map["rewrite_ipv4s"] = "rewrite-ipv4s"
                self._children_yang_names.add("rewrite-ipv4s")

                self.rewrite_tes = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes()
                self.rewrite_tes.parent = self
                self._children_name_map["rewrite_tes"] = "rewrite-tes"
                self._children_yang_names.add("rewrite-tes")

                self.rewrite_labels = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels()
                self.rewrite_labels.parent = self
                self._children_name_map["rewrite_labels"] = "rewrite-labels"
                self._children_yang_names.add("rewrite-labels")
                self._segment_path = lambda: "rewrite"


            class RewritePws(Entity):
                """
                Table of Rewrites
                
                .. attribute:: rewrite_pw
                
                	FPI rewrite for PW List
                	**type**\: list of  		 :py:class:`RewritePw <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws, self).__init__()

                    self.yang_name = "rewrite-pws"
                    self.yang_parent_name = "rewrite"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("rewrite-pw", ("rewrite_pw", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw))])
                    self._leafs = OrderedDict()

                    self.rewrite_pw = YList(self)
                    self._segment_path = lambda: "rewrite-pws"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws, [], name, value)


                class RewritePw(Entity):
                    """
                    FPI rewrite for PW List
                    
                    .. attribute:: pw_list_id  (key)
                    
                    	PW List ID
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: fpi_key
                    
                    	fpi key
                    	**type**\:  :py:class:`FpiKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey>`
                    
                    .. attribute:: rewrite_id
                    
                    	Rewrite ID
                    	**type**\:  :py:class:`RewriteId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId>`
                    
                    .. attribute:: rewrite_version
                    
                    	Rewrite version
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: bcdl_priority
                    
                    	BCDL Priority
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: lsd_queue
                    
                    	LSD queue
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: rw_install_time
                    
                    	Rewrite install timestamp
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rw_install_age
                    
                    	Rewrite install age
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rw_updated
                    
                    	Is rewrite ever updated
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: priority_updated
                    
                    	Is rewrite's BCDL priority updated
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: associated_fpi
                    
                    	Associated FPI
                    	**type**\: list of  		 :py:class:`AssociatedFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi>`
                    
                    .. attribute:: v4_rpf
                    
                    	IPv4 RPF neighbors
                    	**type**\: list of  		 :py:class:`V4Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.V4Rpf>`
                    
                    .. attribute:: v6_rpf
                    
                    	IPv6 RPF neighbors
                    	**type**\: list of  		 :py:class:`V6Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.V6Rpf>`
                    
                    .. attribute:: mois
                    
                    	Mois
                    	**type**\: list of  		 :py:class:`Mois <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw, self).__init__()

                        self.yang_name = "rewrite-pw"
                        self.yang_parent_name = "rewrite-pws"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['pw_list_id']
                        self._child_container_classes = OrderedDict([("fpi-key", ("fpi_key", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey)), ("rewrite-id", ("rewrite_id", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId))])
                        self._child_list_classes = OrderedDict([("associated-fpi", ("associated_fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi)), ("v4-rpf", ("v4_rpf", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.V4Rpf)), ("v6-rpf", ("v6_rpf", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.V6Rpf)), ("mois", ("mois", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois))])
                        self._leafs = OrderedDict([
                            ('pw_list_id', YLeaf(YType.int32, 'pw-list-id')),
                            ('rewrite_version', YLeaf(YType.uint64, 'rewrite-version')),
                            ('bcdl_priority', YLeaf(YType.uint8, 'bcdl-priority')),
                            ('lsd_queue', YLeaf(YType.uint8, 'lsd-queue')),
                            ('rw_install_time', YLeaf(YType.uint64, 'rw-install-time')),
                            ('rw_install_age', YLeaf(YType.uint64, 'rw-install-age')),
                            ('rw_updated', YLeaf(YType.int32, 'rw-updated')),
                            ('priority_updated', YLeaf(YType.int32, 'priority-updated')),
                        ])
                        self.pw_list_id = None
                        self.rewrite_version = None
                        self.bcdl_priority = None
                        self.lsd_queue = None
                        self.rw_install_time = None
                        self.rw_install_age = None
                        self.rw_updated = None
                        self.priority_updated = None

                        self.fpi_key = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey()
                        self.fpi_key.parent = self
                        self._children_name_map["fpi_key"] = "fpi-key"
                        self._children_yang_names.add("fpi-key")

                        self.rewrite_id = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId()
                        self.rewrite_id.parent = self
                        self._children_name_map["rewrite_id"] = "rewrite-id"
                        self._children_yang_names.add("rewrite-id")

                        self.associated_fpi = YList(self)
                        self.v4_rpf = YList(self)
                        self.v6_rpf = YList(self)
                        self.mois = YList(self)
                        self._segment_path = lambda: "rewrite-pw" + "[pw-list-id='" + str(self.pw_list_id) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw, ['pw_list_id', 'rewrite_version', 'bcdl_priority', 'lsd_queue', 'rw_install_time', 'rw_install_age', 'rw_updated', 'priority_updated'], name, value)


                    class FpiKey(Entity):
                        """
                        fpi key
                        
                        .. attribute:: fpi
                        
                        	FPI
                        	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi>`
                        
                        .. attribute:: application_owner
                        
                        	Application owner instance
                        	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.ApplicationOwner>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey, self).__init__()

                            self.yang_name = "fpi-key"
                            self.yang_parent_name = "rewrite-pw"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi))])
                            self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.ApplicationOwner))])
                            self._leafs = OrderedDict()

                            self.fpi = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi()
                            self.fpi.parent = self
                            self._children_name_map["fpi"] = "fpi"
                            self._children_yang_names.add("fpi")

                            self.application_owner = YList(self)
                            self._segment_path = lambda: "fpi-key"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey, [], name, value)


                        class Fpi(Entity):
                            """
                            FPI
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData>`
                            
                            .. attribute:: te_data
                            
                            	te data
                            	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData>`
                            
                            .. attribute:: dmtc_ext_intf_data
                            
                            	dmtc ext intf data
                            	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData>`
                            
                            .. attribute:: fpi_type
                            
                            	FPIType
                            	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi, self).__init__()

                                self.yang_name = "fpi"
                                self.yang_parent_name = "fpi-key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData)), ("te-data", ("te_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                                ])
                                self.fpi_type = None

                                self.label_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData()
                                self.label_data.parent = self
                                self._children_name_map["label_data"] = "label-data"
                                self._children_yang_names.add("label-data")

                                self.te_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData()
                                self.te_data.parent = self
                                self._children_name_map["te_data"] = "te-data"
                                self._children_yang_names.add("te-data")

                                self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.dmtc_ext_intf_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData()
                                self.dmtc_ext_intf_data.parent = self
                                self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                                self._children_yang_names.add("dmtc-ext-intf-data")
                                self._segment_path = lambda: "fpi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi, ['fpi_type'], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: label
                                
                                	Label value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: elc
                                
                                	ELC
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label', YLeaf(YType.uint32, 'label')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('elc', YLeaf(YType.int32, 'elc')),
                                    ])
                                    self.label = None
                                    self.security_id = None
                                    self.elc = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                            class TeData(Entity):
                                """
                                te data
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: local_label
                                
                                	Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData, self).__init__()

                                    self.yang_name = "te-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.tunnel_interface = None
                                    self.local_label = None
                                    self._segment_path = lambda: "te-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sr_local_label
                                
                                	SR related Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                        ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.version = None
                                    self.sr_local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: router_flags
                                
                                	Route flags
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_len
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                        ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.router_flags = None
                                    self.prefix_len = None
                                    self.version = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: pwhe_list_id
                                
                                	Pseudowire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                    ])
                                    self.pwhe_list_id = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData, ['pwhe_list_id'], name, value)


                            class DmtcExtIntfData(Entity):
                                """
                                dmtc ext intf data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData, self).__init__()

                                    self.yang_name = "dmtc-ext-intf-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-ext-intf-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                        class ApplicationOwner(Entity):
                            """
                            Application owner instance
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.ApplicationOwner, self).__init__()

                                self.yang_name = "application-owner"
                                self.yang_parent_name = "fpi-key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-owner"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.FpiKey.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class RewriteId(Entity):
                        """
                        Rewrite ID
                        
                        .. attribute:: rewrite_id
                        
                        	Rewrite ID
                        	**type**\:  :py:class:`RewriteId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId, self).__init__()

                            self.yang_name = "rewrite-id"
                            self.yang_parent_name = "rewrite-pw"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("rewrite-id", ("rewrite_id", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.rewrite_id = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_()
                            self.rewrite_id.parent = self
                            self._children_name_map["rewrite_id"] = "rewrite-id"
                            self._children_yang_names.add("rewrite-id")
                            self._segment_path = lambda: "rewrite-id"


                        class RewriteId_(Entity):
                            """
                            Rewrite ID
                            
                            .. attribute:: label_context
                            
                            	Label context
                            	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext>`
                            
                            .. attribute:: local_label_rewrite
                            
                            	Local label rewrite information
                            	**type**\:  :py:class:`LocalLabelRewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite>`
                            
                            .. attribute:: rewrite_id_type
                            
                            	RewriteIDType
                            	**type**\:  :py:class:`MgmtLsdRwId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdRwId>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_, self).__init__()

                                self.yang_name = "rewrite-id"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext)), ("local-label-rewrite", ("local_label_rewrite", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rewrite_id_type', YLeaf(YType.enumeration, 'rewrite-id-type')),
                                ])
                                self.rewrite_id_type = None

                                self.label_context = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext()
                                self.label_context.parent = self
                                self._children_name_map["label_context"] = "label-context"
                                self._children_yang_names.add("label-context")

                                self.local_label_rewrite = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite()
                                self.local_label_rewrite.parent = self
                                self._children_name_map["local_label_rewrite"] = "local-label-rewrite"
                                self._children_yang_names.add("local-label-rewrite")
                                self._segment_path = lambda: "rewrite-id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_, ['rewrite_id_type'], name, value)


                            class LabelContext(Entity):
                                """
                                Label context
                                
                                .. attribute:: ipv4_data
                                
                                	IPv4 label context
                                	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data>`
                                
                                .. attribute:: ipv6_data
                                
                                	IPv6 label context
                                	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data>`
                                
                                .. attribute:: tev4_data
                                
                                	TEv4 label context
                                	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data>`
                                
                                .. attribute:: ipv4l3vpn_data
                                
                                	L3VPN IPv4 label context
                                	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData>`
                                
                                .. attribute:: ipv6l3vpn_data
                                
                                	L3VPN IPv6 label context
                                	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData>`
                                
                                .. attribute:: vrf_l3vpn_data
                                
                                	L3VPN VRF label context
                                	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData>`
                                
                                .. attribute:: cev4l3vpn_data
                                
                                	L3VPN CEv4 label context
                                	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData>`
                                
                                .. attribute:: cev6l3vpn_data
                                
                                	L3VPN CEv6 label context
                                	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData>`
                                
                                .. attribute:: pseudowire_data
                                
                                	Pseudowire label context
                                	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData>`
                                
                                .. attribute:: label_block_data
                                
                                	Label block context
                                	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData>`
                                
                                .. attribute:: ip_sub_data
                                
                                	IP Subscriber context
                                	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData>`
                                
                                .. attribute:: tev4p2mp_data
                                
                                	TEv4 P2MP context
                                	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData>`
                                
                                .. attribute:: mld_pv4_data
                                
                                	MLDPv4 LSM\-ID context
                                	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data>`
                                
                                .. attribute:: pseudowire_head_end_data
                                
                                	Pseudowire Head\-end label context
                                	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData>`
                                
                                .. attribute:: tp_data
                                
                                	TP context
                                	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData>`
                                
                                .. attribute:: generic_routing_encapsulation
                                
                                	Generic routing encapsulation context
                                	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation>`
                                
                                .. attribute:: ipv6_generic_routing_encapsulation
                                
                                	Generic routing encapsulation context
                                	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation>`
                                
                                .. attribute:: evpn_data
                                
                                	EVPN context
                                	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData>`
                                
                                .. attribute:: ipv4blb_data
                                
                                	BFD BLB label context
                                	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData>`
                                
                                .. attribute:: ipv6blb_data
                                
                                	BFD BLB label context
                                	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData>`
                                
                                .. attribute:: pi_mi_pmsi_data
                                
                                	PIM I\-PMSI label conext
                                	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData>`
                                
                                .. attribute:: pi_ms_pmsi_data
                                
                                	PIM S\-PMSI label conext
                                	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData>`
                                
                                .. attribute:: next_hop_set_l3vpn
                                
                                	L3VPN NH SET label context
                                	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn>`
                                
                                .. attribute:: sr_prefix_segment
                                
                                	SR Prefix Segment context
                                	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment>`
                                
                                .. attribute:: sr_adj_segment_ipv4
                                
                                	SR Adj Segment ipv4 context
                                	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4>`
                                
                                .. attribute:: sr_adj_segment_ipv6
                                
                                	SR Adj Segment ipv6 context
                                	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6>`
                                
                                .. attribute:: label_block_srgb_data
                                
                                	Label block SRGB context
                                	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData>`
                                
                                .. attribute:: te_binding
                                
                                	MPLS TE tunnel binding context
                                	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding>`
                                
                                .. attribute:: label_block_srlb_data
                                
                                	Label block SRLB context
                                	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData>`
                                
                                .. attribute:: label_context_type
                                
                                	LabelContextType
                                	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext, self).__init__()

                                    self.yang_name = "label-context"
                                    self.yang_parent_name = "rewrite-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                                    ])
                                    self.label_context_type = None

                                    self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data()
                                    self.ipv4_data.parent = self
                                    self._children_name_map["ipv4_data"] = "ipv4-data"
                                    self._children_yang_names.add("ipv4-data")

                                    self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data()
                                    self.ipv6_data.parent = self
                                    self._children_name_map["ipv6_data"] = "ipv6-data"
                                    self._children_yang_names.add("ipv6-data")

                                    self.tev4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data()
                                    self.tev4_data.parent = self
                                    self._children_name_map["tev4_data"] = "tev4-data"
                                    self._children_yang_names.add("tev4-data")

                                    self.ipv4l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData()
                                    self.ipv4l3vpn_data.parent = self
                                    self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                                    self._children_yang_names.add("ipv4l3vpn-data")

                                    self.ipv6l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData()
                                    self.ipv6l3vpn_data.parent = self
                                    self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                                    self._children_yang_names.add("ipv6l3vpn-data")

                                    self.vrf_l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData()
                                    self.vrf_l3vpn_data.parent = self
                                    self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                                    self._children_yang_names.add("vrf-l3vpn-data")

                                    self.cev4l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData()
                                    self.cev4l3vpn_data.parent = self
                                    self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                                    self._children_yang_names.add("cev4l3vpn-data")

                                    self.cev6l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData()
                                    self.cev6l3vpn_data.parent = self
                                    self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                                    self._children_yang_names.add("cev6l3vpn-data")

                                    self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData()
                                    self.pseudowire_data.parent = self
                                    self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                    self._children_yang_names.add("pseudowire-data")

                                    self.label_block_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData()
                                    self.label_block_data.parent = self
                                    self._children_name_map["label_block_data"] = "label-block-data"
                                    self._children_yang_names.add("label-block-data")

                                    self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData()
                                    self.ip_sub_data.parent = self
                                    self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                    self._children_yang_names.add("ip-sub-data")

                                    self.tev4p2mp_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData()
                                    self.tev4p2mp_data.parent = self
                                    self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                                    self._children_yang_names.add("tev4p2mp-data")

                                    self.mld_pv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data()
                                    self.mld_pv4_data.parent = self
                                    self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                                    self._children_yang_names.add("mld-pv4-data")

                                    self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData()
                                    self.pseudowire_head_end_data.parent = self
                                    self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                    self._children_yang_names.add("pseudowire-head-end-data")

                                    self.tp_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData()
                                    self.tp_data.parent = self
                                    self._children_name_map["tp_data"] = "tp-data"
                                    self._children_yang_names.add("tp-data")

                                    self.generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation()
                                    self.generic_routing_encapsulation.parent = self
                                    self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                                    self._children_yang_names.add("generic-routing-encapsulation")

                                    self.ipv6_generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation()
                                    self.ipv6_generic_routing_encapsulation.parent = self
                                    self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                                    self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                                    self.evpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData()
                                    self.evpn_data.parent = self
                                    self._children_name_map["evpn_data"] = "evpn-data"
                                    self._children_yang_names.add("evpn-data")

                                    self.ipv4blb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData()
                                    self.ipv4blb_data.parent = self
                                    self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                                    self._children_yang_names.add("ipv4blb-data")

                                    self.ipv6blb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData()
                                    self.ipv6blb_data.parent = self
                                    self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                                    self._children_yang_names.add("ipv6blb-data")

                                    self.pi_mi_pmsi_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData()
                                    self.pi_mi_pmsi_data.parent = self
                                    self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                                    self._children_yang_names.add("pi-mi-pmsi-data")

                                    self.pi_ms_pmsi_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData()
                                    self.pi_ms_pmsi_data.parent = self
                                    self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                                    self._children_yang_names.add("pi-ms-pmsi-data")

                                    self.next_hop_set_l3vpn = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn()
                                    self.next_hop_set_l3vpn.parent = self
                                    self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                                    self._children_yang_names.add("next-hop-set-l3vpn")

                                    self.sr_prefix_segment = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment()
                                    self.sr_prefix_segment.parent = self
                                    self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                                    self._children_yang_names.add("sr-prefix-segment")

                                    self.sr_adj_segment_ipv4 = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4()
                                    self.sr_adj_segment_ipv4.parent = self
                                    self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                                    self._children_yang_names.add("sr-adj-segment-ipv4")

                                    self.sr_adj_segment_ipv6 = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6()
                                    self.sr_adj_segment_ipv6.parent = self
                                    self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                                    self._children_yang_names.add("sr-adj-segment-ipv6")

                                    self.label_block_srgb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData()
                                    self.label_block_srgb_data.parent = self
                                    self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                                    self._children_yang_names.add("label-block-srgb-data")

                                    self.te_binding = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding()
                                    self.te_binding.parent = self
                                    self._children_name_map["te_binding"] = "te-binding"
                                    self._children_yang_names.add("te-binding")

                                    self.label_block_srlb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData()
                                    self.label_block_srlb_data.parent = self
                                    self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                                    self._children_yang_names.add("label-block-srlb-data")
                                    self._segment_path = lambda: "label-context"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext, ['label_context_type'], name, value)


                                class Ipv4Data(Entity):
                                    """
                                    IPv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	IPv4 prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data, self).__init__()

                                        self.yang_name = "ipv4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                        ])
                                        self.table_id = None
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.security_id = None
                                        self.vrf_name = None
                                        self._segment_path = lambda: "ipv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                                class Ipv6Data(Entity):
                                    """
                                    IPv6 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix
                                    
                                    	Prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data, self).__init__()

                                        self.yang_name = "ipv6-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                        ])
                                        self.table_id = None
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.security_id = None
                                        self.vrf_name = None
                                        self._segment_path = lambda: "ipv6-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                                class Tev4Data(Entity):
                                    """
                                    TEv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_source
                                    
                                    	Tunnel source
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: tunnel_dest
                                    
                                    	Tunnel destination
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id_extension
                                    
                                    	Extended tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_lsp_id
                                    
                                    	Tunnel LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: is_srte
                                    
                                    	Is this an SRTE head tunnel
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data, self).__init__()

                                        self.yang_name = "tev4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                            ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                            ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                            ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                            ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                            ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                        ])
                                        self.table_id = None
                                        self.tunnel_source = None
                                        self.tunnel_dest = None
                                        self.tunnel_id = None
                                        self.tunnel_id_extension = None
                                        self.tunnel_lsp_id = None
                                        self.is_srte = None
                                        self._segment_path = lambda: "tev4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                                class Ipv4L3VpnData(Entity):
                                    """
                                    L3VPN IPv4 label context
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: route_distinguisher
                                    
                                    	Route distinguisher
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, self).__init__()

                                        self.yang_name = "ipv4l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.route_distinguisher = None
                                        self._segment_path = lambda: "ipv4l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                                class Ipv6L3VpnData(Entity):
                                    """
                                    L3VPN IPv6 label context
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv6 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: route_distinguisher
                                    
                                    	Route distinguisher
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, self).__init__()

                                        self.yang_name = "ipv6l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.route_distinguisher = None
                                        self._segment_path = lambda: "ipv6l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                                class VrfL3VpnData(Entity):
                                    """
                                    L3VPN VRF label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, self).__init__()

                                        self.yang_name = "vrf-l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.security_id = None
                                        self._segment_path = lambda: "vrf-l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                                class Cev4L3VpnData(Entity):
                                    """
                                    L3VPN CEv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, self).__init__()

                                        self.yang_name = "cev4l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.ipv4_next_hop = None
                                        self.security_id = None
                                        self._segment_path = lambda: "cev4l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                                class Cev6L3VpnData(Entity):
                                    """
                                    L3VPN CEv6 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, self).__init__()

                                        self.yang_name = "cev6l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.ipv6_next_hop = None
                                        self.security_id = None
                                        self._segment_path = lambda: "cev6l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                                class PseudowireData(Entity):
                                    """
                                    Pseudowire label context
                                    
                                    .. attribute:: prefix
                                    
                                    	Address prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: pseudowire_id
                                    
                                    	Pseudo\-wire ID
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: remote_l2_router_id
                                    
                                    	Remote L2 Router ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: subinterface
                                    
                                    	Subinterface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData, self).__init__()

                                        self.yang_name = "pseudowire-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                            ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                            ('subinterface', YLeaf(YType.str, 'subinterface')),
                                        ])
                                        self.prefix = None
                                        self.pseudowire_id = None
                                        self.remote_l2_router_id = None
                                        self.subinterface = None
                                        self._segment_path = lambda: "pseudowire-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                                class LabelBlockData(Entity):
                                    """
                                    Label block context
                                    
                                    .. attribute:: service
                                    
                                    	Service
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: vpn_id
                                    
                                    	VPN ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: edge_id
                                    
                                    	Edge ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData, self).__init__()

                                        self.yang_name = "label-block-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('service', YLeaf(YType.uint8, 'service')),
                                            ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                            ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.service = None
                                        self.vpn_id = None
                                        self.edge_id = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                                class IpSubData(Entity):
                                    """
                                    IP Subscriber context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table Id
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: parent_interface
                                    
                                    	Parent interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData, self).__init__()

                                        self.yang_name = "ip-sub-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                        ])
                                        self.table_id = None
                                        self.parent_interface = None
                                        self._segment_path = lambda: "ip-sub-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData, ['table_id', 'parent_interface'], name, value)


                                class Tev4P2MpData(Entity):
                                    """
                                    TEv4 P2MP context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_source
                                    
                                    	Tunnel source
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: p2mp_id
                                    
                                    	Point to multipoint ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id_extension
                                    
                                    	Tunnel ID extension
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_lsp_id
                                    
                                    	Tunnel LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: previous_hop
                                    
                                    	Previous hop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, self).__init__()

                                        self.yang_name = "tev4p2mp-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                            ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                            ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                            ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                            ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                            ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                        ])
                                        self.table_id = None
                                        self.tunnel_source = None
                                        self.p2mp_id = None
                                        self.tunnel_id = None
                                        self.tunnel_id_extension = None
                                        self.tunnel_lsp_id = None
                                        self.previous_hop = None
                                        self._segment_path = lambda: "tev4p2mp-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                                class MldPv4Data(Entity):
                                    """
                                    MLDPv4 LSM\-ID context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	LSM ID Type
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: lsm_id
                                    
                                    	LSM ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: peer_lsrid
                                    
                                    	Peer LSR Id
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: peer_label_space_id
                                    
                                    	Peer Label Space Id
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data, self).__init__()

                                        self.yang_name = "mld-pv4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('type', YLeaf(YType.uint16, 'type')),
                                            ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                            ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                            ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                        ])
                                        self.table_id = None
                                        self.type = None
                                        self.lsm_id = None
                                        self.peer_lsrid = None
                                        self.peer_label_space_id = None
                                        self._segment_path = lambda: "mld-pv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                                class PseudowireHeadEndData(Entity):
                                    """
                                    Pseudowire Head\-end label context
                                    
                                    .. attribute:: pwhe_intf
                                    
                                    	Pseudo\-wire Head\-end interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, self).__init__()

                                        self.yang_name = "pseudowire-head-end-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                        ])
                                        self.pwhe_intf = None
                                        self._segment_path = lambda: "pseudowire-head-end-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                                class TpData(Entity):
                                    """
                                    TP context
                                    
                                    .. attribute:: source_global_id
                                    
                                    	TP source global ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: source_node_id
                                    
                                    	TP source node ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: dest_global_id
                                    
                                    	TP destination global ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: dest_node_id
                                    
                                    	TP destination node ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: source_tunnel_id
                                    
                                    	TP source tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: dest_tunnel_id
                                    
                                    	TP destination tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: lsp_id
                                    
                                    	TP LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData, self).__init__()

                                        self.yang_name = "tp-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                            ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                            ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                            ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                            ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                            ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                            ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                        ])
                                        self.source_global_id = None
                                        self.source_node_id = None
                                        self.dest_global_id = None
                                        self.dest_node_id = None
                                        self.source_tunnel_id = None
                                        self.dest_tunnel_id = None
                                        self.lsp_id = None
                                        self._segment_path = lambda: "tp-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                                class GenericRoutingEncapsulation(Entity):
                                    """
                                    Generic routing encapsulation context
                                    
                                    .. attribute:: gre_interface
                                    
                                    	Generic routing encapsulation interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, self).__init__()

                                        self.yang_name = "generic-routing-encapsulation"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                        ])
                                        self.gre_interface = None
                                        self._segment_path = lambda: "generic-routing-encapsulation"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                                class Ipv6GenericRoutingEncapsulation(Entity):
                                    """
                                    Generic routing encapsulation context
                                    
                                    .. attribute:: greipv6_interface
                                    
                                    	Generic routing encapsulation IPv6 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, self).__init__()

                                        self.yang_name = "ipv6-generic-routing-encapsulation"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                        ])
                                        self.greipv6_interface = None
                                        self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                                class EvpnData(Entity):
                                    """
                                    EVPN context
                                    
                                    .. attribute:: evpn_id
                                    
                                    	EVPN ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: evpn_tag
                                    
                                    	EVPN TAG
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ethernet_segment
                                    
                                    	Ethernet Segment ID
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData, self).__init__()

                                        self.yang_name = "evpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                            ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                            ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                        ])
                                        self.evpn_id = None
                                        self.evpn_tag = None
                                        self.ethernet_segment = None
                                        self._segment_path = lambda: "evpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                                class Ipv4BlbData(Entity):
                                    """
                                    BFD BLB label context
                                    
                                    .. attribute:: blb_intf
                                    
                                    	BFD BLB interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, self).__init__()

                                        self.yang_name = "ipv4blb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                        ])
                                        self.blb_intf = None
                                        self.prefix = None
                                        self._segment_path = lambda: "ipv4blb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                                class Ipv6BlbData(Entity):
                                    """
                                    BFD BLB label context
                                    
                                    .. attribute:: blb_intf
                                    
                                    	BFD BLB interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv6 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, self).__init__()

                                        self.yang_name = "ipv6blb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                        ])
                                        self.blb_intf = None
                                        self.prefix = None
                                        self._segment_path = lambda: "ipv6blb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                                class PiMiPmsiData(Entity):
                                    """
                                    PIM I\-PMSI label conext
                                    
                                    .. attribute:: vrf_id
                                    
                                    	VRF ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: head
                                    
                                    	Head
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: v6
                                    
                                    	PIM6
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, self).__init__()

                                        self.yang_name = "pi-mi-pmsi-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                            ('head', YLeaf(YType.int32, 'head')),
                                            ('v6', YLeaf(YType.int32, 'v6')),
                                        ])
                                        self.vrf_id = None
                                        self.head = None
                                        self.v6 = None
                                        self._segment_path = lambda: "pi-mi-pmsi-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                                class PiMsPmsiData(Entity):
                                    """
                                    PIM S\-PMSI label conext
                                    
                                    .. attribute:: vrf_id
                                    
                                    	VRF ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: source
                                    
                                    	Originating Router
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: head
                                    
                                    	Head
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: v6
                                    
                                    	PIM6
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: hli
                                    
                                    	Head LSM\-ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: seg
                                    
                                    	Segmented Multicast
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, self).__init__()

                                        self.yang_name = "pi-ms-pmsi-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                            ('source', YLeaf(YType.str, 'source')),
                                            ('head', YLeaf(YType.int32, 'head')),
                                            ('v6', YLeaf(YType.int32, 'v6')),
                                            ('hli', YLeaf(YType.uint32, 'hli')),
                                            ('seg', YLeaf(YType.int32, 'seg')),
                                        ])
                                        self.vrf_id = None
                                        self.source = None
                                        self.head = None
                                        self.v6 = None
                                        self.hli = None
                                        self.seg = None
                                        self._segment_path = lambda: "pi-ms-pmsi-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                                class NextHopSetL3Vpn(Entity):
                                    """
                                    L3VPN NH SET label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: next_hop_set_id
                                    
                                    	Next Hop Set ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, self).__init__()

                                        self.yang_name = "next-hop-set-l3vpn"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                        ])
                                        self.table_id = None
                                        self.next_hop_set_id = None
                                        self._segment_path = lambda: "next-hop-set-l3vpn"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                                class SrPrefixSegment(Entity):
                                    """
                                    SR Prefix Segment context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: segment_id
                                    
                                    	Prefix Segment ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, self).__init__()

                                        self.yang_name = "sr-prefix-segment"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                        ])
                                        self.table_id = None
                                        self.segment_id = None
                                        self._segment_path = lambda: "sr-prefix-segment"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                                class SrAdjSegmentIpv4(Entity):
                                    """
                                    SR Adj Segment ipv4 context
                                    
                                    .. attribute:: index
                                    
                                    	Adjacency index
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	Adjacency type
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: intf
                                    
                                    	Adjacency interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: addr
                                    
                                    	Adjacency nexthop IPv4 address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, self).__init__()

                                        self.yang_name = "sr-adj-segment-ipv4"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('index', YLeaf(YType.uint32, 'index')),
                                            ('type', YLeaf(YType.uint32, 'type')),
                                            ('intf', YLeaf(YType.str, 'intf')),
                                            ('addr', YLeaf(YType.str, 'addr')),
                                        ])
                                        self.index = None
                                        self.type = None
                                        self.intf = None
                                        self.addr = None
                                        self._segment_path = lambda: "sr-adj-segment-ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                                class SrAdjSegmentIpv6(Entity):
                                    """
                                    SR Adj Segment ipv6 context
                                    
                                    .. attribute:: index
                                    
                                    	Adjacency index
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	Adjacency type
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: intf
                                    
                                    	Adjacency interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: addr
                                    
                                    	Adjacency nexthop IPv6 address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, self).__init__()

                                        self.yang_name = "sr-adj-segment-ipv6"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('index', YLeaf(YType.uint32, 'index')),
                                            ('type', YLeaf(YType.uint32, 'type')),
                                            ('intf', YLeaf(YType.str, 'intf')),
                                            ('addr', YLeaf(YType.str, 'addr')),
                                        ])
                                        self.index = None
                                        self.type = None
                                        self.intf = None
                                        self.addr = None
                                        self._segment_path = lambda: "sr-adj-segment-ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                                class LabelBlockSrgbData(Entity):
                                    """
                                    Label block SRGB context
                                    
                                    .. attribute:: start_label
                                    
                                    	Start Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, self).__init__()

                                        self.yang_name = "label-block-srgb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('start_label', YLeaf(YType.uint32, 'start-label')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.start_label = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-srgb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                                class TeBinding(Entity):
                                    """
                                    MPLS TE tunnel binding context
                                    
                                    .. attribute:: te_identifier
                                    
                                    	MPLS Traffic Engineering Tunnel or Group ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_type
                                    
                                    	Type of identifier for the binding
                                    	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding, self).__init__()

                                        self.yang_name = "te-binding"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                            ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                        ])
                                        self.te_identifier = None
                                        self.te_type = None
                                        self._segment_path = lambda: "te-binding"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding, ['te_identifier', 'te_type'], name, value)


                                class LabelBlockSrlbData(Entity):
                                    """
                                    Label block SRLB context
                                    
                                    .. attribute:: start_label
                                    
                                    	Start Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, self).__init__()

                                        self.yang_name = "label-block-srlb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('start_label', YLeaf(YType.uint32, 'start-label')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.start_label = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-srlb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                            class LocalLabelRewrite(Entity):
                                """
                                Local label rewrite information
                                
                                .. attribute:: label_data
                                
                                	label data
                                	**type**\: list of  		 :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite.LabelData>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite, self).__init__()

                                    self.yang_name = "local-label-rewrite"
                                    self.yang_parent_name = "rewrite-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite.LabelData))])
                                    self._leafs = OrderedDict()

                                    self.label_data = YList(self)
                                    self._segment_path = lambda: "local-label-rewrite"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite, [], name, value)


                                class LabelData(Entity):
                                    """
                                    label data
                                    
                                    .. attribute:: entry
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, self).__init__()

                                        self.yang_name = "label-data"
                                        self.yang_parent_name = "local-label-rewrite"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                        ])
                                        self.entry = None
                                        self._segment_path = lambda: "label-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, ['entry'], name, value)


                    class AssociatedFpi(Entity):
                        """
                        Associated FPI
                        
                        .. attribute:: fpi
                        
                        	FPI
                        	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi>`
                        
                        .. attribute:: application_owner
                        
                        	Application owner instance
                        	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.ApplicationOwner>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi, self).__init__()

                            self.yang_name = "associated-fpi"
                            self.yang_parent_name = "rewrite-pw"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi))])
                            self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.ApplicationOwner))])
                            self._leafs = OrderedDict()

                            self.fpi = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi()
                            self.fpi.parent = self
                            self._children_name_map["fpi"] = "fpi"
                            self._children_yang_names.add("fpi")

                            self.application_owner = YList(self)
                            self._segment_path = lambda: "associated-fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi, [], name, value)


                        class Fpi(Entity):
                            """
                            FPI
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData>`
                            
                            .. attribute:: te_data
                            
                            	te data
                            	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData>`
                            
                            .. attribute:: dmtc_ext_intf_data
                            
                            	dmtc ext intf data
                            	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData>`
                            
                            .. attribute:: fpi_type
                            
                            	FPIType
                            	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi, self).__init__()

                                self.yang_name = "fpi"
                                self.yang_parent_name = "associated-fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData)), ("te-data", ("te_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                                ])
                                self.fpi_type = None

                                self.label_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData()
                                self.label_data.parent = self
                                self._children_name_map["label_data"] = "label-data"
                                self._children_yang_names.add("label-data")

                                self.te_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData()
                                self.te_data.parent = self
                                self._children_name_map["te_data"] = "te-data"
                                self._children_yang_names.add("te-data")

                                self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.dmtc_ext_intf_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData()
                                self.dmtc_ext_intf_data.parent = self
                                self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                                self._children_yang_names.add("dmtc-ext-intf-data")
                                self._segment_path = lambda: "fpi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi, ['fpi_type'], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: label
                                
                                	Label value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: elc
                                
                                	ELC
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label', YLeaf(YType.uint32, 'label')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('elc', YLeaf(YType.int32, 'elc')),
                                    ])
                                    self.label = None
                                    self.security_id = None
                                    self.elc = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                            class TeData(Entity):
                                """
                                te data
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: local_label
                                
                                	Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData, self).__init__()

                                    self.yang_name = "te-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.tunnel_interface = None
                                    self.local_label = None
                                    self._segment_path = lambda: "te-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sr_local_label
                                
                                	SR related Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                        ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.version = None
                                    self.sr_local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: router_flags
                                
                                	Route flags
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_len
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                        ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.router_flags = None
                                    self.prefix_len = None
                                    self.version = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: pwhe_list_id
                                
                                	Pseudowire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                    ])
                                    self.pwhe_list_id = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData, ['pwhe_list_id'], name, value)


                            class DmtcExtIntfData(Entity):
                                """
                                dmtc ext intf data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData, self).__init__()

                                    self.yang_name = "dmtc-ext-intf-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-ext-intf-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                        class ApplicationOwner(Entity):
                            """
                            Application owner instance
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.ApplicationOwner, self).__init__()

                                self.yang_name = "application-owner"
                                self.yang_parent_name = "associated-fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-owner"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.AssociatedFpi.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class V4Rpf(Entity):
                        """
                        IPv4 RPF neighbors
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: v4_rpf_neighbor
                        
                        	V4 RPF Neighbor
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.V4Rpf, self).__init__()

                            self.yang_name = "v4-rpf"
                            self.yang_parent_name = "rewrite-pw"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('v4_rpf_neighbor', YLeaf(YType.str, 'v4-rpf-neighbor')),
                            ])
                            self.table_id = None
                            self.v4_rpf_neighbor = None
                            self._segment_path = lambda: "v4-rpf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.V4Rpf, ['table_id', 'v4_rpf_neighbor'], name, value)


                    class V6Rpf(Entity):
                        """
                        IPv6 RPF neighbors
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: v6_rpf_neighbor
                        
                        	V6 RPF Neighbor
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.V6Rpf, self).__init__()

                            self.yang_name = "v6-rpf"
                            self.yang_parent_name = "rewrite-pw"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('v6_rpf_neighbor', YLeaf(YType.str, 'v6-rpf-neighbor')),
                            ])
                            self.table_id = None
                            self.v6_rpf_neighbor = None
                            self._segment_path = lambda: "v6-rpf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.V6Rpf, ['table_id', 'v6_rpf_neighbor'], name, value)


                    class Mois(Entity):
                        """
                        Mois
                        
                        .. attribute:: application_resource
                        
                        	Application state
                        	**type**\:  :py:class:`ApplicationResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource>`
                        
                        .. attribute:: moi_array
                        
                        	moi array
                        	**type**\: list of  		 :py:class:`MoiArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois, self).__init__()

                            self.yang_name = "mois"
                            self.yang_parent_name = "rewrite-pw"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("application-resource", ("application_resource", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource))])
                            self._child_list_classes = OrderedDict([("moi-array", ("moi_array", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray))])
                            self._leafs = OrderedDict()

                            self.application_resource = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource()
                            self.application_resource.parent = self
                            self._children_name_map["application_resource"] = "application-resource"
                            self._children_yang_names.add("application-resource")

                            self.moi_array = YList(self)
                            self._segment_path = lambda: "mois"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois, [], name, value)


                        class ApplicationResource(Entity):
                            """
                            Application state
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource, self).__init__()

                                self.yang_name = "application-resource"
                                self.yang_parent_name = "mois"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-resource"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                        class MoiArray(Entity):
                            """
                            moi array
                            
                            .. attribute:: moi
                            
                            	Moi
                            	**type**\:  :py:class:`Moi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray, self).__init__()

                                self.yang_name = "moi-array"
                                self.yang_parent_name = "mois"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("moi", ("moi", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.moi = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi()
                                self.moi.parent = self
                                self._children_name_map["moi"] = "moi"
                                self._children_yang_names.add("moi")
                                self._segment_path = lambda: "moi-array"


                            class Moi(Entity):
                                """
                                Moi
                                
                                .. attribute:: pop_and_lookup_ipv4
                                
                                	pop and lookup ipv4
                                	**type**\:  :py:class:`PopAndLookupIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4>`
                                
                                .. attribute:: pop_and_lookup_tp
                                
                                	pop and lookup tp
                                	**type**\:  :py:class:`PopAndLookupTp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp>`
                                
                                .. attribute:: pop_and_lookup_ipv6
                                
                                	pop and lookup ipv6
                                	**type**\:  :py:class:`PopAndLookupIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6>`
                                
                                .. attribute:: ipv4_data
                                
                                	ipv4 data
                                	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data>`
                                
                                .. attribute:: ipv6_data
                                
                                	ipv6 data
                                	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data>`
                                
                                .. attribute:: tev4_data
                                
                                	tev4 data
                                	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data>`
                                
                                .. attribute:: pseudowire_data
                                
                                	pseudowire data
                                	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData>`
                                
                                .. attribute:: ip_sub_data
                                
                                	ip sub data
                                	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData>`
                                
                                .. attribute:: pseudowire_head_end_data
                                
                                	pseudowire head end data
                                	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData>`
                                
                                .. attribute:: pw_list_data
                                
                                	pw list data
                                	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData>`
                                
                                .. attribute:: stackv4_data
                                
                                	stackv4 data
                                	**type**\:  :py:class:`Stackv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data>`
                                
                                .. attribute:: stackv6_data
                                
                                	stackv6 data
                                	**type**\:  :py:class:`Stackv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data>`
                                
                                .. attribute:: te_head_data
                                
                                	te head data
                                	**type**\:  :py:class:`TeHeadData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData>`
                                
                                .. attribute:: dmtc_data
                                
                                	dmtc data
                                	**type**\:  :py:class:`DmtcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData>`
                                
                                .. attribute:: moi_type
                                
                                	MoiType
                                	**type**\:  :py:class:`MgmtLsdMoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdMoi>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi, self).__init__()

                                    self.yang_name = "moi"
                                    self.yang_parent_name = "moi-array"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("pop-and-lookup-ipv4", ("pop_and_lookup_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4)), ("pop-and-lookup-tp", ("pop_and_lookup_tp", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp)), ("pop-and-lookup-ipv6", ("pop_and_lookup_ipv6", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData)), ("stackv4-data", ("stackv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data)), ("stackv6-data", ("stackv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data)), ("te-head-data", ("te_head_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData)), ("dmtc-data", ("dmtc_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('moi_type', YLeaf(YType.enumeration, 'moi-type')),
                                    ])
                                    self.moi_type = None

                                    self.pop_and_lookup_ipv4 = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4()
                                    self.pop_and_lookup_ipv4.parent = self
                                    self._children_name_map["pop_and_lookup_ipv4"] = "pop-and-lookup-ipv4"
                                    self._children_yang_names.add("pop-and-lookup-ipv4")

                                    self.pop_and_lookup_tp = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp()
                                    self.pop_and_lookup_tp.parent = self
                                    self._children_name_map["pop_and_lookup_tp"] = "pop-and-lookup-tp"
                                    self._children_yang_names.add("pop-and-lookup-tp")

                                    self.pop_and_lookup_ipv6 = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6()
                                    self.pop_and_lookup_ipv6.parent = self
                                    self._children_name_map["pop_and_lookup_ipv6"] = "pop-and-lookup-ipv6"
                                    self._children_yang_names.add("pop-and-lookup-ipv6")

                                    self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data()
                                    self.ipv4_data.parent = self
                                    self._children_name_map["ipv4_data"] = "ipv4-data"
                                    self._children_yang_names.add("ipv4-data")

                                    self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data()
                                    self.ipv6_data.parent = self
                                    self._children_name_map["ipv6_data"] = "ipv6-data"
                                    self._children_yang_names.add("ipv6-data")

                                    self.tev4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data()
                                    self.tev4_data.parent = self
                                    self._children_name_map["tev4_data"] = "tev4-data"
                                    self._children_yang_names.add("tev4-data")

                                    self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData()
                                    self.pseudowire_data.parent = self
                                    self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                    self._children_yang_names.add("pseudowire-data")

                                    self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData()
                                    self.ip_sub_data.parent = self
                                    self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                    self._children_yang_names.add("ip-sub-data")

                                    self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData()
                                    self.pseudowire_head_end_data.parent = self
                                    self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                    self._children_yang_names.add("pseudowire-head-end-data")

                                    self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData()
                                    self.pw_list_data.parent = self
                                    self._children_name_map["pw_list_data"] = "pw-list-data"
                                    self._children_yang_names.add("pw-list-data")

                                    self.stackv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data()
                                    self.stackv4_data.parent = self
                                    self._children_name_map["stackv4_data"] = "stackv4-data"
                                    self._children_yang_names.add("stackv4-data")

                                    self.stackv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data()
                                    self.stackv6_data.parent = self
                                    self._children_name_map["stackv6_data"] = "stackv6-data"
                                    self._children_yang_names.add("stackv6-data")

                                    self.te_head_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData()
                                    self.te_head_data.parent = self
                                    self._children_name_map["te_head_data"] = "te-head-data"
                                    self._children_yang_names.add("te-head-data")

                                    self.dmtc_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData()
                                    self.dmtc_data.parent = self
                                    self._children_name_map["dmtc_data"] = "dmtc-data"
                                    self._children_yang_names.add("dmtc-data")
                                    self._segment_path = lambda: "moi"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi, ['moi_type'], name, value)


                                class PopAndLookupIpv4(Entity):
                                    """
                                    pop and lookup ipv4
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4, self).__init__()

                                        self.yang_name = "pop-and-lookup-ipv4"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pop-and-lookup-ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                                class PopAndLookupTp(Entity):
                                    """
                                    pop and lookup tp
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp, self).__init__()

                                        self.yang_name = "pop-and-lookup-tp"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_label = None
                                        self._segment_path = lambda: "pop-and-lookup-tp"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp, ['table_id', 'table_name', 'path_flags_decode', 'out_label'], name, value)


                                class PopAndLookupIpv6(Entity):
                                    """
                                    pop and lookup ipv6
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6, self).__init__()

                                        self.yang_name = "pop-and-lookup-ipv6"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pop-and-lookup-ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                                class Ipv4Data(Entity):
                                    """
                                    ipv4 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: load_metric
                                    
                                    	Routing path's load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_label
                                    
                                    	TE backup path local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data, self).__init__()

                                        self.yang_name = "ipv4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('local_label', YLeaf(YType.uint32, 'local-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_interface_parent = None
                                        self.ipv4_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.load_metric = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.tunnel_id = None
                                        self.next_hop_id = None
                                        self.local_label = None
                                        self._segment_path = lambda: "ipv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                class Ipv6Data(Entity):
                                    """
                                    ipv6 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data, self).__init__()

                                        self.yang_name = "ipv6-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv6_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.next_hop_id = None
                                        self.out_interface_parent = None
                                        self._segment_path = lambda: "ipv6-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                class Tev4Data(Entity):
                                    """
                                    tev4 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_ipv4_next_hop
                                    
                                    	Backup IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: merge_point_label
                                    
                                    	Merge point label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: backup_local_label
                                    
                                    	Backup local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_interface
                                    
                                    	Tunnel interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: tunnel_weight
                                    
                                    	Tunnel weight
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: data_out_parent_interface
                                    
                                    	Outgoing data parent interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: tunnel_class
                                    
                                    	Tunnel class
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data, self).__init__()

                                        self.yang_name = "tev4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                            ('backup_ipv4_next_hop', YLeaf(YType.str, 'backup-ipv4-next-hop')),
                                            ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                                            ('backup_local_label', YLeaf(YType.uint32, 'backup-local-label')),
                                            ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                            ('tunnel_weight', YLeaf(YType.uint32, 'tunnel-weight')),
                                            ('data_out_parent_interface', YLeaf(YType.str, 'data-out-parent-interface')),
                                            ('tunnel_class', YLeaf(YType.uint32, 'tunnel-class')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv4_next_hop = None
                                        self.backup_interface = None
                                        self.backup_ipv4_next_hop = None
                                        self.merge_point_label = None
                                        self.backup_local_label = None
                                        self.tunnel_interface = None
                                        self.tunnel_weight = None
                                        self.data_out_parent_interface = None
                                        self.tunnel_class = None
                                        self._segment_path = lambda: "tev4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv4_next_hop', 'backup_interface', 'backup_ipv4_next_hop', 'merge_point_label', 'backup_local_label', 'tunnel_interface', 'tunnel_weight', 'data_out_parent_interface', 'tunnel_class'], name, value)


                                class PseudowireData(Entity):
                                    """
                                    pseudowire data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: cross_connect_id
                                    
                                    	Cross\-connect ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: pseuodo_wire_connect_id
                                    
                                    	PseudoWire Cross\-connect ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: bridge_id
                                    
                                    	Bridge ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: split_horizon_id
                                    
                                    	Split horizon group ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData, self).__init__()

                                        self.yang_name = "pseudowire-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('cross_connect_id', YLeaf(YType.uint32, 'cross-connect-id')),
                                            ('pseuodo_wire_connect_id', YLeaf(YType.uint32, 'pseuodo-wire-connect-id')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('bridge_id', YLeaf(YType.uint32, 'bridge-id')),
                                            ('split_horizon_id', YLeaf(YType.uint32, 'split-horizon-id')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.cross_connect_id = None
                                        self.pseuodo_wire_connect_id = None
                                        self.ipv4_next_hop = None
                                        self.bridge_id = None
                                        self.split_horizon_id = None
                                        self._segment_path = lambda: "pseudowire-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'cross_connect_id', 'pseuodo_wire_connect_id', 'ipv4_next_hop', 'bridge_id', 'split_horizon_id'], name, value)


                                class IpSubData(Entity):
                                    """
                                    ip sub data
                                    
                                    .. attribute:: table_id
                                    
                                    	VRF table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData, self).__init__()

                                        self.yang_name = "ip-sub-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.out_interface = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "ip-sub-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData, ['table_id', 'table_name', 'out_interface', 'path_flags_decode'], name, value)


                                class PseudowireHeadEndData(Entity):
                                    """
                                    pseudowire head end data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: control_word
                                    
                                    	Is control word present
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: imposition
                                    
                                    	Is PWHE IMposition
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: vctype
                                    
                                    	Virtual Circuit Type
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pw_list_id
                                    
                                    	Pseudo\-wire List Identifier
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: pwhe_interface
                                    
                                    	Pseudo\-wire Head\-end interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData, self).__init__()

                                        self.yang_name = "pseudowire-head-end-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('control_word', YLeaf(YType.int32, 'control-word')),
                                            ('imposition', YLeaf(YType.int32, 'imposition')),
                                            ('vctype', YLeaf(YType.uint8, 'vctype')),
                                            ('pw_list_id', YLeaf(YType.uint16, 'pw-list-id')),
                                            ('pwhe_interface', YLeaf(YType.str, 'pwhe-interface')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.ipv4_next_hop = None
                                        self.control_word = None
                                        self.imposition = None
                                        self.vctype = None
                                        self.pw_list_id = None
                                        self.pwhe_interface = None
                                        self._segment_path = lambda: "pseudowire-head-end-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'ipv4_next_hop', 'control_word', 'imposition', 'vctype', 'pw_list_id', 'pwhe_interface'], name, value)


                                class PwListData(Entity):
                                    """
                                    pw list data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: l3_interface
                                    
                                    	Pseudo\-wire Layer 3 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: l2_interface
                                    
                                    	Pseudo\-wire Layer 2 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData, self).__init__()

                                        self.yang_name = "pw-list-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('l3_interface', YLeaf(YType.str, 'l3-interface')),
                                            ('l2_interface', YLeaf(YType.str, 'l2-interface')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.l3_interface = None
                                        self.l2_interface = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pw-list-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData, ['table_id', 'table_name', 'l3_interface', 'l2_interface', 'path_flags_decode'], name, value)


                                class Stackv4Data(Entity):
                                    """
                                    stackv4 data
                                    
                                    .. attribute:: nexthop
                                    
                                    	Nexthop
                                    	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop>`
                                    
                                    .. attribute:: inner_stack
                                    
                                    	Inner stack
                                    	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack>`
                                    
                                    .. attribute:: owner_application_type
                                    
                                    	Owner application type
                                    	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data, self).__init__()

                                        self.yang_name = "stackv4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('owner_application_type', YLeaf(YType.enumeration, 'owner-application-type')),
                                        ])
                                        self.owner_application_type = None

                                        self.nexthop = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop()
                                        self.nexthop.parent = self
                                        self._children_name_map["nexthop"] = "nexthop"
                                        self._children_yang_names.add("nexthop")

                                        self.inner_stack = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack()
                                        self.inner_stack.parent = self
                                        self._children_name_map["inner_stack"] = "inner-stack"
                                        self._children_yang_names.add("inner-stack")
                                        self._segment_path = lambda: "stackv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data, ['owner_application_type'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Nexthop
                                        
                                        .. attribute:: table_id
                                        
                                        	Table ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: table_name
                                        
                                        	VRF table name
                                        	**type**\: str
                                        
                                        .. attribute:: path_flags_decode
                                        
                                        	Path flag decoded string
                                        	**type**\: str
                                        
                                        .. attribute:: out_interface
                                        
                                        	Outgoing Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: out_interface_parent
                                        
                                        	Outgoing Interface's parent
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: ipv4_next_hop
                                        
                                        	IPv4 nexthop
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	Routing path id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: backup_path_id
                                        
                                        	Routing path backup id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: load_metric
                                        
                                        	Routing path's load metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label
                                        
                                        	Outgoing Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label_name
                                        
                                        	Outgoing label name
                                        	**type**\: str
                                        
                                        .. attribute:: tunnel_id
                                        
                                        	Tunnel ID
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: next_hop_id
                                        
                                        	Next hop ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: local_label
                                        
                                        	TE backup path local label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "stackv4-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                                ('table_name', YLeaf(YType.str, 'table-name')),
                                                ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                                ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                                ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                                ('path_id', YLeaf(YType.uint8, 'path-id')),
                                                ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                                ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                                ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                                ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                                ('local_label', YLeaf(YType.uint32, 'local-label')),
                                            ])
                                            self.table_id = None
                                            self.table_name = None
                                            self.path_flags_decode = None
                                            self.out_interface = None
                                            self.out_interface_parent = None
                                            self.ipv4_next_hop = None
                                            self.path_id = None
                                            self.backup_path_id = None
                                            self.load_metric = None
                                            self.out_label = None
                                            self.out_label_name = None
                                            self.tunnel_id = None
                                            self.next_hop_id = None
                                            self.local_label = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                    class InnerStack(Entity):
                                        """
                                        Inner stack
                                        
                                        .. attribute:: num_nexthops
                                        
                                        	Number of remote nexthop addresses
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: num_lbls
                                        
                                        	Depth of inner label stack
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: nexthop
                                        
                                        	Remote nexthop addresses
                                        	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop>`
                                        
                                        .. attribute:: label
                                        
                                        	Info related to outgoing labels
                                        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label>`
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack, self).__init__()

                                            self.yang_name = "inner-stack"
                                            self.yang_parent_name = "stackv4-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop)), ("label", ("label", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label))])
                                            self._leafs = OrderedDict([
                                                ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                                ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                            ])
                                            self.num_nexthops = None
                                            self.num_lbls = None

                                            self.nexthop = YList(self)
                                            self.label = YList(self)
                                            self._segment_path = lambda: "inner-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                        class Nexthop(Entity):
                                            """
                                            Remote nexthop addresses
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, self).__init__()

                                                self.yang_name = "nexthop"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.str, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "nexthop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, ['entry'], name, value)


                                        class Label(Entity):
                                            """
                                            Info related to outgoing labels
                                            
                                            .. attribute:: outgoing_label
                                            
                                            	Remote Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: outgoing_label_str
                                            
                                            	Remote Label string
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, self).__init__()

                                                self.yang_name = "label"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                    ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                                ])
                                                self.outgoing_label = None
                                                self.outgoing_label_str = None
                                                self._segment_path = lambda: "label"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                                class Stackv6Data(Entity):
                                    """
                                    stackv6 data
                                    
                                    .. attribute:: nexthop
                                    
                                    	Nexthop
                                    	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop>`
                                    
                                    .. attribute:: inner_stack
                                    
                                    	Inner stack
                                    	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data, self).__init__()

                                        self.yang_name = "stackv6-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.nexthop = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop()
                                        self.nexthop.parent = self
                                        self._children_name_map["nexthop"] = "nexthop"
                                        self._children_yang_names.add("nexthop")

                                        self.inner_stack = MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack()
                                        self.inner_stack.parent = self
                                        self._children_name_map["inner_stack"] = "inner-stack"
                                        self._children_yang_names.add("inner-stack")
                                        self._segment_path = lambda: "stackv6-data"


                                    class Nexthop(Entity):
                                        """
                                        Nexthop
                                        
                                        .. attribute:: table_id
                                        
                                        	Table ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: table_name
                                        
                                        	VRF table name
                                        	**type**\: str
                                        
                                        .. attribute:: path_flags_decode
                                        
                                        	Path flag decoded string
                                        	**type**\: str
                                        
                                        .. attribute:: out_interface
                                        
                                        	Outgoing interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: out_label
                                        
                                        	Outgoing label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label_name
                                        
                                        	Outgoing label name
                                        	**type**\: str
                                        
                                        .. attribute:: ipv6_next_hop
                                        
                                        	IPv6 nexthop
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	Routing path id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: backup_path_id
                                        
                                        	Routing path backup id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: next_hop_id
                                        
                                        	Next hop ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_interface_parent
                                        
                                        	Outgoing Interface's parent
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "stackv6-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                                ('table_name', YLeaf(YType.str, 'table-name')),
                                                ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                                ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                                ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                                ('path_id', YLeaf(YType.uint8, 'path-id')),
                                                ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                                ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                                ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ])
                                            self.table_id = None
                                            self.table_name = None
                                            self.path_flags_decode = None
                                            self.out_interface = None
                                            self.out_label = None
                                            self.out_label_name = None
                                            self.ipv6_next_hop = None
                                            self.path_id = None
                                            self.backup_path_id = None
                                            self.next_hop_id = None
                                            self.out_interface_parent = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                    class InnerStack(Entity):
                                        """
                                        Inner stack
                                        
                                        .. attribute:: num_nexthops
                                        
                                        	Number of remote nexthop addresses
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: num_lbls
                                        
                                        	Depth of inner label stack
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: nexthop
                                        
                                        	Remote nexthop addresses
                                        	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop>`
                                        
                                        .. attribute:: label
                                        
                                        	Info related to outgoing labels
                                        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label>`
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack, self).__init__()

                                            self.yang_name = "inner-stack"
                                            self.yang_parent_name = "stackv6-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop)), ("label", ("label", MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label))])
                                            self._leafs = OrderedDict([
                                                ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                                ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                            ])
                                            self.num_nexthops = None
                                            self.num_lbls = None

                                            self.nexthop = YList(self)
                                            self.label = YList(self)
                                            self._segment_path = lambda: "inner-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                        class Nexthop(Entity):
                                            """
                                            Remote nexthop addresses
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, self).__init__()

                                                self.yang_name = "nexthop"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.str, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "nexthop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, ['entry'], name, value)


                                        class Label(Entity):
                                            """
                                            Info related to outgoing labels
                                            
                                            .. attribute:: outgoing_label
                                            
                                            	Remote Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: outgoing_label_str
                                            
                                            	Remote Label string
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, self).__init__()

                                                self.yang_name = "label"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                    ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                                ])
                                                self.outgoing_label = None
                                                self.outgoing_label_str = None
                                                self._segment_path = lambda: "label"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                                class TeHeadData(Entity):
                                    """
                                    te head data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_local_label
                                    
                                    	Tunnel local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_local_label_str
                                    
                                    	Tunnel local label stringified
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_fwd_class
                                    
                                    	Tunnel forwarding class
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: tunnel_load_metric
                                    
                                    	Tunnel Load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: flags_decode
                                    
                                    	Flags decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData, self).__init__()

                                        self.yang_name = "te-head-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('tunnel_local_label', YLeaf(YType.uint32, 'tunnel-local-label')),
                                            ('tunnel_local_label_str', YLeaf(YType.str, 'tunnel-local-label-str')),
                                            ('tunnel_fwd_class', YLeaf(YType.uint8, 'tunnel-fwd-class')),
                                            ('tunnel_load_metric', YLeaf(YType.uint32, 'tunnel-load-metric')),
                                            ('flags_decode', YLeaf(YType.str, 'flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.tunnel_local_label = None
                                        self.tunnel_local_label_str = None
                                        self.tunnel_fwd_class = None
                                        self.tunnel_load_metric = None
                                        self.flags_decode = None
                                        self._segment_path = lambda: "te-head-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData, ['table_id', 'table_name', 'tunnel_local_label', 'tunnel_local_label_str', 'tunnel_fwd_class', 'tunnel_load_metric', 'flags_decode'], name, value)


                                class DmtcData(Entity):
                                    """
                                    dmtc data
                                    
                                    .. attribute:: dmtc_ext_ifh
                                    
                                    	DMTC External Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData, self).__init__()

                                        self.yang_name = "dmtc-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                        ])
                                        self.dmtc_ext_ifh = None
                                        self._segment_path = lambda: "dmtc-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData, ['dmtc_ext_ifh'], name, value)


            class RewriteIpv4S(Entity):
                """
                Table of Rewrites
                
                .. attribute:: rewrite_ipv4
                
                	FPI rewrite for label
                	**type**\: list of  		 :py:class:`RewriteIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S, self).__init__()

                    self.yang_name = "rewrite-ipv4s"
                    self.yang_parent_name = "rewrite"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("rewrite-ipv4", ("rewrite_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4))])
                    self._leafs = OrderedDict()

                    self.rewrite_ipv4 = YList(self)
                    self._segment_path = lambda: "rewrite-ipv4s"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S, [], name, value)


                class RewriteIpv4(Entity):
                    """
                    FPI rewrite for label
                    
                    .. attribute:: rsi_table_name
                    
                    	RSI table name
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: rsi_table_id
                    
                    	RSI table ID
                    	**type**\: str
                    
                    	**pattern:** [0\-9a\-fA\-F]{1,8}
                    
                    .. attribute:: prefix
                    
                    	IPv4 Prefix
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: prefix_length
                    
                    	Prefix length
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: fpi_key
                    
                    	fpi key
                    	**type**\:  :py:class:`FpiKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey>`
                    
                    .. attribute:: rewrite_id
                    
                    	Rewrite ID
                    	**type**\:  :py:class:`RewriteId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId>`
                    
                    .. attribute:: rewrite_version
                    
                    	Rewrite version
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: bcdl_priority
                    
                    	BCDL Priority
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: lsd_queue
                    
                    	LSD queue
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: rw_install_time
                    
                    	Rewrite install timestamp
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rw_install_age
                    
                    	Rewrite install age
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rw_updated
                    
                    	Is rewrite ever updated
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: priority_updated
                    
                    	Is rewrite's BCDL priority updated
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: associated_fpi
                    
                    	Associated FPI
                    	**type**\: list of  		 :py:class:`AssociatedFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi>`
                    
                    .. attribute:: v4_rpf
                    
                    	IPv4 RPF neighbors
                    	**type**\: list of  		 :py:class:`V4Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.V4Rpf>`
                    
                    .. attribute:: v6_rpf
                    
                    	IPv6 RPF neighbors
                    	**type**\: list of  		 :py:class:`V6Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.V6Rpf>`
                    
                    .. attribute:: mois
                    
                    	Mois
                    	**type**\: list of  		 :py:class:`Mois <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4, self).__init__()

                        self.yang_name = "rewrite-ipv4"
                        self.yang_parent_name = "rewrite-ipv4s"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi-key", ("fpi_key", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey)), ("rewrite-id", ("rewrite_id", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId))])
                        self._child_list_classes = OrderedDict([("associated-fpi", ("associated_fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi)), ("v4-rpf", ("v4_rpf", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.V4Rpf)), ("v6-rpf", ("v6_rpf", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.V6Rpf)), ("mois", ("mois", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois))])
                        self._leafs = OrderedDict([
                            ('rsi_table_name', YLeaf(YType.str, 'rsi-table-name')),
                            ('rsi_table_id', YLeaf(YType.str, 'rsi-table-id')),
                            ('prefix', YLeaf(YType.str, 'prefix')),
                            ('prefix_length', YLeaf(YType.int32, 'prefix-length')),
                            ('rewrite_version', YLeaf(YType.uint64, 'rewrite-version')),
                            ('bcdl_priority', YLeaf(YType.uint8, 'bcdl-priority')),
                            ('lsd_queue', YLeaf(YType.uint8, 'lsd-queue')),
                            ('rw_install_time', YLeaf(YType.uint64, 'rw-install-time')),
                            ('rw_install_age', YLeaf(YType.uint64, 'rw-install-age')),
                            ('rw_updated', YLeaf(YType.int32, 'rw-updated')),
                            ('priority_updated', YLeaf(YType.int32, 'priority-updated')),
                        ])
                        self.rsi_table_name = None
                        self.rsi_table_id = None
                        self.prefix = None
                        self.prefix_length = None
                        self.rewrite_version = None
                        self.bcdl_priority = None
                        self.lsd_queue = None
                        self.rw_install_time = None
                        self.rw_install_age = None
                        self.rw_updated = None
                        self.priority_updated = None

                        self.fpi_key = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey()
                        self.fpi_key.parent = self
                        self._children_name_map["fpi_key"] = "fpi-key"
                        self._children_yang_names.add("fpi-key")

                        self.rewrite_id = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId()
                        self.rewrite_id.parent = self
                        self._children_name_map["rewrite_id"] = "rewrite-id"
                        self._children_yang_names.add("rewrite-id")

                        self.associated_fpi = YList(self)
                        self.v4_rpf = YList(self)
                        self.v6_rpf = YList(self)
                        self.mois = YList(self)
                        self._segment_path = lambda: "rewrite-ipv4"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4, ['rsi_table_name', 'rsi_table_id', 'prefix', 'prefix_length', 'rewrite_version', 'bcdl_priority', 'lsd_queue', 'rw_install_time', 'rw_install_age', 'rw_updated', 'priority_updated'], name, value)


                    class FpiKey(Entity):
                        """
                        fpi key
                        
                        .. attribute:: fpi
                        
                        	FPI
                        	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi>`
                        
                        .. attribute:: application_owner
                        
                        	Application owner instance
                        	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.ApplicationOwner>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey, self).__init__()

                            self.yang_name = "fpi-key"
                            self.yang_parent_name = "rewrite-ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi))])
                            self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.ApplicationOwner))])
                            self._leafs = OrderedDict()

                            self.fpi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi()
                            self.fpi.parent = self
                            self._children_name_map["fpi"] = "fpi"
                            self._children_yang_names.add("fpi")

                            self.application_owner = YList(self)
                            self._segment_path = lambda: "fpi-key"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey, [], name, value)


                        class Fpi(Entity):
                            """
                            FPI
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData>`
                            
                            .. attribute:: te_data
                            
                            	te data
                            	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData>`
                            
                            .. attribute:: dmtc_ext_intf_data
                            
                            	dmtc ext intf data
                            	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData>`
                            
                            .. attribute:: fpi_type
                            
                            	FPIType
                            	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi, self).__init__()

                                self.yang_name = "fpi"
                                self.yang_parent_name = "fpi-key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData)), ("te-data", ("te_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                                ])
                                self.fpi_type = None

                                self.label_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData()
                                self.label_data.parent = self
                                self._children_name_map["label_data"] = "label-data"
                                self._children_yang_names.add("label-data")

                                self.te_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData()
                                self.te_data.parent = self
                                self._children_name_map["te_data"] = "te-data"
                                self._children_yang_names.add("te-data")

                                self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.dmtc_ext_intf_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData()
                                self.dmtc_ext_intf_data.parent = self
                                self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                                self._children_yang_names.add("dmtc-ext-intf-data")
                                self._segment_path = lambda: "fpi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi, ['fpi_type'], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: label
                                
                                	Label value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: elc
                                
                                	ELC
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label', YLeaf(YType.uint32, 'label')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('elc', YLeaf(YType.int32, 'elc')),
                                    ])
                                    self.label = None
                                    self.security_id = None
                                    self.elc = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                            class TeData(Entity):
                                """
                                te data
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: local_label
                                
                                	Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData, self).__init__()

                                    self.yang_name = "te-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.tunnel_interface = None
                                    self.local_label = None
                                    self._segment_path = lambda: "te-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sr_local_label
                                
                                	SR related Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                        ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.version = None
                                    self.sr_local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: router_flags
                                
                                	Route flags
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_len
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                        ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.router_flags = None
                                    self.prefix_len = None
                                    self.version = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: pwhe_list_id
                                
                                	Pseudowire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                    ])
                                    self.pwhe_list_id = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData, ['pwhe_list_id'], name, value)


                            class DmtcExtIntfData(Entity):
                                """
                                dmtc ext intf data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData, self).__init__()

                                    self.yang_name = "dmtc-ext-intf-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-ext-intf-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                        class ApplicationOwner(Entity):
                            """
                            Application owner instance
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.ApplicationOwner, self).__init__()

                                self.yang_name = "application-owner"
                                self.yang_parent_name = "fpi-key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-owner"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class RewriteId(Entity):
                        """
                        Rewrite ID
                        
                        .. attribute:: rewrite_id
                        
                        	Rewrite ID
                        	**type**\:  :py:class:`RewriteId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId, self).__init__()

                            self.yang_name = "rewrite-id"
                            self.yang_parent_name = "rewrite-ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("rewrite-id", ("rewrite_id", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.rewrite_id = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_()
                            self.rewrite_id.parent = self
                            self._children_name_map["rewrite_id"] = "rewrite-id"
                            self._children_yang_names.add("rewrite-id")
                            self._segment_path = lambda: "rewrite-id"


                        class RewriteId_(Entity):
                            """
                            Rewrite ID
                            
                            .. attribute:: label_context
                            
                            	Label context
                            	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext>`
                            
                            .. attribute:: local_label_rewrite
                            
                            	Local label rewrite information
                            	**type**\:  :py:class:`LocalLabelRewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite>`
                            
                            .. attribute:: rewrite_id_type
                            
                            	RewriteIDType
                            	**type**\:  :py:class:`MgmtLsdRwId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdRwId>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_, self).__init__()

                                self.yang_name = "rewrite-id"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext)), ("local-label-rewrite", ("local_label_rewrite", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rewrite_id_type', YLeaf(YType.enumeration, 'rewrite-id-type')),
                                ])
                                self.rewrite_id_type = None

                                self.label_context = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext()
                                self.label_context.parent = self
                                self._children_name_map["label_context"] = "label-context"
                                self._children_yang_names.add("label-context")

                                self.local_label_rewrite = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite()
                                self.local_label_rewrite.parent = self
                                self._children_name_map["local_label_rewrite"] = "local-label-rewrite"
                                self._children_yang_names.add("local-label-rewrite")
                                self._segment_path = lambda: "rewrite-id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_, ['rewrite_id_type'], name, value)


                            class LabelContext(Entity):
                                """
                                Label context
                                
                                .. attribute:: ipv4_data
                                
                                	IPv4 label context
                                	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data>`
                                
                                .. attribute:: ipv6_data
                                
                                	IPv6 label context
                                	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data>`
                                
                                .. attribute:: tev4_data
                                
                                	TEv4 label context
                                	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data>`
                                
                                .. attribute:: ipv4l3vpn_data
                                
                                	L3VPN IPv4 label context
                                	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData>`
                                
                                .. attribute:: ipv6l3vpn_data
                                
                                	L3VPN IPv6 label context
                                	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData>`
                                
                                .. attribute:: vrf_l3vpn_data
                                
                                	L3VPN VRF label context
                                	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData>`
                                
                                .. attribute:: cev4l3vpn_data
                                
                                	L3VPN CEv4 label context
                                	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData>`
                                
                                .. attribute:: cev6l3vpn_data
                                
                                	L3VPN CEv6 label context
                                	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData>`
                                
                                .. attribute:: pseudowire_data
                                
                                	Pseudowire label context
                                	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData>`
                                
                                .. attribute:: label_block_data
                                
                                	Label block context
                                	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData>`
                                
                                .. attribute:: ip_sub_data
                                
                                	IP Subscriber context
                                	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData>`
                                
                                .. attribute:: tev4p2mp_data
                                
                                	TEv4 P2MP context
                                	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData>`
                                
                                .. attribute:: mld_pv4_data
                                
                                	MLDPv4 LSM\-ID context
                                	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data>`
                                
                                .. attribute:: pseudowire_head_end_data
                                
                                	Pseudowire Head\-end label context
                                	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData>`
                                
                                .. attribute:: tp_data
                                
                                	TP context
                                	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData>`
                                
                                .. attribute:: generic_routing_encapsulation
                                
                                	Generic routing encapsulation context
                                	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation>`
                                
                                .. attribute:: ipv6_generic_routing_encapsulation
                                
                                	Generic routing encapsulation context
                                	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation>`
                                
                                .. attribute:: evpn_data
                                
                                	EVPN context
                                	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData>`
                                
                                .. attribute:: ipv4blb_data
                                
                                	BFD BLB label context
                                	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData>`
                                
                                .. attribute:: ipv6blb_data
                                
                                	BFD BLB label context
                                	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData>`
                                
                                .. attribute:: pi_mi_pmsi_data
                                
                                	PIM I\-PMSI label conext
                                	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData>`
                                
                                .. attribute:: pi_ms_pmsi_data
                                
                                	PIM S\-PMSI label conext
                                	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData>`
                                
                                .. attribute:: next_hop_set_l3vpn
                                
                                	L3VPN NH SET label context
                                	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn>`
                                
                                .. attribute:: sr_prefix_segment
                                
                                	SR Prefix Segment context
                                	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment>`
                                
                                .. attribute:: sr_adj_segment_ipv4
                                
                                	SR Adj Segment ipv4 context
                                	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4>`
                                
                                .. attribute:: sr_adj_segment_ipv6
                                
                                	SR Adj Segment ipv6 context
                                	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6>`
                                
                                .. attribute:: label_block_srgb_data
                                
                                	Label block SRGB context
                                	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData>`
                                
                                .. attribute:: te_binding
                                
                                	MPLS TE tunnel binding context
                                	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding>`
                                
                                .. attribute:: label_block_srlb_data
                                
                                	Label block SRLB context
                                	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData>`
                                
                                .. attribute:: label_context_type
                                
                                	LabelContextType
                                	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext, self).__init__()

                                    self.yang_name = "label-context"
                                    self.yang_parent_name = "rewrite-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                                    ])
                                    self.label_context_type = None

                                    self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data()
                                    self.ipv4_data.parent = self
                                    self._children_name_map["ipv4_data"] = "ipv4-data"
                                    self._children_yang_names.add("ipv4-data")

                                    self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data()
                                    self.ipv6_data.parent = self
                                    self._children_name_map["ipv6_data"] = "ipv6-data"
                                    self._children_yang_names.add("ipv6-data")

                                    self.tev4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data()
                                    self.tev4_data.parent = self
                                    self._children_name_map["tev4_data"] = "tev4-data"
                                    self._children_yang_names.add("tev4-data")

                                    self.ipv4l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData()
                                    self.ipv4l3vpn_data.parent = self
                                    self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                                    self._children_yang_names.add("ipv4l3vpn-data")

                                    self.ipv6l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData()
                                    self.ipv6l3vpn_data.parent = self
                                    self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                                    self._children_yang_names.add("ipv6l3vpn-data")

                                    self.vrf_l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData()
                                    self.vrf_l3vpn_data.parent = self
                                    self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                                    self._children_yang_names.add("vrf-l3vpn-data")

                                    self.cev4l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData()
                                    self.cev4l3vpn_data.parent = self
                                    self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                                    self._children_yang_names.add("cev4l3vpn-data")

                                    self.cev6l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData()
                                    self.cev6l3vpn_data.parent = self
                                    self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                                    self._children_yang_names.add("cev6l3vpn-data")

                                    self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData()
                                    self.pseudowire_data.parent = self
                                    self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                    self._children_yang_names.add("pseudowire-data")

                                    self.label_block_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData()
                                    self.label_block_data.parent = self
                                    self._children_name_map["label_block_data"] = "label-block-data"
                                    self._children_yang_names.add("label-block-data")

                                    self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData()
                                    self.ip_sub_data.parent = self
                                    self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                    self._children_yang_names.add("ip-sub-data")

                                    self.tev4p2mp_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData()
                                    self.tev4p2mp_data.parent = self
                                    self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                                    self._children_yang_names.add("tev4p2mp-data")

                                    self.mld_pv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data()
                                    self.mld_pv4_data.parent = self
                                    self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                                    self._children_yang_names.add("mld-pv4-data")

                                    self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData()
                                    self.pseudowire_head_end_data.parent = self
                                    self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                    self._children_yang_names.add("pseudowire-head-end-data")

                                    self.tp_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData()
                                    self.tp_data.parent = self
                                    self._children_name_map["tp_data"] = "tp-data"
                                    self._children_yang_names.add("tp-data")

                                    self.generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation()
                                    self.generic_routing_encapsulation.parent = self
                                    self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                                    self._children_yang_names.add("generic-routing-encapsulation")

                                    self.ipv6_generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation()
                                    self.ipv6_generic_routing_encapsulation.parent = self
                                    self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                                    self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                                    self.evpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData()
                                    self.evpn_data.parent = self
                                    self._children_name_map["evpn_data"] = "evpn-data"
                                    self._children_yang_names.add("evpn-data")

                                    self.ipv4blb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData()
                                    self.ipv4blb_data.parent = self
                                    self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                                    self._children_yang_names.add("ipv4blb-data")

                                    self.ipv6blb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData()
                                    self.ipv6blb_data.parent = self
                                    self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                                    self._children_yang_names.add("ipv6blb-data")

                                    self.pi_mi_pmsi_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData()
                                    self.pi_mi_pmsi_data.parent = self
                                    self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                                    self._children_yang_names.add("pi-mi-pmsi-data")

                                    self.pi_ms_pmsi_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData()
                                    self.pi_ms_pmsi_data.parent = self
                                    self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                                    self._children_yang_names.add("pi-ms-pmsi-data")

                                    self.next_hop_set_l3vpn = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn()
                                    self.next_hop_set_l3vpn.parent = self
                                    self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                                    self._children_yang_names.add("next-hop-set-l3vpn")

                                    self.sr_prefix_segment = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment()
                                    self.sr_prefix_segment.parent = self
                                    self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                                    self._children_yang_names.add("sr-prefix-segment")

                                    self.sr_adj_segment_ipv4 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4()
                                    self.sr_adj_segment_ipv4.parent = self
                                    self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                                    self._children_yang_names.add("sr-adj-segment-ipv4")

                                    self.sr_adj_segment_ipv6 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6()
                                    self.sr_adj_segment_ipv6.parent = self
                                    self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                                    self._children_yang_names.add("sr-adj-segment-ipv6")

                                    self.label_block_srgb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData()
                                    self.label_block_srgb_data.parent = self
                                    self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                                    self._children_yang_names.add("label-block-srgb-data")

                                    self.te_binding = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding()
                                    self.te_binding.parent = self
                                    self._children_name_map["te_binding"] = "te-binding"
                                    self._children_yang_names.add("te-binding")

                                    self.label_block_srlb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData()
                                    self.label_block_srlb_data.parent = self
                                    self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                                    self._children_yang_names.add("label-block-srlb-data")
                                    self._segment_path = lambda: "label-context"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext, ['label_context_type'], name, value)


                                class Ipv4Data(Entity):
                                    """
                                    IPv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	IPv4 prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data, self).__init__()

                                        self.yang_name = "ipv4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                        ])
                                        self.table_id = None
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.security_id = None
                                        self.vrf_name = None
                                        self._segment_path = lambda: "ipv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                                class Ipv6Data(Entity):
                                    """
                                    IPv6 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix
                                    
                                    	Prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data, self).__init__()

                                        self.yang_name = "ipv6-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                        ])
                                        self.table_id = None
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.security_id = None
                                        self.vrf_name = None
                                        self._segment_path = lambda: "ipv6-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                                class Tev4Data(Entity):
                                    """
                                    TEv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_source
                                    
                                    	Tunnel source
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: tunnel_dest
                                    
                                    	Tunnel destination
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id_extension
                                    
                                    	Extended tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_lsp_id
                                    
                                    	Tunnel LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: is_srte
                                    
                                    	Is this an SRTE head tunnel
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data, self).__init__()

                                        self.yang_name = "tev4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                            ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                            ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                            ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                            ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                            ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                        ])
                                        self.table_id = None
                                        self.tunnel_source = None
                                        self.tunnel_dest = None
                                        self.tunnel_id = None
                                        self.tunnel_id_extension = None
                                        self.tunnel_lsp_id = None
                                        self.is_srte = None
                                        self._segment_path = lambda: "tev4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                                class Ipv4L3VpnData(Entity):
                                    """
                                    L3VPN IPv4 label context
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: route_distinguisher
                                    
                                    	Route distinguisher
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, self).__init__()

                                        self.yang_name = "ipv4l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.route_distinguisher = None
                                        self._segment_path = lambda: "ipv4l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                                class Ipv6L3VpnData(Entity):
                                    """
                                    L3VPN IPv6 label context
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv6 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: route_distinguisher
                                    
                                    	Route distinguisher
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, self).__init__()

                                        self.yang_name = "ipv6l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.route_distinguisher = None
                                        self._segment_path = lambda: "ipv6l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                                class VrfL3VpnData(Entity):
                                    """
                                    L3VPN VRF label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, self).__init__()

                                        self.yang_name = "vrf-l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.security_id = None
                                        self._segment_path = lambda: "vrf-l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                                class Cev4L3VpnData(Entity):
                                    """
                                    L3VPN CEv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, self).__init__()

                                        self.yang_name = "cev4l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.ipv4_next_hop = None
                                        self.security_id = None
                                        self._segment_path = lambda: "cev4l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                                class Cev6L3VpnData(Entity):
                                    """
                                    L3VPN CEv6 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, self).__init__()

                                        self.yang_name = "cev6l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.ipv6_next_hop = None
                                        self.security_id = None
                                        self._segment_path = lambda: "cev6l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                                class PseudowireData(Entity):
                                    """
                                    Pseudowire label context
                                    
                                    .. attribute:: prefix
                                    
                                    	Address prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: pseudowire_id
                                    
                                    	Pseudo\-wire ID
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: remote_l2_router_id
                                    
                                    	Remote L2 Router ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: subinterface
                                    
                                    	Subinterface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData, self).__init__()

                                        self.yang_name = "pseudowire-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                            ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                            ('subinterface', YLeaf(YType.str, 'subinterface')),
                                        ])
                                        self.prefix = None
                                        self.pseudowire_id = None
                                        self.remote_l2_router_id = None
                                        self.subinterface = None
                                        self._segment_path = lambda: "pseudowire-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                                class LabelBlockData(Entity):
                                    """
                                    Label block context
                                    
                                    .. attribute:: service
                                    
                                    	Service
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: vpn_id
                                    
                                    	VPN ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: edge_id
                                    
                                    	Edge ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData, self).__init__()

                                        self.yang_name = "label-block-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('service', YLeaf(YType.uint8, 'service')),
                                            ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                            ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.service = None
                                        self.vpn_id = None
                                        self.edge_id = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                                class IpSubData(Entity):
                                    """
                                    IP Subscriber context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table Id
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: parent_interface
                                    
                                    	Parent interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData, self).__init__()

                                        self.yang_name = "ip-sub-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                        ])
                                        self.table_id = None
                                        self.parent_interface = None
                                        self._segment_path = lambda: "ip-sub-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData, ['table_id', 'parent_interface'], name, value)


                                class Tev4P2MpData(Entity):
                                    """
                                    TEv4 P2MP context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_source
                                    
                                    	Tunnel source
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: p2mp_id
                                    
                                    	Point to multipoint ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id_extension
                                    
                                    	Tunnel ID extension
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_lsp_id
                                    
                                    	Tunnel LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: previous_hop
                                    
                                    	Previous hop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, self).__init__()

                                        self.yang_name = "tev4p2mp-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                            ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                            ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                            ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                            ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                            ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                        ])
                                        self.table_id = None
                                        self.tunnel_source = None
                                        self.p2mp_id = None
                                        self.tunnel_id = None
                                        self.tunnel_id_extension = None
                                        self.tunnel_lsp_id = None
                                        self.previous_hop = None
                                        self._segment_path = lambda: "tev4p2mp-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                                class MldPv4Data(Entity):
                                    """
                                    MLDPv4 LSM\-ID context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	LSM ID Type
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: lsm_id
                                    
                                    	LSM ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: peer_lsrid
                                    
                                    	Peer LSR Id
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: peer_label_space_id
                                    
                                    	Peer Label Space Id
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data, self).__init__()

                                        self.yang_name = "mld-pv4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('type', YLeaf(YType.uint16, 'type')),
                                            ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                            ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                            ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                        ])
                                        self.table_id = None
                                        self.type = None
                                        self.lsm_id = None
                                        self.peer_lsrid = None
                                        self.peer_label_space_id = None
                                        self._segment_path = lambda: "mld-pv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                                class PseudowireHeadEndData(Entity):
                                    """
                                    Pseudowire Head\-end label context
                                    
                                    .. attribute:: pwhe_intf
                                    
                                    	Pseudo\-wire Head\-end interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, self).__init__()

                                        self.yang_name = "pseudowire-head-end-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                        ])
                                        self.pwhe_intf = None
                                        self._segment_path = lambda: "pseudowire-head-end-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                                class TpData(Entity):
                                    """
                                    TP context
                                    
                                    .. attribute:: source_global_id
                                    
                                    	TP source global ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: source_node_id
                                    
                                    	TP source node ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: dest_global_id
                                    
                                    	TP destination global ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: dest_node_id
                                    
                                    	TP destination node ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: source_tunnel_id
                                    
                                    	TP source tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: dest_tunnel_id
                                    
                                    	TP destination tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: lsp_id
                                    
                                    	TP LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData, self).__init__()

                                        self.yang_name = "tp-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                            ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                            ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                            ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                            ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                            ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                            ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                        ])
                                        self.source_global_id = None
                                        self.source_node_id = None
                                        self.dest_global_id = None
                                        self.dest_node_id = None
                                        self.source_tunnel_id = None
                                        self.dest_tunnel_id = None
                                        self.lsp_id = None
                                        self._segment_path = lambda: "tp-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                                class GenericRoutingEncapsulation(Entity):
                                    """
                                    Generic routing encapsulation context
                                    
                                    .. attribute:: gre_interface
                                    
                                    	Generic routing encapsulation interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, self).__init__()

                                        self.yang_name = "generic-routing-encapsulation"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                        ])
                                        self.gre_interface = None
                                        self._segment_path = lambda: "generic-routing-encapsulation"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                                class Ipv6GenericRoutingEncapsulation(Entity):
                                    """
                                    Generic routing encapsulation context
                                    
                                    .. attribute:: greipv6_interface
                                    
                                    	Generic routing encapsulation IPv6 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, self).__init__()

                                        self.yang_name = "ipv6-generic-routing-encapsulation"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                        ])
                                        self.greipv6_interface = None
                                        self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                                class EvpnData(Entity):
                                    """
                                    EVPN context
                                    
                                    .. attribute:: evpn_id
                                    
                                    	EVPN ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: evpn_tag
                                    
                                    	EVPN TAG
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ethernet_segment
                                    
                                    	Ethernet Segment ID
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData, self).__init__()

                                        self.yang_name = "evpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                            ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                            ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                        ])
                                        self.evpn_id = None
                                        self.evpn_tag = None
                                        self.ethernet_segment = None
                                        self._segment_path = lambda: "evpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                                class Ipv4BlbData(Entity):
                                    """
                                    BFD BLB label context
                                    
                                    .. attribute:: blb_intf
                                    
                                    	BFD BLB interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, self).__init__()

                                        self.yang_name = "ipv4blb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                        ])
                                        self.blb_intf = None
                                        self.prefix = None
                                        self._segment_path = lambda: "ipv4blb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                                class Ipv6BlbData(Entity):
                                    """
                                    BFD BLB label context
                                    
                                    .. attribute:: blb_intf
                                    
                                    	BFD BLB interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv6 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, self).__init__()

                                        self.yang_name = "ipv6blb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                        ])
                                        self.blb_intf = None
                                        self.prefix = None
                                        self._segment_path = lambda: "ipv6blb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                                class PiMiPmsiData(Entity):
                                    """
                                    PIM I\-PMSI label conext
                                    
                                    .. attribute:: vrf_id
                                    
                                    	VRF ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: head
                                    
                                    	Head
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: v6
                                    
                                    	PIM6
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, self).__init__()

                                        self.yang_name = "pi-mi-pmsi-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                            ('head', YLeaf(YType.int32, 'head')),
                                            ('v6', YLeaf(YType.int32, 'v6')),
                                        ])
                                        self.vrf_id = None
                                        self.head = None
                                        self.v6 = None
                                        self._segment_path = lambda: "pi-mi-pmsi-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                                class PiMsPmsiData(Entity):
                                    """
                                    PIM S\-PMSI label conext
                                    
                                    .. attribute:: vrf_id
                                    
                                    	VRF ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: source
                                    
                                    	Originating Router
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: head
                                    
                                    	Head
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: v6
                                    
                                    	PIM6
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: hli
                                    
                                    	Head LSM\-ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: seg
                                    
                                    	Segmented Multicast
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, self).__init__()

                                        self.yang_name = "pi-ms-pmsi-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                            ('source', YLeaf(YType.str, 'source')),
                                            ('head', YLeaf(YType.int32, 'head')),
                                            ('v6', YLeaf(YType.int32, 'v6')),
                                            ('hli', YLeaf(YType.uint32, 'hli')),
                                            ('seg', YLeaf(YType.int32, 'seg')),
                                        ])
                                        self.vrf_id = None
                                        self.source = None
                                        self.head = None
                                        self.v6 = None
                                        self.hli = None
                                        self.seg = None
                                        self._segment_path = lambda: "pi-ms-pmsi-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                                class NextHopSetL3Vpn(Entity):
                                    """
                                    L3VPN NH SET label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: next_hop_set_id
                                    
                                    	Next Hop Set ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, self).__init__()

                                        self.yang_name = "next-hop-set-l3vpn"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                        ])
                                        self.table_id = None
                                        self.next_hop_set_id = None
                                        self._segment_path = lambda: "next-hop-set-l3vpn"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                                class SrPrefixSegment(Entity):
                                    """
                                    SR Prefix Segment context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: segment_id
                                    
                                    	Prefix Segment ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, self).__init__()

                                        self.yang_name = "sr-prefix-segment"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                        ])
                                        self.table_id = None
                                        self.segment_id = None
                                        self._segment_path = lambda: "sr-prefix-segment"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                                class SrAdjSegmentIpv4(Entity):
                                    """
                                    SR Adj Segment ipv4 context
                                    
                                    .. attribute:: index
                                    
                                    	Adjacency index
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	Adjacency type
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: intf
                                    
                                    	Adjacency interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: addr
                                    
                                    	Adjacency nexthop IPv4 address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, self).__init__()

                                        self.yang_name = "sr-adj-segment-ipv4"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('index', YLeaf(YType.uint32, 'index')),
                                            ('type', YLeaf(YType.uint32, 'type')),
                                            ('intf', YLeaf(YType.str, 'intf')),
                                            ('addr', YLeaf(YType.str, 'addr')),
                                        ])
                                        self.index = None
                                        self.type = None
                                        self.intf = None
                                        self.addr = None
                                        self._segment_path = lambda: "sr-adj-segment-ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                                class SrAdjSegmentIpv6(Entity):
                                    """
                                    SR Adj Segment ipv6 context
                                    
                                    .. attribute:: index
                                    
                                    	Adjacency index
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	Adjacency type
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: intf
                                    
                                    	Adjacency interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: addr
                                    
                                    	Adjacency nexthop IPv6 address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, self).__init__()

                                        self.yang_name = "sr-adj-segment-ipv6"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('index', YLeaf(YType.uint32, 'index')),
                                            ('type', YLeaf(YType.uint32, 'type')),
                                            ('intf', YLeaf(YType.str, 'intf')),
                                            ('addr', YLeaf(YType.str, 'addr')),
                                        ])
                                        self.index = None
                                        self.type = None
                                        self.intf = None
                                        self.addr = None
                                        self._segment_path = lambda: "sr-adj-segment-ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                                class LabelBlockSrgbData(Entity):
                                    """
                                    Label block SRGB context
                                    
                                    .. attribute:: start_label
                                    
                                    	Start Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, self).__init__()

                                        self.yang_name = "label-block-srgb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('start_label', YLeaf(YType.uint32, 'start-label')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.start_label = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-srgb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                                class TeBinding(Entity):
                                    """
                                    MPLS TE tunnel binding context
                                    
                                    .. attribute:: te_identifier
                                    
                                    	MPLS Traffic Engineering Tunnel or Group ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_type
                                    
                                    	Type of identifier for the binding
                                    	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding, self).__init__()

                                        self.yang_name = "te-binding"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                            ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                        ])
                                        self.te_identifier = None
                                        self.te_type = None
                                        self._segment_path = lambda: "te-binding"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding, ['te_identifier', 'te_type'], name, value)


                                class LabelBlockSrlbData(Entity):
                                    """
                                    Label block SRLB context
                                    
                                    .. attribute:: start_label
                                    
                                    	Start Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, self).__init__()

                                        self.yang_name = "label-block-srlb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('start_label', YLeaf(YType.uint32, 'start-label')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.start_label = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-srlb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                            class LocalLabelRewrite(Entity):
                                """
                                Local label rewrite information
                                
                                .. attribute:: label_data
                                
                                	label data
                                	**type**\: list of  		 :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite.LabelData>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite, self).__init__()

                                    self.yang_name = "local-label-rewrite"
                                    self.yang_parent_name = "rewrite-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite.LabelData))])
                                    self._leafs = OrderedDict()

                                    self.label_data = YList(self)
                                    self._segment_path = lambda: "local-label-rewrite"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite, [], name, value)


                                class LabelData(Entity):
                                    """
                                    label data
                                    
                                    .. attribute:: entry
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, self).__init__()

                                        self.yang_name = "label-data"
                                        self.yang_parent_name = "local-label-rewrite"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                        ])
                                        self.entry = None
                                        self._segment_path = lambda: "label-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, ['entry'], name, value)


                    class AssociatedFpi(Entity):
                        """
                        Associated FPI
                        
                        .. attribute:: fpi
                        
                        	FPI
                        	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi>`
                        
                        .. attribute:: application_owner
                        
                        	Application owner instance
                        	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.ApplicationOwner>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi, self).__init__()

                            self.yang_name = "associated-fpi"
                            self.yang_parent_name = "rewrite-ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi))])
                            self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.ApplicationOwner))])
                            self._leafs = OrderedDict()

                            self.fpi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi()
                            self.fpi.parent = self
                            self._children_name_map["fpi"] = "fpi"
                            self._children_yang_names.add("fpi")

                            self.application_owner = YList(self)
                            self._segment_path = lambda: "associated-fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi, [], name, value)


                        class Fpi(Entity):
                            """
                            FPI
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData>`
                            
                            .. attribute:: te_data
                            
                            	te data
                            	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData>`
                            
                            .. attribute:: dmtc_ext_intf_data
                            
                            	dmtc ext intf data
                            	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData>`
                            
                            .. attribute:: fpi_type
                            
                            	FPIType
                            	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi, self).__init__()

                                self.yang_name = "fpi"
                                self.yang_parent_name = "associated-fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData)), ("te-data", ("te_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                                ])
                                self.fpi_type = None

                                self.label_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData()
                                self.label_data.parent = self
                                self._children_name_map["label_data"] = "label-data"
                                self._children_yang_names.add("label-data")

                                self.te_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData()
                                self.te_data.parent = self
                                self._children_name_map["te_data"] = "te-data"
                                self._children_yang_names.add("te-data")

                                self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.dmtc_ext_intf_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData()
                                self.dmtc_ext_intf_data.parent = self
                                self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                                self._children_yang_names.add("dmtc-ext-intf-data")
                                self._segment_path = lambda: "fpi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi, ['fpi_type'], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: label
                                
                                	Label value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: elc
                                
                                	ELC
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label', YLeaf(YType.uint32, 'label')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('elc', YLeaf(YType.int32, 'elc')),
                                    ])
                                    self.label = None
                                    self.security_id = None
                                    self.elc = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                            class TeData(Entity):
                                """
                                te data
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: local_label
                                
                                	Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData, self).__init__()

                                    self.yang_name = "te-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.tunnel_interface = None
                                    self.local_label = None
                                    self._segment_path = lambda: "te-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sr_local_label
                                
                                	SR related Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                        ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.version = None
                                    self.sr_local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: router_flags
                                
                                	Route flags
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_len
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                        ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.router_flags = None
                                    self.prefix_len = None
                                    self.version = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: pwhe_list_id
                                
                                	Pseudowire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                    ])
                                    self.pwhe_list_id = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData, ['pwhe_list_id'], name, value)


                            class DmtcExtIntfData(Entity):
                                """
                                dmtc ext intf data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData, self).__init__()

                                    self.yang_name = "dmtc-ext-intf-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-ext-intf-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                        class ApplicationOwner(Entity):
                            """
                            Application owner instance
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.ApplicationOwner, self).__init__()

                                self.yang_name = "application-owner"
                                self.yang_parent_name = "associated-fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-owner"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class V4Rpf(Entity):
                        """
                        IPv4 RPF neighbors
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: v4_rpf_neighbor
                        
                        	V4 RPF Neighbor
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.V4Rpf, self).__init__()

                            self.yang_name = "v4-rpf"
                            self.yang_parent_name = "rewrite-ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('v4_rpf_neighbor', YLeaf(YType.str, 'v4-rpf-neighbor')),
                            ])
                            self.table_id = None
                            self.v4_rpf_neighbor = None
                            self._segment_path = lambda: "v4-rpf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.V4Rpf, ['table_id', 'v4_rpf_neighbor'], name, value)


                    class V6Rpf(Entity):
                        """
                        IPv6 RPF neighbors
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: v6_rpf_neighbor
                        
                        	V6 RPF Neighbor
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.V6Rpf, self).__init__()

                            self.yang_name = "v6-rpf"
                            self.yang_parent_name = "rewrite-ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('v6_rpf_neighbor', YLeaf(YType.str, 'v6-rpf-neighbor')),
                            ])
                            self.table_id = None
                            self.v6_rpf_neighbor = None
                            self._segment_path = lambda: "v6-rpf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.V6Rpf, ['table_id', 'v6_rpf_neighbor'], name, value)


                    class Mois(Entity):
                        """
                        Mois
                        
                        .. attribute:: application_resource
                        
                        	Application state
                        	**type**\:  :py:class:`ApplicationResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource>`
                        
                        .. attribute:: moi_array
                        
                        	moi array
                        	**type**\: list of  		 :py:class:`MoiArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois, self).__init__()

                            self.yang_name = "mois"
                            self.yang_parent_name = "rewrite-ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("application-resource", ("application_resource", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource))])
                            self._child_list_classes = OrderedDict([("moi-array", ("moi_array", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray))])
                            self._leafs = OrderedDict()

                            self.application_resource = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource()
                            self.application_resource.parent = self
                            self._children_name_map["application_resource"] = "application-resource"
                            self._children_yang_names.add("application-resource")

                            self.moi_array = YList(self)
                            self._segment_path = lambda: "mois"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois, [], name, value)


                        class ApplicationResource(Entity):
                            """
                            Application state
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource, self).__init__()

                                self.yang_name = "application-resource"
                                self.yang_parent_name = "mois"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-resource"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                        class MoiArray(Entity):
                            """
                            moi array
                            
                            .. attribute:: moi
                            
                            	Moi
                            	**type**\:  :py:class:`Moi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray, self).__init__()

                                self.yang_name = "moi-array"
                                self.yang_parent_name = "mois"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("moi", ("moi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.moi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi()
                                self.moi.parent = self
                                self._children_name_map["moi"] = "moi"
                                self._children_yang_names.add("moi")
                                self._segment_path = lambda: "moi-array"


                            class Moi(Entity):
                                """
                                Moi
                                
                                .. attribute:: pop_and_lookup_ipv4
                                
                                	pop and lookup ipv4
                                	**type**\:  :py:class:`PopAndLookupIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4>`
                                
                                .. attribute:: pop_and_lookup_tp
                                
                                	pop and lookup tp
                                	**type**\:  :py:class:`PopAndLookupTp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp>`
                                
                                .. attribute:: pop_and_lookup_ipv6
                                
                                	pop and lookup ipv6
                                	**type**\:  :py:class:`PopAndLookupIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6>`
                                
                                .. attribute:: ipv4_data
                                
                                	ipv4 data
                                	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data>`
                                
                                .. attribute:: ipv6_data
                                
                                	ipv6 data
                                	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data>`
                                
                                .. attribute:: tev4_data
                                
                                	tev4 data
                                	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data>`
                                
                                .. attribute:: pseudowire_data
                                
                                	pseudowire data
                                	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData>`
                                
                                .. attribute:: ip_sub_data
                                
                                	ip sub data
                                	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData>`
                                
                                .. attribute:: pseudowire_head_end_data
                                
                                	pseudowire head end data
                                	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData>`
                                
                                .. attribute:: pw_list_data
                                
                                	pw list data
                                	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData>`
                                
                                .. attribute:: stackv4_data
                                
                                	stackv4 data
                                	**type**\:  :py:class:`Stackv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data>`
                                
                                .. attribute:: stackv6_data
                                
                                	stackv6 data
                                	**type**\:  :py:class:`Stackv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data>`
                                
                                .. attribute:: te_head_data
                                
                                	te head data
                                	**type**\:  :py:class:`TeHeadData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData>`
                                
                                .. attribute:: dmtc_data
                                
                                	dmtc data
                                	**type**\:  :py:class:`DmtcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData>`
                                
                                .. attribute:: moi_type
                                
                                	MoiType
                                	**type**\:  :py:class:`MgmtLsdMoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdMoi>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi, self).__init__()

                                    self.yang_name = "moi"
                                    self.yang_parent_name = "moi-array"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("pop-and-lookup-ipv4", ("pop_and_lookup_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4)), ("pop-and-lookup-tp", ("pop_and_lookup_tp", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp)), ("pop-and-lookup-ipv6", ("pop_and_lookup_ipv6", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData)), ("stackv4-data", ("stackv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data)), ("stackv6-data", ("stackv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data)), ("te-head-data", ("te_head_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData)), ("dmtc-data", ("dmtc_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('moi_type', YLeaf(YType.enumeration, 'moi-type')),
                                    ])
                                    self.moi_type = None

                                    self.pop_and_lookup_ipv4 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4()
                                    self.pop_and_lookup_ipv4.parent = self
                                    self._children_name_map["pop_and_lookup_ipv4"] = "pop-and-lookup-ipv4"
                                    self._children_yang_names.add("pop-and-lookup-ipv4")

                                    self.pop_and_lookup_tp = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp()
                                    self.pop_and_lookup_tp.parent = self
                                    self._children_name_map["pop_and_lookup_tp"] = "pop-and-lookup-tp"
                                    self._children_yang_names.add("pop-and-lookup-tp")

                                    self.pop_and_lookup_ipv6 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6()
                                    self.pop_and_lookup_ipv6.parent = self
                                    self._children_name_map["pop_and_lookup_ipv6"] = "pop-and-lookup-ipv6"
                                    self._children_yang_names.add("pop-and-lookup-ipv6")

                                    self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data()
                                    self.ipv4_data.parent = self
                                    self._children_name_map["ipv4_data"] = "ipv4-data"
                                    self._children_yang_names.add("ipv4-data")

                                    self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data()
                                    self.ipv6_data.parent = self
                                    self._children_name_map["ipv6_data"] = "ipv6-data"
                                    self._children_yang_names.add("ipv6-data")

                                    self.tev4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data()
                                    self.tev4_data.parent = self
                                    self._children_name_map["tev4_data"] = "tev4-data"
                                    self._children_yang_names.add("tev4-data")

                                    self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData()
                                    self.pseudowire_data.parent = self
                                    self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                    self._children_yang_names.add("pseudowire-data")

                                    self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData()
                                    self.ip_sub_data.parent = self
                                    self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                    self._children_yang_names.add("ip-sub-data")

                                    self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData()
                                    self.pseudowire_head_end_data.parent = self
                                    self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                    self._children_yang_names.add("pseudowire-head-end-data")

                                    self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData()
                                    self.pw_list_data.parent = self
                                    self._children_name_map["pw_list_data"] = "pw-list-data"
                                    self._children_yang_names.add("pw-list-data")

                                    self.stackv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data()
                                    self.stackv4_data.parent = self
                                    self._children_name_map["stackv4_data"] = "stackv4-data"
                                    self._children_yang_names.add("stackv4-data")

                                    self.stackv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data()
                                    self.stackv6_data.parent = self
                                    self._children_name_map["stackv6_data"] = "stackv6-data"
                                    self._children_yang_names.add("stackv6-data")

                                    self.te_head_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData()
                                    self.te_head_data.parent = self
                                    self._children_name_map["te_head_data"] = "te-head-data"
                                    self._children_yang_names.add("te-head-data")

                                    self.dmtc_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData()
                                    self.dmtc_data.parent = self
                                    self._children_name_map["dmtc_data"] = "dmtc-data"
                                    self._children_yang_names.add("dmtc-data")
                                    self._segment_path = lambda: "moi"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi, ['moi_type'], name, value)


                                class PopAndLookupIpv4(Entity):
                                    """
                                    pop and lookup ipv4
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4, self).__init__()

                                        self.yang_name = "pop-and-lookup-ipv4"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pop-and-lookup-ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                                class PopAndLookupTp(Entity):
                                    """
                                    pop and lookup tp
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp, self).__init__()

                                        self.yang_name = "pop-and-lookup-tp"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_label = None
                                        self._segment_path = lambda: "pop-and-lookup-tp"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp, ['table_id', 'table_name', 'path_flags_decode', 'out_label'], name, value)


                                class PopAndLookupIpv6(Entity):
                                    """
                                    pop and lookup ipv6
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6, self).__init__()

                                        self.yang_name = "pop-and-lookup-ipv6"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pop-and-lookup-ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                                class Ipv4Data(Entity):
                                    """
                                    ipv4 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: load_metric
                                    
                                    	Routing path's load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_label
                                    
                                    	TE backup path local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data, self).__init__()

                                        self.yang_name = "ipv4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('local_label', YLeaf(YType.uint32, 'local-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_interface_parent = None
                                        self.ipv4_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.load_metric = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.tunnel_id = None
                                        self.next_hop_id = None
                                        self.local_label = None
                                        self._segment_path = lambda: "ipv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                class Ipv6Data(Entity):
                                    """
                                    ipv6 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data, self).__init__()

                                        self.yang_name = "ipv6-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv6_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.next_hop_id = None
                                        self.out_interface_parent = None
                                        self._segment_path = lambda: "ipv6-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                class Tev4Data(Entity):
                                    """
                                    tev4 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_ipv4_next_hop
                                    
                                    	Backup IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: merge_point_label
                                    
                                    	Merge point label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: backup_local_label
                                    
                                    	Backup local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_interface
                                    
                                    	Tunnel interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: tunnel_weight
                                    
                                    	Tunnel weight
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: data_out_parent_interface
                                    
                                    	Outgoing data parent interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: tunnel_class
                                    
                                    	Tunnel class
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data, self).__init__()

                                        self.yang_name = "tev4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                            ('backup_ipv4_next_hop', YLeaf(YType.str, 'backup-ipv4-next-hop')),
                                            ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                                            ('backup_local_label', YLeaf(YType.uint32, 'backup-local-label')),
                                            ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                            ('tunnel_weight', YLeaf(YType.uint32, 'tunnel-weight')),
                                            ('data_out_parent_interface', YLeaf(YType.str, 'data-out-parent-interface')),
                                            ('tunnel_class', YLeaf(YType.uint32, 'tunnel-class')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv4_next_hop = None
                                        self.backup_interface = None
                                        self.backup_ipv4_next_hop = None
                                        self.merge_point_label = None
                                        self.backup_local_label = None
                                        self.tunnel_interface = None
                                        self.tunnel_weight = None
                                        self.data_out_parent_interface = None
                                        self.tunnel_class = None
                                        self._segment_path = lambda: "tev4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv4_next_hop', 'backup_interface', 'backup_ipv4_next_hop', 'merge_point_label', 'backup_local_label', 'tunnel_interface', 'tunnel_weight', 'data_out_parent_interface', 'tunnel_class'], name, value)


                                class PseudowireData(Entity):
                                    """
                                    pseudowire data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: cross_connect_id
                                    
                                    	Cross\-connect ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: pseuodo_wire_connect_id
                                    
                                    	PseudoWire Cross\-connect ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: bridge_id
                                    
                                    	Bridge ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: split_horizon_id
                                    
                                    	Split horizon group ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData, self).__init__()

                                        self.yang_name = "pseudowire-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('cross_connect_id', YLeaf(YType.uint32, 'cross-connect-id')),
                                            ('pseuodo_wire_connect_id', YLeaf(YType.uint32, 'pseuodo-wire-connect-id')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('bridge_id', YLeaf(YType.uint32, 'bridge-id')),
                                            ('split_horizon_id', YLeaf(YType.uint32, 'split-horizon-id')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.cross_connect_id = None
                                        self.pseuodo_wire_connect_id = None
                                        self.ipv4_next_hop = None
                                        self.bridge_id = None
                                        self.split_horizon_id = None
                                        self._segment_path = lambda: "pseudowire-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'cross_connect_id', 'pseuodo_wire_connect_id', 'ipv4_next_hop', 'bridge_id', 'split_horizon_id'], name, value)


                                class IpSubData(Entity):
                                    """
                                    ip sub data
                                    
                                    .. attribute:: table_id
                                    
                                    	VRF table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData, self).__init__()

                                        self.yang_name = "ip-sub-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.out_interface = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "ip-sub-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData, ['table_id', 'table_name', 'out_interface', 'path_flags_decode'], name, value)


                                class PseudowireHeadEndData(Entity):
                                    """
                                    pseudowire head end data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: control_word
                                    
                                    	Is control word present
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: imposition
                                    
                                    	Is PWHE IMposition
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: vctype
                                    
                                    	Virtual Circuit Type
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pw_list_id
                                    
                                    	Pseudo\-wire List Identifier
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: pwhe_interface
                                    
                                    	Pseudo\-wire Head\-end interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData, self).__init__()

                                        self.yang_name = "pseudowire-head-end-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('control_word', YLeaf(YType.int32, 'control-word')),
                                            ('imposition', YLeaf(YType.int32, 'imposition')),
                                            ('vctype', YLeaf(YType.uint8, 'vctype')),
                                            ('pw_list_id', YLeaf(YType.uint16, 'pw-list-id')),
                                            ('pwhe_interface', YLeaf(YType.str, 'pwhe-interface')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.ipv4_next_hop = None
                                        self.control_word = None
                                        self.imposition = None
                                        self.vctype = None
                                        self.pw_list_id = None
                                        self.pwhe_interface = None
                                        self._segment_path = lambda: "pseudowire-head-end-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'ipv4_next_hop', 'control_word', 'imposition', 'vctype', 'pw_list_id', 'pwhe_interface'], name, value)


                                class PwListData(Entity):
                                    """
                                    pw list data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: l3_interface
                                    
                                    	Pseudo\-wire Layer 3 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: l2_interface
                                    
                                    	Pseudo\-wire Layer 2 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData, self).__init__()

                                        self.yang_name = "pw-list-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('l3_interface', YLeaf(YType.str, 'l3-interface')),
                                            ('l2_interface', YLeaf(YType.str, 'l2-interface')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.l3_interface = None
                                        self.l2_interface = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pw-list-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData, ['table_id', 'table_name', 'l3_interface', 'l2_interface', 'path_flags_decode'], name, value)


                                class Stackv4Data(Entity):
                                    """
                                    stackv4 data
                                    
                                    .. attribute:: nexthop
                                    
                                    	Nexthop
                                    	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop>`
                                    
                                    .. attribute:: inner_stack
                                    
                                    	Inner stack
                                    	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack>`
                                    
                                    .. attribute:: owner_application_type
                                    
                                    	Owner application type
                                    	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data, self).__init__()

                                        self.yang_name = "stackv4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('owner_application_type', YLeaf(YType.enumeration, 'owner-application-type')),
                                        ])
                                        self.owner_application_type = None

                                        self.nexthop = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop()
                                        self.nexthop.parent = self
                                        self._children_name_map["nexthop"] = "nexthop"
                                        self._children_yang_names.add("nexthop")

                                        self.inner_stack = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack()
                                        self.inner_stack.parent = self
                                        self._children_name_map["inner_stack"] = "inner-stack"
                                        self._children_yang_names.add("inner-stack")
                                        self._segment_path = lambda: "stackv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data, ['owner_application_type'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Nexthop
                                        
                                        .. attribute:: table_id
                                        
                                        	Table ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: table_name
                                        
                                        	VRF table name
                                        	**type**\: str
                                        
                                        .. attribute:: path_flags_decode
                                        
                                        	Path flag decoded string
                                        	**type**\: str
                                        
                                        .. attribute:: out_interface
                                        
                                        	Outgoing Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: out_interface_parent
                                        
                                        	Outgoing Interface's parent
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: ipv4_next_hop
                                        
                                        	IPv4 nexthop
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	Routing path id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: backup_path_id
                                        
                                        	Routing path backup id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: load_metric
                                        
                                        	Routing path's load metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label
                                        
                                        	Outgoing Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label_name
                                        
                                        	Outgoing label name
                                        	**type**\: str
                                        
                                        .. attribute:: tunnel_id
                                        
                                        	Tunnel ID
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: next_hop_id
                                        
                                        	Next hop ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: local_label
                                        
                                        	TE backup path local label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "stackv4-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                                ('table_name', YLeaf(YType.str, 'table-name')),
                                                ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                                ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                                ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                                ('path_id', YLeaf(YType.uint8, 'path-id')),
                                                ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                                ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                                ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                                ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                                ('local_label', YLeaf(YType.uint32, 'local-label')),
                                            ])
                                            self.table_id = None
                                            self.table_name = None
                                            self.path_flags_decode = None
                                            self.out_interface = None
                                            self.out_interface_parent = None
                                            self.ipv4_next_hop = None
                                            self.path_id = None
                                            self.backup_path_id = None
                                            self.load_metric = None
                                            self.out_label = None
                                            self.out_label_name = None
                                            self.tunnel_id = None
                                            self.next_hop_id = None
                                            self.local_label = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                    class InnerStack(Entity):
                                        """
                                        Inner stack
                                        
                                        .. attribute:: num_nexthops
                                        
                                        	Number of remote nexthop addresses
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: num_lbls
                                        
                                        	Depth of inner label stack
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: nexthop
                                        
                                        	Remote nexthop addresses
                                        	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop>`
                                        
                                        .. attribute:: label
                                        
                                        	Info related to outgoing labels
                                        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label>`
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack, self).__init__()

                                            self.yang_name = "inner-stack"
                                            self.yang_parent_name = "stackv4-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop)), ("label", ("label", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label))])
                                            self._leafs = OrderedDict([
                                                ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                                ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                            ])
                                            self.num_nexthops = None
                                            self.num_lbls = None

                                            self.nexthop = YList(self)
                                            self.label = YList(self)
                                            self._segment_path = lambda: "inner-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                        class Nexthop(Entity):
                                            """
                                            Remote nexthop addresses
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, self).__init__()

                                                self.yang_name = "nexthop"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.str, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "nexthop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, ['entry'], name, value)


                                        class Label(Entity):
                                            """
                                            Info related to outgoing labels
                                            
                                            .. attribute:: outgoing_label
                                            
                                            	Remote Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: outgoing_label_str
                                            
                                            	Remote Label string
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, self).__init__()

                                                self.yang_name = "label"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                    ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                                ])
                                                self.outgoing_label = None
                                                self.outgoing_label_str = None
                                                self._segment_path = lambda: "label"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                                class Stackv6Data(Entity):
                                    """
                                    stackv6 data
                                    
                                    .. attribute:: nexthop
                                    
                                    	Nexthop
                                    	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop>`
                                    
                                    .. attribute:: inner_stack
                                    
                                    	Inner stack
                                    	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data, self).__init__()

                                        self.yang_name = "stackv6-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.nexthop = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop()
                                        self.nexthop.parent = self
                                        self._children_name_map["nexthop"] = "nexthop"
                                        self._children_yang_names.add("nexthop")

                                        self.inner_stack = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack()
                                        self.inner_stack.parent = self
                                        self._children_name_map["inner_stack"] = "inner-stack"
                                        self._children_yang_names.add("inner-stack")
                                        self._segment_path = lambda: "stackv6-data"


                                    class Nexthop(Entity):
                                        """
                                        Nexthop
                                        
                                        .. attribute:: table_id
                                        
                                        	Table ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: table_name
                                        
                                        	VRF table name
                                        	**type**\: str
                                        
                                        .. attribute:: path_flags_decode
                                        
                                        	Path flag decoded string
                                        	**type**\: str
                                        
                                        .. attribute:: out_interface
                                        
                                        	Outgoing interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: out_label
                                        
                                        	Outgoing label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label_name
                                        
                                        	Outgoing label name
                                        	**type**\: str
                                        
                                        .. attribute:: ipv6_next_hop
                                        
                                        	IPv6 nexthop
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	Routing path id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: backup_path_id
                                        
                                        	Routing path backup id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: next_hop_id
                                        
                                        	Next hop ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_interface_parent
                                        
                                        	Outgoing Interface's parent
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "stackv6-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                                ('table_name', YLeaf(YType.str, 'table-name')),
                                                ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                                ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                                ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                                ('path_id', YLeaf(YType.uint8, 'path-id')),
                                                ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                                ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                                ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ])
                                            self.table_id = None
                                            self.table_name = None
                                            self.path_flags_decode = None
                                            self.out_interface = None
                                            self.out_label = None
                                            self.out_label_name = None
                                            self.ipv6_next_hop = None
                                            self.path_id = None
                                            self.backup_path_id = None
                                            self.next_hop_id = None
                                            self.out_interface_parent = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                    class InnerStack(Entity):
                                        """
                                        Inner stack
                                        
                                        .. attribute:: num_nexthops
                                        
                                        	Number of remote nexthop addresses
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: num_lbls
                                        
                                        	Depth of inner label stack
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: nexthop
                                        
                                        	Remote nexthop addresses
                                        	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop>`
                                        
                                        .. attribute:: label
                                        
                                        	Info related to outgoing labels
                                        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label>`
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack, self).__init__()

                                            self.yang_name = "inner-stack"
                                            self.yang_parent_name = "stackv6-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop)), ("label", ("label", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label))])
                                            self._leafs = OrderedDict([
                                                ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                                ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                            ])
                                            self.num_nexthops = None
                                            self.num_lbls = None

                                            self.nexthop = YList(self)
                                            self.label = YList(self)
                                            self._segment_path = lambda: "inner-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                        class Nexthop(Entity):
                                            """
                                            Remote nexthop addresses
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, self).__init__()

                                                self.yang_name = "nexthop"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.str, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "nexthop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, ['entry'], name, value)


                                        class Label(Entity):
                                            """
                                            Info related to outgoing labels
                                            
                                            .. attribute:: outgoing_label
                                            
                                            	Remote Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: outgoing_label_str
                                            
                                            	Remote Label string
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, self).__init__()

                                                self.yang_name = "label"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                    ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                                ])
                                                self.outgoing_label = None
                                                self.outgoing_label_str = None
                                                self._segment_path = lambda: "label"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                                class TeHeadData(Entity):
                                    """
                                    te head data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_local_label
                                    
                                    	Tunnel local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_local_label_str
                                    
                                    	Tunnel local label stringified
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_fwd_class
                                    
                                    	Tunnel forwarding class
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: tunnel_load_metric
                                    
                                    	Tunnel Load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: flags_decode
                                    
                                    	Flags decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData, self).__init__()

                                        self.yang_name = "te-head-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('tunnel_local_label', YLeaf(YType.uint32, 'tunnel-local-label')),
                                            ('tunnel_local_label_str', YLeaf(YType.str, 'tunnel-local-label-str')),
                                            ('tunnel_fwd_class', YLeaf(YType.uint8, 'tunnel-fwd-class')),
                                            ('tunnel_load_metric', YLeaf(YType.uint32, 'tunnel-load-metric')),
                                            ('flags_decode', YLeaf(YType.str, 'flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.tunnel_local_label = None
                                        self.tunnel_local_label_str = None
                                        self.tunnel_fwd_class = None
                                        self.tunnel_load_metric = None
                                        self.flags_decode = None
                                        self._segment_path = lambda: "te-head-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData, ['table_id', 'table_name', 'tunnel_local_label', 'tunnel_local_label_str', 'tunnel_fwd_class', 'tunnel_load_metric', 'flags_decode'], name, value)


                                class DmtcData(Entity):
                                    """
                                    dmtc data
                                    
                                    .. attribute:: dmtc_ext_ifh
                                    
                                    	DMTC External Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData, self).__init__()

                                        self.yang_name = "dmtc-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                        ])
                                        self.dmtc_ext_ifh = None
                                        self._segment_path = lambda: "dmtc-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData, ['dmtc_ext_ifh'], name, value)


            class RewriteTes(Entity):
                """
                Table of Traffic Engineering Rewrites
                
                .. attribute:: rewrite_te
                
                	FPI rewrite for TE
                	**type**\: list of  		 :py:class:`RewriteTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes, self).__init__()

                    self.yang_name = "rewrite-tes"
                    self.yang_parent_name = "rewrite"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("rewrite-te", ("rewrite_te", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe))])
                    self._leafs = OrderedDict()

                    self.rewrite_te = YList(self)
                    self._segment_path = lambda: "rewrite-tes"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes, [], name, value)


                class RewriteTe(Entity):
                    """
                    FPI rewrite for TE
                    
                    .. attribute:: interface_name  (key)
                    
                    	Tunnel interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: fpi_key
                    
                    	fpi key
                    	**type**\:  :py:class:`FpiKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey>`
                    
                    .. attribute:: rewrite_id
                    
                    	Rewrite ID
                    	**type**\:  :py:class:`RewriteId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId>`
                    
                    .. attribute:: rewrite_version
                    
                    	Rewrite version
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: bcdl_priority
                    
                    	BCDL Priority
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: lsd_queue
                    
                    	LSD queue
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: rw_install_time
                    
                    	Rewrite install timestamp
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rw_install_age
                    
                    	Rewrite install age
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rw_updated
                    
                    	Is rewrite ever updated
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: priority_updated
                    
                    	Is rewrite's BCDL priority updated
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: associated_fpi
                    
                    	Associated FPI
                    	**type**\: list of  		 :py:class:`AssociatedFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi>`
                    
                    .. attribute:: v4_rpf
                    
                    	IPv4 RPF neighbors
                    	**type**\: list of  		 :py:class:`V4Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.V4Rpf>`
                    
                    .. attribute:: v6_rpf
                    
                    	IPv6 RPF neighbors
                    	**type**\: list of  		 :py:class:`V6Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.V6Rpf>`
                    
                    .. attribute:: mois
                    
                    	Mois
                    	**type**\: list of  		 :py:class:`Mois <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe, self).__init__()

                        self.yang_name = "rewrite-te"
                        self.yang_parent_name = "rewrite-tes"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['interface_name']
                        self._child_container_classes = OrderedDict([("fpi-key", ("fpi_key", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey)), ("rewrite-id", ("rewrite_id", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId))])
                        self._child_list_classes = OrderedDict([("associated-fpi", ("associated_fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi)), ("v4-rpf", ("v4_rpf", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.V4Rpf)), ("v6-rpf", ("v6_rpf", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.V6Rpf)), ("mois", ("mois", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois))])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('rewrite_version', YLeaf(YType.uint64, 'rewrite-version')),
                            ('bcdl_priority', YLeaf(YType.uint8, 'bcdl-priority')),
                            ('lsd_queue', YLeaf(YType.uint8, 'lsd-queue')),
                            ('rw_install_time', YLeaf(YType.uint64, 'rw-install-time')),
                            ('rw_install_age', YLeaf(YType.uint64, 'rw-install-age')),
                            ('rw_updated', YLeaf(YType.int32, 'rw-updated')),
                            ('priority_updated', YLeaf(YType.int32, 'priority-updated')),
                        ])
                        self.interface_name = None
                        self.rewrite_version = None
                        self.bcdl_priority = None
                        self.lsd_queue = None
                        self.rw_install_time = None
                        self.rw_install_age = None
                        self.rw_updated = None
                        self.priority_updated = None

                        self.fpi_key = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey()
                        self.fpi_key.parent = self
                        self._children_name_map["fpi_key"] = "fpi-key"
                        self._children_yang_names.add("fpi-key")

                        self.rewrite_id = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId()
                        self.rewrite_id.parent = self
                        self._children_name_map["rewrite_id"] = "rewrite-id"
                        self._children_yang_names.add("rewrite-id")

                        self.associated_fpi = YList(self)
                        self.v4_rpf = YList(self)
                        self.v6_rpf = YList(self)
                        self.mois = YList(self)
                        self._segment_path = lambda: "rewrite-te" + "[interface-name='" + str(self.interface_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe, ['interface_name', 'rewrite_version', 'bcdl_priority', 'lsd_queue', 'rw_install_time', 'rw_install_age', 'rw_updated', 'priority_updated'], name, value)


                    class FpiKey(Entity):
                        """
                        fpi key
                        
                        .. attribute:: fpi
                        
                        	FPI
                        	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi>`
                        
                        .. attribute:: application_owner
                        
                        	Application owner instance
                        	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.ApplicationOwner>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey, self).__init__()

                            self.yang_name = "fpi-key"
                            self.yang_parent_name = "rewrite-te"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi))])
                            self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.ApplicationOwner))])
                            self._leafs = OrderedDict()

                            self.fpi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi()
                            self.fpi.parent = self
                            self._children_name_map["fpi"] = "fpi"
                            self._children_yang_names.add("fpi")

                            self.application_owner = YList(self)
                            self._segment_path = lambda: "fpi-key"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey, [], name, value)


                        class Fpi(Entity):
                            """
                            FPI
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData>`
                            
                            .. attribute:: te_data
                            
                            	te data
                            	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData>`
                            
                            .. attribute:: dmtc_ext_intf_data
                            
                            	dmtc ext intf data
                            	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData>`
                            
                            .. attribute:: fpi_type
                            
                            	FPIType
                            	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi, self).__init__()

                                self.yang_name = "fpi"
                                self.yang_parent_name = "fpi-key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData)), ("te-data", ("te_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                                ])
                                self.fpi_type = None

                                self.label_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData()
                                self.label_data.parent = self
                                self._children_name_map["label_data"] = "label-data"
                                self._children_yang_names.add("label-data")

                                self.te_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData()
                                self.te_data.parent = self
                                self._children_name_map["te_data"] = "te-data"
                                self._children_yang_names.add("te-data")

                                self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.dmtc_ext_intf_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData()
                                self.dmtc_ext_intf_data.parent = self
                                self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                                self._children_yang_names.add("dmtc-ext-intf-data")
                                self._segment_path = lambda: "fpi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi, ['fpi_type'], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: label
                                
                                	Label value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: elc
                                
                                	ELC
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label', YLeaf(YType.uint32, 'label')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('elc', YLeaf(YType.int32, 'elc')),
                                    ])
                                    self.label = None
                                    self.security_id = None
                                    self.elc = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                            class TeData(Entity):
                                """
                                te data
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: local_label
                                
                                	Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData, self).__init__()

                                    self.yang_name = "te-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.tunnel_interface = None
                                    self.local_label = None
                                    self._segment_path = lambda: "te-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sr_local_label
                                
                                	SR related Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                        ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.version = None
                                    self.sr_local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: router_flags
                                
                                	Route flags
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_len
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                        ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.router_flags = None
                                    self.prefix_len = None
                                    self.version = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: pwhe_list_id
                                
                                	Pseudowire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                    ])
                                    self.pwhe_list_id = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData, ['pwhe_list_id'], name, value)


                            class DmtcExtIntfData(Entity):
                                """
                                dmtc ext intf data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData, self).__init__()

                                    self.yang_name = "dmtc-ext-intf-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-ext-intf-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                        class ApplicationOwner(Entity):
                            """
                            Application owner instance
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.ApplicationOwner, self).__init__()

                                self.yang_name = "application-owner"
                                self.yang_parent_name = "fpi-key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-owner"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.FpiKey.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class RewriteId(Entity):
                        """
                        Rewrite ID
                        
                        .. attribute:: rewrite_id
                        
                        	Rewrite ID
                        	**type**\:  :py:class:`RewriteId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId, self).__init__()

                            self.yang_name = "rewrite-id"
                            self.yang_parent_name = "rewrite-te"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("rewrite-id", ("rewrite_id", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.rewrite_id = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_()
                            self.rewrite_id.parent = self
                            self._children_name_map["rewrite_id"] = "rewrite-id"
                            self._children_yang_names.add("rewrite-id")
                            self._segment_path = lambda: "rewrite-id"


                        class RewriteId_(Entity):
                            """
                            Rewrite ID
                            
                            .. attribute:: label_context
                            
                            	Label context
                            	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext>`
                            
                            .. attribute:: local_label_rewrite
                            
                            	Local label rewrite information
                            	**type**\:  :py:class:`LocalLabelRewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite>`
                            
                            .. attribute:: rewrite_id_type
                            
                            	RewriteIDType
                            	**type**\:  :py:class:`MgmtLsdRwId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdRwId>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_, self).__init__()

                                self.yang_name = "rewrite-id"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext)), ("local-label-rewrite", ("local_label_rewrite", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rewrite_id_type', YLeaf(YType.enumeration, 'rewrite-id-type')),
                                ])
                                self.rewrite_id_type = None

                                self.label_context = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext()
                                self.label_context.parent = self
                                self._children_name_map["label_context"] = "label-context"
                                self._children_yang_names.add("label-context")

                                self.local_label_rewrite = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite()
                                self.local_label_rewrite.parent = self
                                self._children_name_map["local_label_rewrite"] = "local-label-rewrite"
                                self._children_yang_names.add("local-label-rewrite")
                                self._segment_path = lambda: "rewrite-id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_, ['rewrite_id_type'], name, value)


                            class LabelContext(Entity):
                                """
                                Label context
                                
                                .. attribute:: ipv4_data
                                
                                	IPv4 label context
                                	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data>`
                                
                                .. attribute:: ipv6_data
                                
                                	IPv6 label context
                                	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data>`
                                
                                .. attribute:: tev4_data
                                
                                	TEv4 label context
                                	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data>`
                                
                                .. attribute:: ipv4l3vpn_data
                                
                                	L3VPN IPv4 label context
                                	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData>`
                                
                                .. attribute:: ipv6l3vpn_data
                                
                                	L3VPN IPv6 label context
                                	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData>`
                                
                                .. attribute:: vrf_l3vpn_data
                                
                                	L3VPN VRF label context
                                	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData>`
                                
                                .. attribute:: cev4l3vpn_data
                                
                                	L3VPN CEv4 label context
                                	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData>`
                                
                                .. attribute:: cev6l3vpn_data
                                
                                	L3VPN CEv6 label context
                                	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData>`
                                
                                .. attribute:: pseudowire_data
                                
                                	Pseudowire label context
                                	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData>`
                                
                                .. attribute:: label_block_data
                                
                                	Label block context
                                	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData>`
                                
                                .. attribute:: ip_sub_data
                                
                                	IP Subscriber context
                                	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData>`
                                
                                .. attribute:: tev4p2mp_data
                                
                                	TEv4 P2MP context
                                	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData>`
                                
                                .. attribute:: mld_pv4_data
                                
                                	MLDPv4 LSM\-ID context
                                	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data>`
                                
                                .. attribute:: pseudowire_head_end_data
                                
                                	Pseudowire Head\-end label context
                                	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData>`
                                
                                .. attribute:: tp_data
                                
                                	TP context
                                	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData>`
                                
                                .. attribute:: generic_routing_encapsulation
                                
                                	Generic routing encapsulation context
                                	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation>`
                                
                                .. attribute:: ipv6_generic_routing_encapsulation
                                
                                	Generic routing encapsulation context
                                	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation>`
                                
                                .. attribute:: evpn_data
                                
                                	EVPN context
                                	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData>`
                                
                                .. attribute:: ipv4blb_data
                                
                                	BFD BLB label context
                                	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData>`
                                
                                .. attribute:: ipv6blb_data
                                
                                	BFD BLB label context
                                	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData>`
                                
                                .. attribute:: pi_mi_pmsi_data
                                
                                	PIM I\-PMSI label conext
                                	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData>`
                                
                                .. attribute:: pi_ms_pmsi_data
                                
                                	PIM S\-PMSI label conext
                                	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData>`
                                
                                .. attribute:: next_hop_set_l3vpn
                                
                                	L3VPN NH SET label context
                                	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn>`
                                
                                .. attribute:: sr_prefix_segment
                                
                                	SR Prefix Segment context
                                	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment>`
                                
                                .. attribute:: sr_adj_segment_ipv4
                                
                                	SR Adj Segment ipv4 context
                                	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4>`
                                
                                .. attribute:: sr_adj_segment_ipv6
                                
                                	SR Adj Segment ipv6 context
                                	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6>`
                                
                                .. attribute:: label_block_srgb_data
                                
                                	Label block SRGB context
                                	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData>`
                                
                                .. attribute:: te_binding
                                
                                	MPLS TE tunnel binding context
                                	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding>`
                                
                                .. attribute:: label_block_srlb_data
                                
                                	Label block SRLB context
                                	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData>`
                                
                                .. attribute:: label_context_type
                                
                                	LabelContextType
                                	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext, self).__init__()

                                    self.yang_name = "label-context"
                                    self.yang_parent_name = "rewrite-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                                    ])
                                    self.label_context_type = None

                                    self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data()
                                    self.ipv4_data.parent = self
                                    self._children_name_map["ipv4_data"] = "ipv4-data"
                                    self._children_yang_names.add("ipv4-data")

                                    self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data()
                                    self.ipv6_data.parent = self
                                    self._children_name_map["ipv6_data"] = "ipv6-data"
                                    self._children_yang_names.add("ipv6-data")

                                    self.tev4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data()
                                    self.tev4_data.parent = self
                                    self._children_name_map["tev4_data"] = "tev4-data"
                                    self._children_yang_names.add("tev4-data")

                                    self.ipv4l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData()
                                    self.ipv4l3vpn_data.parent = self
                                    self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                                    self._children_yang_names.add("ipv4l3vpn-data")

                                    self.ipv6l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData()
                                    self.ipv6l3vpn_data.parent = self
                                    self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                                    self._children_yang_names.add("ipv6l3vpn-data")

                                    self.vrf_l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData()
                                    self.vrf_l3vpn_data.parent = self
                                    self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                                    self._children_yang_names.add("vrf-l3vpn-data")

                                    self.cev4l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData()
                                    self.cev4l3vpn_data.parent = self
                                    self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                                    self._children_yang_names.add("cev4l3vpn-data")

                                    self.cev6l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData()
                                    self.cev6l3vpn_data.parent = self
                                    self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                                    self._children_yang_names.add("cev6l3vpn-data")

                                    self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData()
                                    self.pseudowire_data.parent = self
                                    self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                    self._children_yang_names.add("pseudowire-data")

                                    self.label_block_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData()
                                    self.label_block_data.parent = self
                                    self._children_name_map["label_block_data"] = "label-block-data"
                                    self._children_yang_names.add("label-block-data")

                                    self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData()
                                    self.ip_sub_data.parent = self
                                    self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                    self._children_yang_names.add("ip-sub-data")

                                    self.tev4p2mp_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData()
                                    self.tev4p2mp_data.parent = self
                                    self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                                    self._children_yang_names.add("tev4p2mp-data")

                                    self.mld_pv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data()
                                    self.mld_pv4_data.parent = self
                                    self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                                    self._children_yang_names.add("mld-pv4-data")

                                    self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData()
                                    self.pseudowire_head_end_data.parent = self
                                    self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                    self._children_yang_names.add("pseudowire-head-end-data")

                                    self.tp_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData()
                                    self.tp_data.parent = self
                                    self._children_name_map["tp_data"] = "tp-data"
                                    self._children_yang_names.add("tp-data")

                                    self.generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation()
                                    self.generic_routing_encapsulation.parent = self
                                    self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                                    self._children_yang_names.add("generic-routing-encapsulation")

                                    self.ipv6_generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation()
                                    self.ipv6_generic_routing_encapsulation.parent = self
                                    self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                                    self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                                    self.evpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData()
                                    self.evpn_data.parent = self
                                    self._children_name_map["evpn_data"] = "evpn-data"
                                    self._children_yang_names.add("evpn-data")

                                    self.ipv4blb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData()
                                    self.ipv4blb_data.parent = self
                                    self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                                    self._children_yang_names.add("ipv4blb-data")

                                    self.ipv6blb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData()
                                    self.ipv6blb_data.parent = self
                                    self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                                    self._children_yang_names.add("ipv6blb-data")

                                    self.pi_mi_pmsi_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData()
                                    self.pi_mi_pmsi_data.parent = self
                                    self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                                    self._children_yang_names.add("pi-mi-pmsi-data")

                                    self.pi_ms_pmsi_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData()
                                    self.pi_ms_pmsi_data.parent = self
                                    self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                                    self._children_yang_names.add("pi-ms-pmsi-data")

                                    self.next_hop_set_l3vpn = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn()
                                    self.next_hop_set_l3vpn.parent = self
                                    self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                                    self._children_yang_names.add("next-hop-set-l3vpn")

                                    self.sr_prefix_segment = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment()
                                    self.sr_prefix_segment.parent = self
                                    self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                                    self._children_yang_names.add("sr-prefix-segment")

                                    self.sr_adj_segment_ipv4 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4()
                                    self.sr_adj_segment_ipv4.parent = self
                                    self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                                    self._children_yang_names.add("sr-adj-segment-ipv4")

                                    self.sr_adj_segment_ipv6 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6()
                                    self.sr_adj_segment_ipv6.parent = self
                                    self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                                    self._children_yang_names.add("sr-adj-segment-ipv6")

                                    self.label_block_srgb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData()
                                    self.label_block_srgb_data.parent = self
                                    self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                                    self._children_yang_names.add("label-block-srgb-data")

                                    self.te_binding = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding()
                                    self.te_binding.parent = self
                                    self._children_name_map["te_binding"] = "te-binding"
                                    self._children_yang_names.add("te-binding")

                                    self.label_block_srlb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData()
                                    self.label_block_srlb_data.parent = self
                                    self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                                    self._children_yang_names.add("label-block-srlb-data")
                                    self._segment_path = lambda: "label-context"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext, ['label_context_type'], name, value)


                                class Ipv4Data(Entity):
                                    """
                                    IPv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	IPv4 prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data, self).__init__()

                                        self.yang_name = "ipv4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                        ])
                                        self.table_id = None
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.security_id = None
                                        self.vrf_name = None
                                        self._segment_path = lambda: "ipv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                                class Ipv6Data(Entity):
                                    """
                                    IPv6 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix
                                    
                                    	Prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data, self).__init__()

                                        self.yang_name = "ipv6-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                        ])
                                        self.table_id = None
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.security_id = None
                                        self.vrf_name = None
                                        self._segment_path = lambda: "ipv6-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                                class Tev4Data(Entity):
                                    """
                                    TEv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_source
                                    
                                    	Tunnel source
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: tunnel_dest
                                    
                                    	Tunnel destination
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id_extension
                                    
                                    	Extended tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_lsp_id
                                    
                                    	Tunnel LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: is_srte
                                    
                                    	Is this an SRTE head tunnel
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data, self).__init__()

                                        self.yang_name = "tev4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                            ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                            ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                            ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                            ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                            ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                        ])
                                        self.table_id = None
                                        self.tunnel_source = None
                                        self.tunnel_dest = None
                                        self.tunnel_id = None
                                        self.tunnel_id_extension = None
                                        self.tunnel_lsp_id = None
                                        self.is_srte = None
                                        self._segment_path = lambda: "tev4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                                class Ipv4L3VpnData(Entity):
                                    """
                                    L3VPN IPv4 label context
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: route_distinguisher
                                    
                                    	Route distinguisher
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, self).__init__()

                                        self.yang_name = "ipv4l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.route_distinguisher = None
                                        self._segment_path = lambda: "ipv4l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                                class Ipv6L3VpnData(Entity):
                                    """
                                    L3VPN IPv6 label context
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv6 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: route_distinguisher
                                    
                                    	Route distinguisher
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, self).__init__()

                                        self.yang_name = "ipv6l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.route_distinguisher = None
                                        self._segment_path = lambda: "ipv6l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                                class VrfL3VpnData(Entity):
                                    """
                                    L3VPN VRF label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, self).__init__()

                                        self.yang_name = "vrf-l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.security_id = None
                                        self._segment_path = lambda: "vrf-l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                                class Cev4L3VpnData(Entity):
                                    """
                                    L3VPN CEv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, self).__init__()

                                        self.yang_name = "cev4l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.ipv4_next_hop = None
                                        self.security_id = None
                                        self._segment_path = lambda: "cev4l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                                class Cev6L3VpnData(Entity):
                                    """
                                    L3VPN CEv6 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, self).__init__()

                                        self.yang_name = "cev6l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.ipv6_next_hop = None
                                        self.security_id = None
                                        self._segment_path = lambda: "cev6l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                                class PseudowireData(Entity):
                                    """
                                    Pseudowire label context
                                    
                                    .. attribute:: prefix
                                    
                                    	Address prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: pseudowire_id
                                    
                                    	Pseudo\-wire ID
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: remote_l2_router_id
                                    
                                    	Remote L2 Router ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: subinterface
                                    
                                    	Subinterface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData, self).__init__()

                                        self.yang_name = "pseudowire-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                            ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                            ('subinterface', YLeaf(YType.str, 'subinterface')),
                                        ])
                                        self.prefix = None
                                        self.pseudowire_id = None
                                        self.remote_l2_router_id = None
                                        self.subinterface = None
                                        self._segment_path = lambda: "pseudowire-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                                class LabelBlockData(Entity):
                                    """
                                    Label block context
                                    
                                    .. attribute:: service
                                    
                                    	Service
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: vpn_id
                                    
                                    	VPN ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: edge_id
                                    
                                    	Edge ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData, self).__init__()

                                        self.yang_name = "label-block-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('service', YLeaf(YType.uint8, 'service')),
                                            ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                            ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.service = None
                                        self.vpn_id = None
                                        self.edge_id = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                                class IpSubData(Entity):
                                    """
                                    IP Subscriber context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table Id
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: parent_interface
                                    
                                    	Parent interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData, self).__init__()

                                        self.yang_name = "ip-sub-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                        ])
                                        self.table_id = None
                                        self.parent_interface = None
                                        self._segment_path = lambda: "ip-sub-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData, ['table_id', 'parent_interface'], name, value)


                                class Tev4P2MpData(Entity):
                                    """
                                    TEv4 P2MP context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_source
                                    
                                    	Tunnel source
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: p2mp_id
                                    
                                    	Point to multipoint ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id_extension
                                    
                                    	Tunnel ID extension
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_lsp_id
                                    
                                    	Tunnel LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: previous_hop
                                    
                                    	Previous hop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, self).__init__()

                                        self.yang_name = "tev4p2mp-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                            ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                            ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                            ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                            ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                            ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                        ])
                                        self.table_id = None
                                        self.tunnel_source = None
                                        self.p2mp_id = None
                                        self.tunnel_id = None
                                        self.tunnel_id_extension = None
                                        self.tunnel_lsp_id = None
                                        self.previous_hop = None
                                        self._segment_path = lambda: "tev4p2mp-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                                class MldPv4Data(Entity):
                                    """
                                    MLDPv4 LSM\-ID context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	LSM ID Type
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: lsm_id
                                    
                                    	LSM ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: peer_lsrid
                                    
                                    	Peer LSR Id
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: peer_label_space_id
                                    
                                    	Peer Label Space Id
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data, self).__init__()

                                        self.yang_name = "mld-pv4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('type', YLeaf(YType.uint16, 'type')),
                                            ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                            ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                            ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                        ])
                                        self.table_id = None
                                        self.type = None
                                        self.lsm_id = None
                                        self.peer_lsrid = None
                                        self.peer_label_space_id = None
                                        self._segment_path = lambda: "mld-pv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                                class PseudowireHeadEndData(Entity):
                                    """
                                    Pseudowire Head\-end label context
                                    
                                    .. attribute:: pwhe_intf
                                    
                                    	Pseudo\-wire Head\-end interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, self).__init__()

                                        self.yang_name = "pseudowire-head-end-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                        ])
                                        self.pwhe_intf = None
                                        self._segment_path = lambda: "pseudowire-head-end-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                                class TpData(Entity):
                                    """
                                    TP context
                                    
                                    .. attribute:: source_global_id
                                    
                                    	TP source global ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: source_node_id
                                    
                                    	TP source node ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: dest_global_id
                                    
                                    	TP destination global ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: dest_node_id
                                    
                                    	TP destination node ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: source_tunnel_id
                                    
                                    	TP source tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: dest_tunnel_id
                                    
                                    	TP destination tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: lsp_id
                                    
                                    	TP LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData, self).__init__()

                                        self.yang_name = "tp-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                            ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                            ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                            ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                            ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                            ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                            ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                        ])
                                        self.source_global_id = None
                                        self.source_node_id = None
                                        self.dest_global_id = None
                                        self.dest_node_id = None
                                        self.source_tunnel_id = None
                                        self.dest_tunnel_id = None
                                        self.lsp_id = None
                                        self._segment_path = lambda: "tp-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                                class GenericRoutingEncapsulation(Entity):
                                    """
                                    Generic routing encapsulation context
                                    
                                    .. attribute:: gre_interface
                                    
                                    	Generic routing encapsulation interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, self).__init__()

                                        self.yang_name = "generic-routing-encapsulation"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                        ])
                                        self.gre_interface = None
                                        self._segment_path = lambda: "generic-routing-encapsulation"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                                class Ipv6GenericRoutingEncapsulation(Entity):
                                    """
                                    Generic routing encapsulation context
                                    
                                    .. attribute:: greipv6_interface
                                    
                                    	Generic routing encapsulation IPv6 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, self).__init__()

                                        self.yang_name = "ipv6-generic-routing-encapsulation"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                        ])
                                        self.greipv6_interface = None
                                        self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                                class EvpnData(Entity):
                                    """
                                    EVPN context
                                    
                                    .. attribute:: evpn_id
                                    
                                    	EVPN ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: evpn_tag
                                    
                                    	EVPN TAG
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ethernet_segment
                                    
                                    	Ethernet Segment ID
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData, self).__init__()

                                        self.yang_name = "evpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                            ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                            ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                        ])
                                        self.evpn_id = None
                                        self.evpn_tag = None
                                        self.ethernet_segment = None
                                        self._segment_path = lambda: "evpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                                class Ipv4BlbData(Entity):
                                    """
                                    BFD BLB label context
                                    
                                    .. attribute:: blb_intf
                                    
                                    	BFD BLB interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, self).__init__()

                                        self.yang_name = "ipv4blb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                        ])
                                        self.blb_intf = None
                                        self.prefix = None
                                        self._segment_path = lambda: "ipv4blb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                                class Ipv6BlbData(Entity):
                                    """
                                    BFD BLB label context
                                    
                                    .. attribute:: blb_intf
                                    
                                    	BFD BLB interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv6 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, self).__init__()

                                        self.yang_name = "ipv6blb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                        ])
                                        self.blb_intf = None
                                        self.prefix = None
                                        self._segment_path = lambda: "ipv6blb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                                class PiMiPmsiData(Entity):
                                    """
                                    PIM I\-PMSI label conext
                                    
                                    .. attribute:: vrf_id
                                    
                                    	VRF ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: head
                                    
                                    	Head
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: v6
                                    
                                    	PIM6
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, self).__init__()

                                        self.yang_name = "pi-mi-pmsi-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                            ('head', YLeaf(YType.int32, 'head')),
                                            ('v6', YLeaf(YType.int32, 'v6')),
                                        ])
                                        self.vrf_id = None
                                        self.head = None
                                        self.v6 = None
                                        self._segment_path = lambda: "pi-mi-pmsi-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                                class PiMsPmsiData(Entity):
                                    """
                                    PIM S\-PMSI label conext
                                    
                                    .. attribute:: vrf_id
                                    
                                    	VRF ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: source
                                    
                                    	Originating Router
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: head
                                    
                                    	Head
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: v6
                                    
                                    	PIM6
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: hli
                                    
                                    	Head LSM\-ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: seg
                                    
                                    	Segmented Multicast
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, self).__init__()

                                        self.yang_name = "pi-ms-pmsi-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                            ('source', YLeaf(YType.str, 'source')),
                                            ('head', YLeaf(YType.int32, 'head')),
                                            ('v6', YLeaf(YType.int32, 'v6')),
                                            ('hli', YLeaf(YType.uint32, 'hli')),
                                            ('seg', YLeaf(YType.int32, 'seg')),
                                        ])
                                        self.vrf_id = None
                                        self.source = None
                                        self.head = None
                                        self.v6 = None
                                        self.hli = None
                                        self.seg = None
                                        self._segment_path = lambda: "pi-ms-pmsi-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                                class NextHopSetL3Vpn(Entity):
                                    """
                                    L3VPN NH SET label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: next_hop_set_id
                                    
                                    	Next Hop Set ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, self).__init__()

                                        self.yang_name = "next-hop-set-l3vpn"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                        ])
                                        self.table_id = None
                                        self.next_hop_set_id = None
                                        self._segment_path = lambda: "next-hop-set-l3vpn"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                                class SrPrefixSegment(Entity):
                                    """
                                    SR Prefix Segment context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: segment_id
                                    
                                    	Prefix Segment ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, self).__init__()

                                        self.yang_name = "sr-prefix-segment"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                        ])
                                        self.table_id = None
                                        self.segment_id = None
                                        self._segment_path = lambda: "sr-prefix-segment"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                                class SrAdjSegmentIpv4(Entity):
                                    """
                                    SR Adj Segment ipv4 context
                                    
                                    .. attribute:: index
                                    
                                    	Adjacency index
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	Adjacency type
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: intf
                                    
                                    	Adjacency interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: addr
                                    
                                    	Adjacency nexthop IPv4 address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, self).__init__()

                                        self.yang_name = "sr-adj-segment-ipv4"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('index', YLeaf(YType.uint32, 'index')),
                                            ('type', YLeaf(YType.uint32, 'type')),
                                            ('intf', YLeaf(YType.str, 'intf')),
                                            ('addr', YLeaf(YType.str, 'addr')),
                                        ])
                                        self.index = None
                                        self.type = None
                                        self.intf = None
                                        self.addr = None
                                        self._segment_path = lambda: "sr-adj-segment-ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                                class SrAdjSegmentIpv6(Entity):
                                    """
                                    SR Adj Segment ipv6 context
                                    
                                    .. attribute:: index
                                    
                                    	Adjacency index
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	Adjacency type
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: intf
                                    
                                    	Adjacency interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: addr
                                    
                                    	Adjacency nexthop IPv6 address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, self).__init__()

                                        self.yang_name = "sr-adj-segment-ipv6"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('index', YLeaf(YType.uint32, 'index')),
                                            ('type', YLeaf(YType.uint32, 'type')),
                                            ('intf', YLeaf(YType.str, 'intf')),
                                            ('addr', YLeaf(YType.str, 'addr')),
                                        ])
                                        self.index = None
                                        self.type = None
                                        self.intf = None
                                        self.addr = None
                                        self._segment_path = lambda: "sr-adj-segment-ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                                class LabelBlockSrgbData(Entity):
                                    """
                                    Label block SRGB context
                                    
                                    .. attribute:: start_label
                                    
                                    	Start Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, self).__init__()

                                        self.yang_name = "label-block-srgb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('start_label', YLeaf(YType.uint32, 'start-label')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.start_label = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-srgb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                                class TeBinding(Entity):
                                    """
                                    MPLS TE tunnel binding context
                                    
                                    .. attribute:: te_identifier
                                    
                                    	MPLS Traffic Engineering Tunnel or Group ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_type
                                    
                                    	Type of identifier for the binding
                                    	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding, self).__init__()

                                        self.yang_name = "te-binding"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                            ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                        ])
                                        self.te_identifier = None
                                        self.te_type = None
                                        self._segment_path = lambda: "te-binding"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding, ['te_identifier', 'te_type'], name, value)


                                class LabelBlockSrlbData(Entity):
                                    """
                                    Label block SRLB context
                                    
                                    .. attribute:: start_label
                                    
                                    	Start Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, self).__init__()

                                        self.yang_name = "label-block-srlb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('start_label', YLeaf(YType.uint32, 'start-label')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.start_label = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-srlb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                            class LocalLabelRewrite(Entity):
                                """
                                Local label rewrite information
                                
                                .. attribute:: label_data
                                
                                	label data
                                	**type**\: list of  		 :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite.LabelData>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite, self).__init__()

                                    self.yang_name = "local-label-rewrite"
                                    self.yang_parent_name = "rewrite-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite.LabelData))])
                                    self._leafs = OrderedDict()

                                    self.label_data = YList(self)
                                    self._segment_path = lambda: "local-label-rewrite"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite, [], name, value)


                                class LabelData(Entity):
                                    """
                                    label data
                                    
                                    .. attribute:: entry
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, self).__init__()

                                        self.yang_name = "label-data"
                                        self.yang_parent_name = "local-label-rewrite"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                        ])
                                        self.entry = None
                                        self._segment_path = lambda: "label-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, ['entry'], name, value)


                    class AssociatedFpi(Entity):
                        """
                        Associated FPI
                        
                        .. attribute:: fpi
                        
                        	FPI
                        	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi>`
                        
                        .. attribute:: application_owner
                        
                        	Application owner instance
                        	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.ApplicationOwner>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi, self).__init__()

                            self.yang_name = "associated-fpi"
                            self.yang_parent_name = "rewrite-te"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi))])
                            self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.ApplicationOwner))])
                            self._leafs = OrderedDict()

                            self.fpi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi()
                            self.fpi.parent = self
                            self._children_name_map["fpi"] = "fpi"
                            self._children_yang_names.add("fpi")

                            self.application_owner = YList(self)
                            self._segment_path = lambda: "associated-fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi, [], name, value)


                        class Fpi(Entity):
                            """
                            FPI
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData>`
                            
                            .. attribute:: te_data
                            
                            	te data
                            	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData>`
                            
                            .. attribute:: dmtc_ext_intf_data
                            
                            	dmtc ext intf data
                            	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData>`
                            
                            .. attribute:: fpi_type
                            
                            	FPIType
                            	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi, self).__init__()

                                self.yang_name = "fpi"
                                self.yang_parent_name = "associated-fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData)), ("te-data", ("te_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                                ])
                                self.fpi_type = None

                                self.label_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData()
                                self.label_data.parent = self
                                self._children_name_map["label_data"] = "label-data"
                                self._children_yang_names.add("label-data")

                                self.te_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData()
                                self.te_data.parent = self
                                self._children_name_map["te_data"] = "te-data"
                                self._children_yang_names.add("te-data")

                                self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.dmtc_ext_intf_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData()
                                self.dmtc_ext_intf_data.parent = self
                                self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                                self._children_yang_names.add("dmtc-ext-intf-data")
                                self._segment_path = lambda: "fpi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi, ['fpi_type'], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: label
                                
                                	Label value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: elc
                                
                                	ELC
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label', YLeaf(YType.uint32, 'label')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('elc', YLeaf(YType.int32, 'elc')),
                                    ])
                                    self.label = None
                                    self.security_id = None
                                    self.elc = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                            class TeData(Entity):
                                """
                                te data
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: local_label
                                
                                	Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData, self).__init__()

                                    self.yang_name = "te-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.tunnel_interface = None
                                    self.local_label = None
                                    self._segment_path = lambda: "te-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sr_local_label
                                
                                	SR related Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                        ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.version = None
                                    self.sr_local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: router_flags
                                
                                	Route flags
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_len
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                        ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.router_flags = None
                                    self.prefix_len = None
                                    self.version = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: pwhe_list_id
                                
                                	Pseudowire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                    ])
                                    self.pwhe_list_id = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData, ['pwhe_list_id'], name, value)


                            class DmtcExtIntfData(Entity):
                                """
                                dmtc ext intf data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData, self).__init__()

                                    self.yang_name = "dmtc-ext-intf-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-ext-intf-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                        class ApplicationOwner(Entity):
                            """
                            Application owner instance
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.ApplicationOwner, self).__init__()

                                self.yang_name = "application-owner"
                                self.yang_parent_name = "associated-fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-owner"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class V4Rpf(Entity):
                        """
                        IPv4 RPF neighbors
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: v4_rpf_neighbor
                        
                        	V4 RPF Neighbor
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.V4Rpf, self).__init__()

                            self.yang_name = "v4-rpf"
                            self.yang_parent_name = "rewrite-te"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('v4_rpf_neighbor', YLeaf(YType.str, 'v4-rpf-neighbor')),
                            ])
                            self.table_id = None
                            self.v4_rpf_neighbor = None
                            self._segment_path = lambda: "v4-rpf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.V4Rpf, ['table_id', 'v4_rpf_neighbor'], name, value)


                    class V6Rpf(Entity):
                        """
                        IPv6 RPF neighbors
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: v6_rpf_neighbor
                        
                        	V6 RPF Neighbor
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.V6Rpf, self).__init__()

                            self.yang_name = "v6-rpf"
                            self.yang_parent_name = "rewrite-te"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('v6_rpf_neighbor', YLeaf(YType.str, 'v6-rpf-neighbor')),
                            ])
                            self.table_id = None
                            self.v6_rpf_neighbor = None
                            self._segment_path = lambda: "v6-rpf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.V6Rpf, ['table_id', 'v6_rpf_neighbor'], name, value)


                    class Mois(Entity):
                        """
                        Mois
                        
                        .. attribute:: application_resource
                        
                        	Application state
                        	**type**\:  :py:class:`ApplicationResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource>`
                        
                        .. attribute:: moi_array
                        
                        	moi array
                        	**type**\: list of  		 :py:class:`MoiArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois, self).__init__()

                            self.yang_name = "mois"
                            self.yang_parent_name = "rewrite-te"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("application-resource", ("application_resource", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource))])
                            self._child_list_classes = OrderedDict([("moi-array", ("moi_array", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray))])
                            self._leafs = OrderedDict()

                            self.application_resource = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource()
                            self.application_resource.parent = self
                            self._children_name_map["application_resource"] = "application-resource"
                            self._children_yang_names.add("application-resource")

                            self.moi_array = YList(self)
                            self._segment_path = lambda: "mois"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois, [], name, value)


                        class ApplicationResource(Entity):
                            """
                            Application state
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource, self).__init__()

                                self.yang_name = "application-resource"
                                self.yang_parent_name = "mois"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-resource"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                        class MoiArray(Entity):
                            """
                            moi array
                            
                            .. attribute:: moi
                            
                            	Moi
                            	**type**\:  :py:class:`Moi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray, self).__init__()

                                self.yang_name = "moi-array"
                                self.yang_parent_name = "mois"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("moi", ("moi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.moi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi()
                                self.moi.parent = self
                                self._children_name_map["moi"] = "moi"
                                self._children_yang_names.add("moi")
                                self._segment_path = lambda: "moi-array"


                            class Moi(Entity):
                                """
                                Moi
                                
                                .. attribute:: pop_and_lookup_ipv4
                                
                                	pop and lookup ipv4
                                	**type**\:  :py:class:`PopAndLookupIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4>`
                                
                                .. attribute:: pop_and_lookup_tp
                                
                                	pop and lookup tp
                                	**type**\:  :py:class:`PopAndLookupTp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp>`
                                
                                .. attribute:: pop_and_lookup_ipv6
                                
                                	pop and lookup ipv6
                                	**type**\:  :py:class:`PopAndLookupIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6>`
                                
                                .. attribute:: ipv4_data
                                
                                	ipv4 data
                                	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data>`
                                
                                .. attribute:: ipv6_data
                                
                                	ipv6 data
                                	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data>`
                                
                                .. attribute:: tev4_data
                                
                                	tev4 data
                                	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data>`
                                
                                .. attribute:: pseudowire_data
                                
                                	pseudowire data
                                	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData>`
                                
                                .. attribute:: ip_sub_data
                                
                                	ip sub data
                                	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData>`
                                
                                .. attribute:: pseudowire_head_end_data
                                
                                	pseudowire head end data
                                	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData>`
                                
                                .. attribute:: pw_list_data
                                
                                	pw list data
                                	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData>`
                                
                                .. attribute:: stackv4_data
                                
                                	stackv4 data
                                	**type**\:  :py:class:`Stackv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data>`
                                
                                .. attribute:: stackv6_data
                                
                                	stackv6 data
                                	**type**\:  :py:class:`Stackv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data>`
                                
                                .. attribute:: te_head_data
                                
                                	te head data
                                	**type**\:  :py:class:`TeHeadData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData>`
                                
                                .. attribute:: dmtc_data
                                
                                	dmtc data
                                	**type**\:  :py:class:`DmtcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData>`
                                
                                .. attribute:: moi_type
                                
                                	MoiType
                                	**type**\:  :py:class:`MgmtLsdMoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdMoi>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi, self).__init__()

                                    self.yang_name = "moi"
                                    self.yang_parent_name = "moi-array"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("pop-and-lookup-ipv4", ("pop_and_lookup_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4)), ("pop-and-lookup-tp", ("pop_and_lookup_tp", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp)), ("pop-and-lookup-ipv6", ("pop_and_lookup_ipv6", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData)), ("stackv4-data", ("stackv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data)), ("stackv6-data", ("stackv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data)), ("te-head-data", ("te_head_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData)), ("dmtc-data", ("dmtc_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('moi_type', YLeaf(YType.enumeration, 'moi-type')),
                                    ])
                                    self.moi_type = None

                                    self.pop_and_lookup_ipv4 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4()
                                    self.pop_and_lookup_ipv4.parent = self
                                    self._children_name_map["pop_and_lookup_ipv4"] = "pop-and-lookup-ipv4"
                                    self._children_yang_names.add("pop-and-lookup-ipv4")

                                    self.pop_and_lookup_tp = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp()
                                    self.pop_and_lookup_tp.parent = self
                                    self._children_name_map["pop_and_lookup_tp"] = "pop-and-lookup-tp"
                                    self._children_yang_names.add("pop-and-lookup-tp")

                                    self.pop_and_lookup_ipv6 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6()
                                    self.pop_and_lookup_ipv6.parent = self
                                    self._children_name_map["pop_and_lookup_ipv6"] = "pop-and-lookup-ipv6"
                                    self._children_yang_names.add("pop-and-lookup-ipv6")

                                    self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data()
                                    self.ipv4_data.parent = self
                                    self._children_name_map["ipv4_data"] = "ipv4-data"
                                    self._children_yang_names.add("ipv4-data")

                                    self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data()
                                    self.ipv6_data.parent = self
                                    self._children_name_map["ipv6_data"] = "ipv6-data"
                                    self._children_yang_names.add("ipv6-data")

                                    self.tev4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data()
                                    self.tev4_data.parent = self
                                    self._children_name_map["tev4_data"] = "tev4-data"
                                    self._children_yang_names.add("tev4-data")

                                    self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData()
                                    self.pseudowire_data.parent = self
                                    self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                    self._children_yang_names.add("pseudowire-data")

                                    self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData()
                                    self.ip_sub_data.parent = self
                                    self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                    self._children_yang_names.add("ip-sub-data")

                                    self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData()
                                    self.pseudowire_head_end_data.parent = self
                                    self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                    self._children_yang_names.add("pseudowire-head-end-data")

                                    self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData()
                                    self.pw_list_data.parent = self
                                    self._children_name_map["pw_list_data"] = "pw-list-data"
                                    self._children_yang_names.add("pw-list-data")

                                    self.stackv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data()
                                    self.stackv4_data.parent = self
                                    self._children_name_map["stackv4_data"] = "stackv4-data"
                                    self._children_yang_names.add("stackv4-data")

                                    self.stackv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data()
                                    self.stackv6_data.parent = self
                                    self._children_name_map["stackv6_data"] = "stackv6-data"
                                    self._children_yang_names.add("stackv6-data")

                                    self.te_head_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData()
                                    self.te_head_data.parent = self
                                    self._children_name_map["te_head_data"] = "te-head-data"
                                    self._children_yang_names.add("te-head-data")

                                    self.dmtc_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData()
                                    self.dmtc_data.parent = self
                                    self._children_name_map["dmtc_data"] = "dmtc-data"
                                    self._children_yang_names.add("dmtc-data")
                                    self._segment_path = lambda: "moi"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi, ['moi_type'], name, value)


                                class PopAndLookupIpv4(Entity):
                                    """
                                    pop and lookup ipv4
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4, self).__init__()

                                        self.yang_name = "pop-and-lookup-ipv4"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pop-and-lookup-ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                                class PopAndLookupTp(Entity):
                                    """
                                    pop and lookup tp
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp, self).__init__()

                                        self.yang_name = "pop-and-lookup-tp"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_label = None
                                        self._segment_path = lambda: "pop-and-lookup-tp"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp, ['table_id', 'table_name', 'path_flags_decode', 'out_label'], name, value)


                                class PopAndLookupIpv6(Entity):
                                    """
                                    pop and lookup ipv6
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6, self).__init__()

                                        self.yang_name = "pop-and-lookup-ipv6"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pop-and-lookup-ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                                class Ipv4Data(Entity):
                                    """
                                    ipv4 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: load_metric
                                    
                                    	Routing path's load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_label
                                    
                                    	TE backup path local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data, self).__init__()

                                        self.yang_name = "ipv4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('local_label', YLeaf(YType.uint32, 'local-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_interface_parent = None
                                        self.ipv4_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.load_metric = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.tunnel_id = None
                                        self.next_hop_id = None
                                        self.local_label = None
                                        self._segment_path = lambda: "ipv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                class Ipv6Data(Entity):
                                    """
                                    ipv6 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data, self).__init__()

                                        self.yang_name = "ipv6-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv6_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.next_hop_id = None
                                        self.out_interface_parent = None
                                        self._segment_path = lambda: "ipv6-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                class Tev4Data(Entity):
                                    """
                                    tev4 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_ipv4_next_hop
                                    
                                    	Backup IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: merge_point_label
                                    
                                    	Merge point label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: backup_local_label
                                    
                                    	Backup local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_interface
                                    
                                    	Tunnel interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: tunnel_weight
                                    
                                    	Tunnel weight
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: data_out_parent_interface
                                    
                                    	Outgoing data parent interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: tunnel_class
                                    
                                    	Tunnel class
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data, self).__init__()

                                        self.yang_name = "tev4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                            ('backup_ipv4_next_hop', YLeaf(YType.str, 'backup-ipv4-next-hop')),
                                            ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                                            ('backup_local_label', YLeaf(YType.uint32, 'backup-local-label')),
                                            ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                            ('tunnel_weight', YLeaf(YType.uint32, 'tunnel-weight')),
                                            ('data_out_parent_interface', YLeaf(YType.str, 'data-out-parent-interface')),
                                            ('tunnel_class', YLeaf(YType.uint32, 'tunnel-class')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv4_next_hop = None
                                        self.backup_interface = None
                                        self.backup_ipv4_next_hop = None
                                        self.merge_point_label = None
                                        self.backup_local_label = None
                                        self.tunnel_interface = None
                                        self.tunnel_weight = None
                                        self.data_out_parent_interface = None
                                        self.tunnel_class = None
                                        self._segment_path = lambda: "tev4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv4_next_hop', 'backup_interface', 'backup_ipv4_next_hop', 'merge_point_label', 'backup_local_label', 'tunnel_interface', 'tunnel_weight', 'data_out_parent_interface', 'tunnel_class'], name, value)


                                class PseudowireData(Entity):
                                    """
                                    pseudowire data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: cross_connect_id
                                    
                                    	Cross\-connect ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: pseuodo_wire_connect_id
                                    
                                    	PseudoWire Cross\-connect ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: bridge_id
                                    
                                    	Bridge ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: split_horizon_id
                                    
                                    	Split horizon group ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData, self).__init__()

                                        self.yang_name = "pseudowire-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('cross_connect_id', YLeaf(YType.uint32, 'cross-connect-id')),
                                            ('pseuodo_wire_connect_id', YLeaf(YType.uint32, 'pseuodo-wire-connect-id')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('bridge_id', YLeaf(YType.uint32, 'bridge-id')),
                                            ('split_horizon_id', YLeaf(YType.uint32, 'split-horizon-id')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.cross_connect_id = None
                                        self.pseuodo_wire_connect_id = None
                                        self.ipv4_next_hop = None
                                        self.bridge_id = None
                                        self.split_horizon_id = None
                                        self._segment_path = lambda: "pseudowire-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'cross_connect_id', 'pseuodo_wire_connect_id', 'ipv4_next_hop', 'bridge_id', 'split_horizon_id'], name, value)


                                class IpSubData(Entity):
                                    """
                                    ip sub data
                                    
                                    .. attribute:: table_id
                                    
                                    	VRF table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData, self).__init__()

                                        self.yang_name = "ip-sub-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.out_interface = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "ip-sub-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData, ['table_id', 'table_name', 'out_interface', 'path_flags_decode'], name, value)


                                class PseudowireHeadEndData(Entity):
                                    """
                                    pseudowire head end data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: control_word
                                    
                                    	Is control word present
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: imposition
                                    
                                    	Is PWHE IMposition
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: vctype
                                    
                                    	Virtual Circuit Type
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pw_list_id
                                    
                                    	Pseudo\-wire List Identifier
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: pwhe_interface
                                    
                                    	Pseudo\-wire Head\-end interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData, self).__init__()

                                        self.yang_name = "pseudowire-head-end-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('control_word', YLeaf(YType.int32, 'control-word')),
                                            ('imposition', YLeaf(YType.int32, 'imposition')),
                                            ('vctype', YLeaf(YType.uint8, 'vctype')),
                                            ('pw_list_id', YLeaf(YType.uint16, 'pw-list-id')),
                                            ('pwhe_interface', YLeaf(YType.str, 'pwhe-interface')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.ipv4_next_hop = None
                                        self.control_word = None
                                        self.imposition = None
                                        self.vctype = None
                                        self.pw_list_id = None
                                        self.pwhe_interface = None
                                        self._segment_path = lambda: "pseudowire-head-end-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'ipv4_next_hop', 'control_word', 'imposition', 'vctype', 'pw_list_id', 'pwhe_interface'], name, value)


                                class PwListData(Entity):
                                    """
                                    pw list data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: l3_interface
                                    
                                    	Pseudo\-wire Layer 3 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: l2_interface
                                    
                                    	Pseudo\-wire Layer 2 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData, self).__init__()

                                        self.yang_name = "pw-list-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('l3_interface', YLeaf(YType.str, 'l3-interface')),
                                            ('l2_interface', YLeaf(YType.str, 'l2-interface')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.l3_interface = None
                                        self.l2_interface = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pw-list-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData, ['table_id', 'table_name', 'l3_interface', 'l2_interface', 'path_flags_decode'], name, value)


                                class Stackv4Data(Entity):
                                    """
                                    stackv4 data
                                    
                                    .. attribute:: nexthop
                                    
                                    	Nexthop
                                    	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop>`
                                    
                                    .. attribute:: inner_stack
                                    
                                    	Inner stack
                                    	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack>`
                                    
                                    .. attribute:: owner_application_type
                                    
                                    	Owner application type
                                    	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data, self).__init__()

                                        self.yang_name = "stackv4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('owner_application_type', YLeaf(YType.enumeration, 'owner-application-type')),
                                        ])
                                        self.owner_application_type = None

                                        self.nexthop = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop()
                                        self.nexthop.parent = self
                                        self._children_name_map["nexthop"] = "nexthop"
                                        self._children_yang_names.add("nexthop")

                                        self.inner_stack = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack()
                                        self.inner_stack.parent = self
                                        self._children_name_map["inner_stack"] = "inner-stack"
                                        self._children_yang_names.add("inner-stack")
                                        self._segment_path = lambda: "stackv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data, ['owner_application_type'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Nexthop
                                        
                                        .. attribute:: table_id
                                        
                                        	Table ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: table_name
                                        
                                        	VRF table name
                                        	**type**\: str
                                        
                                        .. attribute:: path_flags_decode
                                        
                                        	Path flag decoded string
                                        	**type**\: str
                                        
                                        .. attribute:: out_interface
                                        
                                        	Outgoing Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: out_interface_parent
                                        
                                        	Outgoing Interface's parent
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: ipv4_next_hop
                                        
                                        	IPv4 nexthop
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	Routing path id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: backup_path_id
                                        
                                        	Routing path backup id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: load_metric
                                        
                                        	Routing path's load metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label
                                        
                                        	Outgoing Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label_name
                                        
                                        	Outgoing label name
                                        	**type**\: str
                                        
                                        .. attribute:: tunnel_id
                                        
                                        	Tunnel ID
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: next_hop_id
                                        
                                        	Next hop ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: local_label
                                        
                                        	TE backup path local label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "stackv4-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                                ('table_name', YLeaf(YType.str, 'table-name')),
                                                ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                                ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                                ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                                ('path_id', YLeaf(YType.uint8, 'path-id')),
                                                ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                                ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                                ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                                ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                                ('local_label', YLeaf(YType.uint32, 'local-label')),
                                            ])
                                            self.table_id = None
                                            self.table_name = None
                                            self.path_flags_decode = None
                                            self.out_interface = None
                                            self.out_interface_parent = None
                                            self.ipv4_next_hop = None
                                            self.path_id = None
                                            self.backup_path_id = None
                                            self.load_metric = None
                                            self.out_label = None
                                            self.out_label_name = None
                                            self.tunnel_id = None
                                            self.next_hop_id = None
                                            self.local_label = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                    class InnerStack(Entity):
                                        """
                                        Inner stack
                                        
                                        .. attribute:: num_nexthops
                                        
                                        	Number of remote nexthop addresses
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: num_lbls
                                        
                                        	Depth of inner label stack
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: nexthop
                                        
                                        	Remote nexthop addresses
                                        	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop>`
                                        
                                        .. attribute:: label
                                        
                                        	Info related to outgoing labels
                                        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label>`
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack, self).__init__()

                                            self.yang_name = "inner-stack"
                                            self.yang_parent_name = "stackv4-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop)), ("label", ("label", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label))])
                                            self._leafs = OrderedDict([
                                                ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                                ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                            ])
                                            self.num_nexthops = None
                                            self.num_lbls = None

                                            self.nexthop = YList(self)
                                            self.label = YList(self)
                                            self._segment_path = lambda: "inner-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                        class Nexthop(Entity):
                                            """
                                            Remote nexthop addresses
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, self).__init__()

                                                self.yang_name = "nexthop"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.str, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "nexthop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, ['entry'], name, value)


                                        class Label(Entity):
                                            """
                                            Info related to outgoing labels
                                            
                                            .. attribute:: outgoing_label
                                            
                                            	Remote Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: outgoing_label_str
                                            
                                            	Remote Label string
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, self).__init__()

                                                self.yang_name = "label"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                    ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                                ])
                                                self.outgoing_label = None
                                                self.outgoing_label_str = None
                                                self._segment_path = lambda: "label"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                                class Stackv6Data(Entity):
                                    """
                                    stackv6 data
                                    
                                    .. attribute:: nexthop
                                    
                                    	Nexthop
                                    	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop>`
                                    
                                    .. attribute:: inner_stack
                                    
                                    	Inner stack
                                    	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data, self).__init__()

                                        self.yang_name = "stackv6-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.nexthop = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop()
                                        self.nexthop.parent = self
                                        self._children_name_map["nexthop"] = "nexthop"
                                        self._children_yang_names.add("nexthop")

                                        self.inner_stack = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack()
                                        self.inner_stack.parent = self
                                        self._children_name_map["inner_stack"] = "inner-stack"
                                        self._children_yang_names.add("inner-stack")
                                        self._segment_path = lambda: "stackv6-data"


                                    class Nexthop(Entity):
                                        """
                                        Nexthop
                                        
                                        .. attribute:: table_id
                                        
                                        	Table ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: table_name
                                        
                                        	VRF table name
                                        	**type**\: str
                                        
                                        .. attribute:: path_flags_decode
                                        
                                        	Path flag decoded string
                                        	**type**\: str
                                        
                                        .. attribute:: out_interface
                                        
                                        	Outgoing interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: out_label
                                        
                                        	Outgoing label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label_name
                                        
                                        	Outgoing label name
                                        	**type**\: str
                                        
                                        .. attribute:: ipv6_next_hop
                                        
                                        	IPv6 nexthop
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	Routing path id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: backup_path_id
                                        
                                        	Routing path backup id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: next_hop_id
                                        
                                        	Next hop ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_interface_parent
                                        
                                        	Outgoing Interface's parent
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "stackv6-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                                ('table_name', YLeaf(YType.str, 'table-name')),
                                                ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                                ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                                ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                                ('path_id', YLeaf(YType.uint8, 'path-id')),
                                                ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                                ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                                ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ])
                                            self.table_id = None
                                            self.table_name = None
                                            self.path_flags_decode = None
                                            self.out_interface = None
                                            self.out_label = None
                                            self.out_label_name = None
                                            self.ipv6_next_hop = None
                                            self.path_id = None
                                            self.backup_path_id = None
                                            self.next_hop_id = None
                                            self.out_interface_parent = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                    class InnerStack(Entity):
                                        """
                                        Inner stack
                                        
                                        .. attribute:: num_nexthops
                                        
                                        	Number of remote nexthop addresses
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: num_lbls
                                        
                                        	Depth of inner label stack
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: nexthop
                                        
                                        	Remote nexthop addresses
                                        	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop>`
                                        
                                        .. attribute:: label
                                        
                                        	Info related to outgoing labels
                                        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label>`
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack, self).__init__()

                                            self.yang_name = "inner-stack"
                                            self.yang_parent_name = "stackv6-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop)), ("label", ("label", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label))])
                                            self._leafs = OrderedDict([
                                                ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                                ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                            ])
                                            self.num_nexthops = None
                                            self.num_lbls = None

                                            self.nexthop = YList(self)
                                            self.label = YList(self)
                                            self._segment_path = lambda: "inner-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                        class Nexthop(Entity):
                                            """
                                            Remote nexthop addresses
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, self).__init__()

                                                self.yang_name = "nexthop"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.str, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "nexthop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, ['entry'], name, value)


                                        class Label(Entity):
                                            """
                                            Info related to outgoing labels
                                            
                                            .. attribute:: outgoing_label
                                            
                                            	Remote Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: outgoing_label_str
                                            
                                            	Remote Label string
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, self).__init__()

                                                self.yang_name = "label"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                    ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                                ])
                                                self.outgoing_label = None
                                                self.outgoing_label_str = None
                                                self._segment_path = lambda: "label"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                                class TeHeadData(Entity):
                                    """
                                    te head data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_local_label
                                    
                                    	Tunnel local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_local_label_str
                                    
                                    	Tunnel local label stringified
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_fwd_class
                                    
                                    	Tunnel forwarding class
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: tunnel_load_metric
                                    
                                    	Tunnel Load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: flags_decode
                                    
                                    	Flags decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData, self).__init__()

                                        self.yang_name = "te-head-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('tunnel_local_label', YLeaf(YType.uint32, 'tunnel-local-label')),
                                            ('tunnel_local_label_str', YLeaf(YType.str, 'tunnel-local-label-str')),
                                            ('tunnel_fwd_class', YLeaf(YType.uint8, 'tunnel-fwd-class')),
                                            ('tunnel_load_metric', YLeaf(YType.uint32, 'tunnel-load-metric')),
                                            ('flags_decode', YLeaf(YType.str, 'flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.tunnel_local_label = None
                                        self.tunnel_local_label_str = None
                                        self.tunnel_fwd_class = None
                                        self.tunnel_load_metric = None
                                        self.flags_decode = None
                                        self._segment_path = lambda: "te-head-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData, ['table_id', 'table_name', 'tunnel_local_label', 'tunnel_local_label_str', 'tunnel_fwd_class', 'tunnel_load_metric', 'flags_decode'], name, value)


                                class DmtcData(Entity):
                                    """
                                    dmtc data
                                    
                                    .. attribute:: dmtc_ext_ifh
                                    
                                    	DMTC External Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData, self).__init__()

                                        self.yang_name = "dmtc-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                        ])
                                        self.dmtc_ext_ifh = None
                                        self._segment_path = lambda: "dmtc-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData, ['dmtc_ext_ifh'], name, value)


            class RewriteLabels(Entity):
                """
                Table of Rewrites
                
                .. attribute:: rewrite_label
                
                	FPI rewrite for label
                	**type**\: list of  		 :py:class:`RewriteLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels, self).__init__()

                    self.yang_name = "rewrite-labels"
                    self.yang_parent_name = "rewrite"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("rewrite-label", ("rewrite_label", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel))])
                    self._leafs = OrderedDict()

                    self.rewrite_label = YList(self)
                    self._segment_path = lambda: "rewrite-labels"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels, [], name, value)


                class RewriteLabel(Entity):
                    """
                    FPI rewrite for label
                    
                    .. attribute:: label_id  (key)
                    
                    	Label value
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: fpi_key
                    
                    	fpi key
                    	**type**\:  :py:class:`FpiKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey>`
                    
                    .. attribute:: rewrite_id
                    
                    	Rewrite ID
                    	**type**\:  :py:class:`RewriteId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId>`
                    
                    .. attribute:: rewrite_version
                    
                    	Rewrite version
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: bcdl_priority
                    
                    	BCDL Priority
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: lsd_queue
                    
                    	LSD queue
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: rw_install_time
                    
                    	Rewrite install timestamp
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rw_install_age
                    
                    	Rewrite install age
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: rw_updated
                    
                    	Is rewrite ever updated
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: priority_updated
                    
                    	Is rewrite's BCDL priority updated
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: associated_fpi
                    
                    	Associated FPI
                    	**type**\: list of  		 :py:class:`AssociatedFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi>`
                    
                    .. attribute:: v4_rpf
                    
                    	IPv4 RPF neighbors
                    	**type**\: list of  		 :py:class:`V4Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.V4Rpf>`
                    
                    .. attribute:: v6_rpf
                    
                    	IPv6 RPF neighbors
                    	**type**\: list of  		 :py:class:`V6Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.V6Rpf>`
                    
                    .. attribute:: mois
                    
                    	Mois
                    	**type**\: list of  		 :py:class:`Mois <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel, self).__init__()

                        self.yang_name = "rewrite-label"
                        self.yang_parent_name = "rewrite-labels"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['label_id']
                        self._child_container_classes = OrderedDict([("fpi-key", ("fpi_key", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey)), ("rewrite-id", ("rewrite_id", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId))])
                        self._child_list_classes = OrderedDict([("associated-fpi", ("associated_fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi)), ("v4-rpf", ("v4_rpf", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.V4Rpf)), ("v6-rpf", ("v6_rpf", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.V6Rpf)), ("mois", ("mois", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois))])
                        self._leafs = OrderedDict([
                            ('label_id', YLeaf(YType.int32, 'label-id')),
                            ('rewrite_version', YLeaf(YType.uint64, 'rewrite-version')),
                            ('bcdl_priority', YLeaf(YType.uint8, 'bcdl-priority')),
                            ('lsd_queue', YLeaf(YType.uint8, 'lsd-queue')),
                            ('rw_install_time', YLeaf(YType.uint64, 'rw-install-time')),
                            ('rw_install_age', YLeaf(YType.uint64, 'rw-install-age')),
                            ('rw_updated', YLeaf(YType.int32, 'rw-updated')),
                            ('priority_updated', YLeaf(YType.int32, 'priority-updated')),
                        ])
                        self.label_id = None
                        self.rewrite_version = None
                        self.bcdl_priority = None
                        self.lsd_queue = None
                        self.rw_install_time = None
                        self.rw_install_age = None
                        self.rw_updated = None
                        self.priority_updated = None

                        self.fpi_key = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey()
                        self.fpi_key.parent = self
                        self._children_name_map["fpi_key"] = "fpi-key"
                        self._children_yang_names.add("fpi-key")

                        self.rewrite_id = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId()
                        self.rewrite_id.parent = self
                        self._children_name_map["rewrite_id"] = "rewrite-id"
                        self._children_yang_names.add("rewrite-id")

                        self.associated_fpi = YList(self)
                        self.v4_rpf = YList(self)
                        self.v6_rpf = YList(self)
                        self.mois = YList(self)
                        self._segment_path = lambda: "rewrite-label" + "[label-id='" + str(self.label_id) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel, ['label_id', 'rewrite_version', 'bcdl_priority', 'lsd_queue', 'rw_install_time', 'rw_install_age', 'rw_updated', 'priority_updated'], name, value)


                    class FpiKey(Entity):
                        """
                        fpi key
                        
                        .. attribute:: fpi
                        
                        	FPI
                        	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi>`
                        
                        .. attribute:: application_owner
                        
                        	Application owner instance
                        	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.ApplicationOwner>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey, self).__init__()

                            self.yang_name = "fpi-key"
                            self.yang_parent_name = "rewrite-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi))])
                            self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.ApplicationOwner))])
                            self._leafs = OrderedDict()

                            self.fpi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi()
                            self.fpi.parent = self
                            self._children_name_map["fpi"] = "fpi"
                            self._children_yang_names.add("fpi")

                            self.application_owner = YList(self)
                            self._segment_path = lambda: "fpi-key"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey, [], name, value)


                        class Fpi(Entity):
                            """
                            FPI
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData>`
                            
                            .. attribute:: te_data
                            
                            	te data
                            	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData>`
                            
                            .. attribute:: dmtc_ext_intf_data
                            
                            	dmtc ext intf data
                            	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData>`
                            
                            .. attribute:: fpi_type
                            
                            	FPIType
                            	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi, self).__init__()

                                self.yang_name = "fpi"
                                self.yang_parent_name = "fpi-key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData)), ("te-data", ("te_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                                ])
                                self.fpi_type = None

                                self.label_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData()
                                self.label_data.parent = self
                                self._children_name_map["label_data"] = "label-data"
                                self._children_yang_names.add("label-data")

                                self.te_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData()
                                self.te_data.parent = self
                                self._children_name_map["te_data"] = "te-data"
                                self._children_yang_names.add("te-data")

                                self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.dmtc_ext_intf_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData()
                                self.dmtc_ext_intf_data.parent = self
                                self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                                self._children_yang_names.add("dmtc-ext-intf-data")
                                self._segment_path = lambda: "fpi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi, ['fpi_type'], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: label
                                
                                	Label value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: elc
                                
                                	ELC
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label', YLeaf(YType.uint32, 'label')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('elc', YLeaf(YType.int32, 'elc')),
                                    ])
                                    self.label = None
                                    self.security_id = None
                                    self.elc = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                            class TeData(Entity):
                                """
                                te data
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: local_label
                                
                                	Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData, self).__init__()

                                    self.yang_name = "te-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.tunnel_interface = None
                                    self.local_label = None
                                    self._segment_path = lambda: "te-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sr_local_label
                                
                                	SR related Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                        ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.version = None
                                    self.sr_local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: router_flags
                                
                                	Route flags
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_len
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                        ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.router_flags = None
                                    self.prefix_len = None
                                    self.version = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: pwhe_list_id
                                
                                	Pseudowire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                    ])
                                    self.pwhe_list_id = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData, ['pwhe_list_id'], name, value)


                            class DmtcExtIntfData(Entity):
                                """
                                dmtc ext intf data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData, self).__init__()

                                    self.yang_name = "dmtc-ext-intf-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-ext-intf-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                        class ApplicationOwner(Entity):
                            """
                            Application owner instance
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.ApplicationOwner, self).__init__()

                                self.yang_name = "application-owner"
                                self.yang_parent_name = "fpi-key"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-owner"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.FpiKey.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class RewriteId(Entity):
                        """
                        Rewrite ID
                        
                        .. attribute:: rewrite_id
                        
                        	Rewrite ID
                        	**type**\:  :py:class:`RewriteId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId, self).__init__()

                            self.yang_name = "rewrite-id"
                            self.yang_parent_name = "rewrite-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("rewrite-id", ("rewrite_id", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.rewrite_id = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_()
                            self.rewrite_id.parent = self
                            self._children_name_map["rewrite_id"] = "rewrite-id"
                            self._children_yang_names.add("rewrite-id")
                            self._segment_path = lambda: "rewrite-id"


                        class RewriteId_(Entity):
                            """
                            Rewrite ID
                            
                            .. attribute:: label_context
                            
                            	Label context
                            	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext>`
                            
                            .. attribute:: local_label_rewrite
                            
                            	Local label rewrite information
                            	**type**\:  :py:class:`LocalLabelRewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite>`
                            
                            .. attribute:: rewrite_id_type
                            
                            	RewriteIDType
                            	**type**\:  :py:class:`MgmtLsdRwId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdRwId>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_, self).__init__()

                                self.yang_name = "rewrite-id"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext)), ("local-label-rewrite", ("local_label_rewrite", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rewrite_id_type', YLeaf(YType.enumeration, 'rewrite-id-type')),
                                ])
                                self.rewrite_id_type = None

                                self.label_context = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext()
                                self.label_context.parent = self
                                self._children_name_map["label_context"] = "label-context"
                                self._children_yang_names.add("label-context")

                                self.local_label_rewrite = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite()
                                self.local_label_rewrite.parent = self
                                self._children_name_map["local_label_rewrite"] = "local-label-rewrite"
                                self._children_yang_names.add("local-label-rewrite")
                                self._segment_path = lambda: "rewrite-id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_, ['rewrite_id_type'], name, value)


                            class LabelContext(Entity):
                                """
                                Label context
                                
                                .. attribute:: ipv4_data
                                
                                	IPv4 label context
                                	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data>`
                                
                                .. attribute:: ipv6_data
                                
                                	IPv6 label context
                                	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data>`
                                
                                .. attribute:: tev4_data
                                
                                	TEv4 label context
                                	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data>`
                                
                                .. attribute:: ipv4l3vpn_data
                                
                                	L3VPN IPv4 label context
                                	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData>`
                                
                                .. attribute:: ipv6l3vpn_data
                                
                                	L3VPN IPv6 label context
                                	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData>`
                                
                                .. attribute:: vrf_l3vpn_data
                                
                                	L3VPN VRF label context
                                	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData>`
                                
                                .. attribute:: cev4l3vpn_data
                                
                                	L3VPN CEv4 label context
                                	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData>`
                                
                                .. attribute:: cev6l3vpn_data
                                
                                	L3VPN CEv6 label context
                                	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData>`
                                
                                .. attribute:: pseudowire_data
                                
                                	Pseudowire label context
                                	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData>`
                                
                                .. attribute:: label_block_data
                                
                                	Label block context
                                	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData>`
                                
                                .. attribute:: ip_sub_data
                                
                                	IP Subscriber context
                                	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData>`
                                
                                .. attribute:: tev4p2mp_data
                                
                                	TEv4 P2MP context
                                	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData>`
                                
                                .. attribute:: mld_pv4_data
                                
                                	MLDPv4 LSM\-ID context
                                	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data>`
                                
                                .. attribute:: pseudowire_head_end_data
                                
                                	Pseudowire Head\-end label context
                                	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData>`
                                
                                .. attribute:: tp_data
                                
                                	TP context
                                	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData>`
                                
                                .. attribute:: generic_routing_encapsulation
                                
                                	Generic routing encapsulation context
                                	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation>`
                                
                                .. attribute:: ipv6_generic_routing_encapsulation
                                
                                	Generic routing encapsulation context
                                	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation>`
                                
                                .. attribute:: evpn_data
                                
                                	EVPN context
                                	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData>`
                                
                                .. attribute:: ipv4blb_data
                                
                                	BFD BLB label context
                                	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData>`
                                
                                .. attribute:: ipv6blb_data
                                
                                	BFD BLB label context
                                	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData>`
                                
                                .. attribute:: pi_mi_pmsi_data
                                
                                	PIM I\-PMSI label conext
                                	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData>`
                                
                                .. attribute:: pi_ms_pmsi_data
                                
                                	PIM S\-PMSI label conext
                                	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData>`
                                
                                .. attribute:: next_hop_set_l3vpn
                                
                                	L3VPN NH SET label context
                                	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn>`
                                
                                .. attribute:: sr_prefix_segment
                                
                                	SR Prefix Segment context
                                	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment>`
                                
                                .. attribute:: sr_adj_segment_ipv4
                                
                                	SR Adj Segment ipv4 context
                                	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4>`
                                
                                .. attribute:: sr_adj_segment_ipv6
                                
                                	SR Adj Segment ipv6 context
                                	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6>`
                                
                                .. attribute:: label_block_srgb_data
                                
                                	Label block SRGB context
                                	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData>`
                                
                                .. attribute:: te_binding
                                
                                	MPLS TE tunnel binding context
                                	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding>`
                                
                                .. attribute:: label_block_srlb_data
                                
                                	Label block SRLB context
                                	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData>`
                                
                                .. attribute:: label_context_type
                                
                                	LabelContextType
                                	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext, self).__init__()

                                    self.yang_name = "label-context"
                                    self.yang_parent_name = "rewrite-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                                    ])
                                    self.label_context_type = None

                                    self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data()
                                    self.ipv4_data.parent = self
                                    self._children_name_map["ipv4_data"] = "ipv4-data"
                                    self._children_yang_names.add("ipv4-data")

                                    self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data()
                                    self.ipv6_data.parent = self
                                    self._children_name_map["ipv6_data"] = "ipv6-data"
                                    self._children_yang_names.add("ipv6-data")

                                    self.tev4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data()
                                    self.tev4_data.parent = self
                                    self._children_name_map["tev4_data"] = "tev4-data"
                                    self._children_yang_names.add("tev4-data")

                                    self.ipv4l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData()
                                    self.ipv4l3vpn_data.parent = self
                                    self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                                    self._children_yang_names.add("ipv4l3vpn-data")

                                    self.ipv6l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData()
                                    self.ipv6l3vpn_data.parent = self
                                    self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                                    self._children_yang_names.add("ipv6l3vpn-data")

                                    self.vrf_l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData()
                                    self.vrf_l3vpn_data.parent = self
                                    self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                                    self._children_yang_names.add("vrf-l3vpn-data")

                                    self.cev4l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData()
                                    self.cev4l3vpn_data.parent = self
                                    self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                                    self._children_yang_names.add("cev4l3vpn-data")

                                    self.cev6l3vpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData()
                                    self.cev6l3vpn_data.parent = self
                                    self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                                    self._children_yang_names.add("cev6l3vpn-data")

                                    self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData()
                                    self.pseudowire_data.parent = self
                                    self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                    self._children_yang_names.add("pseudowire-data")

                                    self.label_block_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData()
                                    self.label_block_data.parent = self
                                    self._children_name_map["label_block_data"] = "label-block-data"
                                    self._children_yang_names.add("label-block-data")

                                    self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData()
                                    self.ip_sub_data.parent = self
                                    self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                    self._children_yang_names.add("ip-sub-data")

                                    self.tev4p2mp_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData()
                                    self.tev4p2mp_data.parent = self
                                    self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                                    self._children_yang_names.add("tev4p2mp-data")

                                    self.mld_pv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data()
                                    self.mld_pv4_data.parent = self
                                    self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                                    self._children_yang_names.add("mld-pv4-data")

                                    self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData()
                                    self.pseudowire_head_end_data.parent = self
                                    self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                    self._children_yang_names.add("pseudowire-head-end-data")

                                    self.tp_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData()
                                    self.tp_data.parent = self
                                    self._children_name_map["tp_data"] = "tp-data"
                                    self._children_yang_names.add("tp-data")

                                    self.generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation()
                                    self.generic_routing_encapsulation.parent = self
                                    self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                                    self._children_yang_names.add("generic-routing-encapsulation")

                                    self.ipv6_generic_routing_encapsulation = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation()
                                    self.ipv6_generic_routing_encapsulation.parent = self
                                    self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                                    self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                                    self.evpn_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData()
                                    self.evpn_data.parent = self
                                    self._children_name_map["evpn_data"] = "evpn-data"
                                    self._children_yang_names.add("evpn-data")

                                    self.ipv4blb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData()
                                    self.ipv4blb_data.parent = self
                                    self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                                    self._children_yang_names.add("ipv4blb-data")

                                    self.ipv6blb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData()
                                    self.ipv6blb_data.parent = self
                                    self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                                    self._children_yang_names.add("ipv6blb-data")

                                    self.pi_mi_pmsi_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData()
                                    self.pi_mi_pmsi_data.parent = self
                                    self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                                    self._children_yang_names.add("pi-mi-pmsi-data")

                                    self.pi_ms_pmsi_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData()
                                    self.pi_ms_pmsi_data.parent = self
                                    self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                                    self._children_yang_names.add("pi-ms-pmsi-data")

                                    self.next_hop_set_l3vpn = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn()
                                    self.next_hop_set_l3vpn.parent = self
                                    self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                                    self._children_yang_names.add("next-hop-set-l3vpn")

                                    self.sr_prefix_segment = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment()
                                    self.sr_prefix_segment.parent = self
                                    self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                                    self._children_yang_names.add("sr-prefix-segment")

                                    self.sr_adj_segment_ipv4 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4()
                                    self.sr_adj_segment_ipv4.parent = self
                                    self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                                    self._children_yang_names.add("sr-adj-segment-ipv4")

                                    self.sr_adj_segment_ipv6 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6()
                                    self.sr_adj_segment_ipv6.parent = self
                                    self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                                    self._children_yang_names.add("sr-adj-segment-ipv6")

                                    self.label_block_srgb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData()
                                    self.label_block_srgb_data.parent = self
                                    self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                                    self._children_yang_names.add("label-block-srgb-data")

                                    self.te_binding = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding()
                                    self.te_binding.parent = self
                                    self._children_name_map["te_binding"] = "te-binding"
                                    self._children_yang_names.add("te-binding")

                                    self.label_block_srlb_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData()
                                    self.label_block_srlb_data.parent = self
                                    self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                                    self._children_yang_names.add("label-block-srlb-data")
                                    self._segment_path = lambda: "label-context"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext, ['label_context_type'], name, value)


                                class Ipv4Data(Entity):
                                    """
                                    IPv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	IPv4 prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data, self).__init__()

                                        self.yang_name = "ipv4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                        ])
                                        self.table_id = None
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.security_id = None
                                        self.vrf_name = None
                                        self._segment_path = lambda: "ipv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                                class Ipv6Data(Entity):
                                    """
                                    IPv6 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix
                                    
                                    	Prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: vrf_name
                                    
                                    	VRF Name
                                    	**type**\: str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data, self).__init__()

                                        self.yang_name = "ipv6-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                        ])
                                        self.table_id = None
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.security_id = None
                                        self.vrf_name = None
                                        self._segment_path = lambda: "ipv6-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                                class Tev4Data(Entity):
                                    """
                                    TEv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_source
                                    
                                    	Tunnel source
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: tunnel_dest
                                    
                                    	Tunnel destination
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id_extension
                                    
                                    	Extended tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_lsp_id
                                    
                                    	Tunnel LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: is_srte
                                    
                                    	Is this an SRTE head tunnel
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data, self).__init__()

                                        self.yang_name = "tev4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                            ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                            ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                            ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                            ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                            ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                        ])
                                        self.table_id = None
                                        self.tunnel_source = None
                                        self.tunnel_dest = None
                                        self.tunnel_id = None
                                        self.tunnel_id_extension = None
                                        self.tunnel_lsp_id = None
                                        self.is_srte = None
                                        self._segment_path = lambda: "tev4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                                class Ipv4L3VpnData(Entity):
                                    """
                                    L3VPN IPv4 label context
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: route_distinguisher
                                    
                                    	Route distinguisher
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, self).__init__()

                                        self.yang_name = "ipv4l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.route_distinguisher = None
                                        self._segment_path = lambda: "ipv4l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                                class Ipv6L3VpnData(Entity):
                                    """
                                    L3VPN IPv6 label context
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv6 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length
                                    
                                    	Prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: route_distinguisher
                                    
                                    	Route distinguisher
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, self).__init__()

                                        self.yang_name = "ipv6l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                            ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.route_distinguisher = None
                                        self._segment_path = lambda: "ipv6l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                                class VrfL3VpnData(Entity):
                                    """
                                    L3VPN VRF label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, self).__init__()

                                        self.yang_name = "vrf-l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.security_id = None
                                        self._segment_path = lambda: "vrf-l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                                class Cev4L3VpnData(Entity):
                                    """
                                    L3VPN CEv4 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, self).__init__()

                                        self.yang_name = "cev4l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.ipv4_next_hop = None
                                        self.security_id = None
                                        self._segment_path = lambda: "cev4l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                                class Cev6L3VpnData(Entity):
                                    """
                                    L3VPN CEv6 label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: security_id
                                    
                                    	Security ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, self).__init__()

                                        self.yang_name = "cev6l3vpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ])
                                        self.table_id = None
                                        self.ipv6_next_hop = None
                                        self.security_id = None
                                        self._segment_path = lambda: "cev6l3vpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                                class PseudowireData(Entity):
                                    """
                                    Pseudowire label context
                                    
                                    .. attribute:: prefix
                                    
                                    	Address prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: pseudowire_id
                                    
                                    	Pseudo\-wire ID
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    .. attribute:: remote_l2_router_id
                                    
                                    	Remote L2 Router ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: subinterface
                                    
                                    	Subinterface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData, self).__init__()

                                        self.yang_name = "pseudowire-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                            ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                            ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                            ('subinterface', YLeaf(YType.str, 'subinterface')),
                                        ])
                                        self.prefix = None
                                        self.pseudowire_id = None
                                        self.remote_l2_router_id = None
                                        self.subinterface = None
                                        self._segment_path = lambda: "pseudowire-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                                class LabelBlockData(Entity):
                                    """
                                    Label block context
                                    
                                    .. attribute:: service
                                    
                                    	Service
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: vpn_id
                                    
                                    	VPN ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: edge_id
                                    
                                    	Edge ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData, self).__init__()

                                        self.yang_name = "label-block-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('service', YLeaf(YType.uint8, 'service')),
                                            ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                            ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.service = None
                                        self.vpn_id = None
                                        self.edge_id = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                                class IpSubData(Entity):
                                    """
                                    IP Subscriber context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table Id
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: parent_interface
                                    
                                    	Parent interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData, self).__init__()

                                        self.yang_name = "ip-sub-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                        ])
                                        self.table_id = None
                                        self.parent_interface = None
                                        self._segment_path = lambda: "ip-sub-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData, ['table_id', 'parent_interface'], name, value)


                                class Tev4P2MpData(Entity):
                                    """
                                    TEv4 P2MP context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_source
                                    
                                    	Tunnel source
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: p2mp_id
                                    
                                    	Point to multipoint ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_id_extension
                                    
                                    	Tunnel ID extension
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_lsp_id
                                    
                                    	Tunnel LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: previous_hop
                                    
                                    	Previous hop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, self).__init__()

                                        self.yang_name = "tev4p2mp-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                            ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                            ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                            ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                            ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                            ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                        ])
                                        self.table_id = None
                                        self.tunnel_source = None
                                        self.p2mp_id = None
                                        self.tunnel_id = None
                                        self.tunnel_id_extension = None
                                        self.tunnel_lsp_id = None
                                        self.previous_hop = None
                                        self._segment_path = lambda: "tev4p2mp-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                                class MldPv4Data(Entity):
                                    """
                                    MLDPv4 LSM\-ID context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	LSM ID Type
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: lsm_id
                                    
                                    	LSM ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: peer_lsrid
                                    
                                    	Peer LSR Id
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: peer_label_space_id
                                    
                                    	Peer Label Space Id
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data, self).__init__()

                                        self.yang_name = "mld-pv4-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('type', YLeaf(YType.uint16, 'type')),
                                            ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                            ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                            ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                        ])
                                        self.table_id = None
                                        self.type = None
                                        self.lsm_id = None
                                        self.peer_lsrid = None
                                        self.peer_label_space_id = None
                                        self._segment_path = lambda: "mld-pv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                                class PseudowireHeadEndData(Entity):
                                    """
                                    Pseudowire Head\-end label context
                                    
                                    .. attribute:: pwhe_intf
                                    
                                    	Pseudo\-wire Head\-end interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, self).__init__()

                                        self.yang_name = "pseudowire-head-end-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                        ])
                                        self.pwhe_intf = None
                                        self._segment_path = lambda: "pseudowire-head-end-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                                class TpData(Entity):
                                    """
                                    TP context
                                    
                                    .. attribute:: source_global_id
                                    
                                    	TP source global ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: source_node_id
                                    
                                    	TP source node ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: dest_global_id
                                    
                                    	TP destination global ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: dest_node_id
                                    
                                    	TP destination node ID
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: source_tunnel_id
                                    
                                    	TP source tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: dest_tunnel_id
                                    
                                    	TP destination tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: lsp_id
                                    
                                    	TP LSP ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData, self).__init__()

                                        self.yang_name = "tp-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                            ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                            ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                            ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                            ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                            ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                            ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                        ])
                                        self.source_global_id = None
                                        self.source_node_id = None
                                        self.dest_global_id = None
                                        self.dest_node_id = None
                                        self.source_tunnel_id = None
                                        self.dest_tunnel_id = None
                                        self.lsp_id = None
                                        self._segment_path = lambda: "tp-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                                class GenericRoutingEncapsulation(Entity):
                                    """
                                    Generic routing encapsulation context
                                    
                                    .. attribute:: gre_interface
                                    
                                    	Generic routing encapsulation interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, self).__init__()

                                        self.yang_name = "generic-routing-encapsulation"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                        ])
                                        self.gre_interface = None
                                        self._segment_path = lambda: "generic-routing-encapsulation"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                                class Ipv6GenericRoutingEncapsulation(Entity):
                                    """
                                    Generic routing encapsulation context
                                    
                                    .. attribute:: greipv6_interface
                                    
                                    	Generic routing encapsulation IPv6 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, self).__init__()

                                        self.yang_name = "ipv6-generic-routing-encapsulation"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                        ])
                                        self.greipv6_interface = None
                                        self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                                class EvpnData(Entity):
                                    """
                                    EVPN context
                                    
                                    .. attribute:: evpn_id
                                    
                                    	EVPN ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: evpn_tag
                                    
                                    	EVPN TAG
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ethernet_segment
                                    
                                    	Ethernet Segment ID
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData, self).__init__()

                                        self.yang_name = "evpn-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                            ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                            ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                        ])
                                        self.evpn_id = None
                                        self.evpn_tag = None
                                        self.ethernet_segment = None
                                        self._segment_path = lambda: "evpn-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                                class Ipv4BlbData(Entity):
                                    """
                                    BFD BLB label context
                                    
                                    .. attribute:: blb_intf
                                    
                                    	BFD BLB interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv4 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, self).__init__()

                                        self.yang_name = "ipv4blb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                        ])
                                        self.blb_intf = None
                                        self.prefix = None
                                        self._segment_path = lambda: "ipv4blb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                                class Ipv6BlbData(Entity):
                                    """
                                    BFD BLB label context
                                    
                                    .. attribute:: blb_intf
                                    
                                    	BFD BLB interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: prefix
                                    
                                    	IPv6 prefix
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, self).__init__()

                                        self.yang_name = "ipv6blb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                            ('prefix', YLeaf(YType.str, 'prefix')),
                                        ])
                                        self.blb_intf = None
                                        self.prefix = None
                                        self._segment_path = lambda: "ipv6blb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                                class PiMiPmsiData(Entity):
                                    """
                                    PIM I\-PMSI label conext
                                    
                                    .. attribute:: vrf_id
                                    
                                    	VRF ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: head
                                    
                                    	Head
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: v6
                                    
                                    	PIM6
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, self).__init__()

                                        self.yang_name = "pi-mi-pmsi-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                            ('head', YLeaf(YType.int32, 'head')),
                                            ('v6', YLeaf(YType.int32, 'v6')),
                                        ])
                                        self.vrf_id = None
                                        self.head = None
                                        self.v6 = None
                                        self._segment_path = lambda: "pi-mi-pmsi-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                                class PiMsPmsiData(Entity):
                                    """
                                    PIM S\-PMSI label conext
                                    
                                    .. attribute:: vrf_id
                                    
                                    	VRF ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: source
                                    
                                    	Originating Router
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: head
                                    
                                    	Head
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: v6
                                    
                                    	PIM6
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: hli
                                    
                                    	Head LSM\-ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: seg
                                    
                                    	Segmented Multicast
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, self).__init__()

                                        self.yang_name = "pi-ms-pmsi-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                            ('source', YLeaf(YType.str, 'source')),
                                            ('head', YLeaf(YType.int32, 'head')),
                                            ('v6', YLeaf(YType.int32, 'v6')),
                                            ('hli', YLeaf(YType.uint32, 'hli')),
                                            ('seg', YLeaf(YType.int32, 'seg')),
                                        ])
                                        self.vrf_id = None
                                        self.source = None
                                        self.head = None
                                        self.v6 = None
                                        self.hli = None
                                        self.seg = None
                                        self._segment_path = lambda: "pi-ms-pmsi-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                                class NextHopSetL3Vpn(Entity):
                                    """
                                    L3VPN NH SET label context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: next_hop_set_id
                                    
                                    	Next Hop Set ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, self).__init__()

                                        self.yang_name = "next-hop-set-l3vpn"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                        ])
                                        self.table_id = None
                                        self.next_hop_set_id = None
                                        self._segment_path = lambda: "next-hop-set-l3vpn"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                                class SrPrefixSegment(Entity):
                                    """
                                    SR Prefix Segment context
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: segment_id
                                    
                                    	Prefix Segment ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, self).__init__()

                                        self.yang_name = "sr-prefix-segment"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                        ])
                                        self.table_id = None
                                        self.segment_id = None
                                        self._segment_path = lambda: "sr-prefix-segment"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                                class SrAdjSegmentIpv4(Entity):
                                    """
                                    SR Adj Segment ipv4 context
                                    
                                    .. attribute:: index
                                    
                                    	Adjacency index
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	Adjacency type
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: intf
                                    
                                    	Adjacency interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: addr
                                    
                                    	Adjacency nexthop IPv4 address
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, self).__init__()

                                        self.yang_name = "sr-adj-segment-ipv4"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('index', YLeaf(YType.uint32, 'index')),
                                            ('type', YLeaf(YType.uint32, 'type')),
                                            ('intf', YLeaf(YType.str, 'intf')),
                                            ('addr', YLeaf(YType.str, 'addr')),
                                        ])
                                        self.index = None
                                        self.type = None
                                        self.intf = None
                                        self.addr = None
                                        self._segment_path = lambda: "sr-adj-segment-ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                                class SrAdjSegmentIpv6(Entity):
                                    """
                                    SR Adj Segment ipv6 context
                                    
                                    .. attribute:: index
                                    
                                    	Adjacency index
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type
                                    
                                    	Adjacency type
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: intf
                                    
                                    	Adjacency interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: addr
                                    
                                    	Adjacency nexthop IPv6 address
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, self).__init__()

                                        self.yang_name = "sr-adj-segment-ipv6"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('index', YLeaf(YType.uint32, 'index')),
                                            ('type', YLeaf(YType.uint32, 'type')),
                                            ('intf', YLeaf(YType.str, 'intf')),
                                            ('addr', YLeaf(YType.str, 'addr')),
                                        ])
                                        self.index = None
                                        self.type = None
                                        self.intf = None
                                        self.addr = None
                                        self._segment_path = lambda: "sr-adj-segment-ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                                class LabelBlockSrgbData(Entity):
                                    """
                                    Label block SRGB context
                                    
                                    .. attribute:: start_label
                                    
                                    	Start Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, self).__init__()

                                        self.yang_name = "label-block-srgb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('start_label', YLeaf(YType.uint32, 'start-label')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.start_label = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-srgb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                                class TeBinding(Entity):
                                    """
                                    MPLS TE tunnel binding context
                                    
                                    .. attribute:: te_identifier
                                    
                                    	MPLS Traffic Engineering Tunnel or Group ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: te_type
                                    
                                    	Type of identifier for the binding
                                    	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding, self).__init__()

                                        self.yang_name = "te-binding"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                            ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                        ])
                                        self.te_identifier = None
                                        self.te_type = None
                                        self._segment_path = lambda: "te-binding"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding, ['te_identifier', 'te_type'], name, value)


                                class LabelBlockSrlbData(Entity):
                                    """
                                    Label block SRLB context
                                    
                                    .. attribute:: start_label
                                    
                                    	Start Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: offset
                                    
                                    	Offset
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: size
                                    
                                    	Number of labels
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, self).__init__()

                                        self.yang_name = "label-block-srlb-data"
                                        self.yang_parent_name = "label-context"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('start_label', YLeaf(YType.uint32, 'start-label')),
                                            ('offset', YLeaf(YType.uint32, 'offset')),
                                            ('size', YLeaf(YType.uint32, 'size')),
                                        ])
                                        self.start_label = None
                                        self.offset = None
                                        self.size = None
                                        self._segment_path = lambda: "label-block-srlb-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                            class LocalLabelRewrite(Entity):
                                """
                                Local label rewrite information
                                
                                .. attribute:: label_data
                                
                                	label data
                                	**type**\: list of  		 :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite.LabelData>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite, self).__init__()

                                    self.yang_name = "local-label-rewrite"
                                    self.yang_parent_name = "rewrite-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite.LabelData))])
                                    self._leafs = OrderedDict()

                                    self.label_data = YList(self)
                                    self._segment_path = lambda: "local-label-rewrite"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite, [], name, value)


                                class LabelData(Entity):
                                    """
                                    label data
                                    
                                    .. attribute:: entry
                                    
                                    	
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, self).__init__()

                                        self.yang_name = "label-data"
                                        self.yang_parent_name = "local-label-rewrite"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('entry', YLeaf(YType.uint32, 'entry')),
                                        ])
                                        self.entry = None
                                        self._segment_path = lambda: "label-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, ['entry'], name, value)


                    class AssociatedFpi(Entity):
                        """
                        Associated FPI
                        
                        .. attribute:: fpi
                        
                        	FPI
                        	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi>`
                        
                        .. attribute:: application_owner
                        
                        	Application owner instance
                        	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.ApplicationOwner>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi, self).__init__()

                            self.yang_name = "associated-fpi"
                            self.yang_parent_name = "rewrite-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi))])
                            self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.ApplicationOwner))])
                            self._leafs = OrderedDict()

                            self.fpi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi()
                            self.fpi.parent = self
                            self._children_name_map["fpi"] = "fpi"
                            self._children_yang_names.add("fpi")

                            self.application_owner = YList(self)
                            self._segment_path = lambda: "associated-fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi, [], name, value)


                        class Fpi(Entity):
                            """
                            FPI
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData>`
                            
                            .. attribute:: te_data
                            
                            	te data
                            	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData>`
                            
                            .. attribute:: dmtc_ext_intf_data
                            
                            	dmtc ext intf data
                            	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData>`
                            
                            .. attribute:: fpi_type
                            
                            	FPIType
                            	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi, self).__init__()

                                self.yang_name = "fpi"
                                self.yang_parent_name = "associated-fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData)), ("te-data", ("te_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                                ])
                                self.fpi_type = None

                                self.label_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData()
                                self.label_data.parent = self
                                self._children_name_map["label_data"] = "label-data"
                                self._children_yang_names.add("label-data")

                                self.te_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData()
                                self.te_data.parent = self
                                self._children_name_map["te_data"] = "te-data"
                                self._children_yang_names.add("te-data")

                                self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.dmtc_ext_intf_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData()
                                self.dmtc_ext_intf_data.parent = self
                                self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                                self._children_yang_names.add("dmtc-ext-intf-data")
                                self._segment_path = lambda: "fpi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi, ['fpi_type'], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: label
                                
                                	Label value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: elc
                                
                                	ELC
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('label', YLeaf(YType.uint32, 'label')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('elc', YLeaf(YType.int32, 'elc')),
                                    ])
                                    self.label = None
                                    self.security_id = None
                                    self.elc = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                            class TeData(Entity):
                                """
                                te data
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: local_label
                                
                                	Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData, self).__init__()

                                    self.yang_name = "te-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.tunnel_interface = None
                                    self.local_label = None
                                    self._segment_path = lambda: "te-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sr_local_label
                                
                                	SR related Local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                        ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.version = None
                                    self.sr_local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: router_flags
                                
                                	Route flags
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_len
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                        ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                        ('version', YLeaf(YType.uint32, 'version')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.router_flags = None
                                    self.prefix_len = None
                                    self.version = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: pwhe_list_id
                                
                                	Pseudowire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                    ])
                                    self.pwhe_list_id = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData, ['pwhe_list_id'], name, value)


                            class DmtcExtIntfData(Entity):
                                """
                                dmtc ext intf data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData, self).__init__()

                                    self.yang_name = "dmtc-ext-intf-data"
                                    self.yang_parent_name = "fpi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-ext-intf-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                        class ApplicationOwner(Entity):
                            """
                            Application owner instance
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.ApplicationOwner, self).__init__()

                                self.yang_name = "application-owner"
                                self.yang_parent_name = "associated-fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-owner"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class V4Rpf(Entity):
                        """
                        IPv4 RPF neighbors
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: v4_rpf_neighbor
                        
                        	V4 RPF Neighbor
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.V4Rpf, self).__init__()

                            self.yang_name = "v4-rpf"
                            self.yang_parent_name = "rewrite-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('v4_rpf_neighbor', YLeaf(YType.str, 'v4-rpf-neighbor')),
                            ])
                            self.table_id = None
                            self.v4_rpf_neighbor = None
                            self._segment_path = lambda: "v4-rpf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.V4Rpf, ['table_id', 'v4_rpf_neighbor'], name, value)


                    class V6Rpf(Entity):
                        """
                        IPv6 RPF neighbors
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: v6_rpf_neighbor
                        
                        	V6 RPF Neighbor
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.V6Rpf, self).__init__()

                            self.yang_name = "v6-rpf"
                            self.yang_parent_name = "rewrite-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('v6_rpf_neighbor', YLeaf(YType.str, 'v6-rpf-neighbor')),
                            ])
                            self.table_id = None
                            self.v6_rpf_neighbor = None
                            self._segment_path = lambda: "v6-rpf"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.V6Rpf, ['table_id', 'v6_rpf_neighbor'], name, value)


                    class Mois(Entity):
                        """
                        Mois
                        
                        .. attribute:: application_resource
                        
                        	Application state
                        	**type**\:  :py:class:`ApplicationResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource>`
                        
                        .. attribute:: moi_array
                        
                        	moi array
                        	**type**\: list of  		 :py:class:`MoiArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois, self).__init__()

                            self.yang_name = "mois"
                            self.yang_parent_name = "rewrite-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("application-resource", ("application_resource", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource))])
                            self._child_list_classes = OrderedDict([("moi-array", ("moi_array", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray))])
                            self._leafs = OrderedDict()

                            self.application_resource = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource()
                            self.application_resource.parent = self
                            self._children_name_map["application_resource"] = "application-resource"
                            self._children_yang_names.add("application-resource")

                            self.moi_array = YList(self)
                            self._segment_path = lambda: "mois"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois, [], name, value)


                        class ApplicationResource(Entity):
                            """
                            Application state
                            
                            .. attribute:: application_name
                            
                            	Application name
                            	**type**\: str
                            
                            .. attribute:: application_type
                            
                            	Application type
                            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                            
                            .. attribute:: application_role_primary
                            
                            	Primary/Backup role
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: application_instance
                            
                            	Application instance Name
                            	**type**\: str
                            
                            .. attribute:: resource_state
                            
                            	Application resource state
                            	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource, self).__init__()

                                self.yang_name = "application-resource"
                                self.yang_parent_name = "mois"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('application_name', YLeaf(YType.str, 'application-name')),
                                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                                    ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                                ])
                                self.application_name = None
                                self.application_type = None
                                self.application_role_primary = None
                                self.application_instance = None
                                self.resource_state = None
                                self._segment_path = lambda: "application-resource"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                        class MoiArray(Entity):
                            """
                            moi array
                            
                            .. attribute:: moi
                            
                            	Moi
                            	**type**\:  :py:class:`Moi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray, self).__init__()

                                self.yang_name = "moi-array"
                                self.yang_parent_name = "mois"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("moi", ("moi", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.moi = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi()
                                self.moi.parent = self
                                self._children_name_map["moi"] = "moi"
                                self._children_yang_names.add("moi")
                                self._segment_path = lambda: "moi-array"


                            class Moi(Entity):
                                """
                                Moi
                                
                                .. attribute:: pop_and_lookup_ipv4
                                
                                	pop and lookup ipv4
                                	**type**\:  :py:class:`PopAndLookupIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4>`
                                
                                .. attribute:: pop_and_lookup_tp
                                
                                	pop and lookup tp
                                	**type**\:  :py:class:`PopAndLookupTp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp>`
                                
                                .. attribute:: pop_and_lookup_ipv6
                                
                                	pop and lookup ipv6
                                	**type**\:  :py:class:`PopAndLookupIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6>`
                                
                                .. attribute:: ipv4_data
                                
                                	ipv4 data
                                	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data>`
                                
                                .. attribute:: ipv6_data
                                
                                	ipv6 data
                                	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data>`
                                
                                .. attribute:: tev4_data
                                
                                	tev4 data
                                	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data>`
                                
                                .. attribute:: pseudowire_data
                                
                                	pseudowire data
                                	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData>`
                                
                                .. attribute:: ip_sub_data
                                
                                	ip sub data
                                	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData>`
                                
                                .. attribute:: pseudowire_head_end_data
                                
                                	pseudowire head end data
                                	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData>`
                                
                                .. attribute:: pw_list_data
                                
                                	pw list data
                                	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData>`
                                
                                .. attribute:: stackv4_data
                                
                                	stackv4 data
                                	**type**\:  :py:class:`Stackv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data>`
                                
                                .. attribute:: stackv6_data
                                
                                	stackv6 data
                                	**type**\:  :py:class:`Stackv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data>`
                                
                                .. attribute:: te_head_data
                                
                                	te head data
                                	**type**\:  :py:class:`TeHeadData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData>`
                                
                                .. attribute:: dmtc_data
                                
                                	dmtc data
                                	**type**\:  :py:class:`DmtcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData>`
                                
                                .. attribute:: moi_type
                                
                                	MoiType
                                	**type**\:  :py:class:`MgmtLsdMoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdMoi>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi, self).__init__()

                                    self.yang_name = "moi"
                                    self.yang_parent_name = "moi-array"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("pop-and-lookup-ipv4", ("pop_and_lookup_ipv4", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4)), ("pop-and-lookup-tp", ("pop_and_lookup_tp", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp)), ("pop-and-lookup-ipv6", ("pop_and_lookup_ipv6", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6)), ("ipv4-data", ("ipv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data)), ("pseudowire-data", ("pseudowire_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData)), ("ip-sub-data", ("ip_sub_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData)), ("pw-list-data", ("pw_list_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData)), ("stackv4-data", ("stackv4_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data)), ("stackv6-data", ("stackv6_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data)), ("te-head-data", ("te_head_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData)), ("dmtc-data", ("dmtc_data", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('moi_type', YLeaf(YType.enumeration, 'moi-type')),
                                    ])
                                    self.moi_type = None

                                    self.pop_and_lookup_ipv4 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4()
                                    self.pop_and_lookup_ipv4.parent = self
                                    self._children_name_map["pop_and_lookup_ipv4"] = "pop-and-lookup-ipv4"
                                    self._children_yang_names.add("pop-and-lookup-ipv4")

                                    self.pop_and_lookup_tp = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp()
                                    self.pop_and_lookup_tp.parent = self
                                    self._children_name_map["pop_and_lookup_tp"] = "pop-and-lookup-tp"
                                    self._children_yang_names.add("pop-and-lookup-tp")

                                    self.pop_and_lookup_ipv6 = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6()
                                    self.pop_and_lookup_ipv6.parent = self
                                    self._children_name_map["pop_and_lookup_ipv6"] = "pop-and-lookup-ipv6"
                                    self._children_yang_names.add("pop-and-lookup-ipv6")

                                    self.ipv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data()
                                    self.ipv4_data.parent = self
                                    self._children_name_map["ipv4_data"] = "ipv4-data"
                                    self._children_yang_names.add("ipv4-data")

                                    self.ipv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data()
                                    self.ipv6_data.parent = self
                                    self._children_name_map["ipv6_data"] = "ipv6-data"
                                    self._children_yang_names.add("ipv6-data")

                                    self.tev4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data()
                                    self.tev4_data.parent = self
                                    self._children_name_map["tev4_data"] = "tev4-data"
                                    self._children_yang_names.add("tev4-data")

                                    self.pseudowire_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData()
                                    self.pseudowire_data.parent = self
                                    self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                    self._children_yang_names.add("pseudowire-data")

                                    self.ip_sub_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData()
                                    self.ip_sub_data.parent = self
                                    self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                    self._children_yang_names.add("ip-sub-data")

                                    self.pseudowire_head_end_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData()
                                    self.pseudowire_head_end_data.parent = self
                                    self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                    self._children_yang_names.add("pseudowire-head-end-data")

                                    self.pw_list_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData()
                                    self.pw_list_data.parent = self
                                    self._children_name_map["pw_list_data"] = "pw-list-data"
                                    self._children_yang_names.add("pw-list-data")

                                    self.stackv4_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data()
                                    self.stackv4_data.parent = self
                                    self._children_name_map["stackv4_data"] = "stackv4-data"
                                    self._children_yang_names.add("stackv4-data")

                                    self.stackv6_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data()
                                    self.stackv6_data.parent = self
                                    self._children_name_map["stackv6_data"] = "stackv6-data"
                                    self._children_yang_names.add("stackv6-data")

                                    self.te_head_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData()
                                    self.te_head_data.parent = self
                                    self._children_name_map["te_head_data"] = "te-head-data"
                                    self._children_yang_names.add("te-head-data")

                                    self.dmtc_data = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData()
                                    self.dmtc_data.parent = self
                                    self._children_name_map["dmtc_data"] = "dmtc-data"
                                    self._children_yang_names.add("dmtc-data")
                                    self._segment_path = lambda: "moi"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi, ['moi_type'], name, value)


                                class PopAndLookupIpv4(Entity):
                                    """
                                    pop and lookup ipv4
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4, self).__init__()

                                        self.yang_name = "pop-and-lookup-ipv4"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pop-and-lookup-ipv4"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                                class PopAndLookupTp(Entity):
                                    """
                                    pop and lookup tp
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp, self).__init__()

                                        self.yang_name = "pop-and-lookup-tp"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_label = None
                                        self._segment_path = lambda: "pop-and-lookup-tp"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp, ['table_id', 'table_name', 'path_flags_decode', 'out_label'], name, value)


                                class PopAndLookupIpv6(Entity):
                                    """
                                    pop and lookup ipv6
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6, self).__init__()

                                        self.yang_name = "pop-and-lookup-ipv6"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pop-and-lookup-ipv6"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                                class Ipv4Data(Entity):
                                    """
                                    ipv4 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: load_metric
                                    
                                    	Routing path's load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_label
                                    
                                    	TE backup path local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data, self).__init__()

                                        self.yang_name = "ipv4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('local_label', YLeaf(YType.uint32, 'local-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_interface_parent = None
                                        self.ipv4_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.load_metric = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.tunnel_id = None
                                        self.next_hop_id = None
                                        self.local_label = None
                                        self._segment_path = lambda: "ipv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                class Ipv6Data(Entity):
                                    """
                                    ipv6 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data, self).__init__()

                                        self.yang_name = "ipv6-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv6_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.next_hop_id = None
                                        self.out_interface_parent = None
                                        self._segment_path = lambda: "ipv6-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                class Tev4Data(Entity):
                                    """
                                    tev4 data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: backup_interface
                                    
                                    	Backup interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: backup_ipv4_next_hop
                                    
                                    	Backup IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: merge_point_label
                                    
                                    	Merge point label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: backup_local_label
                                    
                                    	Backup local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_interface
                                    
                                    	Tunnel interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: tunnel_weight
                                    
                                    	Tunnel weight
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: data_out_parent_interface
                                    
                                    	Outgoing data parent interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: tunnel_class
                                    
                                    	Tunnel class
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data, self).__init__()

                                        self.yang_name = "tev4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                            ('backup_ipv4_next_hop', YLeaf(YType.str, 'backup-ipv4-next-hop')),
                                            ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                                            ('backup_local_label', YLeaf(YType.uint32, 'backup-local-label')),
                                            ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                            ('tunnel_weight', YLeaf(YType.uint32, 'tunnel-weight')),
                                            ('data_out_parent_interface', YLeaf(YType.str, 'data-out-parent-interface')),
                                            ('tunnel_class', YLeaf(YType.uint32, 'tunnel-class')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv4_next_hop = None
                                        self.backup_interface = None
                                        self.backup_ipv4_next_hop = None
                                        self.merge_point_label = None
                                        self.backup_local_label = None
                                        self.tunnel_interface = None
                                        self.tunnel_weight = None
                                        self.data_out_parent_interface = None
                                        self.tunnel_class = None
                                        self._segment_path = lambda: "tev4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv4_next_hop', 'backup_interface', 'backup_ipv4_next_hop', 'merge_point_label', 'backup_local_label', 'tunnel_interface', 'tunnel_weight', 'data_out_parent_interface', 'tunnel_class'], name, value)


                                class PseudowireData(Entity):
                                    """
                                    pseudowire data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: cross_connect_id
                                    
                                    	Cross\-connect ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: pseuodo_wire_connect_id
                                    
                                    	PseudoWire Cross\-connect ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: bridge_id
                                    
                                    	Bridge ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: split_horizon_id
                                    
                                    	Split horizon group ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData, self).__init__()

                                        self.yang_name = "pseudowire-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('cross_connect_id', YLeaf(YType.uint32, 'cross-connect-id')),
                                            ('pseuodo_wire_connect_id', YLeaf(YType.uint32, 'pseuodo-wire-connect-id')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('bridge_id', YLeaf(YType.uint32, 'bridge-id')),
                                            ('split_horizon_id', YLeaf(YType.uint32, 'split-horizon-id')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.cross_connect_id = None
                                        self.pseuodo_wire_connect_id = None
                                        self.ipv4_next_hop = None
                                        self.bridge_id = None
                                        self.split_horizon_id = None
                                        self._segment_path = lambda: "pseudowire-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'cross_connect_id', 'pseuodo_wire_connect_id', 'ipv4_next_hop', 'bridge_id', 'split_horizon_id'], name, value)


                                class IpSubData(Entity):
                                    """
                                    ip sub data
                                    
                                    .. attribute:: table_id
                                    
                                    	VRF table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData, self).__init__()

                                        self.yang_name = "ip-sub-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.out_interface = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "ip-sub-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData, ['table_id', 'table_name', 'out_interface', 'path_flags_decode'], name, value)


                                class PseudowireHeadEndData(Entity):
                                    """
                                    pseudowire head end data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: control_word
                                    
                                    	Is control word present
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: imposition
                                    
                                    	Is PWHE IMposition
                                    	**type**\: int
                                    
                                    	**range:** \-2147483648..2147483647
                                    
                                    .. attribute:: vctype
                                    
                                    	Virtual Circuit Type
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: pw_list_id
                                    
                                    	Pseudo\-wire List Identifier
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: pwhe_interface
                                    
                                    	Pseudo\-wire Head\-end interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData, self).__init__()

                                        self.yang_name = "pseudowire-head-end-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('control_word', YLeaf(YType.int32, 'control-word')),
                                            ('imposition', YLeaf(YType.int32, 'imposition')),
                                            ('vctype', YLeaf(YType.uint8, 'vctype')),
                                            ('pw_list_id', YLeaf(YType.uint16, 'pw-list-id')),
                                            ('pwhe_interface', YLeaf(YType.str, 'pwhe-interface')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.ipv4_next_hop = None
                                        self.control_word = None
                                        self.imposition = None
                                        self.vctype = None
                                        self.pw_list_id = None
                                        self.pwhe_interface = None
                                        self._segment_path = lambda: "pseudowire-head-end-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'ipv4_next_hop', 'control_word', 'imposition', 'vctype', 'pw_list_id', 'pwhe_interface'], name, value)


                                class PwListData(Entity):
                                    """
                                    pw list data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: l3_interface
                                    
                                    	Pseudo\-wire Layer 3 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: l2_interface
                                    
                                    	Pseudo\-wire Layer 2 interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData, self).__init__()

                                        self.yang_name = "pw-list-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('l3_interface', YLeaf(YType.str, 'l3-interface')),
                                            ('l2_interface', YLeaf(YType.str, 'l2-interface')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.l3_interface = None
                                        self.l2_interface = None
                                        self.path_flags_decode = None
                                        self._segment_path = lambda: "pw-list-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData, ['table_id', 'table_name', 'l3_interface', 'l2_interface', 'path_flags_decode'], name, value)


                                class Stackv4Data(Entity):
                                    """
                                    stackv4 data
                                    
                                    .. attribute:: nexthop
                                    
                                    	Nexthop
                                    	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop>`
                                    
                                    .. attribute:: inner_stack
                                    
                                    	Inner stack
                                    	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack>`
                                    
                                    .. attribute:: owner_application_type
                                    
                                    	Owner application type
                                    	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data, self).__init__()

                                        self.yang_name = "stackv4-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('owner_application_type', YLeaf(YType.enumeration, 'owner-application-type')),
                                        ])
                                        self.owner_application_type = None

                                        self.nexthop = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop()
                                        self.nexthop.parent = self
                                        self._children_name_map["nexthop"] = "nexthop"
                                        self._children_yang_names.add("nexthop")

                                        self.inner_stack = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack()
                                        self.inner_stack.parent = self
                                        self._children_name_map["inner_stack"] = "inner-stack"
                                        self._children_yang_names.add("inner-stack")
                                        self._segment_path = lambda: "stackv4-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data, ['owner_application_type'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Nexthop
                                        
                                        .. attribute:: table_id
                                        
                                        	Table ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: table_name
                                        
                                        	VRF table name
                                        	**type**\: str
                                        
                                        .. attribute:: path_flags_decode
                                        
                                        	Path flag decoded string
                                        	**type**\: str
                                        
                                        .. attribute:: out_interface
                                        
                                        	Outgoing Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: out_interface_parent
                                        
                                        	Outgoing Interface's parent
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: ipv4_next_hop
                                        
                                        	IPv4 nexthop
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	Routing path id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: backup_path_id
                                        
                                        	Routing path backup id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: load_metric
                                        
                                        	Routing path's load metric
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label
                                        
                                        	Outgoing Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label_name
                                        
                                        	Outgoing label name
                                        	**type**\: str
                                        
                                        .. attribute:: tunnel_id
                                        
                                        	Tunnel ID
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: next_hop_id
                                        
                                        	Next hop ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: local_label
                                        
                                        	TE backup path local label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "stackv4-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                                ('table_name', YLeaf(YType.str, 'table-name')),
                                                ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                                ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                                ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                                ('path_id', YLeaf(YType.uint8, 'path-id')),
                                                ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                                ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                                ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                                ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                                ('local_label', YLeaf(YType.uint32, 'local-label')),
                                            ])
                                            self.table_id = None
                                            self.table_name = None
                                            self.path_flags_decode = None
                                            self.out_interface = None
                                            self.out_interface_parent = None
                                            self.ipv4_next_hop = None
                                            self.path_id = None
                                            self.backup_path_id = None
                                            self.load_metric = None
                                            self.out_label = None
                                            self.out_label_name = None
                                            self.tunnel_id = None
                                            self.next_hop_id = None
                                            self.local_label = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                    class InnerStack(Entity):
                                        """
                                        Inner stack
                                        
                                        .. attribute:: num_nexthops
                                        
                                        	Number of remote nexthop addresses
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: num_lbls
                                        
                                        	Depth of inner label stack
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: nexthop
                                        
                                        	Remote nexthop addresses
                                        	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop>`
                                        
                                        .. attribute:: label
                                        
                                        	Info related to outgoing labels
                                        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label>`
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack, self).__init__()

                                            self.yang_name = "inner-stack"
                                            self.yang_parent_name = "stackv4-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop)), ("label", ("label", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label))])
                                            self._leafs = OrderedDict([
                                                ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                                ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                            ])
                                            self.num_nexthops = None
                                            self.num_lbls = None

                                            self.nexthop = YList(self)
                                            self.label = YList(self)
                                            self._segment_path = lambda: "inner-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                        class Nexthop(Entity):
                                            """
                                            Remote nexthop addresses
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, self).__init__()

                                                self.yang_name = "nexthop"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.str, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "nexthop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, ['entry'], name, value)


                                        class Label(Entity):
                                            """
                                            Info related to outgoing labels
                                            
                                            .. attribute:: outgoing_label
                                            
                                            	Remote Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: outgoing_label_str
                                            
                                            	Remote Label string
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, self).__init__()

                                                self.yang_name = "label"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                    ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                                ])
                                                self.outgoing_label = None
                                                self.outgoing_label_str = None
                                                self._segment_path = lambda: "label"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                                class Stackv6Data(Entity):
                                    """
                                    stackv6 data
                                    
                                    .. attribute:: nexthop
                                    
                                    	Nexthop
                                    	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop>`
                                    
                                    .. attribute:: inner_stack
                                    
                                    	Inner stack
                                    	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data, self).__init__()

                                        self.yang_name = "stackv6-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.nexthop = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop()
                                        self.nexthop.parent = self
                                        self._children_name_map["nexthop"] = "nexthop"
                                        self._children_yang_names.add("nexthop")

                                        self.inner_stack = MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack()
                                        self.inner_stack.parent = self
                                        self._children_name_map["inner_stack"] = "inner-stack"
                                        self._children_yang_names.add("inner-stack")
                                        self._segment_path = lambda: "stackv6-data"


                                    class Nexthop(Entity):
                                        """
                                        Nexthop
                                        
                                        .. attribute:: table_id
                                        
                                        	Table ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: table_name
                                        
                                        	VRF table name
                                        	**type**\: str
                                        
                                        .. attribute:: path_flags_decode
                                        
                                        	Path flag decoded string
                                        	**type**\: str
                                        
                                        .. attribute:: out_interface
                                        
                                        	Outgoing interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        .. attribute:: out_label
                                        
                                        	Outgoing label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_label_name
                                        
                                        	Outgoing label name
                                        	**type**\: str
                                        
                                        .. attribute:: ipv6_next_hop
                                        
                                        	IPv6 nexthop
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        .. attribute:: path_id
                                        
                                        	Routing path id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: backup_path_id
                                        
                                        	Routing path backup id
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: next_hop_id
                                        
                                        	Next hop ID
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: out_interface_parent
                                        
                                        	Outgoing Interface's parent
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "stackv6-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                                ('table_name', YLeaf(YType.str, 'table-name')),
                                                ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                                ('out_interface', YLeaf(YType.str, 'out-interface')),
                                                ('out_label', YLeaf(YType.uint32, 'out-label')),
                                                ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                                ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                                ('path_id', YLeaf(YType.uint8, 'path-id')),
                                                ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                                ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                                ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ])
                                            self.table_id = None
                                            self.table_name = None
                                            self.path_flags_decode = None
                                            self.out_interface = None
                                            self.out_label = None
                                            self.out_label_name = None
                                            self.ipv6_next_hop = None
                                            self.path_id = None
                                            self.backup_path_id = None
                                            self.next_hop_id = None
                                            self.out_interface_parent = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                    class InnerStack(Entity):
                                        """
                                        Inner stack
                                        
                                        .. attribute:: num_nexthops
                                        
                                        	Number of remote nexthop addresses
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: num_lbls
                                        
                                        	Depth of inner label stack
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: nexthop
                                        
                                        	Remote nexthop addresses
                                        	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop>`
                                        
                                        .. attribute:: label
                                        
                                        	Info related to outgoing labels
                                        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label>`
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack, self).__init__()

                                            self.yang_name = "inner-stack"
                                            self.yang_parent_name = "stackv6-data"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop)), ("label", ("label", MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label))])
                                            self._leafs = OrderedDict([
                                                ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                                ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                            ])
                                            self.num_nexthops = None
                                            self.num_lbls = None

                                            self.nexthop = YList(self)
                                            self.label = YList(self)
                                            self._segment_path = lambda: "inner-stack"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                        class Nexthop(Entity):
                                            """
                                            Remote nexthop addresses
                                            
                                            .. attribute:: entry
                                            
                                            	
                                            	**type**\: str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, self).__init__()

                                                self.yang_name = "nexthop"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('entry', YLeaf(YType.str, 'entry')),
                                                ])
                                                self.entry = None
                                                self._segment_path = lambda: "nexthop"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, ['entry'], name, value)


                                        class Label(Entity):
                                            """
                                            Info related to outgoing labels
                                            
                                            .. attribute:: outgoing_label
                                            
                                            	Remote Label
                                            	**type**\: int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: outgoing_label_str
                                            
                                            	Remote Label string
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'mpls-lsd-oper'
                                            _revision = '2017-05-01'

                                            def __init__(self):
                                                super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, self).__init__()

                                                self.yang_name = "label"
                                                self.yang_parent_name = "inner-stack"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                    ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                                ])
                                                self.outgoing_label = None
                                                self.outgoing_label_str = None
                                                self._segment_path = lambda: "label"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                                class TeHeadData(Entity):
                                    """
                                    te head data
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_local_label
                                    
                                    	Tunnel local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: tunnel_local_label_str
                                    
                                    	Tunnel local label stringified
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_fwd_class
                                    
                                    	Tunnel forwarding class
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: tunnel_load_metric
                                    
                                    	Tunnel Load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: flags_decode
                                    
                                    	Flags decoded string
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData, self).__init__()

                                        self.yang_name = "te-head-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('tunnel_local_label', YLeaf(YType.uint32, 'tunnel-local-label')),
                                            ('tunnel_local_label_str', YLeaf(YType.str, 'tunnel-local-label-str')),
                                            ('tunnel_fwd_class', YLeaf(YType.uint8, 'tunnel-fwd-class')),
                                            ('tunnel_load_metric', YLeaf(YType.uint32, 'tunnel-load-metric')),
                                            ('flags_decode', YLeaf(YType.str, 'flags-decode')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.tunnel_local_label = None
                                        self.tunnel_local_label_str = None
                                        self.tunnel_fwd_class = None
                                        self.tunnel_load_metric = None
                                        self.flags_decode = None
                                        self._segment_path = lambda: "te-head-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData, ['table_id', 'table_name', 'tunnel_local_label', 'tunnel_local_label_str', 'tunnel_fwd_class', 'tunnel_load_metric', 'flags_decode'], name, value)


                                class DmtcData(Entity):
                                    """
                                    dmtc data
                                    
                                    .. attribute:: dmtc_ext_ifh
                                    
                                    	DMTC External Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData, self).__init__()

                                        self.yang_name = "dmtc-data"
                                        self.yang_parent_name = "moi"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                        ])
                                        self.dmtc_ext_ifh = None
                                        self._segment_path = lambda: "dmtc-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData, ['dmtc_ext_ifh'], name, value)


        class RewriteSummary(Entity):
            """
            Rewrite Summary 
            
            .. attribute:: ipv4_paths
            
            	Count for IPv4 paths
            	**type**\:  :py:class:`Ipv4Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv4Paths>`
            
            .. attribute:: ipv6_paths
            
            	Count for IPv6 paths
            	**type**\:  :py:class:`Ipv6Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv6Paths>`
            
            .. attribute:: num_label_fpi
            
            	Number of label FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_tefpi
            
            	Number of TE FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_ipv4fpi
            
            	Number of IPv4 FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_ipv6fpi
            
            	Number of IPv6 FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_pw_list_tefpi
            
            	Number of PW List FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_dmtctefpi
            
            	Number of DMTC FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_rewrite
            
            	Number of rewrites
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_forward_update
            
            	Total number of forward updates
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_forwad_update_message
            
            	Total number of forward update messages
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_paths
            
            	Total paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_t_ev4_paths
            
            	Total number of Traffic Eng IPv4 paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_te_head_paths
            
            	Total number of Traffic Eng Head paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_pw_paths
            
            	Total number of Pseudo\-wire paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_ip_sub_paths
            
            	Total number of IP Subscriber paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_ipv4rpf_neighbors
            
            	Total number of IPv4 RPF Neighbors
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_ipv6rpf_neighbors
            
            	Total number of IPv6 RPF Neighbors
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_rewrite_rpf_neighbors
            
            	Number of rewrites with RPF Neighbors
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_dmtc_intf
            
            	Total number of DMTC External Interfaces
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: vrf_name_xr
            
            	VRF Name
            	**type**\: str
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.RewriteSummary, self).__init__()

                self.yang_name = "rewrite-summary"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("ipv4-paths", ("ipv4_paths", MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv4Paths)), ("ipv6-paths", ("ipv6_paths", MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv6Paths))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('num_label_fpi', YLeaf(YType.uint32, 'num-label-fpi')),
                    ('num_tefpi', YLeaf(YType.uint32, 'num-tefpi')),
                    ('num_ipv4fpi', YLeaf(YType.uint32, 'num-ipv4fpi')),
                    ('num_ipv6fpi', YLeaf(YType.uint32, 'num-ipv6fpi')),
                    ('num_pw_list_tefpi', YLeaf(YType.uint32, 'num-pw-list-tefpi')),
                    ('num_dmtctefpi', YLeaf(YType.uint32, 'num-dmtctefpi')),
                    ('num_rewrite', YLeaf(YType.uint32, 'num-rewrite')),
                    ('total_forward_update', YLeaf(YType.uint32, 'total-forward-update')),
                    ('total_forwad_update_message', YLeaf(YType.uint32, 'total-forwad-update-message')),
                    ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                    ('total_t_ev4_paths', YLeaf(YType.uint32, 'total-t-ev4-paths')),
                    ('total_te_head_paths', YLeaf(YType.uint32, 'total-te-head-paths')),
                    ('total_pw_paths', YLeaf(YType.uint32, 'total-pw-paths')),
                    ('total_ip_sub_paths', YLeaf(YType.uint32, 'total-ip-sub-paths')),
                    ('total_ipv4rpf_neighbors', YLeaf(YType.uint32, 'total-ipv4rpf-neighbors')),
                    ('total_ipv6rpf_neighbors', YLeaf(YType.uint32, 'total-ipv6rpf-neighbors')),
                    ('num_rewrite_rpf_neighbors', YLeaf(YType.uint32, 'num-rewrite-rpf-neighbors')),
                    ('total_dmtc_intf', YLeaf(YType.uint32, 'total-dmtc-intf')),
                    ('vrf_name_xr', YLeaf(YType.str, 'vrf-name-xr')),
                ])
                self.num_label_fpi = None
                self.num_tefpi = None
                self.num_ipv4fpi = None
                self.num_ipv6fpi = None
                self.num_pw_list_tefpi = None
                self.num_dmtctefpi = None
                self.num_rewrite = None
                self.total_forward_update = None
                self.total_forwad_update_message = None
                self.total_paths = None
                self.total_t_ev4_paths = None
                self.total_te_head_paths = None
                self.total_pw_paths = None
                self.total_ip_sub_paths = None
                self.total_ipv4rpf_neighbors = None
                self.total_ipv6rpf_neighbors = None
                self.num_rewrite_rpf_neighbors = None
                self.total_dmtc_intf = None
                self.vrf_name_xr = None

                self.ipv4_paths = MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv4Paths()
                self.ipv4_paths.parent = self
                self._children_name_map["ipv4_paths"] = "ipv4-paths"
                self._children_yang_names.add("ipv4-paths")

                self.ipv6_paths = MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv6Paths()
                self.ipv6_paths.parent = self
                self._children_name_map["ipv6_paths"] = "ipv6-paths"
                self._children_yang_names.add("ipv6-paths")
                self._segment_path = lambda: "rewrite-summary"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.RewriteSummary, ['num_label_fpi', 'num_tefpi', 'num_ipv4fpi', 'num_ipv6fpi', 'num_pw_list_tefpi', 'num_dmtctefpi', 'num_rewrite', 'total_forward_update', 'total_forwad_update_message', 'total_paths', 'total_t_ev4_paths', 'total_te_head_paths', 'total_pw_paths', 'total_ip_sub_paths', 'total_ipv4rpf_neighbors', 'total_ipv6rpf_neighbors', 'num_rewrite_rpf_neighbors', 'total_dmtc_intf', 'vrf_name_xr'], name, value)


            class Ipv4Paths(Entity):
                """
                Count for IPv4 paths
                
                .. attribute:: total_paths
                
                	Total number of IP paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_backup_paths
                
                	Total number of non\-primary backup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_remote_backup_paths
                
                	Total number of remote backup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_protected_paths
                
                	Total number of protected paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_pop_lkup_paths
                
                	Total number of Pop\-and\-Lookup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv4Paths, self).__init__()

                    self.yang_name = "ipv4-paths"
                    self.yang_parent_name = "rewrite-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                        ('total_backup_paths', YLeaf(YType.uint32, 'total-backup-paths')),
                        ('total_remote_backup_paths', YLeaf(YType.uint32, 'total-remote-backup-paths')),
                        ('total_protected_paths', YLeaf(YType.uint32, 'total-protected-paths')),
                        ('total_pop_lkup_paths', YLeaf(YType.uint32, 'total-pop-lkup-paths')),
                    ])
                    self.total_paths = None
                    self.total_backup_paths = None
                    self.total_remote_backup_paths = None
                    self.total_protected_paths = None
                    self.total_pop_lkup_paths = None
                    self._segment_path = lambda: "ipv4-paths"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv4Paths, ['total_paths', 'total_backup_paths', 'total_remote_backup_paths', 'total_protected_paths', 'total_pop_lkup_paths'], name, value)


            class Ipv6Paths(Entity):
                """
                Count for IPv6 paths
                
                .. attribute:: total_paths
                
                	Total number of IP paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_backup_paths
                
                	Total number of non\-primary backup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_remote_backup_paths
                
                	Total number of remote backup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_protected_paths
                
                	Total number of protected paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_pop_lkup_paths
                
                	Total number of Pop\-and\-Lookup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv6Paths, self).__init__()

                    self.yang_name = "ipv6-paths"
                    self.yang_parent_name = "rewrite-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                        ('total_backup_paths', YLeaf(YType.uint32, 'total-backup-paths')),
                        ('total_remote_backup_paths', YLeaf(YType.uint32, 'total-remote-backup-paths')),
                        ('total_protected_paths', YLeaf(YType.uint32, 'total-protected-paths')),
                        ('total_pop_lkup_paths', YLeaf(YType.uint32, 'total-pop-lkup-paths')),
                    ])
                    self.total_paths = None
                    self.total_backup_paths = None
                    self.total_remote_backup_paths = None
                    self.total_protected_paths = None
                    self.total_pop_lkup_paths = None
                    self._segment_path = lambda: "ipv6-paths"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.RewriteSummary.Ipv6Paths, ['total_paths', 'total_backup_paths', 'total_remote_backup_paths', 'total_protected_paths', 'total_pop_lkup_paths'], name, value)


        class Applications(Entity):
            """
            Table of MPLS applications using LSD
            
            .. attribute:: application
            
            	Data for MPLS application using LSD
            	**type**\: list of  		 :py:class:`Application <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Applications.Application>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.Applications, self).__init__()

                self.yang_name = "applications"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("application", ("application", MplsLsdNodes.MplsLsdNode.Applications.Application))])
                self._leafs = OrderedDict()

                self.application = YList(self)
                self._segment_path = lambda: "applications"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Applications, [], name, value)


            class Application(Entity):
                """
                Data for MPLS application using LSD
                
                .. attribute:: application_name  (key)
                
                	Application Instance name in the form of '<app\_type\_name>[\:<instance>]'
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: application_statistics
                
                	Application Statistics
                	**type**\:  :py:class:`ApplicationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics>`
                
                .. attribute:: application_name_xr
                
                	Application name
                	**type**\: str
                
                .. attribute:: application_type
                
                	Application type
                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                
                .. attribute:: application_role_primary
                
                	Primary/Backup role
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: application_instance
                
                	client\-app instance
                	**type**\: str
                
                .. attribute:: app_reg_time
                
                	App reg ts
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: app_disconnect_time
                
                	App disconnect ts
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: app_flow_controlled
                
                	App flow control status
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: flow_ctrl_time
                
                	Flow Ctrl ts
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_ctrl_clr_time
                
                	Flow Ctrl Clr ts
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: go_act_ts
                
                	App go active timestamp
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: application_state
                
                	Application state
                	**type**\:  :py:class:`MgmtLsdAppState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppState>`
                
                .. attribute:: recovery_time_remaining_seconds
                
                	Recovery time [secs] remaining if client is timing out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: recovery_time_elapsed_seconds
                
                	Recovery time [secs] elapsed if client is timing out
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: recovery_time_register_seconds
                
                	Recovery time [secs] specified at registration or set explicitly
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: node_id
                
                	Node ID where application is/was running
                	**type**\: str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.Applications.Application, self).__init__()

                    self.yang_name = "application"
                    self.yang_parent_name = "applications"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['application_name']
                    self._child_container_classes = OrderedDict([("application-statistics", ("application_statistics", MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('application_name', YLeaf(YType.str, 'application-name')),
                        ('application_name_xr', YLeaf(YType.str, 'application-name-xr')),
                        ('application_type', YLeaf(YType.enumeration, 'application-type')),
                        ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                        ('application_instance', YLeaf(YType.str, 'application-instance')),
                        ('app_reg_time', YLeaf(YType.uint64, 'app-reg-time')),
                        ('app_disconnect_time', YLeaf(YType.uint64, 'app-disconnect-time')),
                        ('app_flow_controlled', YLeaf(YType.int32, 'app-flow-controlled')),
                        ('flow_ctrl_time', YLeaf(YType.uint64, 'flow-ctrl-time')),
                        ('flow_ctrl_clr_time', YLeaf(YType.uint64, 'flow-ctrl-clr-time')),
                        ('go_act_ts', YLeaf(YType.uint64, 'go-act-ts')),
                        ('application_state', YLeaf(YType.enumeration, 'application-state')),
                        ('recovery_time_remaining_seconds', YLeaf(YType.uint32, 'recovery-time-remaining-seconds')),
                        ('recovery_time_elapsed_seconds', YLeaf(YType.uint32, 'recovery-time-elapsed-seconds')),
                        ('recovery_time_register_seconds', YLeaf(YType.uint32, 'recovery-time-register-seconds')),
                        ('node_id', YLeaf(YType.str, 'node-id')),
                    ])
                    self.application_name = None
                    self.application_name_xr = None
                    self.application_type = None
                    self.application_role_primary = None
                    self.application_instance = None
                    self.app_reg_time = None
                    self.app_disconnect_time = None
                    self.app_flow_controlled = None
                    self.flow_ctrl_time = None
                    self.flow_ctrl_clr_time = None
                    self.go_act_ts = None
                    self.application_state = None
                    self.recovery_time_remaining_seconds = None
                    self.recovery_time_elapsed_seconds = None
                    self.recovery_time_register_seconds = None
                    self.node_id = None

                    self.application_statistics = MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics()
                    self.application_statistics.parent = self
                    self._children_name_map["application_statistics"] = "application-statistics"
                    self._children_yang_names.add("application-statistics")
                    self._segment_path = lambda: "application" + "[application-name='" + str(self.application_name) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Applications.Application, ['application_name', 'application_name_xr', 'application_type', 'application_role_primary', 'application_instance', 'app_reg_time', 'app_disconnect_time', 'app_flow_controlled', 'flow_ctrl_time', 'flow_ctrl_clr_time', 'go_act_ts', 'application_state', 'recovery_time_remaining_seconds', 'recovery_time_elapsed_seconds', 'recovery_time_register_seconds', 'node_id'], name, value)


                class ApplicationStatistics(Entity):
                    """
                    Application Statistics
                    
                    .. attribute:: connected
                    
                    	Connected statistics
                    	**type**\:  :py:class:`Connected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.Connected>`
                    
                    .. attribute:: interface_enable
                    
                    	Number of interface enabled
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: interface_enable_pending
                    
                    	Number of interface enable pending
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: connect_count
                    
                    	Connect count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: label_context_count
                    
                    	Label context count
                    	**type**\: list of  		 :py:class:`LabelContextCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.LabelContextCount>`
                    
                    .. attribute:: label_context_pending_count
                    
                    	Label context pending count
                    	**type**\: list of  		 :py:class:`LabelContextPendingCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.LabelContextPendingCount>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics, self).__init__()

                        self.yang_name = "application-statistics"
                        self.yang_parent_name = "application"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("connected", ("connected", MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.Connected))])
                        self._child_list_classes = OrderedDict([("label-context-count", ("label_context_count", MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.LabelContextCount)), ("label-context-pending-count", ("label_context_pending_count", MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.LabelContextPendingCount))])
                        self._leafs = OrderedDict([
                            ('interface_enable', YLeaf(YType.uint32, 'interface-enable')),
                            ('interface_enable_pending', YLeaf(YType.uint32, 'interface-enable-pending')),
                            ('connect_count', YLeaf(YType.uint32, 'connect-count')),
                        ])
                        self.interface_enable = None
                        self.interface_enable_pending = None
                        self.connect_count = None

                        self.connected = MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.Connected()
                        self.connected.parent = self
                        self._children_name_map["connected"] = "connected"
                        self._children_yang_names.add("connected")

                        self.label_context_count = YList(self)
                        self.label_context_pending_count = YList(self)
                        self._segment_path = lambda: "application-statistics"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics, ['interface_enable', 'interface_enable_pending', 'connect_count'], name, value)


                    class Connected(Entity):
                        """
                        Connected statistics
                        
                        .. attribute:: rt_set_msg_count
                        
                        	RT set count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: operation_msg_count
                        
                        	Operation count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: oor_label_count
                        
                        	Label OOR count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: error_msg_count
                        
                        	Error count
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.Connected, self).__init__()

                            self.yang_name = "connected"
                            self.yang_parent_name = "application-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rt_set_msg_count', YLeaf(YType.uint32, 'rt-set-msg-count')),
                                ('operation_msg_count', YLeaf(YType.uint32, 'operation-msg-count')),
                                ('oor_label_count', YLeaf(YType.uint32, 'oor-label-count')),
                                ('error_msg_count', YLeaf(YType.uint32, 'error-msg-count')),
                            ])
                            self.rt_set_msg_count = None
                            self.operation_msg_count = None
                            self.oor_label_count = None
                            self.error_msg_count = None
                            self._segment_path = lambda: "connected"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.Connected, ['rt_set_msg_count', 'operation_msg_count', 'oor_label_count', 'error_msg_count'], name, value)


                    class LabelContextCount(Entity):
                        """
                        Label context count
                        
                        .. attribute:: entry
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.LabelContextCount, self).__init__()

                            self.yang_name = "label-context-count"
                            self.yang_parent_name = "application-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('entry', YLeaf(YType.uint32, 'entry')),
                            ])
                            self.entry = None
                            self._segment_path = lambda: "label-context-count"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.LabelContextCount, ['entry'], name, value)


                    class LabelContextPendingCount(Entity):
                        """
                        Label context pending count
                        
                        .. attribute:: entry
                        
                        	
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.LabelContextPendingCount, self).__init__()

                            self.yang_name = "label-context-pending-count"
                            self.yang_parent_name = "application-statistics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('entry', YLeaf(YType.uint32, 'entry')),
                            ])
                            self.entry = None
                            self._segment_path = lambda: "label-context-pending-count"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsdNodes.MplsLsdNode.Applications.Application.ApplicationStatistics.LabelContextPendingCount, ['entry'], name, value)


        class LabelSummaryVrfs(Entity):
            """
            Dynamic label range summary by VRF
            
            .. attribute:: label_summary_vrf
            
            	Dynamic label range summary by VRF
            	**type**\: list of  		 :py:class:`LabelSummaryVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs.LabelSummaryVrf>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs, self).__init__()

                self.yang_name = "label-summary-vrfs"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("label-summary-vrf", ("label_summary_vrf", MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs.LabelSummaryVrf))])
                self._leafs = OrderedDict()

                self.label_summary_vrf = YList(self)
                self._segment_path = lambda: "label-summary-vrfs"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs, [], name, value)


            class LabelSummaryVrf(Entity):
                """
                Dynamic label range summary by VRF
                
                .. attribute:: vrf_name  (key)
                
                	VRF name
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: vrf_name_xr
                
                	VRF Name
                	**type**\: str
                
                .. attribute:: total_labels
                
                	Total labels
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: rsi_connected
                
                	Rsi connected
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: owner_count
                
                	Owner counts
                	**type**\: list of  		 :py:class:`OwnerCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs.LabelSummaryVrf.OwnerCount>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs.LabelSummaryVrf, self).__init__()

                    self.yang_name = "label-summary-vrf"
                    self.yang_parent_name = "label-summary-vrfs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['vrf_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("owner-count", ("owner_count", MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs.LabelSummaryVrf.OwnerCount))])
                    self._leafs = OrderedDict([
                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                        ('vrf_name_xr', YLeaf(YType.str, 'vrf-name-xr')),
                        ('total_labels', YLeaf(YType.uint32, 'total-labels')),
                        ('rsi_connected', YLeaf(YType.int32, 'rsi-connected')),
                    ])
                    self.vrf_name = None
                    self.vrf_name_xr = None
                    self.total_labels = None
                    self.rsi_connected = None

                    self.owner_count = YList(self)
                    self._segment_path = lambda: "label-summary-vrf" + "[vrf-name='" + str(self.vrf_name) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs.LabelSummaryVrf, ['vrf_name', 'vrf_name_xr', 'total_labels', 'rsi_connected'], name, value)


                class OwnerCount(Entity):
                    """
                    Owner counts
                    
                    .. attribute:: application_type
                    
                    	Application type
                    	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                    
                    .. attribute:: application_name
                    
                    	Application name
                    	**type**\: str
                    
                    .. attribute:: application_role_primary
                    
                    	Primary/Backup role
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: application_instance
                    
                    	client\-app identifier
                    	**type**\: str
                    
                    .. attribute:: number_of_labels
                    
                    	Number of labels
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs.LabelSummaryVrf.OwnerCount, self).__init__()

                        self.yang_name = "owner-count"
                        self.yang_parent_name = "label-summary-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('application_type', YLeaf(YType.enumeration, 'application-type')),
                            ('application_name', YLeaf(YType.str, 'application-name')),
                            ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                            ('application_instance', YLeaf(YType.str, 'application-instance')),
                            ('number_of_labels', YLeaf(YType.uint32, 'number-of-labels')),
                        ])
                        self.application_type = None
                        self.application_name = None
                        self.application_role_primary = None
                        self.application_instance = None
                        self.number_of_labels = None
                        self._segment_path = lambda: "owner-count"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.LabelSummaryVrfs.LabelSummaryVrf.OwnerCount, ['application_type', 'application_name', 'application_role_primary', 'application_instance', 'number_of_labels'], name, value)


        class LabelRange(Entity):
            """
            Label range
            
            .. attribute:: min_dynamic_label_value
            
            	Minimum dynamic label value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: max_dynamic_label_value
            
            	Maximum dynamic label value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: min_static_label_value
            
            	Minimum static label value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: max_static_label_value
            
            	Maximum static label value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.LabelRange, self).__init__()

                self.yang_name = "label-range"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('min_dynamic_label_value', YLeaf(YType.uint32, 'min-dynamic-label-value')),
                    ('max_dynamic_label_value', YLeaf(YType.uint32, 'max-dynamic-label-value')),
                    ('min_static_label_value', YLeaf(YType.uint32, 'min-static-label-value')),
                    ('max_static_label_value', YLeaf(YType.uint32, 'max-static-label-value')),
                ])
                self.min_dynamic_label_value = None
                self.max_dynamic_label_value = None
                self.min_static_label_value = None
                self.max_static_label_value = None
                self._segment_path = lambda: "label-range"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.LabelRange, ['min_dynamic_label_value', 'max_dynamic_label_value', 'min_static_label_value', 'max_static_label_value'], name, value)


        class RewriteSummaryVrfs(Entity):
            """
            Rewrite Summary by VRF
            
            .. attribute:: rewrite_summary_vrf
            
            	Rewrite summary by VRF VRF\-name
            	**type**\: list of  		 :py:class:`RewriteSummaryVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs, self).__init__()

                self.yang_name = "rewrite-summary-vrfs"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("rewrite-summary-vrf", ("rewrite_summary_vrf", MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf))])
                self._leafs = OrderedDict()

                self.rewrite_summary_vrf = YList(self)
                self._segment_path = lambda: "rewrite-summary-vrfs"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs, [], name, value)


            class RewriteSummaryVrf(Entity):
                """
                Rewrite summary by VRF VRF\-name
                
                .. attribute:: vrf_name  (key)
                
                	VRF name
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: ipv4_paths
                
                	Count for IPv4 paths
                	**type**\:  :py:class:`Ipv4Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths>`
                
                .. attribute:: ipv6_paths
                
                	Count for IPv6 paths
                	**type**\:  :py:class:`Ipv6Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths>`
                
                .. attribute:: num_label_fpi
                
                	Number of label FPI
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: num_tefpi
                
                	Number of TE FPI
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: num_ipv4fpi
                
                	Number of IPv4 FPI
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: num_ipv6fpi
                
                	Number of IPv6 FPI
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: num_pw_list_tefpi
                
                	Number of PW List FPI
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: num_dmtctefpi
                
                	Number of DMTC FPI
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: num_rewrite
                
                	Number of rewrites
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_forward_update
                
                	Total number of forward updates
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_forwad_update_message
                
                	Total number of forward update messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_paths
                
                	Total paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_t_ev4_paths
                
                	Total number of Traffic Eng IPv4 paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_te_head_paths
                
                	Total number of Traffic Eng Head paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_pw_paths
                
                	Total number of Pseudo\-wire paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_ip_sub_paths
                
                	Total number of IP Subscriber paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_ipv4rpf_neighbors
                
                	Total number of IPv4 RPF Neighbors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_ipv6rpf_neighbors
                
                	Total number of IPv6 RPF Neighbors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: num_rewrite_rpf_neighbors
                
                	Number of rewrites with RPF Neighbors
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_dmtc_intf
                
                	Total number of DMTC External Interfaces
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: vrf_name_xr
                
                	VRF Name
                	**type**\: str
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf, self).__init__()

                    self.yang_name = "rewrite-summary-vrf"
                    self.yang_parent_name = "rewrite-summary-vrfs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['vrf_name']
                    self._child_container_classes = OrderedDict([("ipv4-paths", ("ipv4_paths", MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths)), ("ipv6-paths", ("ipv6_paths", MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                        ('num_label_fpi', YLeaf(YType.uint32, 'num-label-fpi')),
                        ('num_tefpi', YLeaf(YType.uint32, 'num-tefpi')),
                        ('num_ipv4fpi', YLeaf(YType.uint32, 'num-ipv4fpi')),
                        ('num_ipv6fpi', YLeaf(YType.uint32, 'num-ipv6fpi')),
                        ('num_pw_list_tefpi', YLeaf(YType.uint32, 'num-pw-list-tefpi')),
                        ('num_dmtctefpi', YLeaf(YType.uint32, 'num-dmtctefpi')),
                        ('num_rewrite', YLeaf(YType.uint32, 'num-rewrite')),
                        ('total_forward_update', YLeaf(YType.uint32, 'total-forward-update')),
                        ('total_forwad_update_message', YLeaf(YType.uint32, 'total-forwad-update-message')),
                        ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                        ('total_t_ev4_paths', YLeaf(YType.uint32, 'total-t-ev4-paths')),
                        ('total_te_head_paths', YLeaf(YType.uint32, 'total-te-head-paths')),
                        ('total_pw_paths', YLeaf(YType.uint32, 'total-pw-paths')),
                        ('total_ip_sub_paths', YLeaf(YType.uint32, 'total-ip-sub-paths')),
                        ('total_ipv4rpf_neighbors', YLeaf(YType.uint32, 'total-ipv4rpf-neighbors')),
                        ('total_ipv6rpf_neighbors', YLeaf(YType.uint32, 'total-ipv6rpf-neighbors')),
                        ('num_rewrite_rpf_neighbors', YLeaf(YType.uint32, 'num-rewrite-rpf-neighbors')),
                        ('total_dmtc_intf', YLeaf(YType.uint32, 'total-dmtc-intf')),
                        ('vrf_name_xr', YLeaf(YType.str, 'vrf-name-xr')),
                    ])
                    self.vrf_name = None
                    self.num_label_fpi = None
                    self.num_tefpi = None
                    self.num_ipv4fpi = None
                    self.num_ipv6fpi = None
                    self.num_pw_list_tefpi = None
                    self.num_dmtctefpi = None
                    self.num_rewrite = None
                    self.total_forward_update = None
                    self.total_forwad_update_message = None
                    self.total_paths = None
                    self.total_t_ev4_paths = None
                    self.total_te_head_paths = None
                    self.total_pw_paths = None
                    self.total_ip_sub_paths = None
                    self.total_ipv4rpf_neighbors = None
                    self.total_ipv6rpf_neighbors = None
                    self.num_rewrite_rpf_neighbors = None
                    self.total_dmtc_intf = None
                    self.vrf_name_xr = None

                    self.ipv4_paths = MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths()
                    self.ipv4_paths.parent = self
                    self._children_name_map["ipv4_paths"] = "ipv4-paths"
                    self._children_yang_names.add("ipv4-paths")

                    self.ipv6_paths = MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths()
                    self.ipv6_paths.parent = self
                    self._children_name_map["ipv6_paths"] = "ipv6-paths"
                    self._children_yang_names.add("ipv6-paths")
                    self._segment_path = lambda: "rewrite-summary-vrf" + "[vrf-name='" + str(self.vrf_name) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf, ['vrf_name', 'num_label_fpi', 'num_tefpi', 'num_ipv4fpi', 'num_ipv6fpi', 'num_pw_list_tefpi', 'num_dmtctefpi', 'num_rewrite', 'total_forward_update', 'total_forwad_update_message', 'total_paths', 'total_t_ev4_paths', 'total_te_head_paths', 'total_pw_paths', 'total_ip_sub_paths', 'total_ipv4rpf_neighbors', 'total_ipv6rpf_neighbors', 'num_rewrite_rpf_neighbors', 'total_dmtc_intf', 'vrf_name_xr'], name, value)


                class Ipv4Paths(Entity):
                    """
                    Count for IPv4 paths
                    
                    .. attribute:: total_paths
                    
                    	Total number of IP paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_backup_paths
                    
                    	Total number of non\-primary backup paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_remote_backup_paths
                    
                    	Total number of remote backup paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_protected_paths
                    
                    	Total number of protected paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_pop_lkup_paths
                    
                    	Total number of Pop\-and\-Lookup paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths, self).__init__()

                        self.yang_name = "ipv4-paths"
                        self.yang_parent_name = "rewrite-summary-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                            ('total_backup_paths', YLeaf(YType.uint32, 'total-backup-paths')),
                            ('total_remote_backup_paths', YLeaf(YType.uint32, 'total-remote-backup-paths')),
                            ('total_protected_paths', YLeaf(YType.uint32, 'total-protected-paths')),
                            ('total_pop_lkup_paths', YLeaf(YType.uint32, 'total-pop-lkup-paths')),
                        ])
                        self.total_paths = None
                        self.total_backup_paths = None
                        self.total_remote_backup_paths = None
                        self.total_protected_paths = None
                        self.total_pop_lkup_paths = None
                        self._segment_path = lambda: "ipv4-paths"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths, ['total_paths', 'total_backup_paths', 'total_remote_backup_paths', 'total_protected_paths', 'total_pop_lkup_paths'], name, value)


                class Ipv6Paths(Entity):
                    """
                    Count for IPv6 paths
                    
                    .. attribute:: total_paths
                    
                    	Total number of IP paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_backup_paths
                    
                    	Total number of non\-primary backup paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_remote_backup_paths
                    
                    	Total number of remote backup paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_protected_paths
                    
                    	Total number of protected paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_pop_lkup_paths
                    
                    	Total number of Pop\-and\-Lookup paths
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths, self).__init__()

                        self.yang_name = "ipv6-paths"
                        self.yang_parent_name = "rewrite-summary-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                            ('total_backup_paths', YLeaf(YType.uint32, 'total-backup-paths')),
                            ('total_remote_backup_paths', YLeaf(YType.uint32, 'total-remote-backup-paths')),
                            ('total_protected_paths', YLeaf(YType.uint32, 'total-protected-paths')),
                            ('total_pop_lkup_paths', YLeaf(YType.uint32, 'total-pop-lkup-paths')),
                        ])
                        self.total_paths = None
                        self.total_backup_paths = None
                        self.total_remote_backup_paths = None
                        self.total_protected_paths = None
                        self.total_pop_lkup_paths = None
                        self._segment_path = lambda: "ipv6-paths"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths, ['total_paths', 'total_backup_paths', 'total_remote_backup_paths', 'total_protected_paths', 'total_pop_lkup_paths'], name, value)


        class Interfaces(Entity):
            """
            Table of MPLS interfaces
            
            .. attribute:: interface
            
            	Data for MPLS interface
            	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Interfaces.Interface>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsdNodes.MplsLsdNode.Interfaces, self).__init__()

                self.yang_name = "interfaces"
                self.yang_parent_name = "mpls-lsd-node"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface", ("interface", MplsLsdNodes.MplsLsdNode.Interfaces.Interface))])
                self._leafs = OrderedDict()

                self.interface = YList(self)
                self._segment_path = lambda: "interfaces"

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsdNodes.MplsLsdNode.Interfaces, [], name, value)


            class Interface(Entity):
                """
                Data for MPLS interface
                
                .. attribute:: interface_name  (key)
                
                	Interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: interface
                
                	Interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: interface_state
                
                	Interface state
                	**type**\:  :py:class:`MgmtLsdIntfState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdIntfState>`
                
                .. attribute:: application_owner
                
                	Application Owner
                	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsdNodes.MplsLsdNode.Interfaces.Interface.ApplicationOwner>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsdNodes.MplsLsdNode.Interfaces.Interface, self).__init__()

                    self.yang_name = "interface"
                    self.yang_parent_name = "interfaces"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsdNodes.MplsLsdNode.Interfaces.Interface.ApplicationOwner))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('interface', YLeaf(YType.str, 'interface')),
                        ('interface_state', YLeaf(YType.enumeration, 'interface-state')),
                    ])
                    self.interface_name = None
                    self.interface = None
                    self.interface_state = None

                    self.application_owner = YList(self)
                    self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsdNodes.MplsLsdNode.Interfaces.Interface, ['interface_name', 'interface', 'interface_state'], name, value)


                class ApplicationOwner(Entity):
                    """
                    Application Owner
                    
                    .. attribute:: application_name
                    
                    	Application name
                    	**type**\: str
                    
                    .. attribute:: application_type
                    
                    	Application type
                    	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                    
                    .. attribute:: application_role_primary
                    
                    	Primary/Backup role
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: application_instance
                    
                    	Application instance Name
                    	**type**\: str
                    
                    .. attribute:: resource_state
                    
                    	Application resource state
                    	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsdNodes.MplsLsdNode.Interfaces.Interface.ApplicationOwner, self).__init__()

                        self.yang_name = "application-owner"
                        self.yang_parent_name = "interface"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('application_name', YLeaf(YType.str, 'application-name')),
                            ('application_type', YLeaf(YType.enumeration, 'application-type')),
                            ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                            ('application_instance', YLeaf(YType.str, 'application-instance')),
                            ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                        ])
                        self.application_name = None
                        self.application_type = None
                        self.application_role_primary = None
                        self.application_instance = None
                        self.resource_state = None
                        self._segment_path = lambda: "application-owner"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsdNodes.MplsLsdNode.Interfaces.Interface.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)

    def clone_ptr(self):
        self._top_entity = MplsLsdNodes()
        return self._top_entity

class MplsLsd(Entity):
    """
    mpls lsd
    
    .. attribute:: clients
    
    	Table of MPLS clients using LSD
    	**type**\:  :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Clients>`
    
    .. attribute:: label_summary
    
    	Dynamic label range
    	**type**\:  :py:class:`LabelSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.LabelSummary>`
    
    .. attribute:: labels
    
    	Table of labels
    	**type**\:  :py:class:`Labels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels>`
    
    .. attribute:: frr_database
    
    	FRR database
    	**type**\:  :py:class:`FrrDatabase <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase>`
    
    .. attribute:: rewrite
    
    	Table of rewrites
    	**type**\:  :py:class:`Rewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite>`
    
    .. attribute:: rewrite_summary
    
    	Rewrite Summary 
    	**type**\:  :py:class:`RewriteSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.RewriteSummary>`
    
    .. attribute:: applications
    
    	Table of MPLS applications using LSD
    	**type**\:  :py:class:`Applications <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Applications>`
    
    .. attribute:: label_summary_vrfs
    
    	Dynamic label range summary by VRF
    	**type**\:  :py:class:`LabelSummaryVrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.LabelSummaryVrfs>`
    
    .. attribute:: label_range
    
    	Label range
    	**type**\:  :py:class:`LabelRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.LabelRange>`
    
    .. attribute:: rewrite_summary_vrfs
    
    	Rewrite Summary by VRF
    	**type**\:  :py:class:`RewriteSummaryVrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.RewriteSummaryVrfs>`
    
    .. attribute:: interfaces
    
    	Table of MPLS interfaces
    	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Interfaces>`
    
    

    """

    _prefix = 'mpls-lsd-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(MplsLsd, self).__init__()
        self._top_entity = None

        self.yang_name = "mpls-lsd"
        self.yang_parent_name = "Cisco-IOS-XR-mpls-lsd-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("clients", ("clients", MplsLsd.Clients)), ("label-summary", ("label_summary", MplsLsd.LabelSummary)), ("labels", ("labels", MplsLsd.Labels)), ("frr-database", ("frr_database", MplsLsd.FrrDatabase)), ("rewrite", ("rewrite", MplsLsd.Rewrite)), ("rewrite-summary", ("rewrite_summary", MplsLsd.RewriteSummary)), ("applications", ("applications", MplsLsd.Applications)), ("label-summary-vrfs", ("label_summary_vrfs", MplsLsd.LabelSummaryVrfs)), ("label-range", ("label_range", MplsLsd.LabelRange)), ("rewrite-summary-vrfs", ("rewrite_summary_vrfs", MplsLsd.RewriteSummaryVrfs)), ("interfaces", ("interfaces", MplsLsd.Interfaces))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.clients = MplsLsd.Clients()
        self.clients.parent = self
        self._children_name_map["clients"] = "clients"
        self._children_yang_names.add("clients")

        self.label_summary = MplsLsd.LabelSummary()
        self.label_summary.parent = self
        self._children_name_map["label_summary"] = "label-summary"
        self._children_yang_names.add("label-summary")

        self.labels = MplsLsd.Labels()
        self.labels.parent = self
        self._children_name_map["labels"] = "labels"
        self._children_yang_names.add("labels")

        self.frr_database = MplsLsd.FrrDatabase()
        self.frr_database.parent = self
        self._children_name_map["frr_database"] = "frr-database"
        self._children_yang_names.add("frr-database")

        self.rewrite = MplsLsd.Rewrite()
        self.rewrite.parent = self
        self._children_name_map["rewrite"] = "rewrite"
        self._children_yang_names.add("rewrite")

        self.rewrite_summary = MplsLsd.RewriteSummary()
        self.rewrite_summary.parent = self
        self._children_name_map["rewrite_summary"] = "rewrite-summary"
        self._children_yang_names.add("rewrite-summary")

        self.applications = MplsLsd.Applications()
        self.applications.parent = self
        self._children_name_map["applications"] = "applications"
        self._children_yang_names.add("applications")

        self.label_summary_vrfs = MplsLsd.LabelSummaryVrfs()
        self.label_summary_vrfs.parent = self
        self._children_name_map["label_summary_vrfs"] = "label-summary-vrfs"
        self._children_yang_names.add("label-summary-vrfs")

        self.label_range = MplsLsd.LabelRange()
        self.label_range.parent = self
        self._children_name_map["label_range"] = "label-range"
        self._children_yang_names.add("label-range")

        self.rewrite_summary_vrfs = MplsLsd.RewriteSummaryVrfs()
        self.rewrite_summary_vrfs.parent = self
        self._children_name_map["rewrite_summary_vrfs"] = "rewrite-summary-vrfs"
        self._children_yang_names.add("rewrite-summary-vrfs")

        self.interfaces = MplsLsd.Interfaces()
        self.interfaces.parent = self
        self._children_name_map["interfaces"] = "interfaces"
        self._children_yang_names.add("interfaces")
        self._segment_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd"


    class Clients(Entity):
        """
        Table of MPLS clients using LSD
        
        .. attribute:: client
        
        	Data for MPLS client using LSD
        	**type**\: list of  		 :py:class:`Client <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Clients.Client>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.Clients, self).__init__()

            self.yang_name = "clients"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("client", ("client", MplsLsd.Clients.Client))])
            self._leafs = OrderedDict()

            self.client = YList(self)
            self._segment_path = lambda: "clients"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.Clients, [], name, value)


        class Client(Entity):
            """
            Data for MPLS client using LSD
            
            .. attribute:: client_name  (key)
            
            	Client Instance name in the form of     'Application\-<client\_name>' or      'BCDL\_Agent\-<index\:parent\_index>'
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: client_union
            
            	Client union
            	**type**\:  :py:class:`ClientUnion <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Clients.Client.ClientUnion>`
            
            .. attribute:: client_index
            
            	Client Index Value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_id
            
            	Node ID
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.Clients.Client, self).__init__()

                self.yang_name = "client"
                self.yang_parent_name = "clients"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['client_name']
                self._child_container_classes = OrderedDict([("client-union", ("client_union", MplsLsd.Clients.Client.ClientUnion))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('client_name', YLeaf(YType.str, 'client-name')),
                    ('client_index', YLeaf(YType.uint32, 'client-index')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                ])
                self.client_name = None
                self.client_index = None
                self.node_id = None

                self.client_union = MplsLsd.Clients.Client.ClientUnion()
                self.client_union.parent = self
                self._children_name_map["client_union"] = "client-union"
                self._children_yang_names.add("client-union")
                self._segment_path = lambda: "client" + "[client-name='" + str(self.client_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/clients/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.Clients.Client, ['client_name', 'client_index', 'node_id'], name, value)


            class ClientUnion(Entity):
                """
                Client union
                
                .. attribute:: application
                
                	Application client
                	**type**\:  :py:class:`Application <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Clients.Client.ClientUnion.Application>`
                
                .. attribute:: bcdl_agent
                
                	BCDL agent client
                	**type**\:  :py:class:`BcdlAgent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Clients.Client.ClientUnion.BcdlAgent>`
                
                .. attribute:: lsd_client_type
                
                	LSDClientType
                	**type**\:  :py:class:`MgmtLsdClient <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdClient>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Clients.Client.ClientUnion, self).__init__()

                    self.yang_name = "client-union"
                    self.yang_parent_name = "client"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("application", ("application", MplsLsd.Clients.Client.ClientUnion.Application)), ("bcdl-agent", ("bcdl_agent", MplsLsd.Clients.Client.ClientUnion.BcdlAgent))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsd_client_type', YLeaf(YType.enumeration, 'lsd-client-type')),
                    ])
                    self.lsd_client_type = None

                    self.application = MplsLsd.Clients.Client.ClientUnion.Application()
                    self.application.parent = self
                    self._children_name_map["application"] = "application"
                    self._children_yang_names.add("application")

                    self.bcdl_agent = MplsLsd.Clients.Client.ClientUnion.BcdlAgent()
                    self.bcdl_agent.parent = self
                    self._children_name_map["bcdl_agent"] = "bcdl-agent"
                    self._children_yang_names.add("bcdl-agent")
                    self._segment_path = lambda: "client-union"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Clients.Client.ClientUnion, ['lsd_client_type'], name, value)


                class Application(Entity):
                    """
                    Application client
                    
                    .. attribute:: application_name
                    
                    	Application name
                    	**type**\: str
                    
                    .. attribute:: application_type
                    
                    	Application type
                    	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                    
                    .. attribute:: application_instance
                    
                    	client\-app instance
                    	**type**\: str
                    
                    .. attribute:: application_role_primary
                    
                    	Primary/Backup role
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Clients.Client.ClientUnion.Application, self).__init__()

                        self.yang_name = "application"
                        self.yang_parent_name = "client-union"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('application_name', YLeaf(YType.str, 'application-name')),
                            ('application_type', YLeaf(YType.enumeration, 'application-type')),
                            ('application_instance', YLeaf(YType.str, 'application-instance')),
                            ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                        ])
                        self.application_name = None
                        self.application_type = None
                        self.application_instance = None
                        self.application_role_primary = None
                        self._segment_path = lambda: "application"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Clients.Client.ClientUnion.Application, ['application_name', 'application_type', 'application_instance', 'application_role_primary'], name, value)


                class BcdlAgent(Entity):
                    """
                    BCDL agent client
                    
                    .. attribute:: client_conn_index
                    
                    	BCDL Agent client connection index
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: parent_client_conn_index
                    
                    	BCDL Agent parent client connection index
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Clients.Client.ClientUnion.BcdlAgent, self).__init__()

                        self.yang_name = "bcdl-agent"
                        self.yang_parent_name = "client-union"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('client_conn_index', YLeaf(YType.int32, 'client-conn-index')),
                            ('parent_client_conn_index', YLeaf(YType.int32, 'parent-client-conn-index')),
                        ])
                        self.client_conn_index = None
                        self.parent_client_conn_index = None
                        self._segment_path = lambda: "bcdl-agent"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Clients.Client.ClientUnion.BcdlAgent, ['client_conn_index', 'parent_client_conn_index'], name, value)


    class LabelSummary(Entity):
        """
        Dynamic label range
        
        .. attribute:: vrf_name_xr
        
        	VRF Name
        	**type**\: str
        
        .. attribute:: total_labels
        
        	Total labels
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: rsi_connected
        
        	Rsi connected
        	**type**\: int
        
        	**range:** \-2147483648..2147483647
        
        .. attribute:: owner_count
        
        	Owner counts
        	**type**\: list of  		 :py:class:`OwnerCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.LabelSummary.OwnerCount>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.LabelSummary, self).__init__()

            self.yang_name = "label-summary"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("owner-count", ("owner_count", MplsLsd.LabelSummary.OwnerCount))])
            self._leafs = OrderedDict([
                ('vrf_name_xr', YLeaf(YType.str, 'vrf-name-xr')),
                ('total_labels', YLeaf(YType.uint32, 'total-labels')),
                ('rsi_connected', YLeaf(YType.int32, 'rsi-connected')),
            ])
            self.vrf_name_xr = None
            self.total_labels = None
            self.rsi_connected = None

            self.owner_count = YList(self)
            self._segment_path = lambda: "label-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.LabelSummary, ['vrf_name_xr', 'total_labels', 'rsi_connected'], name, value)


        class OwnerCount(Entity):
            """
            Owner counts
            
            .. attribute:: application_type
            
            	Application type
            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
            
            .. attribute:: application_name
            
            	Application name
            	**type**\: str
            
            .. attribute:: application_role_primary
            
            	Primary/Backup role
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: application_instance
            
            	client\-app identifier
            	**type**\: str
            
            .. attribute:: number_of_labels
            
            	Number of labels
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.LabelSummary.OwnerCount, self).__init__()

                self.yang_name = "owner-count"
                self.yang_parent_name = "label-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                    ('application_name', YLeaf(YType.str, 'application-name')),
                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                    ('number_of_labels', YLeaf(YType.uint32, 'number-of-labels')),
                ])
                self.application_type = None
                self.application_name = None
                self.application_role_primary = None
                self.application_instance = None
                self.number_of_labels = None
                self._segment_path = lambda: "owner-count"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/label-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.LabelSummary.OwnerCount, ['application_type', 'application_name', 'application_role_primary', 'application_instance', 'number_of_labels'], name, value)


    class Labels(Entity):
        """
        Table of labels
        
        .. attribute:: label
        
        	Data for label
        	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.Labels, self).__init__()

            self.yang_name = "labels"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("label", ("label", MplsLsd.Labels.Label))])
            self._leafs = OrderedDict()

            self.label = YList(self)
            self._segment_path = lambda: "labels"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.Labels, [], name, value)


        class Label(Entity):
            """
            Data for label
            
            .. attribute:: label_id  (key)
            
            	Label value
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: label_context
            
            	Label context
            	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext>`
            
            .. attribute:: label
            
            	Label value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: rewrite_is_bound
            
            	Rewrite bound to label
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: rewrite_owners
            
            	Rewrite owner
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: rs_iconnected
            
            	RSI connected
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            .. attribute:: application_owner
            
            	Application owner
            	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.ApplicationOwner>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.Labels.Label, self).__init__()

                self.yang_name = "label"
                self.yang_parent_name = "labels"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['label_id']
                self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsd.Labels.Label.LabelContext))])
                self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Labels.Label.ApplicationOwner))])
                self._leafs = OrderedDict([
                    ('label_id', YLeaf(YType.int32, 'label-id')),
                    ('label', YLeaf(YType.uint32, 'label')),
                    ('rewrite_is_bound', YLeaf(YType.int32, 'rewrite-is-bound')),
                    ('rewrite_owners', YLeaf(YType.uint32, 'rewrite-owners')),
                    ('rs_iconnected', YLeaf(YType.int32, 'rs-iconnected')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ])
                self.label_id = None
                self.label = None
                self.rewrite_is_bound = None
                self.rewrite_owners = None
                self.rs_iconnected = None
                self.vrf_name = None

                self.label_context = MplsLsd.Labels.Label.LabelContext()
                self.label_context.parent = self
                self._children_name_map["label_context"] = "label-context"
                self._children_yang_names.add("label-context")

                self.application_owner = YList(self)
                self._segment_path = lambda: "label" + "[label-id='" + str(self.label_id) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/labels/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.Labels.Label, ['label_id', 'label', 'rewrite_is_bound', 'rewrite_owners', 'rs_iconnected', 'vrf_name'], name, value)


            class LabelContext(Entity):
                """
                Label context
                
                .. attribute:: key
                
                	Label Key
                	**type**\:  :py:class:`Key <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key>`
                
                .. attribute:: application_data
                
                	Application opaque data
                	**type**\: str
                
                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Labels.Label.LabelContext, self).__init__()

                    self.yang_name = "label-context"
                    self.yang_parent_name = "label"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("key", ("key", MplsLsd.Labels.Label.LabelContext.Key))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('application_data', YLeaf(YType.str, 'application-data')),
                    ])
                    self.application_data = None

                    self.key = MplsLsd.Labels.Label.LabelContext.Key()
                    self.key.parent = self
                    self._children_name_map["key"] = "key"
                    self._children_yang_names.add("key")
                    self._segment_path = lambda: "label-context"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Labels.Label.LabelContext, ['application_data'], name, value)


                class Key(Entity):
                    """
                    Label Key
                    
                    .. attribute:: ipv4_data
                    
                    	IPv4 label context
                    	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Ipv4Data>`
                    
                    .. attribute:: ipv6_data
                    
                    	IPv6 label context
                    	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Ipv6Data>`
                    
                    .. attribute:: tev4_data
                    
                    	TEv4 label context
                    	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Tev4Data>`
                    
                    .. attribute:: ipv4l3vpn_data
                    
                    	L3VPN IPv4 label context
                    	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Ipv4L3VpnData>`
                    
                    .. attribute:: ipv6l3vpn_data
                    
                    	L3VPN IPv6 label context
                    	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Ipv6L3VpnData>`
                    
                    .. attribute:: vrf_l3vpn_data
                    
                    	L3VPN VRF label context
                    	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.VrfL3VpnData>`
                    
                    .. attribute:: cev4l3vpn_data
                    
                    	L3VPN CEv4 label context
                    	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Cev4L3VpnData>`
                    
                    .. attribute:: cev6l3vpn_data
                    
                    	L3VPN CEv6 label context
                    	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Cev6L3VpnData>`
                    
                    .. attribute:: pseudowire_data
                    
                    	Pseudowire label context
                    	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.PseudowireData>`
                    
                    .. attribute:: label_block_data
                    
                    	Label block context
                    	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.LabelBlockData>`
                    
                    .. attribute:: ip_sub_data
                    
                    	IP Subscriber context
                    	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.IpSubData>`
                    
                    .. attribute:: tev4p2mp_data
                    
                    	TEv4 P2MP context
                    	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Tev4P2MpData>`
                    
                    .. attribute:: mld_pv4_data
                    
                    	MLDPv4 LSM\-ID context
                    	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.MldPv4Data>`
                    
                    .. attribute:: pseudowire_head_end_data
                    
                    	Pseudowire Head\-end label context
                    	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.PseudowireHeadEndData>`
                    
                    .. attribute:: tp_data
                    
                    	TP context
                    	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.TpData>`
                    
                    .. attribute:: generic_routing_encapsulation
                    
                    	Generic routing encapsulation context
                    	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation>`
                    
                    .. attribute:: ipv6_generic_routing_encapsulation
                    
                    	Generic routing encapsulation context
                    	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation>`
                    
                    .. attribute:: evpn_data
                    
                    	EVPN context
                    	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.EvpnData>`
                    
                    .. attribute:: ipv4blb_data
                    
                    	BFD BLB label context
                    	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Ipv4BlbData>`
                    
                    .. attribute:: ipv6blb_data
                    
                    	BFD BLB label context
                    	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.Ipv6BlbData>`
                    
                    .. attribute:: pi_mi_pmsi_data
                    
                    	PIM I\-PMSI label conext
                    	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.PiMiPmsiData>`
                    
                    .. attribute:: pi_ms_pmsi_data
                    
                    	PIM S\-PMSI label conext
                    	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.PiMsPmsiData>`
                    
                    .. attribute:: next_hop_set_l3vpn
                    
                    	L3VPN NH SET label context
                    	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.NextHopSetL3Vpn>`
                    
                    .. attribute:: sr_prefix_segment
                    
                    	SR Prefix Segment context
                    	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.SrPrefixSegment>`
                    
                    .. attribute:: sr_adj_segment_ipv4
                    
                    	SR Adj Segment ipv4 context
                    	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4>`
                    
                    .. attribute:: sr_adj_segment_ipv6
                    
                    	SR Adj Segment ipv6 context
                    	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6>`
                    
                    .. attribute:: label_block_srgb_data
                    
                    	Label block SRGB context
                    	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrgbData>`
                    
                    .. attribute:: te_binding
                    
                    	MPLS TE tunnel binding context
                    	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.TeBinding>`
                    
                    .. attribute:: label_block_srlb_data
                    
                    	Label block SRLB context
                    	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrlbData>`
                    
                    .. attribute:: label_context_type
                    
                    	LabelContextType
                    	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Labels.Label.LabelContext.Key, self).__init__()

                        self.yang_name = "key"
                        self.yang_parent_name = "label-context"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsd.Labels.Label.LabelContext.Key.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Labels.Label.LabelContext.Key.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Labels.Label.LabelContext.Key.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsd.Labels.Label.LabelContext.Key.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsd.Labels.Label.LabelContext.Key.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsd.Labels.Label.LabelContext.Key.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsd.Labels.Label.LabelContext.Key.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsd.Labels.Label.LabelContext.Key.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Labels.Label.LabelContext.Key.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsd.Labels.Label.LabelContext.Key.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Labels.Label.LabelContext.Key.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsd.Labels.Label.LabelContext.Key.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsd.Labels.Label.LabelContext.Key.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Labels.Label.LabelContext.Key.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsd.Labels.Label.LabelContext.Key.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsd.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsd.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsd.Labels.Label.LabelContext.Key.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsd.Labels.Label.LabelContext.Key.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsd.Labels.Label.LabelContext.Key.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsd.Labels.Label.LabelContext.Key.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsd.Labels.Label.LabelContext.Key.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsd.Labels.Label.LabelContext.Key.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsd.Labels.Label.LabelContext.Key.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsd.Labels.Label.LabelContext.Key.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrlbData))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                        ])
                        self.label_context_type = None

                        self.ipv4_data = MplsLsd.Labels.Label.LabelContext.Key.Ipv4Data()
                        self.ipv4_data.parent = self
                        self._children_name_map["ipv4_data"] = "ipv4-data"
                        self._children_yang_names.add("ipv4-data")

                        self.ipv6_data = MplsLsd.Labels.Label.LabelContext.Key.Ipv6Data()
                        self.ipv6_data.parent = self
                        self._children_name_map["ipv6_data"] = "ipv6-data"
                        self._children_yang_names.add("ipv6-data")

                        self.tev4_data = MplsLsd.Labels.Label.LabelContext.Key.Tev4Data()
                        self.tev4_data.parent = self
                        self._children_name_map["tev4_data"] = "tev4-data"
                        self._children_yang_names.add("tev4-data")

                        self.ipv4l3vpn_data = MplsLsd.Labels.Label.LabelContext.Key.Ipv4L3VpnData()
                        self.ipv4l3vpn_data.parent = self
                        self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                        self._children_yang_names.add("ipv4l3vpn-data")

                        self.ipv6l3vpn_data = MplsLsd.Labels.Label.LabelContext.Key.Ipv6L3VpnData()
                        self.ipv6l3vpn_data.parent = self
                        self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                        self._children_yang_names.add("ipv6l3vpn-data")

                        self.vrf_l3vpn_data = MplsLsd.Labels.Label.LabelContext.Key.VrfL3VpnData()
                        self.vrf_l3vpn_data.parent = self
                        self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                        self._children_yang_names.add("vrf-l3vpn-data")

                        self.cev4l3vpn_data = MplsLsd.Labels.Label.LabelContext.Key.Cev4L3VpnData()
                        self.cev4l3vpn_data.parent = self
                        self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                        self._children_yang_names.add("cev4l3vpn-data")

                        self.cev6l3vpn_data = MplsLsd.Labels.Label.LabelContext.Key.Cev6L3VpnData()
                        self.cev6l3vpn_data.parent = self
                        self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                        self._children_yang_names.add("cev6l3vpn-data")

                        self.pseudowire_data = MplsLsd.Labels.Label.LabelContext.Key.PseudowireData()
                        self.pseudowire_data.parent = self
                        self._children_name_map["pseudowire_data"] = "pseudowire-data"
                        self._children_yang_names.add("pseudowire-data")

                        self.label_block_data = MplsLsd.Labels.Label.LabelContext.Key.LabelBlockData()
                        self.label_block_data.parent = self
                        self._children_name_map["label_block_data"] = "label-block-data"
                        self._children_yang_names.add("label-block-data")

                        self.ip_sub_data = MplsLsd.Labels.Label.LabelContext.Key.IpSubData()
                        self.ip_sub_data.parent = self
                        self._children_name_map["ip_sub_data"] = "ip-sub-data"
                        self._children_yang_names.add("ip-sub-data")

                        self.tev4p2mp_data = MplsLsd.Labels.Label.LabelContext.Key.Tev4P2MpData()
                        self.tev4p2mp_data.parent = self
                        self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                        self._children_yang_names.add("tev4p2mp-data")

                        self.mld_pv4_data = MplsLsd.Labels.Label.LabelContext.Key.MldPv4Data()
                        self.mld_pv4_data.parent = self
                        self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                        self._children_yang_names.add("mld-pv4-data")

                        self.pseudowire_head_end_data = MplsLsd.Labels.Label.LabelContext.Key.PseudowireHeadEndData()
                        self.pseudowire_head_end_data.parent = self
                        self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                        self._children_yang_names.add("pseudowire-head-end-data")

                        self.tp_data = MplsLsd.Labels.Label.LabelContext.Key.TpData()
                        self.tp_data.parent = self
                        self._children_name_map["tp_data"] = "tp-data"
                        self._children_yang_names.add("tp-data")

                        self.generic_routing_encapsulation = MplsLsd.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation()
                        self.generic_routing_encapsulation.parent = self
                        self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                        self._children_yang_names.add("generic-routing-encapsulation")

                        self.ipv6_generic_routing_encapsulation = MplsLsd.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation()
                        self.ipv6_generic_routing_encapsulation.parent = self
                        self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                        self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                        self.evpn_data = MplsLsd.Labels.Label.LabelContext.Key.EvpnData()
                        self.evpn_data.parent = self
                        self._children_name_map["evpn_data"] = "evpn-data"
                        self._children_yang_names.add("evpn-data")

                        self.ipv4blb_data = MplsLsd.Labels.Label.LabelContext.Key.Ipv4BlbData()
                        self.ipv4blb_data.parent = self
                        self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                        self._children_yang_names.add("ipv4blb-data")

                        self.ipv6blb_data = MplsLsd.Labels.Label.LabelContext.Key.Ipv6BlbData()
                        self.ipv6blb_data.parent = self
                        self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                        self._children_yang_names.add("ipv6blb-data")

                        self.pi_mi_pmsi_data = MplsLsd.Labels.Label.LabelContext.Key.PiMiPmsiData()
                        self.pi_mi_pmsi_data.parent = self
                        self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                        self._children_yang_names.add("pi-mi-pmsi-data")

                        self.pi_ms_pmsi_data = MplsLsd.Labels.Label.LabelContext.Key.PiMsPmsiData()
                        self.pi_ms_pmsi_data.parent = self
                        self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                        self._children_yang_names.add("pi-ms-pmsi-data")

                        self.next_hop_set_l3vpn = MplsLsd.Labels.Label.LabelContext.Key.NextHopSetL3Vpn()
                        self.next_hop_set_l3vpn.parent = self
                        self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                        self._children_yang_names.add("next-hop-set-l3vpn")

                        self.sr_prefix_segment = MplsLsd.Labels.Label.LabelContext.Key.SrPrefixSegment()
                        self.sr_prefix_segment.parent = self
                        self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                        self._children_yang_names.add("sr-prefix-segment")

                        self.sr_adj_segment_ipv4 = MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4()
                        self.sr_adj_segment_ipv4.parent = self
                        self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                        self._children_yang_names.add("sr-adj-segment-ipv4")

                        self.sr_adj_segment_ipv6 = MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6()
                        self.sr_adj_segment_ipv6.parent = self
                        self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                        self._children_yang_names.add("sr-adj-segment-ipv6")

                        self.label_block_srgb_data = MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrgbData()
                        self.label_block_srgb_data.parent = self
                        self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                        self._children_yang_names.add("label-block-srgb-data")

                        self.te_binding = MplsLsd.Labels.Label.LabelContext.Key.TeBinding()
                        self.te_binding.parent = self
                        self._children_name_map["te_binding"] = "te-binding"
                        self._children_yang_names.add("te-binding")

                        self.label_block_srlb_data = MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrlbData()
                        self.label_block_srlb_data.parent = self
                        self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                        self._children_yang_names.add("label-block-srlb-data")
                        self._segment_path = lambda: "key"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key, ['label_context_type'], name, value)


                    class Ipv4Data(Entity):
                        """
                        IPv4 label context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: prefix
                        
                        	IPv4 prefix
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_length
                        
                        	IPv4 prefix length
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: security_id
                        
                        	Security ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: vrf_name
                        
                        	VRF Name
                        	**type**\: str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Ipv4Data, self).__init__()

                            self.yang_name = "ipv4-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('prefix', YLeaf(YType.str, 'prefix')),
                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                ('security_id', YLeaf(YType.uint32, 'security-id')),
                                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                            ])
                            self.table_id = None
                            self.prefix = None
                            self.prefix_length = None
                            self.security_id = None
                            self.vrf_name = None
                            self._segment_path = lambda: "ipv4-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                    class Ipv6Data(Entity):
                        """
                        IPv6 label context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: security_id
                        
                        	Security ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: vrf_name
                        
                        	VRF Name
                        	**type**\: str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Ipv6Data, self).__init__()

                            self.yang_name = "ipv6-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('prefix', YLeaf(YType.str, 'prefix')),
                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                ('security_id', YLeaf(YType.uint32, 'security-id')),
                                ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                            ])
                            self.table_id = None
                            self.prefix = None
                            self.prefix_length = None
                            self.security_id = None
                            self.vrf_name = None
                            self._segment_path = lambda: "ipv6-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                    class Tev4Data(Entity):
                        """
                        TEv4 label context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_source
                        
                        	Tunnel source
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_dest
                        
                        	Tunnel destination
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id_extension
                        
                        	Extended tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_lsp_id
                        
                        	Tunnel LSP ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: is_srte
                        
                        	Is this an SRTE head tunnel
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Tev4Data, self).__init__()

                            self.yang_name = "tev4-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                ('is_srte', YLeaf(YType.int32, 'is-srte')),
                            ])
                            self.table_id = None
                            self.tunnel_source = None
                            self.tunnel_dest = None
                            self.tunnel_id = None
                            self.tunnel_id_extension = None
                            self.tunnel_lsp_id = None
                            self.is_srte = None
                            self._segment_path = lambda: "tev4-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                    class Ipv4L3VpnData(Entity):
                        """
                        L3VPN IPv4 label context
                        
                        .. attribute:: prefix
                        
                        	IPv4 prefix
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: route_distinguisher
                        
                        	Route distinguisher
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Ipv4L3VpnData, self).__init__()

                            self.yang_name = "ipv4l3vpn-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('prefix', YLeaf(YType.str, 'prefix')),
                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                            ])
                            self.prefix = None
                            self.prefix_length = None
                            self.route_distinguisher = None
                            self._segment_path = lambda: "ipv4l3vpn-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                    class Ipv6L3VpnData(Entity):
                        """
                        L3VPN IPv6 label context
                        
                        .. attribute:: prefix
                        
                        	IPv6 prefix
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_length
                        
                        	Prefix length
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: route_distinguisher
                        
                        	Route distinguisher
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Ipv6L3VpnData, self).__init__()

                            self.yang_name = "ipv6l3vpn-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('prefix', YLeaf(YType.str, 'prefix')),
                                ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                            ])
                            self.prefix = None
                            self.prefix_length = None
                            self.route_distinguisher = None
                            self._segment_path = lambda: "ipv6l3vpn-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                    class VrfL3VpnData(Entity):
                        """
                        L3VPN VRF label context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: security_id
                        
                        	Security ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.VrfL3VpnData, self).__init__()

                            self.yang_name = "vrf-l3vpn-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('security_id', YLeaf(YType.uint32, 'security-id')),
                            ])
                            self.table_id = None
                            self.security_id = None
                            self._segment_path = lambda: "vrf-l3vpn-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                    class Cev4L3VpnData(Entity):
                        """
                        L3VPN CEv4 label context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipv4_next_hop
                        
                        	IPv4 nexthop
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: security_id
                        
                        	Security ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Cev4L3VpnData, self).__init__()

                            self.yang_name = "cev4l3vpn-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                ('security_id', YLeaf(YType.uint32, 'security-id')),
                            ])
                            self.table_id = None
                            self.ipv4_next_hop = None
                            self.security_id = None
                            self._segment_path = lambda: "cev4l3vpn-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                    class Cev6L3VpnData(Entity):
                        """
                        L3VPN CEv6 label context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipv6_next_hop
                        
                        	IPv6 nexthop
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: security_id
                        
                        	Security ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Cev6L3VpnData, self).__init__()

                            self.yang_name = "cev6l3vpn-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                ('security_id', YLeaf(YType.uint32, 'security-id')),
                            ])
                            self.table_id = None
                            self.ipv6_next_hop = None
                            self.security_id = None
                            self._segment_path = lambda: "cev6l3vpn-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                    class PseudowireData(Entity):
                        """
                        Pseudowire label context
                        
                        .. attribute:: prefix
                        
                        	Address prefix
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: pseudowire_id
                        
                        	Pseudo\-wire ID
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: remote_l2_router_id
                        
                        	Remote L2 Router ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: subinterface
                        
                        	Subinterface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.PseudowireData, self).__init__()

                            self.yang_name = "pseudowire-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('prefix', YLeaf(YType.str, 'prefix')),
                                ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                ('subinterface', YLeaf(YType.str, 'subinterface')),
                            ])
                            self.prefix = None
                            self.pseudowire_id = None
                            self.remote_l2_router_id = None
                            self.subinterface = None
                            self._segment_path = lambda: "pseudowire-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                    class LabelBlockData(Entity):
                        """
                        Label block context
                        
                        .. attribute:: service
                        
                        	Service
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: vpn_id
                        
                        	VPN ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: edge_id
                        
                        	Edge ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: offset
                        
                        	Offset
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: size
                        
                        	Number of labels
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.LabelBlockData, self).__init__()

                            self.yang_name = "label-block-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('service', YLeaf(YType.uint8, 'service')),
                                ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                ('offset', YLeaf(YType.uint32, 'offset')),
                                ('size', YLeaf(YType.uint32, 'size')),
                            ])
                            self.service = None
                            self.vpn_id = None
                            self.edge_id = None
                            self.offset = None
                            self.size = None
                            self._segment_path = lambda: "label-block-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                    class IpSubData(Entity):
                        """
                        IP Subscriber context
                        
                        .. attribute:: table_id
                        
                        	Table Id
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: parent_interface
                        
                        	Parent interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.IpSubData, self).__init__()

                            self.yang_name = "ip-sub-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                            ])
                            self.table_id = None
                            self.parent_interface = None
                            self._segment_path = lambda: "ip-sub-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.IpSubData, ['table_id', 'parent_interface'], name, value)


                    class Tev4P2MpData(Entity):
                        """
                        TEv4 P2MP context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_source
                        
                        	Tunnel source
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	Point to multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id_extension
                        
                        	Tunnel ID extension
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_lsp_id
                        
                        	Tunnel LSP ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: previous_hop
                        
                        	Previous hop
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Tev4P2MpData, self).__init__()

                            self.yang_name = "tev4p2mp-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                            ])
                            self.table_id = None
                            self.tunnel_source = None
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.tunnel_id_extension = None
                            self.tunnel_lsp_id = None
                            self.previous_hop = None
                            self._segment_path = lambda: "tev4p2mp-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                    class MldPv4Data(Entity):
                        """
                        MLDPv4 LSM\-ID context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: type
                        
                        	LSM ID Type
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: lsm_id
                        
                        	LSM ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: peer_lsrid
                        
                        	Peer LSR Id
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: peer_label_space_id
                        
                        	Peer Label Space Id
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.MldPv4Data, self).__init__()

                            self.yang_name = "mld-pv4-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('type', YLeaf(YType.uint16, 'type')),
                                ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                            ])
                            self.table_id = None
                            self.type = None
                            self.lsm_id = None
                            self.peer_lsrid = None
                            self.peer_label_space_id = None
                            self._segment_path = lambda: "mld-pv4-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                    class PseudowireHeadEndData(Entity):
                        """
                        Pseudowire Head\-end label context
                        
                        .. attribute:: pwhe_intf
                        
                        	Pseudo\-wire Head\-end interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.PseudowireHeadEndData, self).__init__()

                            self.yang_name = "pseudowire-head-end-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                            ])
                            self.pwhe_intf = None
                            self._segment_path = lambda: "pseudowire-head-end-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                    class TpData(Entity):
                        """
                        TP context
                        
                        .. attribute:: source_global_id
                        
                        	TP source global ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: source_node_id
                        
                        	TP source node ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: dest_global_id
                        
                        	TP destination global ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: dest_node_id
                        
                        	TP destination node ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_tunnel_id
                        
                        	TP source tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: dest_tunnel_id
                        
                        	TP destination tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: lsp_id
                        
                        	TP LSP ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.TpData, self).__init__()

                            self.yang_name = "tp-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                            ])
                            self.source_global_id = None
                            self.source_node_id = None
                            self.dest_global_id = None
                            self.dest_node_id = None
                            self.source_tunnel_id = None
                            self.dest_tunnel_id = None
                            self.lsp_id = None
                            self._segment_path = lambda: "tp-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                    class GenericRoutingEncapsulation(Entity):
                        """
                        Generic routing encapsulation context
                        
                        .. attribute:: gre_interface
                        
                        	Generic routing encapsulation interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation, self).__init__()

                            self.yang_name = "generic-routing-encapsulation"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                            ])
                            self.gre_interface = None
                            self._segment_path = lambda: "generic-routing-encapsulation"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                    class Ipv6GenericRoutingEncapsulation(Entity):
                        """
                        Generic routing encapsulation context
                        
                        .. attribute:: greipv6_interface
                        
                        	Generic routing encapsulation IPv6 interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation, self).__init__()

                            self.yang_name = "ipv6-generic-routing-encapsulation"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                            ])
                            self.greipv6_interface = None
                            self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                    class EvpnData(Entity):
                        """
                        EVPN context
                        
                        .. attribute:: evpn_id
                        
                        	EVPN ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: evpn_tag
                        
                        	EVPN TAG
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ethernet_segment
                        
                        	Ethernet Segment ID
                        	**type**\: str
                        
                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.EvpnData, self).__init__()

                            self.yang_name = "evpn-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                            ])
                            self.evpn_id = None
                            self.evpn_tag = None
                            self.ethernet_segment = None
                            self._segment_path = lambda: "evpn-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                    class Ipv4BlbData(Entity):
                        """
                        BFD BLB label context
                        
                        .. attribute:: blb_intf
                        
                        	BFD BLB interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: prefix
                        
                        	IPv4 prefix
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Ipv4BlbData, self).__init__()

                            self.yang_name = "ipv4blb-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                ('prefix', YLeaf(YType.str, 'prefix')),
                            ])
                            self.blb_intf = None
                            self.prefix = None
                            self._segment_path = lambda: "ipv4blb-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                    class Ipv6BlbData(Entity):
                        """
                        BFD BLB label context
                        
                        .. attribute:: blb_intf
                        
                        	BFD BLB interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: prefix
                        
                        	IPv6 prefix
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.Ipv6BlbData, self).__init__()

                            self.yang_name = "ipv6blb-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                ('prefix', YLeaf(YType.str, 'prefix')),
                            ])
                            self.blb_intf = None
                            self.prefix = None
                            self._segment_path = lambda: "ipv6blb-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                    class PiMiPmsiData(Entity):
                        """
                        PIM I\-PMSI label conext
                        
                        .. attribute:: vrf_id
                        
                        	VRF ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: head
                        
                        	Head
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: v6
                        
                        	PIM6
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.PiMiPmsiData, self).__init__()

                            self.yang_name = "pi-mi-pmsi-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                ('head', YLeaf(YType.int32, 'head')),
                                ('v6', YLeaf(YType.int32, 'v6')),
                            ])
                            self.vrf_id = None
                            self.head = None
                            self.v6 = None
                            self._segment_path = lambda: "pi-mi-pmsi-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                    class PiMsPmsiData(Entity):
                        """
                        PIM S\-PMSI label conext
                        
                        .. attribute:: vrf_id
                        
                        	VRF ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: source
                        
                        	Originating Router
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: head
                        
                        	Head
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: v6
                        
                        	PIM6
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: hli
                        
                        	Head LSM\-ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: seg
                        
                        	Segmented Multicast
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.PiMsPmsiData, self).__init__()

                            self.yang_name = "pi-ms-pmsi-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                ('source', YLeaf(YType.str, 'source')),
                                ('head', YLeaf(YType.int32, 'head')),
                                ('v6', YLeaf(YType.int32, 'v6')),
                                ('hli', YLeaf(YType.uint32, 'hli')),
                                ('seg', YLeaf(YType.int32, 'seg')),
                            ])
                            self.vrf_id = None
                            self.source = None
                            self.head = None
                            self.v6 = None
                            self.hli = None
                            self.seg = None
                            self._segment_path = lambda: "pi-ms-pmsi-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                    class NextHopSetL3Vpn(Entity):
                        """
                        L3VPN NH SET label context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: next_hop_set_id
                        
                        	Next Hop Set ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.NextHopSetL3Vpn, self).__init__()

                            self.yang_name = "next-hop-set-l3vpn"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                            ])
                            self.table_id = None
                            self.next_hop_set_id = None
                            self._segment_path = lambda: "next-hop-set-l3vpn"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                    class SrPrefixSegment(Entity):
                        """
                        SR Prefix Segment context
                        
                        .. attribute:: table_id
                        
                        	Table ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: segment_id
                        
                        	Prefix Segment ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.SrPrefixSegment, self).__init__()

                            self.yang_name = "sr-prefix-segment"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('table_id', YLeaf(YType.uint32, 'table-id')),
                                ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                            ])
                            self.table_id = None
                            self.segment_id = None
                            self._segment_path = lambda: "sr-prefix-segment"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                    class SrAdjSegmentIpv4(Entity):
                        """
                        SR Adj Segment ipv4 context
                        
                        .. attribute:: index
                        
                        	Adjacency index
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: type
                        
                        	Adjacency type
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: intf
                        
                        	Adjacency interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: addr
                        
                        	Adjacency nexthop IPv4 address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4, self).__init__()

                            self.yang_name = "sr-adj-segment-ipv4"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('index', YLeaf(YType.uint32, 'index')),
                                ('type', YLeaf(YType.uint32, 'type')),
                                ('intf', YLeaf(YType.str, 'intf')),
                                ('addr', YLeaf(YType.str, 'addr')),
                            ])
                            self.index = None
                            self.type = None
                            self.intf = None
                            self.addr = None
                            self._segment_path = lambda: "sr-adj-segment-ipv4"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                    class SrAdjSegmentIpv6(Entity):
                        """
                        SR Adj Segment ipv6 context
                        
                        .. attribute:: index
                        
                        	Adjacency index
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: type
                        
                        	Adjacency type
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: intf
                        
                        	Adjacency interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: addr
                        
                        	Adjacency nexthop IPv6 address
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6, self).__init__()

                            self.yang_name = "sr-adj-segment-ipv6"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('index', YLeaf(YType.uint32, 'index')),
                                ('type', YLeaf(YType.uint32, 'type')),
                                ('intf', YLeaf(YType.str, 'intf')),
                                ('addr', YLeaf(YType.str, 'addr')),
                            ])
                            self.index = None
                            self.type = None
                            self.intf = None
                            self.addr = None
                            self._segment_path = lambda: "sr-adj-segment-ipv6"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                    class LabelBlockSrgbData(Entity):
                        """
                        Label block SRGB context
                        
                        .. attribute:: start_label
                        
                        	Start Label
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: offset
                        
                        	Offset
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: size
                        
                        	Number of labels
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrgbData, self).__init__()

                            self.yang_name = "label-block-srgb-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('start_label', YLeaf(YType.uint32, 'start-label')),
                                ('offset', YLeaf(YType.uint32, 'offset')),
                                ('size', YLeaf(YType.uint32, 'size')),
                            ])
                            self.start_label = None
                            self.offset = None
                            self.size = None
                            self._segment_path = lambda: "label-block-srgb-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                    class TeBinding(Entity):
                        """
                        MPLS TE tunnel binding context
                        
                        .. attribute:: te_identifier
                        
                        	MPLS Traffic Engineering Tunnel or Group ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: te_type
                        
                        	Type of identifier for the binding
                        	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.TeBinding, self).__init__()

                            self.yang_name = "te-binding"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                ('te_type', YLeaf(YType.enumeration, 'te-type')),
                            ])
                            self.te_identifier = None
                            self.te_type = None
                            self._segment_path = lambda: "te-binding"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.TeBinding, ['te_identifier', 'te_type'], name, value)


                    class LabelBlockSrlbData(Entity):
                        """
                        Label block SRLB context
                        
                        .. attribute:: start_label
                        
                        	Start Label
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: offset
                        
                        	Offset
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: size
                        
                        	Number of labels
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrlbData, self).__init__()

                            self.yang_name = "label-block-srlb-data"
                            self.yang_parent_name = "key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('start_label', YLeaf(YType.uint32, 'start-label')),
                                ('offset', YLeaf(YType.uint32, 'offset')),
                                ('size', YLeaf(YType.uint32, 'size')),
                            ])
                            self.start_label = None
                            self.offset = None
                            self.size = None
                            self._segment_path = lambda: "label-block-srlb-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Labels.Label.LabelContext.Key.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


            class ApplicationOwner(Entity):
                """
                Application owner
                
                .. attribute:: application_name
                
                	Application name
                	**type**\: str
                
                .. attribute:: application_type
                
                	Application type
                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                
                .. attribute:: application_role_primary
                
                	Primary/Backup role
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: application_instance
                
                	Application instance Name
                	**type**\: str
                
                .. attribute:: resource_state
                
                	Application resource state
                	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Labels.Label.ApplicationOwner, self).__init__()

                    self.yang_name = "application-owner"
                    self.yang_parent_name = "label"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('application_name', YLeaf(YType.str, 'application-name')),
                        ('application_type', YLeaf(YType.enumeration, 'application-type')),
                        ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                        ('application_instance', YLeaf(YType.str, 'application-instance')),
                        ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                    ])
                    self.application_name = None
                    self.application_type = None
                    self.application_role_primary = None
                    self.application_instance = None
                    self.resource_state = None
                    self._segment_path = lambda: "application-owner"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Labels.Label.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


    class FrrDatabase(Entity):
        """
        FRR database
        
        .. attribute:: tunnel_midpoints
        
        	Table of FRR database entries \- Tunnel midpoints
        	**type**\:  :py:class:`TunnelMidpoints <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelMidpoints>`
        
        .. attribute:: tunnel_heads
        
        	Table of FRR database entries \- Tunnel heads
        	**type**\:  :py:class:`TunnelHeads <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelHeads>`
        
        .. attribute:: tunnel_head_summary
        
        	Summary data for FRR database entry \- Tunnel head
        	**type**\:  :py:class:`TunnelHeadSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelHeadSummary>`
        
        .. attribute:: summary_protected_interfaces
        
        	Sumary table of Protected Interfaces
        	**type**\:  :py:class:`SummaryProtectedInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.SummaryProtectedInterfaces>`
        
        .. attribute:: tunnel_summary
        
        	Summary data for FRR database entry
        	**type**\:  :py:class:`TunnelSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelSummary>`
        
        .. attribute:: tunnel_midpoint_summary
        
        	Summary data for FRR database entry \- Tunnel midpoint
        	**type**\:  :py:class:`TunnelMidpointSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelMidpointSummary>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.FrrDatabase, self).__init__()

            self.yang_name = "frr-database"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("tunnel-midpoints", ("tunnel_midpoints", MplsLsd.FrrDatabase.TunnelMidpoints)), ("tunnel-heads", ("tunnel_heads", MplsLsd.FrrDatabase.TunnelHeads)), ("tunnel-head-summary", ("tunnel_head_summary", MplsLsd.FrrDatabase.TunnelHeadSummary)), ("summary-protected-interfaces", ("summary_protected_interfaces", MplsLsd.FrrDatabase.SummaryProtectedInterfaces)), ("tunnel-summary", ("tunnel_summary", MplsLsd.FrrDatabase.TunnelSummary)), ("tunnel-midpoint-summary", ("tunnel_midpoint_summary", MplsLsd.FrrDatabase.TunnelMidpointSummary))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.tunnel_midpoints = MplsLsd.FrrDatabase.TunnelMidpoints()
            self.tunnel_midpoints.parent = self
            self._children_name_map["tunnel_midpoints"] = "tunnel-midpoints"
            self._children_yang_names.add("tunnel-midpoints")

            self.tunnel_heads = MplsLsd.FrrDatabase.TunnelHeads()
            self.tunnel_heads.parent = self
            self._children_name_map["tunnel_heads"] = "tunnel-heads"
            self._children_yang_names.add("tunnel-heads")

            self.tunnel_head_summary = MplsLsd.FrrDatabase.TunnelHeadSummary()
            self.tunnel_head_summary.parent = self
            self._children_name_map["tunnel_head_summary"] = "tunnel-head-summary"
            self._children_yang_names.add("tunnel-head-summary")

            self.summary_protected_interfaces = MplsLsd.FrrDatabase.SummaryProtectedInterfaces()
            self.summary_protected_interfaces.parent = self
            self._children_name_map["summary_protected_interfaces"] = "summary-protected-interfaces"
            self._children_yang_names.add("summary-protected-interfaces")

            self.tunnel_summary = MplsLsd.FrrDatabase.TunnelSummary()
            self.tunnel_summary.parent = self
            self._children_name_map["tunnel_summary"] = "tunnel-summary"
            self._children_yang_names.add("tunnel-summary")

            self.tunnel_midpoint_summary = MplsLsd.FrrDatabase.TunnelMidpointSummary()
            self.tunnel_midpoint_summary.parent = self
            self._children_name_map["tunnel_midpoint_summary"] = "tunnel-midpoint-summary"
            self._children_yang_names.add("tunnel-midpoint-summary")
            self._segment_path = lambda: "frr-database"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()


        class TunnelMidpoints(Entity):
            """
            Table of FRR database entries \- Tunnel
            midpoints
            
            .. attribute:: tunnel_midpoint
            
            	Data for FRR database entry \- Tunnel midpoint
            	**type**\: list of  		 :py:class:`TunnelMidpoint <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.FrrDatabase.TunnelMidpoints, self).__init__()

                self.yang_name = "tunnel-midpoints"
                self.yang_parent_name = "frr-database"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("tunnel-midpoint", ("tunnel_midpoint", MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint))])
                self._leafs = OrderedDict()

                self.tunnel_midpoint = YList(self)
                self._segment_path = lambda: "tunnel-midpoints"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.FrrDatabase.TunnelMidpoints, [], name, value)


            class TunnelMidpoint(Entity):
                """
                Data for FRR database entry \- Tunnel midpoint
                
                .. attribute:: label  (key)
                
                	Label value
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: frr_entry_id
                
                	FRR entry ID
                	**type**\:  :py:class:`FrrEntryId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId>`
                
                .. attribute:: tunnel_interface
                
                	Tunnel interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: input_label
                
                	Input label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: entry_frr_state
                
                	MPLS FRR entry state
                	**type**\:  :py:class:`MgmtLsdFrrState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFrrState>`
                
                .. attribute:: out_path
                
                	Out Path List
                	**type**\: list of  		 :py:class:`OutPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.OutPath>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint, self).__init__()

                    self.yang_name = "tunnel-midpoint"
                    self.yang_parent_name = "tunnel-midpoints"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['label']
                    self._child_container_classes = OrderedDict([("frr-entry-id", ("frr_entry_id", MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId))])
                    self._child_list_classes = OrderedDict([("out-path", ("out_path", MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.OutPath))])
                    self._leafs = OrderedDict([
                        ('label', YLeaf(YType.int32, 'label')),
                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                        ('input_label', YLeaf(YType.uint32, 'input-label')),
                        ('entry_frr_state', YLeaf(YType.enumeration, 'entry-frr-state')),
                    ])
                    self.label = None
                    self.tunnel_interface = None
                    self.input_label = None
                    self.entry_frr_state = None

                    self.frr_entry_id = MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId()
                    self.frr_entry_id.parent = self
                    self._children_name_map["frr_entry_id"] = "frr-entry-id"
                    self._children_yang_names.add("frr-entry-id")

                    self.out_path = YList(self)
                    self._segment_path = lambda: "tunnel-midpoint" + "[label='" + str(self.label) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/tunnel-midpoints/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint, ['label', 'tunnel_interface', 'input_label', 'entry_frr_state'], name, value)


                class FrrEntryId(Entity):
                    """
                    FRR entry ID
                    
                    .. attribute:: head
                    
                    	head
                    	**type**\:  :py:class:`Head <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head>`
                    
                    .. attribute:: midpoint
                    
                    	midpoint
                    	**type**\:  :py:class:`Midpoint <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint>`
                    
                    .. attribute:: role
                    
                    	Role
                    	**type**\:  :py:class:`MgmtLsdLspRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLspRole>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId, self).__init__()

                        self.yang_name = "frr-entry-id"
                        self.yang_parent_name = "tunnel-midpoint"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("head", ("head", MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head)), ("midpoint", ("midpoint", MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('role', YLeaf(YType.enumeration, 'role')),
                        ])
                        self.role = None

                        self.head = MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head()
                        self.head.parent = self
                        self._children_name_map["head"] = "head"
                        self._children_yang_names.add("head")

                        self.midpoint = MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint()
                        self.midpoint.parent = self
                        self._children_name_map["midpoint"] = "midpoint"
                        self._children_yang_names.add("midpoint")
                        self._segment_path = lambda: "frr-entry-id"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId, ['role'], name, value)


                    class Head(Entity):
                        """
                        head
                        
                        .. attribute:: destination_prefix
                        
                        	Destination prefix
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_prefix_length
                        
                        	Destination prefix length
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head, self).__init__()

                            self.yang_name = "head"
                            self.yang_parent_name = "frr-entry-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_prefix', YLeaf(YType.str, 'destination-prefix')),
                                ('destination_prefix_length', YLeaf(YType.uint8, 'destination-prefix-length')),
                            ])
                            self.destination_prefix = None
                            self.destination_prefix_length = None
                            self._segment_path = lambda: "head"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Head, ['destination_prefix', 'destination_prefix_length'], name, value)


                    class Midpoint(Entity):
                        """
                        midpoint
                        
                        .. attribute:: source_address
                        
                        	Source IPv4 address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: lspid
                        
                        	LSP ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint, self).__init__()

                            self.yang_name = "midpoint"
                            self.yang_parent_name = "frr-entry-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('lspid', YLeaf(YType.uint32, 'lspid')),
                                ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                            ])
                            self.source_address = None
                            self.lspid = None
                            self.tunnel_id = None
                            self._segment_path = lambda: "midpoint"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.FrrEntryId.Midpoint, ['source_address', 'lspid', 'tunnel_id'], name, value)


                class OutPath(Entity):
                    """
                    Out Path List
                    
                    .. attribute:: out_interface
                    
                    	Outgoing interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: out_label
                    
                    	Outgoing label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ipv4_next_hop
                    
                    	Next hop IPv4 address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: frr_interface
                    
                    	FRR interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: frr_label
                    
                    	FRR output label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.OutPath, self).__init__()

                        self.yang_name = "out-path"
                        self.yang_parent_name = "tunnel-midpoint"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                            ('frr_interface', YLeaf(YType.str, 'frr-interface')),
                            ('frr_label', YLeaf(YType.uint32, 'frr-label')),
                        ])
                        self.out_interface = None
                        self.out_label = None
                        self.ipv4_next_hop = None
                        self.frr_interface = None
                        self.frr_label = None
                        self._segment_path = lambda: "out-path"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.FrrDatabase.TunnelMidpoints.TunnelMidpoint.OutPath, ['out_interface', 'out_label', 'ipv4_next_hop', 'frr_interface', 'frr_label'], name, value)


        class TunnelHeads(Entity):
            """
            Table of FRR database entries \- Tunnel heads
            
            .. attribute:: tunnel_head
            
            	Data for FRR database entry \- Tunnel head
            	**type**\: list of  		 :py:class:`TunnelHead <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelHeads.TunnelHead>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.FrrDatabase.TunnelHeads, self).__init__()

                self.yang_name = "tunnel-heads"
                self.yang_parent_name = "frr-database"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("tunnel-head", ("tunnel_head", MplsLsd.FrrDatabase.TunnelHeads.TunnelHead))])
                self._leafs = OrderedDict()

                self.tunnel_head = YList(self)
                self._segment_path = lambda: "tunnel-heads"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.FrrDatabase.TunnelHeads, [], name, value)


            class TunnelHead(Entity):
                """
                Data for FRR database entry \- Tunnel head
                
                .. attribute:: interface_name  (key)
                
                	Tunnel interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: frr_entry_id
                
                	FRR entry ID
                	**type**\:  :py:class:`FrrEntryId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId>`
                
                .. attribute:: tunnel_interface
                
                	Tunnel interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: input_label
                
                	Input label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: entry_frr_state
                
                	MPLS FRR entry state
                	**type**\:  :py:class:`MgmtLsdFrrState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFrrState>`
                
                .. attribute:: out_path
                
                	Out Path List
                	**type**\: list of  		 :py:class:`OutPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.OutPath>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead, self).__init__()

                    self.yang_name = "tunnel-head"
                    self.yang_parent_name = "tunnel-heads"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([("frr-entry-id", ("frr_entry_id", MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId))])
                    self._child_list_classes = OrderedDict([("out-path", ("out_path", MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.OutPath))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                        ('input_label', YLeaf(YType.uint32, 'input-label')),
                        ('entry_frr_state', YLeaf(YType.enumeration, 'entry-frr-state')),
                    ])
                    self.interface_name = None
                    self.tunnel_interface = None
                    self.input_label = None
                    self.entry_frr_state = None

                    self.frr_entry_id = MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId()
                    self.frr_entry_id.parent = self
                    self._children_name_map["frr_entry_id"] = "frr-entry-id"
                    self._children_yang_names.add("frr-entry-id")

                    self.out_path = YList(self)
                    self._segment_path = lambda: "tunnel-head" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/tunnel-heads/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead, ['interface_name', 'tunnel_interface', 'input_label', 'entry_frr_state'], name, value)


                class FrrEntryId(Entity):
                    """
                    FRR entry ID
                    
                    .. attribute:: head
                    
                    	head
                    	**type**\:  :py:class:`Head <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head>`
                    
                    .. attribute:: midpoint
                    
                    	midpoint
                    	**type**\:  :py:class:`Midpoint <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint>`
                    
                    .. attribute:: role
                    
                    	Role
                    	**type**\:  :py:class:`MgmtLsdLspRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLspRole>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId, self).__init__()

                        self.yang_name = "frr-entry-id"
                        self.yang_parent_name = "tunnel-head"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("head", ("head", MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head)), ("midpoint", ("midpoint", MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('role', YLeaf(YType.enumeration, 'role')),
                        ])
                        self.role = None

                        self.head = MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head()
                        self.head.parent = self
                        self._children_name_map["head"] = "head"
                        self._children_yang_names.add("head")

                        self.midpoint = MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint()
                        self.midpoint.parent = self
                        self._children_name_map["midpoint"] = "midpoint"
                        self._children_yang_names.add("midpoint")
                        self._segment_path = lambda: "frr-entry-id"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId, ['role'], name, value)


                    class Head(Entity):
                        """
                        head
                        
                        .. attribute:: destination_prefix
                        
                        	Destination prefix
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_prefix_length
                        
                        	Destination prefix length
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head, self).__init__()

                            self.yang_name = "head"
                            self.yang_parent_name = "frr-entry-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_prefix', YLeaf(YType.str, 'destination-prefix')),
                                ('destination_prefix_length', YLeaf(YType.uint8, 'destination-prefix-length')),
                            ])
                            self.destination_prefix = None
                            self.destination_prefix_length = None
                            self._segment_path = lambda: "head"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Head, ['destination_prefix', 'destination_prefix_length'], name, value)


                    class Midpoint(Entity):
                        """
                        midpoint
                        
                        .. attribute:: source_address
                        
                        	Source IPv4 address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: lspid
                        
                        	LSP ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint, self).__init__()

                            self.yang_name = "midpoint"
                            self.yang_parent_name = "frr-entry-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('lspid', YLeaf(YType.uint32, 'lspid')),
                                ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                            ])
                            self.source_address = None
                            self.lspid = None
                            self.tunnel_id = None
                            self._segment_path = lambda: "midpoint"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.FrrEntryId.Midpoint, ['source_address', 'lspid', 'tunnel_id'], name, value)


                class OutPath(Entity):
                    """
                    Out Path List
                    
                    .. attribute:: out_interface
                    
                    	Outgoing interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: out_label
                    
                    	Outgoing label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ipv4_next_hop
                    
                    	Next hop IPv4 address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: frr_interface
                    
                    	FRR interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: frr_label
                    
                    	FRR output label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.OutPath, self).__init__()

                        self.yang_name = "out-path"
                        self.yang_parent_name = "tunnel-head"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                            ('frr_interface', YLeaf(YType.str, 'frr-interface')),
                            ('frr_label', YLeaf(YType.uint32, 'frr-label')),
                        ])
                        self.out_interface = None
                        self.out_label = None
                        self.ipv4_next_hop = None
                        self.frr_interface = None
                        self.frr_label = None
                        self._segment_path = lambda: "out-path"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.FrrDatabase.TunnelHeads.TunnelHead.OutPath, ['out_interface', 'out_label', 'ipv4_next_hop', 'frr_interface', 'frr_label'], name, value)


        class TunnelHeadSummary(Entity):
            """
            Summary data for FRR database entry \- Tunnel
            head
            
            .. attribute:: active
            
            	Number of FRR rewrites in Active state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready
            
            	Number of FRR rewrites in Ready state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: partial
            
            	Number of FRR rewrites in Partial state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: igp
            
            	Number of FRR rewrites in IGP state for SR\-TE
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.FrrDatabase.TunnelHeadSummary, self).__init__()

                self.yang_name = "tunnel-head-summary"
                self.yang_parent_name = "frr-database"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('active', YLeaf(YType.uint32, 'active')),
                    ('ready', YLeaf(YType.uint32, 'ready')),
                    ('partial', YLeaf(YType.uint32, 'partial')),
                    ('igp', YLeaf(YType.uint32, 'igp')),
                ])
                self.active = None
                self.ready = None
                self.partial = None
                self.igp = None
                self._segment_path = lambda: "tunnel-head-summary"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.FrrDatabase.TunnelHeadSummary, ['active', 'ready', 'partial', 'igp'], name, value)


        class SummaryProtectedInterfaces(Entity):
            """
            Sumary table of Protected Interfaces
            
            .. attribute:: summary_protected_interface
            
            	Data for MPLS interface
            	**type**\: list of  		 :py:class:`SummaryProtectedInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.FrrDatabase.SummaryProtectedInterfaces.SummaryProtectedInterface>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.FrrDatabase.SummaryProtectedInterfaces, self).__init__()

                self.yang_name = "summary-protected-interfaces"
                self.yang_parent_name = "frr-database"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("summary-protected-interface", ("summary_protected_interface", MplsLsd.FrrDatabase.SummaryProtectedInterfaces.SummaryProtectedInterface))])
                self._leafs = OrderedDict()

                self.summary_protected_interface = YList(self)
                self._segment_path = lambda: "summary-protected-interfaces"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.FrrDatabase.SummaryProtectedInterfaces, [], name, value)


            class SummaryProtectedInterface(Entity):
                """
                Data for MPLS interface
                
                .. attribute:: interface_name  (key)
                
                	Interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: active
                
                	Number of FRR rewrites in Active state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ready
                
                	Number of FRR rewrites in Ready state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: partial
                
                	Number of FRR rewrites in Partial state
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: igp
                
                	Number of FRR rewrites in IGP state for SR\-TE
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.FrrDatabase.SummaryProtectedInterfaces.SummaryProtectedInterface, self).__init__()

                    self.yang_name = "summary-protected-interface"
                    self.yang_parent_name = "summary-protected-interfaces"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('active', YLeaf(YType.uint32, 'active')),
                        ('ready', YLeaf(YType.uint32, 'ready')),
                        ('partial', YLeaf(YType.uint32, 'partial')),
                        ('igp', YLeaf(YType.uint32, 'igp')),
                    ])
                    self.interface_name = None
                    self.active = None
                    self.ready = None
                    self.partial = None
                    self.igp = None
                    self._segment_path = lambda: "summary-protected-interface" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/summary-protected-interfaces/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.FrrDatabase.SummaryProtectedInterfaces.SummaryProtectedInterface, ['interface_name', 'active', 'ready', 'partial', 'igp'], name, value)


        class TunnelSummary(Entity):
            """
            Summary data for FRR database entry
            
            .. attribute:: active
            
            	Number of FRR rewrites in Active state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready
            
            	Number of FRR rewrites in Ready state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: partial
            
            	Number of FRR rewrites in Partial state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: igp
            
            	Number of FRR rewrites in IGP state for SR\-TE
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.FrrDatabase.TunnelSummary, self).__init__()

                self.yang_name = "tunnel-summary"
                self.yang_parent_name = "frr-database"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('active', YLeaf(YType.uint32, 'active')),
                    ('ready', YLeaf(YType.uint32, 'ready')),
                    ('partial', YLeaf(YType.uint32, 'partial')),
                    ('igp', YLeaf(YType.uint32, 'igp')),
                ])
                self.active = None
                self.ready = None
                self.partial = None
                self.igp = None
                self._segment_path = lambda: "tunnel-summary"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.FrrDatabase.TunnelSummary, ['active', 'ready', 'partial', 'igp'], name, value)


        class TunnelMidpointSummary(Entity):
            """
            Summary data for FRR database entry \- Tunnel
            midpoint
            
            .. attribute:: active
            
            	Number of FRR rewrites in Active state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready
            
            	Number of FRR rewrites in Ready state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: partial
            
            	Number of FRR rewrites in Partial state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: igp
            
            	Number of FRR rewrites in IGP state for SR\-TE
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.FrrDatabase.TunnelMidpointSummary, self).__init__()

                self.yang_name = "tunnel-midpoint-summary"
                self.yang_parent_name = "frr-database"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('active', YLeaf(YType.uint32, 'active')),
                    ('ready', YLeaf(YType.uint32, 'ready')),
                    ('partial', YLeaf(YType.uint32, 'partial')),
                    ('igp', YLeaf(YType.uint32, 'igp')),
                ])
                self.active = None
                self.ready = None
                self.partial = None
                self.igp = None
                self._segment_path = lambda: "tunnel-midpoint-summary"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/frr-database/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.FrrDatabase.TunnelMidpointSummary, ['active', 'ready', 'partial', 'igp'], name, value)


    class Rewrite(Entity):
        """
        Table of rewrites
        
        .. attribute:: rewrite_pws
        
        	Table of Rewrites
        	**type**\:  :py:class:`RewritePws <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws>`
        
        .. attribute:: rewrite_ipv4s
        
        	Table of Rewrites
        	**type**\:  :py:class:`RewriteIpv4S <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S>`
        
        .. attribute:: rewrite_tes
        
        	Table of Traffic Engineering Rewrites
        	**type**\:  :py:class:`RewriteTes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes>`
        
        .. attribute:: rewrite_labels
        
        	Table of Rewrites
        	**type**\:  :py:class:`RewriteLabels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.Rewrite, self).__init__()

            self.yang_name = "rewrite"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("rewrite-pws", ("rewrite_pws", MplsLsd.Rewrite.RewritePws)), ("rewrite-ipv4s", ("rewrite_ipv4s", MplsLsd.Rewrite.RewriteIpv4S)), ("rewrite-tes", ("rewrite_tes", MplsLsd.Rewrite.RewriteTes)), ("rewrite-labels", ("rewrite_labels", MplsLsd.Rewrite.RewriteLabels))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.rewrite_pws = MplsLsd.Rewrite.RewritePws()
            self.rewrite_pws.parent = self
            self._children_name_map["rewrite_pws"] = "rewrite-pws"
            self._children_yang_names.add("rewrite-pws")

            self.rewrite_ipv4s = MplsLsd.Rewrite.RewriteIpv4S()
            self.rewrite_ipv4s.parent = self
            self._children_name_map["rewrite_ipv4s"] = "rewrite-ipv4s"
            self._children_yang_names.add("rewrite-ipv4s")

            self.rewrite_tes = MplsLsd.Rewrite.RewriteTes()
            self.rewrite_tes.parent = self
            self._children_name_map["rewrite_tes"] = "rewrite-tes"
            self._children_yang_names.add("rewrite-tes")

            self.rewrite_labels = MplsLsd.Rewrite.RewriteLabels()
            self.rewrite_labels.parent = self
            self._children_name_map["rewrite_labels"] = "rewrite-labels"
            self._children_yang_names.add("rewrite-labels")
            self._segment_path = lambda: "rewrite"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()


        class RewritePws(Entity):
            """
            Table of Rewrites
            
            .. attribute:: rewrite_pw
            
            	FPI rewrite for PW List
            	**type**\: list of  		 :py:class:`RewritePw <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.Rewrite.RewritePws, self).__init__()

                self.yang_name = "rewrite-pws"
                self.yang_parent_name = "rewrite"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("rewrite-pw", ("rewrite_pw", MplsLsd.Rewrite.RewritePws.RewritePw))])
                self._leafs = OrderedDict()

                self.rewrite_pw = YList(self)
                self._segment_path = lambda: "rewrite-pws"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.Rewrite.RewritePws, [], name, value)


            class RewritePw(Entity):
                """
                FPI rewrite for PW List
                
                .. attribute:: pw_list_id  (key)
                
                	PW List ID
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fpi_key
                
                	fpi key
                	**type**\:  :py:class:`FpiKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey>`
                
                .. attribute:: rewrite_id
                
                	Rewrite ID
                	**type**\:  :py:class:`RewriteId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId>`
                
                .. attribute:: rewrite_version
                
                	Rewrite version
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: bcdl_priority
                
                	BCDL Priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsd_queue
                
                	LSD queue
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rw_install_time
                
                	Rewrite install timestamp
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: rw_install_age
                
                	Rewrite install age
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: rw_updated
                
                	Is rewrite ever updated
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: priority_updated
                
                	Is rewrite's BCDL priority updated
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: associated_fpi
                
                	Associated FPI
                	**type**\: list of  		 :py:class:`AssociatedFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi>`
                
                .. attribute:: v4_rpf
                
                	IPv4 RPF neighbors
                	**type**\: list of  		 :py:class:`V4Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.V4Rpf>`
                
                .. attribute:: v6_rpf
                
                	IPv6 RPF neighbors
                	**type**\: list of  		 :py:class:`V6Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.V6Rpf>`
                
                .. attribute:: mois
                
                	Mois
                	**type**\: list of  		 :py:class:`Mois <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Rewrite.RewritePws.RewritePw, self).__init__()

                    self.yang_name = "rewrite-pw"
                    self.yang_parent_name = "rewrite-pws"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['pw_list_id']
                    self._child_container_classes = OrderedDict([("fpi-key", ("fpi_key", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey)), ("rewrite-id", ("rewrite_id", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId))])
                    self._child_list_classes = OrderedDict([("associated-fpi", ("associated_fpi", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi)), ("v4-rpf", ("v4_rpf", MplsLsd.Rewrite.RewritePws.RewritePw.V4Rpf)), ("v6-rpf", ("v6_rpf", MplsLsd.Rewrite.RewritePws.RewritePw.V6Rpf)), ("mois", ("mois", MplsLsd.Rewrite.RewritePws.RewritePw.Mois))])
                    self._leafs = OrderedDict([
                        ('pw_list_id', YLeaf(YType.int32, 'pw-list-id')),
                        ('rewrite_version', YLeaf(YType.uint64, 'rewrite-version')),
                        ('bcdl_priority', YLeaf(YType.uint8, 'bcdl-priority')),
                        ('lsd_queue', YLeaf(YType.uint8, 'lsd-queue')),
                        ('rw_install_time', YLeaf(YType.uint64, 'rw-install-time')),
                        ('rw_install_age', YLeaf(YType.uint64, 'rw-install-age')),
                        ('rw_updated', YLeaf(YType.int32, 'rw-updated')),
                        ('priority_updated', YLeaf(YType.int32, 'priority-updated')),
                    ])
                    self.pw_list_id = None
                    self.rewrite_version = None
                    self.bcdl_priority = None
                    self.lsd_queue = None
                    self.rw_install_time = None
                    self.rw_install_age = None
                    self.rw_updated = None
                    self.priority_updated = None

                    self.fpi_key = MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey()
                    self.fpi_key.parent = self
                    self._children_name_map["fpi_key"] = "fpi-key"
                    self._children_yang_names.add("fpi-key")

                    self.rewrite_id = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId()
                    self.rewrite_id.parent = self
                    self._children_name_map["rewrite_id"] = "rewrite-id"
                    self._children_yang_names.add("rewrite-id")

                    self.associated_fpi = YList(self)
                    self.v4_rpf = YList(self)
                    self.v6_rpf = YList(self)
                    self.mois = YList(self)
                    self._segment_path = lambda: "rewrite-pw" + "[pw-list-id='" + str(self.pw_list_id) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-pws/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw, ['pw_list_id', 'rewrite_version', 'bcdl_priority', 'lsd_queue', 'rw_install_time', 'rw_install_age', 'rw_updated', 'priority_updated'], name, value)


                class FpiKey(Entity):
                    """
                    fpi key
                    
                    .. attribute:: fpi
                    
                    	FPI
                    	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi>`
                    
                    .. attribute:: application_owner
                    
                    	Application owner instance
                    	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.ApplicationOwner>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey, self).__init__()

                        self.yang_name = "fpi-key"
                        self.yang_parent_name = "rewrite-pw"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi))])
                        self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.ApplicationOwner))])
                        self._leafs = OrderedDict()

                        self.fpi = MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi()
                        self.fpi.parent = self
                        self._children_name_map["fpi"] = "fpi"
                        self._children_yang_names.add("fpi")

                        self.application_owner = YList(self)
                        self._segment_path = lambda: "fpi-key"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey, [], name, value)


                    class Fpi(Entity):
                        """
                        FPI
                        
                        .. attribute:: label_data
                        
                        	label data
                        	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData>`
                        
                        .. attribute:: te_data
                        
                        	te data
                        	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData>`
                        
                        .. attribute:: ipv4_data
                        
                        	ipv4 data
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	ipv6 data
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data>`
                        
                        .. attribute:: pw_list_data
                        
                        	pw list data
                        	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData>`
                        
                        .. attribute:: dmtc_ext_intf_data
                        
                        	dmtc ext intf data
                        	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData>`
                        
                        .. attribute:: fpi_type
                        
                        	FPIType
                        	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi, self).__init__()

                            self.yang_name = "fpi"
                            self.yang_parent_name = "fpi-key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData)), ("te-data", ("te_data", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                            ])
                            self.fpi_type = None

                            self.label_data = MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData()
                            self.label_data.parent = self
                            self._children_name_map["label_data"] = "label-data"
                            self._children_yang_names.add("label-data")

                            self.te_data = MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData()
                            self.te_data.parent = self
                            self._children_name_map["te_data"] = "te-data"
                            self._children_yang_names.add("te-data")

                            self.ipv4_data = MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.pw_list_data = MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData()
                            self.pw_list_data.parent = self
                            self._children_name_map["pw_list_data"] = "pw-list-data"
                            self._children_yang_names.add("pw-list-data")

                            self.dmtc_ext_intf_data = MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData()
                            self.dmtc_ext_intf_data.parent = self
                            self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                            self._children_yang_names.add("dmtc-ext-intf-data")
                            self._segment_path = lambda: "fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi, ['fpi_type'], name, value)


                        class LabelData(Entity):
                            """
                            label data
                            
                            .. attribute:: label
                            
                            	Label value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: elc
                            
                            	ELC
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData, self).__init__()

                                self.yang_name = "label-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('elc', YLeaf(YType.int32, 'elc')),
                                ])
                                self.label = None
                                self.security_id = None
                                self.elc = None
                                self._segment_path = lambda: "label-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                        class TeData(Entity):
                            """
                            te data
                            
                            .. attribute:: tunnel_interface
                            
                            	Tunnel interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: local_label
                            
                            	Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData, self).__init__()

                                self.yang_name = "te-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                    ('local_label', YLeaf(YType.uint32, 'local-label')),
                                ])
                                self.tunnel_interface = None
                                self.local_label = None
                                self._segment_path = lambda: "te-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                        class Ipv4Data(Entity):
                            """
                            ipv4 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sr_local_label
                            
                            	SR related Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                    ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.version = None
                                self.sr_local_label = None
                                self._segment_path = lambda: "ipv4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                        class Ipv6Data(Entity):
                            """
                            ipv6 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: router_flags
                            
                            	Route flags
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix_len
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                    ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.router_flags = None
                                self.prefix_len = None
                                self.version = None
                                self._segment_path = lambda: "ipv6-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                        class PwListData(Entity):
                            """
                            pw list data
                            
                            .. attribute:: pwhe_list_id
                            
                            	Pseudowire List Identifier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData, self).__init__()

                                self.yang_name = "pw-list-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                ])
                                self.pwhe_list_id = None
                                self._segment_path = lambda: "pw-list-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.PwListData, ['pwhe_list_id'], name, value)


                        class DmtcExtIntfData(Entity):
                            """
                            dmtc ext intf data
                            
                            .. attribute:: dmtc_ext_ifh
                            
                            	DMTC External Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData, self).__init__()

                                self.yang_name = "dmtc-ext-intf-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                ])
                                self.dmtc_ext_ifh = None
                                self._segment_path = lambda: "dmtc-ext-intf-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                    class ApplicationOwner(Entity):
                        """
                        Application owner instance
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.ApplicationOwner, self).__init__()

                            self.yang_name = "application-owner"
                            self.yang_parent_name = "fpi-key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-owner"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.FpiKey.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                class RewriteId(Entity):
                    """
                    Rewrite ID
                    
                    .. attribute:: rewrite_id
                    
                    	Rewrite ID
                    	**type**\:  :py:class:`RewriteId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId, self).__init__()

                        self.yang_name = "rewrite-id"
                        self.yang_parent_name = "rewrite-pw"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("rewrite-id", ("rewrite_id", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.rewrite_id = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_()
                        self.rewrite_id.parent = self
                        self._children_name_map["rewrite_id"] = "rewrite-id"
                        self._children_yang_names.add("rewrite-id")
                        self._segment_path = lambda: "rewrite-id"


                    class RewriteId_(Entity):
                        """
                        Rewrite ID
                        
                        .. attribute:: label_context
                        
                        	Label context
                        	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext>`
                        
                        .. attribute:: local_label_rewrite
                        
                        	Local label rewrite information
                        	**type**\:  :py:class:`LocalLabelRewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite>`
                        
                        .. attribute:: rewrite_id_type
                        
                        	RewriteIDType
                        	**type**\:  :py:class:`MgmtLsdRwId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdRwId>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_, self).__init__()

                            self.yang_name = "rewrite-id"
                            self.yang_parent_name = "rewrite-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext)), ("local-label-rewrite", ("local_label_rewrite", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rewrite_id_type', YLeaf(YType.enumeration, 'rewrite-id-type')),
                            ])
                            self.rewrite_id_type = None

                            self.label_context = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext()
                            self.label_context.parent = self
                            self._children_name_map["label_context"] = "label-context"
                            self._children_yang_names.add("label-context")

                            self.local_label_rewrite = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite()
                            self.local_label_rewrite.parent = self
                            self._children_name_map["local_label_rewrite"] = "local-label-rewrite"
                            self._children_yang_names.add("local-label-rewrite")
                            self._segment_path = lambda: "rewrite-id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_, ['rewrite_id_type'], name, value)


                        class LabelContext(Entity):
                            """
                            Label context
                            
                            .. attribute:: ipv4_data
                            
                            	IPv4 label context
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	IPv6 label context
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data>`
                            
                            .. attribute:: tev4_data
                            
                            	TEv4 label context
                            	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data>`
                            
                            .. attribute:: ipv4l3vpn_data
                            
                            	L3VPN IPv4 label context
                            	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData>`
                            
                            .. attribute:: ipv6l3vpn_data
                            
                            	L3VPN IPv6 label context
                            	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData>`
                            
                            .. attribute:: vrf_l3vpn_data
                            
                            	L3VPN VRF label context
                            	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData>`
                            
                            .. attribute:: cev4l3vpn_data
                            
                            	L3VPN CEv4 label context
                            	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData>`
                            
                            .. attribute:: cev6l3vpn_data
                            
                            	L3VPN CEv6 label context
                            	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData>`
                            
                            .. attribute:: pseudowire_data
                            
                            	Pseudowire label context
                            	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData>`
                            
                            .. attribute:: label_block_data
                            
                            	Label block context
                            	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData>`
                            
                            .. attribute:: ip_sub_data
                            
                            	IP Subscriber context
                            	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData>`
                            
                            .. attribute:: tev4p2mp_data
                            
                            	TEv4 P2MP context
                            	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData>`
                            
                            .. attribute:: mld_pv4_data
                            
                            	MLDPv4 LSM\-ID context
                            	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data>`
                            
                            .. attribute:: pseudowire_head_end_data
                            
                            	Pseudowire Head\-end label context
                            	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData>`
                            
                            .. attribute:: tp_data
                            
                            	TP context
                            	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData>`
                            
                            .. attribute:: generic_routing_encapsulation
                            
                            	Generic routing encapsulation context
                            	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation>`
                            
                            .. attribute:: ipv6_generic_routing_encapsulation
                            
                            	Generic routing encapsulation context
                            	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation>`
                            
                            .. attribute:: evpn_data
                            
                            	EVPN context
                            	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData>`
                            
                            .. attribute:: ipv4blb_data
                            
                            	BFD BLB label context
                            	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData>`
                            
                            .. attribute:: ipv6blb_data
                            
                            	BFD BLB label context
                            	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData>`
                            
                            .. attribute:: pi_mi_pmsi_data
                            
                            	PIM I\-PMSI label conext
                            	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData>`
                            
                            .. attribute:: pi_ms_pmsi_data
                            
                            	PIM S\-PMSI label conext
                            	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData>`
                            
                            .. attribute:: next_hop_set_l3vpn
                            
                            	L3VPN NH SET label context
                            	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn>`
                            
                            .. attribute:: sr_prefix_segment
                            
                            	SR Prefix Segment context
                            	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment>`
                            
                            .. attribute:: sr_adj_segment_ipv4
                            
                            	SR Adj Segment ipv4 context
                            	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4>`
                            
                            .. attribute:: sr_adj_segment_ipv6
                            
                            	SR Adj Segment ipv6 context
                            	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6>`
                            
                            .. attribute:: label_block_srgb_data
                            
                            	Label block SRGB context
                            	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData>`
                            
                            .. attribute:: te_binding
                            
                            	MPLS TE tunnel binding context
                            	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding>`
                            
                            .. attribute:: label_block_srlb_data
                            
                            	Label block SRLB context
                            	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData>`
                            
                            .. attribute:: label_context_type
                            
                            	LabelContextType
                            	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext, self).__init__()

                                self.yang_name = "label-context"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                                ])
                                self.label_context_type = None

                                self.ipv4_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.tev4_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data()
                                self.tev4_data.parent = self
                                self._children_name_map["tev4_data"] = "tev4-data"
                                self._children_yang_names.add("tev4-data")

                                self.ipv4l3vpn_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData()
                                self.ipv4l3vpn_data.parent = self
                                self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                                self._children_yang_names.add("ipv4l3vpn-data")

                                self.ipv6l3vpn_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData()
                                self.ipv6l3vpn_data.parent = self
                                self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                                self._children_yang_names.add("ipv6l3vpn-data")

                                self.vrf_l3vpn_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData()
                                self.vrf_l3vpn_data.parent = self
                                self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                                self._children_yang_names.add("vrf-l3vpn-data")

                                self.cev4l3vpn_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData()
                                self.cev4l3vpn_data.parent = self
                                self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                                self._children_yang_names.add("cev4l3vpn-data")

                                self.cev6l3vpn_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData()
                                self.cev6l3vpn_data.parent = self
                                self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                                self._children_yang_names.add("cev6l3vpn-data")

                                self.pseudowire_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData()
                                self.pseudowire_data.parent = self
                                self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                self._children_yang_names.add("pseudowire-data")

                                self.label_block_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData()
                                self.label_block_data.parent = self
                                self._children_name_map["label_block_data"] = "label-block-data"
                                self._children_yang_names.add("label-block-data")

                                self.ip_sub_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData()
                                self.ip_sub_data.parent = self
                                self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                self._children_yang_names.add("ip-sub-data")

                                self.tev4p2mp_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData()
                                self.tev4p2mp_data.parent = self
                                self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                                self._children_yang_names.add("tev4p2mp-data")

                                self.mld_pv4_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data()
                                self.mld_pv4_data.parent = self
                                self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                                self._children_yang_names.add("mld-pv4-data")

                                self.pseudowire_head_end_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData()
                                self.pseudowire_head_end_data.parent = self
                                self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                self._children_yang_names.add("pseudowire-head-end-data")

                                self.tp_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData()
                                self.tp_data.parent = self
                                self._children_name_map["tp_data"] = "tp-data"
                                self._children_yang_names.add("tp-data")

                                self.generic_routing_encapsulation = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation()
                                self.generic_routing_encapsulation.parent = self
                                self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                                self._children_yang_names.add("generic-routing-encapsulation")

                                self.ipv6_generic_routing_encapsulation = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation()
                                self.ipv6_generic_routing_encapsulation.parent = self
                                self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                                self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                                self.evpn_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData()
                                self.evpn_data.parent = self
                                self._children_name_map["evpn_data"] = "evpn-data"
                                self._children_yang_names.add("evpn-data")

                                self.ipv4blb_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData()
                                self.ipv4blb_data.parent = self
                                self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                                self._children_yang_names.add("ipv4blb-data")

                                self.ipv6blb_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData()
                                self.ipv6blb_data.parent = self
                                self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                                self._children_yang_names.add("ipv6blb-data")

                                self.pi_mi_pmsi_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData()
                                self.pi_mi_pmsi_data.parent = self
                                self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                                self._children_yang_names.add("pi-mi-pmsi-data")

                                self.pi_ms_pmsi_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData()
                                self.pi_ms_pmsi_data.parent = self
                                self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                                self._children_yang_names.add("pi-ms-pmsi-data")

                                self.next_hop_set_l3vpn = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn()
                                self.next_hop_set_l3vpn.parent = self
                                self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                                self._children_yang_names.add("next-hop-set-l3vpn")

                                self.sr_prefix_segment = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment()
                                self.sr_prefix_segment.parent = self
                                self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                                self._children_yang_names.add("sr-prefix-segment")

                                self.sr_adj_segment_ipv4 = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4()
                                self.sr_adj_segment_ipv4.parent = self
                                self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                                self._children_yang_names.add("sr-adj-segment-ipv4")

                                self.sr_adj_segment_ipv6 = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6()
                                self.sr_adj_segment_ipv6.parent = self
                                self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                                self._children_yang_names.add("sr-adj-segment-ipv6")

                                self.label_block_srgb_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData()
                                self.label_block_srgb_data.parent = self
                                self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                                self._children_yang_names.add("label-block-srgb-data")

                                self.te_binding = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding()
                                self.te_binding.parent = self
                                self._children_name_map["te_binding"] = "te-binding"
                                self._children_yang_names.add("te-binding")

                                self.label_block_srlb_data = MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData()
                                self.label_block_srlb_data.parent = self
                                self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                                self._children_yang_names.add("label-block-srlb-data")
                                self._segment_path = lambda: "label-context"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext, ['label_context_type'], name, value)


                            class Ipv4Data(Entity):
                                """
                                IPv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	IPv4 prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: vrf_name
                                
                                	VRF Name
                                	**type**\: str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.security_id = None
                                    self.vrf_name = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                            class Ipv6Data(Entity):
                                """
                                IPv6 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: vrf_name
                                
                                	VRF Name
                                	**type**\: str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.security_id = None
                                    self.vrf_name = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                            class Tev4Data(Entity):
                                """
                                TEv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_source
                                
                                	Tunnel source
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: tunnel_dest
                                
                                	Tunnel destination
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id_extension
                                
                                	Extended tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_lsp_id
                                
                                	Tunnel LSP ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: is_srte
                                
                                	Is this an SRTE head tunnel
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data, self).__init__()

                                    self.yang_name = "tev4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                        ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                        ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                        ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                        ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                        ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                    ])
                                    self.table_id = None
                                    self.tunnel_source = None
                                    self.tunnel_dest = None
                                    self.tunnel_id = None
                                    self.tunnel_id_extension = None
                                    self.tunnel_lsp_id = None
                                    self.is_srte = None
                                    self._segment_path = lambda: "tev4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                            class Ipv4L3VpnData(Entity):
                                """
                                L3VPN IPv4 label context
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: route_distinguisher
                                
                                	Route distinguisher
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, self).__init__()

                                    self.yang_name = "ipv4l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.route_distinguisher = None
                                    self._segment_path = lambda: "ipv4l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                            class Ipv6L3VpnData(Entity):
                                """
                                L3VPN IPv6 label context
                                
                                .. attribute:: prefix
                                
                                	IPv6 prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: route_distinguisher
                                
                                	Route distinguisher
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, self).__init__()

                                    self.yang_name = "ipv6l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.route_distinguisher = None
                                    self._segment_path = lambda: "ipv6l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                            class VrfL3VpnData(Entity):
                                """
                                L3VPN VRF label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, self).__init__()

                                    self.yang_name = "vrf-l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.security_id = None
                                    self._segment_path = lambda: "vrf-l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                            class Cev4L3VpnData(Entity):
                                """
                                L3VPN CEv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, self).__init__()

                                    self.yang_name = "cev4l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.ipv4_next_hop = None
                                    self.security_id = None
                                    self._segment_path = lambda: "cev4l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                            class Cev6L3VpnData(Entity):
                                """
                                L3VPN CEv6 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_next_hop
                                
                                	IPv6 nexthop
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, self).__init__()

                                    self.yang_name = "cev6l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.ipv6_next_hop = None
                                    self.security_id = None
                                    self._segment_path = lambda: "cev6l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                            class PseudowireData(Entity):
                                """
                                Pseudowire label context
                                
                                .. attribute:: prefix
                                
                                	Address prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: pseudowire_id
                                
                                	Pseudo\-wire ID
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: remote_l2_router_id
                                
                                	Remote L2 Router ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: subinterface
                                
                                	Subinterface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData, self).__init__()

                                    self.yang_name = "pseudowire-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                        ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                        ('subinterface', YLeaf(YType.str, 'subinterface')),
                                    ])
                                    self.prefix = None
                                    self.pseudowire_id = None
                                    self.remote_l2_router_id = None
                                    self.subinterface = None
                                    self._segment_path = lambda: "pseudowire-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                            class LabelBlockData(Entity):
                                """
                                Label block context
                                
                                .. attribute:: service
                                
                                	Service
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: vpn_id
                                
                                	VPN ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: edge_id
                                
                                	Edge ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData, self).__init__()

                                    self.yang_name = "label-block-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('service', YLeaf(YType.uint8, 'service')),
                                        ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                        ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.service = None
                                    self.vpn_id = None
                                    self.edge_id = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                            class IpSubData(Entity):
                                """
                                IP Subscriber context
                                
                                .. attribute:: table_id
                                
                                	Table Id
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: parent_interface
                                
                                	Parent interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData, self).__init__()

                                    self.yang_name = "ip-sub-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                    ])
                                    self.table_id = None
                                    self.parent_interface = None
                                    self._segment_path = lambda: "ip-sub-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.IpSubData, ['table_id', 'parent_interface'], name, value)


                            class Tev4P2MpData(Entity):
                                """
                                TEv4 P2MP context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_source
                                
                                	Tunnel source
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: p2mp_id
                                
                                	Point to multipoint ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id_extension
                                
                                	Tunnel ID extension
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_lsp_id
                                
                                	Tunnel LSP ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: previous_hop
                                
                                	Previous hop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, self).__init__()

                                    self.yang_name = "tev4p2mp-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                        ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                        ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                        ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                        ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                        ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                    ])
                                    self.table_id = None
                                    self.tunnel_source = None
                                    self.p2mp_id = None
                                    self.tunnel_id = None
                                    self.tunnel_id_extension = None
                                    self.tunnel_lsp_id = None
                                    self.previous_hop = None
                                    self._segment_path = lambda: "tev4p2mp-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                            class MldPv4Data(Entity):
                                """
                                MLDPv4 LSM\-ID context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	LSM ID Type
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsm_id
                                
                                	LSM ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: peer_lsrid
                                
                                	Peer LSR Id
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: peer_label_space_id
                                
                                	Peer Label Space Id
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data, self).__init__()

                                    self.yang_name = "mld-pv4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('type', YLeaf(YType.uint16, 'type')),
                                        ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                        ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                        ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                    ])
                                    self.table_id = None
                                    self.type = None
                                    self.lsm_id = None
                                    self.peer_lsrid = None
                                    self.peer_label_space_id = None
                                    self._segment_path = lambda: "mld-pv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                            class PseudowireHeadEndData(Entity):
                                """
                                Pseudowire Head\-end label context
                                
                                .. attribute:: pwhe_intf
                                
                                	Pseudo\-wire Head\-end interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, self).__init__()

                                    self.yang_name = "pseudowire-head-end-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                    ])
                                    self.pwhe_intf = None
                                    self._segment_path = lambda: "pseudowire-head-end-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                            class TpData(Entity):
                                """
                                TP context
                                
                                .. attribute:: source_global_id
                                
                                	TP source global ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: source_node_id
                                
                                	TP source node ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: dest_global_id
                                
                                	TP destination global ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dest_node_id
                                
                                	TP destination node ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: source_tunnel_id
                                
                                	TP source tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: dest_tunnel_id
                                
                                	TP destination tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_id
                                
                                	TP LSP ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData, self).__init__()

                                    self.yang_name = "tp-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                        ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                        ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                        ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                        ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                        ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                        ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                    ])
                                    self.source_global_id = None
                                    self.source_node_id = None
                                    self.dest_global_id = None
                                    self.dest_node_id = None
                                    self.source_tunnel_id = None
                                    self.dest_tunnel_id = None
                                    self.lsp_id = None
                                    self._segment_path = lambda: "tp-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                            class GenericRoutingEncapsulation(Entity):
                                """
                                Generic routing encapsulation context
                                
                                .. attribute:: gre_interface
                                
                                	Generic routing encapsulation interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, self).__init__()

                                    self.yang_name = "generic-routing-encapsulation"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                    ])
                                    self.gre_interface = None
                                    self._segment_path = lambda: "generic-routing-encapsulation"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                            class Ipv6GenericRoutingEncapsulation(Entity):
                                """
                                Generic routing encapsulation context
                                
                                .. attribute:: greipv6_interface
                                
                                	Generic routing encapsulation IPv6 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, self).__init__()

                                    self.yang_name = "ipv6-generic-routing-encapsulation"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                    ])
                                    self.greipv6_interface = None
                                    self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                            class EvpnData(Entity):
                                """
                                EVPN context
                                
                                .. attribute:: evpn_id
                                
                                	EVPN ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: evpn_tag
                                
                                	EVPN TAG
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ethernet_segment
                                
                                	Ethernet Segment ID
                                	**type**\: str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData, self).__init__()

                                    self.yang_name = "evpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                        ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                        ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                    ])
                                    self.evpn_id = None
                                    self.evpn_tag = None
                                    self.ethernet_segment = None
                                    self._segment_path = lambda: "evpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                            class Ipv4BlbData(Entity):
                                """
                                BFD BLB label context
                                
                                .. attribute:: blb_intf
                                
                                	BFD BLB interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, self).__init__()

                                    self.yang_name = "ipv4blb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                    ])
                                    self.blb_intf = None
                                    self.prefix = None
                                    self._segment_path = lambda: "ipv4blb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                            class Ipv6BlbData(Entity):
                                """
                                BFD BLB label context
                                
                                .. attribute:: blb_intf
                                
                                	BFD BLB interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix
                                
                                	IPv6 prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, self).__init__()

                                    self.yang_name = "ipv6blb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                    ])
                                    self.blb_intf = None
                                    self.prefix = None
                                    self._segment_path = lambda: "ipv6blb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                            class PiMiPmsiData(Entity):
                                """
                                PIM I\-PMSI label conext
                                
                                .. attribute:: vrf_id
                                
                                	VRF ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: head
                                
                                	Head
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: v6
                                
                                	PIM6
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, self).__init__()

                                    self.yang_name = "pi-mi-pmsi-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                        ('head', YLeaf(YType.int32, 'head')),
                                        ('v6', YLeaf(YType.int32, 'v6')),
                                    ])
                                    self.vrf_id = None
                                    self.head = None
                                    self.v6 = None
                                    self._segment_path = lambda: "pi-mi-pmsi-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                            class PiMsPmsiData(Entity):
                                """
                                PIM S\-PMSI label conext
                                
                                .. attribute:: vrf_id
                                
                                	VRF ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: source
                                
                                	Originating Router
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: head
                                
                                	Head
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: v6
                                
                                	PIM6
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: hli
                                
                                	Head LSM\-ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: seg
                                
                                	Segmented Multicast
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, self).__init__()

                                    self.yang_name = "pi-ms-pmsi-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                        ('source', YLeaf(YType.str, 'source')),
                                        ('head', YLeaf(YType.int32, 'head')),
                                        ('v6', YLeaf(YType.int32, 'v6')),
                                        ('hli', YLeaf(YType.uint32, 'hli')),
                                        ('seg', YLeaf(YType.int32, 'seg')),
                                    ])
                                    self.vrf_id = None
                                    self.source = None
                                    self.head = None
                                    self.v6 = None
                                    self.hli = None
                                    self.seg = None
                                    self._segment_path = lambda: "pi-ms-pmsi-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                            class NextHopSetL3Vpn(Entity):
                                """
                                L3VPN NH SET label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: next_hop_set_id
                                
                                	Next Hop Set ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, self).__init__()

                                    self.yang_name = "next-hop-set-l3vpn"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                    ])
                                    self.table_id = None
                                    self.next_hop_set_id = None
                                    self._segment_path = lambda: "next-hop-set-l3vpn"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                            class SrPrefixSegment(Entity):
                                """
                                SR Prefix Segment context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: segment_id
                                
                                	Prefix Segment ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, self).__init__()

                                    self.yang_name = "sr-prefix-segment"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                    ])
                                    self.table_id = None
                                    self.segment_id = None
                                    self._segment_path = lambda: "sr-prefix-segment"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                            class SrAdjSegmentIpv4(Entity):
                                """
                                SR Adj Segment ipv4 context
                                
                                .. attribute:: index
                                
                                	Adjacency index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Adjacency type
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: intf
                                
                                	Adjacency interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: addr
                                
                                	Adjacency nexthop IPv4 address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, self).__init__()

                                    self.yang_name = "sr-adj-segment-ipv4"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('index', YLeaf(YType.uint32, 'index')),
                                        ('type', YLeaf(YType.uint32, 'type')),
                                        ('intf', YLeaf(YType.str, 'intf')),
                                        ('addr', YLeaf(YType.str, 'addr')),
                                    ])
                                    self.index = None
                                    self.type = None
                                    self.intf = None
                                    self.addr = None
                                    self._segment_path = lambda: "sr-adj-segment-ipv4"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                            class SrAdjSegmentIpv6(Entity):
                                """
                                SR Adj Segment ipv6 context
                                
                                .. attribute:: index
                                
                                	Adjacency index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Adjacency type
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: intf
                                
                                	Adjacency interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: addr
                                
                                	Adjacency nexthop IPv6 address
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, self).__init__()

                                    self.yang_name = "sr-adj-segment-ipv6"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('index', YLeaf(YType.uint32, 'index')),
                                        ('type', YLeaf(YType.uint32, 'type')),
                                        ('intf', YLeaf(YType.str, 'intf')),
                                        ('addr', YLeaf(YType.str, 'addr')),
                                    ])
                                    self.index = None
                                    self.type = None
                                    self.intf = None
                                    self.addr = None
                                    self._segment_path = lambda: "sr-adj-segment-ipv6"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                            class LabelBlockSrgbData(Entity):
                                """
                                Label block SRGB context
                                
                                .. attribute:: start_label
                                
                                	Start Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, self).__init__()

                                    self.yang_name = "label-block-srgb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('start_label', YLeaf(YType.uint32, 'start-label')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.start_label = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-srgb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                            class TeBinding(Entity):
                                """
                                MPLS TE tunnel binding context
                                
                                .. attribute:: te_identifier
                                
                                	MPLS Traffic Engineering Tunnel or Group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: te_type
                                
                                	Type of identifier for the binding
                                	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding, self).__init__()

                                    self.yang_name = "te-binding"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                        ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                    ])
                                    self.te_identifier = None
                                    self.te_type = None
                                    self._segment_path = lambda: "te-binding"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.TeBinding, ['te_identifier', 'te_type'], name, value)


                            class LabelBlockSrlbData(Entity):
                                """
                                Label block SRLB context
                                
                                .. attribute:: start_label
                                
                                	Start Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, self).__init__()

                                    self.yang_name = "label-block-srlb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('start_label', YLeaf(YType.uint32, 'start-label')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.start_label = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-srlb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                        class LocalLabelRewrite(Entity):
                            """
                            Local label rewrite information
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\: list of  		 :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite.LabelData>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite, self).__init__()

                                self.yang_name = "local-label-rewrite"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite.LabelData))])
                                self._leafs = OrderedDict()

                                self.label_data = YList(self)
                                self._segment_path = lambda: "local-label-rewrite"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite, [], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "local-label-rewrite"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, ['entry'], name, value)


                class AssociatedFpi(Entity):
                    """
                    Associated FPI
                    
                    .. attribute:: fpi
                    
                    	FPI
                    	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi>`
                    
                    .. attribute:: application_owner
                    
                    	Application owner instance
                    	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.ApplicationOwner>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi, self).__init__()

                        self.yang_name = "associated-fpi"
                        self.yang_parent_name = "rewrite-pw"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi))])
                        self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.ApplicationOwner))])
                        self._leafs = OrderedDict()

                        self.fpi = MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi()
                        self.fpi.parent = self
                        self._children_name_map["fpi"] = "fpi"
                        self._children_yang_names.add("fpi")

                        self.application_owner = YList(self)
                        self._segment_path = lambda: "associated-fpi"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi, [], name, value)


                    class Fpi(Entity):
                        """
                        FPI
                        
                        .. attribute:: label_data
                        
                        	label data
                        	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData>`
                        
                        .. attribute:: te_data
                        
                        	te data
                        	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData>`
                        
                        .. attribute:: ipv4_data
                        
                        	ipv4 data
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	ipv6 data
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data>`
                        
                        .. attribute:: pw_list_data
                        
                        	pw list data
                        	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData>`
                        
                        .. attribute:: dmtc_ext_intf_data
                        
                        	dmtc ext intf data
                        	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData>`
                        
                        .. attribute:: fpi_type
                        
                        	FPIType
                        	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi, self).__init__()

                            self.yang_name = "fpi"
                            self.yang_parent_name = "associated-fpi"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData)), ("te-data", ("te_data", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                            ])
                            self.fpi_type = None

                            self.label_data = MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData()
                            self.label_data.parent = self
                            self._children_name_map["label_data"] = "label-data"
                            self._children_yang_names.add("label-data")

                            self.te_data = MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData()
                            self.te_data.parent = self
                            self._children_name_map["te_data"] = "te-data"
                            self._children_yang_names.add("te-data")

                            self.ipv4_data = MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.pw_list_data = MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData()
                            self.pw_list_data.parent = self
                            self._children_name_map["pw_list_data"] = "pw-list-data"
                            self._children_yang_names.add("pw-list-data")

                            self.dmtc_ext_intf_data = MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData()
                            self.dmtc_ext_intf_data.parent = self
                            self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                            self._children_yang_names.add("dmtc-ext-intf-data")
                            self._segment_path = lambda: "fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi, ['fpi_type'], name, value)


                        class LabelData(Entity):
                            """
                            label data
                            
                            .. attribute:: label
                            
                            	Label value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: elc
                            
                            	ELC
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData, self).__init__()

                                self.yang_name = "label-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('elc', YLeaf(YType.int32, 'elc')),
                                ])
                                self.label = None
                                self.security_id = None
                                self.elc = None
                                self._segment_path = lambda: "label-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                        class TeData(Entity):
                            """
                            te data
                            
                            .. attribute:: tunnel_interface
                            
                            	Tunnel interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: local_label
                            
                            	Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData, self).__init__()

                                self.yang_name = "te-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                    ('local_label', YLeaf(YType.uint32, 'local-label')),
                                ])
                                self.tunnel_interface = None
                                self.local_label = None
                                self._segment_path = lambda: "te-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                        class Ipv4Data(Entity):
                            """
                            ipv4 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sr_local_label
                            
                            	SR related Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                    ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.version = None
                                self.sr_local_label = None
                                self._segment_path = lambda: "ipv4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                        class Ipv6Data(Entity):
                            """
                            ipv6 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: router_flags
                            
                            	Route flags
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix_len
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                    ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.router_flags = None
                                self.prefix_len = None
                                self.version = None
                                self._segment_path = lambda: "ipv6-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                        class PwListData(Entity):
                            """
                            pw list data
                            
                            .. attribute:: pwhe_list_id
                            
                            	Pseudowire List Identifier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData, self).__init__()

                                self.yang_name = "pw-list-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                ])
                                self.pwhe_list_id = None
                                self._segment_path = lambda: "pw-list-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.PwListData, ['pwhe_list_id'], name, value)


                        class DmtcExtIntfData(Entity):
                            """
                            dmtc ext intf data
                            
                            .. attribute:: dmtc_ext_ifh
                            
                            	DMTC External Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData, self).__init__()

                                self.yang_name = "dmtc-ext-intf-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                ])
                                self.dmtc_ext_ifh = None
                                self._segment_path = lambda: "dmtc-ext-intf-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                    class ApplicationOwner(Entity):
                        """
                        Application owner instance
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.ApplicationOwner, self).__init__()

                            self.yang_name = "application-owner"
                            self.yang_parent_name = "associated-fpi"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-owner"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.AssociatedFpi.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                class V4Rpf(Entity):
                    """
                    IPv4 RPF neighbors
                    
                    .. attribute:: table_id
                    
                    	Table ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: v4_rpf_neighbor
                    
                    	V4 RPF Neighbor
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewritePws.RewritePw.V4Rpf, self).__init__()

                        self.yang_name = "v4-rpf"
                        self.yang_parent_name = "rewrite-pw"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                            ('v4_rpf_neighbor', YLeaf(YType.str, 'v4-rpf-neighbor')),
                        ])
                        self.table_id = None
                        self.v4_rpf_neighbor = None
                        self._segment_path = lambda: "v4-rpf"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.V4Rpf, ['table_id', 'v4_rpf_neighbor'], name, value)


                class V6Rpf(Entity):
                    """
                    IPv6 RPF neighbors
                    
                    .. attribute:: table_id
                    
                    	Table ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: v6_rpf_neighbor
                    
                    	V6 RPF Neighbor
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewritePws.RewritePw.V6Rpf, self).__init__()

                        self.yang_name = "v6-rpf"
                        self.yang_parent_name = "rewrite-pw"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                            ('v6_rpf_neighbor', YLeaf(YType.str, 'v6-rpf-neighbor')),
                        ])
                        self.table_id = None
                        self.v6_rpf_neighbor = None
                        self._segment_path = lambda: "v6-rpf"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.V6Rpf, ['table_id', 'v6_rpf_neighbor'], name, value)


                class Mois(Entity):
                    """
                    Mois
                    
                    .. attribute:: application_resource
                    
                    	Application state
                    	**type**\:  :py:class:`ApplicationResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource>`
                    
                    .. attribute:: moi_array
                    
                    	moi array
                    	**type**\: list of  		 :py:class:`MoiArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois, self).__init__()

                        self.yang_name = "mois"
                        self.yang_parent_name = "rewrite-pw"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("application-resource", ("application_resource", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource))])
                        self._child_list_classes = OrderedDict([("moi-array", ("moi_array", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray))])
                        self._leafs = OrderedDict()

                        self.application_resource = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource()
                        self.application_resource.parent = self
                        self._children_name_map["application_resource"] = "application-resource"
                        self._children_yang_names.add("application-resource")

                        self.moi_array = YList(self)
                        self._segment_path = lambda: "mois"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois, [], name, value)


                    class ApplicationResource(Entity):
                        """
                        Application state
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource, self).__init__()

                            self.yang_name = "application-resource"
                            self.yang_parent_name = "mois"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-resource"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.ApplicationResource, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class MoiArray(Entity):
                        """
                        moi array
                        
                        .. attribute:: moi
                        
                        	Moi
                        	**type**\:  :py:class:`Moi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray, self).__init__()

                            self.yang_name = "moi-array"
                            self.yang_parent_name = "mois"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("moi", ("moi", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.moi = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi()
                            self.moi.parent = self
                            self._children_name_map["moi"] = "moi"
                            self._children_yang_names.add("moi")
                            self._segment_path = lambda: "moi-array"


                        class Moi(Entity):
                            """
                            Moi
                            
                            .. attribute:: pop_and_lookup_ipv4
                            
                            	pop and lookup ipv4
                            	**type**\:  :py:class:`PopAndLookupIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4>`
                            
                            .. attribute:: pop_and_lookup_tp
                            
                            	pop and lookup tp
                            	**type**\:  :py:class:`PopAndLookupTp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp>`
                            
                            .. attribute:: pop_and_lookup_ipv6
                            
                            	pop and lookup ipv6
                            	**type**\:  :py:class:`PopAndLookupIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data>`
                            
                            .. attribute:: tev4_data
                            
                            	tev4 data
                            	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data>`
                            
                            .. attribute:: pseudowire_data
                            
                            	pseudowire data
                            	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData>`
                            
                            .. attribute:: ip_sub_data
                            
                            	ip sub data
                            	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData>`
                            
                            .. attribute:: pseudowire_head_end_data
                            
                            	pseudowire head end data
                            	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData>`
                            
                            .. attribute:: stackv4_data
                            
                            	stackv4 data
                            	**type**\:  :py:class:`Stackv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data>`
                            
                            .. attribute:: stackv6_data
                            
                            	stackv6 data
                            	**type**\:  :py:class:`Stackv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data>`
                            
                            .. attribute:: te_head_data
                            
                            	te head data
                            	**type**\:  :py:class:`TeHeadData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData>`
                            
                            .. attribute:: dmtc_data
                            
                            	dmtc data
                            	**type**\:  :py:class:`DmtcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData>`
                            
                            .. attribute:: moi_type
                            
                            	MoiType
                            	**type**\:  :py:class:`MgmtLsdMoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdMoi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi, self).__init__()

                                self.yang_name = "moi"
                                self.yang_parent_name = "moi-array"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("pop-and-lookup-ipv4", ("pop_and_lookup_ipv4", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4)), ("pop-and-lookup-tp", ("pop_and_lookup_tp", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp)), ("pop-and-lookup-ipv6", ("pop_and_lookup_ipv6", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData)), ("stackv4-data", ("stackv4_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data)), ("stackv6-data", ("stackv6_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data)), ("te-head-data", ("te_head_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData)), ("dmtc-data", ("dmtc_data", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('moi_type', YLeaf(YType.enumeration, 'moi-type')),
                                ])
                                self.moi_type = None

                                self.pop_and_lookup_ipv4 = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4()
                                self.pop_and_lookup_ipv4.parent = self
                                self._children_name_map["pop_and_lookup_ipv4"] = "pop-and-lookup-ipv4"
                                self._children_yang_names.add("pop-and-lookup-ipv4")

                                self.pop_and_lookup_tp = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp()
                                self.pop_and_lookup_tp.parent = self
                                self._children_name_map["pop_and_lookup_tp"] = "pop-and-lookup-tp"
                                self._children_yang_names.add("pop-and-lookup-tp")

                                self.pop_and_lookup_ipv6 = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6()
                                self.pop_and_lookup_ipv6.parent = self
                                self._children_name_map["pop_and_lookup_ipv6"] = "pop-and-lookup-ipv6"
                                self._children_yang_names.add("pop-and-lookup-ipv6")

                                self.ipv4_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.tev4_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data()
                                self.tev4_data.parent = self
                                self._children_name_map["tev4_data"] = "tev4-data"
                                self._children_yang_names.add("tev4-data")

                                self.pseudowire_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData()
                                self.pseudowire_data.parent = self
                                self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                self._children_yang_names.add("pseudowire-data")

                                self.ip_sub_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData()
                                self.ip_sub_data.parent = self
                                self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                self._children_yang_names.add("ip-sub-data")

                                self.pseudowire_head_end_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData()
                                self.pseudowire_head_end_data.parent = self
                                self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                self._children_yang_names.add("pseudowire-head-end-data")

                                self.pw_list_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.stackv4_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data()
                                self.stackv4_data.parent = self
                                self._children_name_map["stackv4_data"] = "stackv4-data"
                                self._children_yang_names.add("stackv4-data")

                                self.stackv6_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data()
                                self.stackv6_data.parent = self
                                self._children_name_map["stackv6_data"] = "stackv6-data"
                                self._children_yang_names.add("stackv6-data")

                                self.te_head_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData()
                                self.te_head_data.parent = self
                                self._children_name_map["te_head_data"] = "te-head-data"
                                self._children_yang_names.add("te-head-data")

                                self.dmtc_data = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData()
                                self.dmtc_data.parent = self
                                self._children_name_map["dmtc_data"] = "dmtc-data"
                                self._children_yang_names.add("dmtc-data")
                                self._segment_path = lambda: "moi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi, ['moi_type'], name, value)


                            class PopAndLookupIpv4(Entity):
                                """
                                pop and lookup ipv4
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4, self).__init__()

                                    self.yang_name = "pop-and-lookup-ipv4"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pop-and-lookup-ipv4"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv4, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                            class PopAndLookupTp(Entity):
                                """
                                pop and lookup tp
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp, self).__init__()

                                    self.yang_name = "pop-and-lookup-tp"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_label = None
                                    self._segment_path = lambda: "pop-and-lookup-tp"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupTp, ['table_id', 'table_name', 'path_flags_decode', 'out_label'], name, value)


                            class PopAndLookupIpv6(Entity):
                                """
                                pop and lookup ipv6
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6, self).__init__()

                                    self.yang_name = "pop-and-lookup-ipv6"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pop-and-lookup-ipv6"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PopAndLookupIpv6, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_interface_parent
                                
                                	Outgoing Interface's parent
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	Routing path id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: backup_path_id
                                
                                	Routing path backup id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: load_metric
                                
                                	Routing path's load metric
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_hop_id
                                
                                	Next hop ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: local_label
                                
                                	TE backup path local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('path_id', YLeaf(YType.uint8, 'path-id')),
                                        ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                        ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                        ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_interface_parent = None
                                    self.ipv4_next_hop = None
                                    self.path_id = None
                                    self.backup_path_id = None
                                    self.load_metric = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.tunnel_id = None
                                    self.next_hop_id = None
                                    self.local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: ipv6_next_hop
                                
                                	IPv6 nexthop
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	Routing path id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: backup_path_id
                                
                                	Routing path backup id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_hop_id
                                
                                	Next hop ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_interface_parent
                                
                                	Outgoing Interface's parent
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                        ('path_id', YLeaf(YType.uint8, 'path-id')),
                                        ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                        ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                        ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.ipv6_next_hop = None
                                    self.path_id = None
                                    self.backup_path_id = None
                                    self.next_hop_id = None
                                    self.out_interface_parent = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Ipv6Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                            class Tev4Data(Entity):
                                """
                                tev4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: backup_interface
                                
                                	Backup interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: backup_ipv4_next_hop
                                
                                	Backup IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: merge_point_label
                                
                                	Merge point label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: backup_local_label
                                
                                	Backup local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: tunnel_weight
                                
                                	Tunnel weight
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: data_out_parent_interface
                                
                                	Outgoing data parent interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: tunnel_class
                                
                                	Tunnel class
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data, self).__init__()

                                    self.yang_name = "tev4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ('backup_ipv4_next_hop', YLeaf(YType.str, 'backup-ipv4-next-hop')),
                                        ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                                        ('backup_local_label', YLeaf(YType.uint32, 'backup-local-label')),
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('tunnel_weight', YLeaf(YType.uint32, 'tunnel-weight')),
                                        ('data_out_parent_interface', YLeaf(YType.str, 'data-out-parent-interface')),
                                        ('tunnel_class', YLeaf(YType.uint32, 'tunnel-class')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.ipv4_next_hop = None
                                    self.backup_interface = None
                                    self.backup_ipv4_next_hop = None
                                    self.merge_point_label = None
                                    self.backup_local_label = None
                                    self.tunnel_interface = None
                                    self.tunnel_weight = None
                                    self.data_out_parent_interface = None
                                    self.tunnel_class = None
                                    self._segment_path = lambda: "tev4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Tev4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv4_next_hop', 'backup_interface', 'backup_ipv4_next_hop', 'merge_point_label', 'backup_local_label', 'tunnel_interface', 'tunnel_weight', 'data_out_parent_interface', 'tunnel_class'], name, value)


                            class PseudowireData(Entity):
                                """
                                pseudowire data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: cross_connect_id
                                
                                	Cross\-connect ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pseuodo_wire_connect_id
                                
                                	PseudoWire Cross\-connect ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: bridge_id
                                
                                	Bridge ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: split_horizon_id
                                
                                	Split horizon group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData, self).__init__()

                                    self.yang_name = "pseudowire-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('cross_connect_id', YLeaf(YType.uint32, 'cross-connect-id')),
                                        ('pseuodo_wire_connect_id', YLeaf(YType.uint32, 'pseuodo-wire-connect-id')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('bridge_id', YLeaf(YType.uint32, 'bridge-id')),
                                        ('split_horizon_id', YLeaf(YType.uint32, 'split-horizon-id')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.cross_connect_id = None
                                    self.pseuodo_wire_connect_id = None
                                    self.ipv4_next_hop = None
                                    self.bridge_id = None
                                    self.split_horizon_id = None
                                    self._segment_path = lambda: "pseudowire-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'cross_connect_id', 'pseuodo_wire_connect_id', 'ipv4_next_hop', 'bridge_id', 'split_horizon_id'], name, value)


                            class IpSubData(Entity):
                                """
                                ip sub data
                                
                                .. attribute:: table_id
                                
                                	VRF table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData, self).__init__()

                                    self.yang_name = "ip-sub-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.out_interface = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "ip-sub-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.IpSubData, ['table_id', 'table_name', 'out_interface', 'path_flags_decode'], name, value)


                            class PseudowireHeadEndData(Entity):
                                """
                                pseudowire head end data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: control_word
                                
                                	Is control word present
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: imposition
                                
                                	Is PWHE IMposition
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: vctype
                                
                                	Virtual Circuit Type
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: pw_list_id
                                
                                	Pseudo\-wire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: pwhe_interface
                                
                                	Pseudo\-wire Head\-end interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData, self).__init__()

                                    self.yang_name = "pseudowire-head-end-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('control_word', YLeaf(YType.int32, 'control-word')),
                                        ('imposition', YLeaf(YType.int32, 'imposition')),
                                        ('vctype', YLeaf(YType.uint8, 'vctype')),
                                        ('pw_list_id', YLeaf(YType.uint16, 'pw-list-id')),
                                        ('pwhe_interface', YLeaf(YType.str, 'pwhe-interface')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.ipv4_next_hop = None
                                    self.control_word = None
                                    self.imposition = None
                                    self.vctype = None
                                    self.pw_list_id = None
                                    self.pwhe_interface = None
                                    self._segment_path = lambda: "pseudowire-head-end-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PseudowireHeadEndData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'ipv4_next_hop', 'control_word', 'imposition', 'vctype', 'pw_list_id', 'pwhe_interface'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: l3_interface
                                
                                	Pseudo\-wire Layer 3 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: l2_interface
                                
                                	Pseudo\-wire Layer 2 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('l3_interface', YLeaf(YType.str, 'l3-interface')),
                                        ('l2_interface', YLeaf(YType.str, 'l2-interface')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.l3_interface = None
                                    self.l2_interface = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.PwListData, ['table_id', 'table_name', 'l3_interface', 'l2_interface', 'path_flags_decode'], name, value)


                            class Stackv4Data(Entity):
                                """
                                stackv4 data
                                
                                .. attribute:: nexthop
                                
                                	Nexthop
                                	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop>`
                                
                                .. attribute:: inner_stack
                                
                                	Inner stack
                                	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack>`
                                
                                .. attribute:: owner_application_type
                                
                                	Owner application type
                                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data, self).__init__()

                                    self.yang_name = "stackv4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('owner_application_type', YLeaf(YType.enumeration, 'owner-application-type')),
                                    ])
                                    self.owner_application_type = None

                                    self.nexthop = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop()
                                    self.nexthop.parent = self
                                    self._children_name_map["nexthop"] = "nexthop"
                                    self._children_yang_names.add("nexthop")

                                    self.inner_stack = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack()
                                    self.inner_stack.parent = self
                                    self._children_name_map["inner_stack"] = "inner-stack"
                                    self._children_yang_names.add("inner-stack")
                                    self._segment_path = lambda: "stackv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data, ['owner_application_type'], name, value)


                                class Nexthop(Entity):
                                    """
                                    Nexthop
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: load_metric
                                    
                                    	Routing path's load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_label
                                    
                                    	TE backup path local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop, self).__init__()

                                        self.yang_name = "nexthop"
                                        self.yang_parent_name = "stackv4-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('local_label', YLeaf(YType.uint32, 'local-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_interface_parent = None
                                        self.ipv4_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.load_metric = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.tunnel_id = None
                                        self.next_hop_id = None
                                        self.local_label = None
                                        self._segment_path = lambda: "nexthop"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                class InnerStack(Entity):
                                    """
                                    Inner stack
                                    
                                    .. attribute:: num_nexthops
                                    
                                    	Number of remote nexthop addresses
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: num_lbls
                                    
                                    	Depth of inner label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nexthop
                                    
                                    	Remote nexthop addresses
                                    	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop>`
                                    
                                    .. attribute:: label
                                    
                                    	Info related to outgoing labels
                                    	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack, self).__init__()

                                        self.yang_name = "inner-stack"
                                        self.yang_parent_name = "stackv4-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop)), ("label", ("label", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label))])
                                        self._leafs = OrderedDict([
                                            ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                            ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                        ])
                                        self.num_nexthops = None
                                        self.num_lbls = None

                                        self.nexthop = YList(self)
                                        self.label = YList(self)
                                        self._segment_path = lambda: "inner-stack"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Remote nexthop addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, ['entry'], name, value)


                                    class Label(Entity):
                                        """
                                        Info related to outgoing labels
                                        
                                        .. attribute:: outgoing_label
                                        
                                        	Remote Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outgoing_label_str
                                        
                                        	Remote Label string
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, self).__init__()

                                            self.yang_name = "label"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                            ])
                                            self.outgoing_label = None
                                            self.outgoing_label_str = None
                                            self._segment_path = lambda: "label"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                            class Stackv6Data(Entity):
                                """
                                stackv6 data
                                
                                .. attribute:: nexthop
                                
                                	Nexthop
                                	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop>`
                                
                                .. attribute:: inner_stack
                                
                                	Inner stack
                                	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data, self).__init__()

                                    self.yang_name = "stackv6-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.nexthop = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop()
                                    self.nexthop.parent = self
                                    self._children_name_map["nexthop"] = "nexthop"
                                    self._children_yang_names.add("nexthop")

                                    self.inner_stack = MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack()
                                    self.inner_stack.parent = self
                                    self._children_name_map["inner_stack"] = "inner-stack"
                                    self._children_yang_names.add("inner-stack")
                                    self._segment_path = lambda: "stackv6-data"


                                class Nexthop(Entity):
                                    """
                                    Nexthop
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop, self).__init__()

                                        self.yang_name = "nexthop"
                                        self.yang_parent_name = "stackv6-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv6_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.next_hop_id = None
                                        self.out_interface_parent = None
                                        self._segment_path = lambda: "nexthop"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                class InnerStack(Entity):
                                    """
                                    Inner stack
                                    
                                    .. attribute:: num_nexthops
                                    
                                    	Number of remote nexthop addresses
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: num_lbls
                                    
                                    	Depth of inner label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nexthop
                                    
                                    	Remote nexthop addresses
                                    	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop>`
                                    
                                    .. attribute:: label
                                    
                                    	Info related to outgoing labels
                                    	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack, self).__init__()

                                        self.yang_name = "inner-stack"
                                        self.yang_parent_name = "stackv6-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop)), ("label", ("label", MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label))])
                                        self._leafs = OrderedDict([
                                            ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                            ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                        ])
                                        self.num_nexthops = None
                                        self.num_lbls = None

                                        self.nexthop = YList(self)
                                        self.label = YList(self)
                                        self._segment_path = lambda: "inner-stack"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Remote nexthop addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, ['entry'], name, value)


                                    class Label(Entity):
                                        """
                                        Info related to outgoing labels
                                        
                                        .. attribute:: outgoing_label
                                        
                                        	Remote Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outgoing_label_str
                                        
                                        	Remote Label string
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, self).__init__()

                                            self.yang_name = "label"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                            ])
                                            self.outgoing_label = None
                                            self.outgoing_label_str = None
                                            self._segment_path = lambda: "label"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                            class TeHeadData(Entity):
                                """
                                te head data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: tunnel_local_label
                                
                                	Tunnel local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_local_label_str
                                
                                	Tunnel local label stringified
                                	**type**\: str
                                
                                .. attribute:: tunnel_fwd_class
                                
                                	Tunnel forwarding class
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: tunnel_load_metric
                                
                                	Tunnel Load metric
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flags_decode
                                
                                	Flags decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData, self).__init__()

                                    self.yang_name = "te-head-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('tunnel_local_label', YLeaf(YType.uint32, 'tunnel-local-label')),
                                        ('tunnel_local_label_str', YLeaf(YType.str, 'tunnel-local-label-str')),
                                        ('tunnel_fwd_class', YLeaf(YType.uint8, 'tunnel-fwd-class')),
                                        ('tunnel_load_metric', YLeaf(YType.uint32, 'tunnel-load-metric')),
                                        ('flags_decode', YLeaf(YType.str, 'flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.tunnel_local_label = None
                                    self.tunnel_local_label_str = None
                                    self.tunnel_fwd_class = None
                                    self.tunnel_load_metric = None
                                    self.flags_decode = None
                                    self._segment_path = lambda: "te-head-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.TeHeadData, ['table_id', 'table_name', 'tunnel_local_label', 'tunnel_local_label_str', 'tunnel_fwd_class', 'tunnel_load_metric', 'flags_decode'], name, value)


                            class DmtcData(Entity):
                                """
                                dmtc data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData, self).__init__()

                                    self.yang_name = "dmtc-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewritePws.RewritePw.Mois.MoiArray.Moi.DmtcData, ['dmtc_ext_ifh'], name, value)


        class RewriteIpv4S(Entity):
            """
            Table of Rewrites
            
            .. attribute:: rewrite_ipv4
            
            	FPI rewrite for label
            	**type**\: list of  		 :py:class:`RewriteIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.Rewrite.RewriteIpv4S, self).__init__()

                self.yang_name = "rewrite-ipv4s"
                self.yang_parent_name = "rewrite"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("rewrite-ipv4", ("rewrite_ipv4", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4))])
                self._leafs = OrderedDict()

                self.rewrite_ipv4 = YList(self)
                self._segment_path = lambda: "rewrite-ipv4s"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S, [], name, value)


            class RewriteIpv4(Entity):
                """
                FPI rewrite for label
                
                .. attribute:: rsi_table_name
                
                	RSI table name
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: rsi_table_id
                
                	RSI table ID
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                .. attribute:: prefix
                
                	IPv4 Prefix
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: prefix_length
                
                	Prefix length
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fpi_key
                
                	fpi key
                	**type**\:  :py:class:`FpiKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey>`
                
                .. attribute:: rewrite_id
                
                	Rewrite ID
                	**type**\:  :py:class:`RewriteId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId>`
                
                .. attribute:: rewrite_version
                
                	Rewrite version
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: bcdl_priority
                
                	BCDL Priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsd_queue
                
                	LSD queue
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rw_install_time
                
                	Rewrite install timestamp
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: rw_install_age
                
                	Rewrite install age
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: rw_updated
                
                	Is rewrite ever updated
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: priority_updated
                
                	Is rewrite's BCDL priority updated
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: associated_fpi
                
                	Associated FPI
                	**type**\: list of  		 :py:class:`AssociatedFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi>`
                
                .. attribute:: v4_rpf
                
                	IPv4 RPF neighbors
                	**type**\: list of  		 :py:class:`V4Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.V4Rpf>`
                
                .. attribute:: v6_rpf
                
                	IPv6 RPF neighbors
                	**type**\: list of  		 :py:class:`V6Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.V6Rpf>`
                
                .. attribute:: mois
                
                	Mois
                	**type**\: list of  		 :py:class:`Mois <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4, self).__init__()

                    self.yang_name = "rewrite-ipv4"
                    self.yang_parent_name = "rewrite-ipv4s"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("fpi-key", ("fpi_key", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey)), ("rewrite-id", ("rewrite_id", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId))])
                    self._child_list_classes = OrderedDict([("associated-fpi", ("associated_fpi", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi)), ("v4-rpf", ("v4_rpf", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.V4Rpf)), ("v6-rpf", ("v6_rpf", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.V6Rpf)), ("mois", ("mois", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois))])
                    self._leafs = OrderedDict([
                        ('rsi_table_name', YLeaf(YType.str, 'rsi-table-name')),
                        ('rsi_table_id', YLeaf(YType.str, 'rsi-table-id')),
                        ('prefix', YLeaf(YType.str, 'prefix')),
                        ('prefix_length', YLeaf(YType.int32, 'prefix-length')),
                        ('rewrite_version', YLeaf(YType.uint64, 'rewrite-version')),
                        ('bcdl_priority', YLeaf(YType.uint8, 'bcdl-priority')),
                        ('lsd_queue', YLeaf(YType.uint8, 'lsd-queue')),
                        ('rw_install_time', YLeaf(YType.uint64, 'rw-install-time')),
                        ('rw_install_age', YLeaf(YType.uint64, 'rw-install-age')),
                        ('rw_updated', YLeaf(YType.int32, 'rw-updated')),
                        ('priority_updated', YLeaf(YType.int32, 'priority-updated')),
                    ])
                    self.rsi_table_name = None
                    self.rsi_table_id = None
                    self.prefix = None
                    self.prefix_length = None
                    self.rewrite_version = None
                    self.bcdl_priority = None
                    self.lsd_queue = None
                    self.rw_install_time = None
                    self.rw_install_age = None
                    self.rw_updated = None
                    self.priority_updated = None

                    self.fpi_key = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey()
                    self.fpi_key.parent = self
                    self._children_name_map["fpi_key"] = "fpi-key"
                    self._children_yang_names.add("fpi-key")

                    self.rewrite_id = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId()
                    self.rewrite_id.parent = self
                    self._children_name_map["rewrite_id"] = "rewrite-id"
                    self._children_yang_names.add("rewrite-id")

                    self.associated_fpi = YList(self)
                    self.v4_rpf = YList(self)
                    self.v6_rpf = YList(self)
                    self.mois = YList(self)
                    self._segment_path = lambda: "rewrite-ipv4"
                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4, ['rsi_table_name', 'rsi_table_id', 'prefix', 'prefix_length', 'rewrite_version', 'bcdl_priority', 'lsd_queue', 'rw_install_time', 'rw_install_age', 'rw_updated', 'priority_updated'], name, value)


                class FpiKey(Entity):
                    """
                    fpi key
                    
                    .. attribute:: fpi
                    
                    	FPI
                    	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi>`
                    
                    .. attribute:: application_owner
                    
                    	Application owner instance
                    	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.ApplicationOwner>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey, self).__init__()

                        self.yang_name = "fpi-key"
                        self.yang_parent_name = "rewrite-ipv4"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi))])
                        self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.ApplicationOwner))])
                        self._leafs = OrderedDict()

                        self.fpi = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi()
                        self.fpi.parent = self
                        self._children_name_map["fpi"] = "fpi"
                        self._children_yang_names.add("fpi")

                        self.application_owner = YList(self)
                        self._segment_path = lambda: "fpi-key"
                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey, [], name, value)


                    class Fpi(Entity):
                        """
                        FPI
                        
                        .. attribute:: label_data
                        
                        	label data
                        	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData>`
                        
                        .. attribute:: te_data
                        
                        	te data
                        	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData>`
                        
                        .. attribute:: ipv4_data
                        
                        	ipv4 data
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	ipv6 data
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data>`
                        
                        .. attribute:: pw_list_data
                        
                        	pw list data
                        	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData>`
                        
                        .. attribute:: dmtc_ext_intf_data
                        
                        	dmtc ext intf data
                        	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData>`
                        
                        .. attribute:: fpi_type
                        
                        	FPIType
                        	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi, self).__init__()

                            self.yang_name = "fpi"
                            self.yang_parent_name = "fpi-key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData)), ("te-data", ("te_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                            ])
                            self.fpi_type = None

                            self.label_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData()
                            self.label_data.parent = self
                            self._children_name_map["label_data"] = "label-data"
                            self._children_yang_names.add("label-data")

                            self.te_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData()
                            self.te_data.parent = self
                            self._children_name_map["te_data"] = "te-data"
                            self._children_yang_names.add("te-data")

                            self.ipv4_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.pw_list_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData()
                            self.pw_list_data.parent = self
                            self._children_name_map["pw_list_data"] = "pw-list-data"
                            self._children_yang_names.add("pw-list-data")

                            self.dmtc_ext_intf_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData()
                            self.dmtc_ext_intf_data.parent = self
                            self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                            self._children_yang_names.add("dmtc-ext-intf-data")
                            self._segment_path = lambda: "fpi"
                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/fpi-key/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi, ['fpi_type'], name, value)


                        class LabelData(Entity):
                            """
                            label data
                            
                            .. attribute:: label
                            
                            	Label value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: elc
                            
                            	ELC
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData, self).__init__()

                                self.yang_name = "label-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('elc', YLeaf(YType.int32, 'elc')),
                                ])
                                self.label = None
                                self.security_id = None
                                self.elc = None
                                self._segment_path = lambda: "label-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/fpi-key/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                        class TeData(Entity):
                            """
                            te data
                            
                            .. attribute:: tunnel_interface
                            
                            	Tunnel interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: local_label
                            
                            	Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData, self).__init__()

                                self.yang_name = "te-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                    ('local_label', YLeaf(YType.uint32, 'local-label')),
                                ])
                                self.tunnel_interface = None
                                self.local_label = None
                                self._segment_path = lambda: "te-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/fpi-key/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                        class Ipv4Data(Entity):
                            """
                            ipv4 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sr_local_label
                            
                            	SR related Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                    ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.version = None
                                self.sr_local_label = None
                                self._segment_path = lambda: "ipv4-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/fpi-key/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                        class Ipv6Data(Entity):
                            """
                            ipv6 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: router_flags
                            
                            	Route flags
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix_len
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                    ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.router_flags = None
                                self.prefix_len = None
                                self.version = None
                                self._segment_path = lambda: "ipv6-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/fpi-key/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                        class PwListData(Entity):
                            """
                            pw list data
                            
                            .. attribute:: pwhe_list_id
                            
                            	Pseudowire List Identifier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData, self).__init__()

                                self.yang_name = "pw-list-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                ])
                                self.pwhe_list_id = None
                                self._segment_path = lambda: "pw-list-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/fpi-key/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.PwListData, ['pwhe_list_id'], name, value)


                        class DmtcExtIntfData(Entity):
                            """
                            dmtc ext intf data
                            
                            .. attribute:: dmtc_ext_ifh
                            
                            	DMTC External Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData, self).__init__()

                                self.yang_name = "dmtc-ext-intf-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                ])
                                self.dmtc_ext_ifh = None
                                self._segment_path = lambda: "dmtc-ext-intf-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/fpi-key/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                    class ApplicationOwner(Entity):
                        """
                        Application owner instance
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.ApplicationOwner, self).__init__()

                            self.yang_name = "application-owner"
                            self.yang_parent_name = "fpi-key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-owner"
                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/fpi-key/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.FpiKey.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                class RewriteId(Entity):
                    """
                    Rewrite ID
                    
                    .. attribute:: rewrite_id
                    
                    	Rewrite ID
                    	**type**\:  :py:class:`RewriteId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId, self).__init__()

                        self.yang_name = "rewrite-id"
                        self.yang_parent_name = "rewrite-ipv4"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("rewrite-id", ("rewrite_id", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.rewrite_id = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_()
                        self.rewrite_id.parent = self
                        self._children_name_map["rewrite_id"] = "rewrite-id"
                        self._children_yang_names.add("rewrite-id")
                        self._segment_path = lambda: "rewrite-id"
                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/%s" % self._segment_path()


                    class RewriteId_(Entity):
                        """
                        Rewrite ID
                        
                        .. attribute:: label_context
                        
                        	Label context
                        	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext>`
                        
                        .. attribute:: local_label_rewrite
                        
                        	Local label rewrite information
                        	**type**\:  :py:class:`LocalLabelRewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite>`
                        
                        .. attribute:: rewrite_id_type
                        
                        	RewriteIDType
                        	**type**\:  :py:class:`MgmtLsdRwId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdRwId>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_, self).__init__()

                            self.yang_name = "rewrite-id"
                            self.yang_parent_name = "rewrite-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext)), ("local-label-rewrite", ("local_label_rewrite", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rewrite_id_type', YLeaf(YType.enumeration, 'rewrite-id-type')),
                            ])
                            self.rewrite_id_type = None

                            self.label_context = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext()
                            self.label_context.parent = self
                            self._children_name_map["label_context"] = "label-context"
                            self._children_yang_names.add("label-context")

                            self.local_label_rewrite = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite()
                            self.local_label_rewrite.parent = self
                            self._children_name_map["local_label_rewrite"] = "local-label-rewrite"
                            self._children_yang_names.add("local-label-rewrite")
                            self._segment_path = lambda: "rewrite-id"
                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_, ['rewrite_id_type'], name, value)


                        class LabelContext(Entity):
                            """
                            Label context
                            
                            .. attribute:: ipv4_data
                            
                            	IPv4 label context
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	IPv6 label context
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data>`
                            
                            .. attribute:: tev4_data
                            
                            	TEv4 label context
                            	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data>`
                            
                            .. attribute:: ipv4l3vpn_data
                            
                            	L3VPN IPv4 label context
                            	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData>`
                            
                            .. attribute:: ipv6l3vpn_data
                            
                            	L3VPN IPv6 label context
                            	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData>`
                            
                            .. attribute:: vrf_l3vpn_data
                            
                            	L3VPN VRF label context
                            	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData>`
                            
                            .. attribute:: cev4l3vpn_data
                            
                            	L3VPN CEv4 label context
                            	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData>`
                            
                            .. attribute:: cev6l3vpn_data
                            
                            	L3VPN CEv6 label context
                            	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData>`
                            
                            .. attribute:: pseudowire_data
                            
                            	Pseudowire label context
                            	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData>`
                            
                            .. attribute:: label_block_data
                            
                            	Label block context
                            	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData>`
                            
                            .. attribute:: ip_sub_data
                            
                            	IP Subscriber context
                            	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData>`
                            
                            .. attribute:: tev4p2mp_data
                            
                            	TEv4 P2MP context
                            	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData>`
                            
                            .. attribute:: mld_pv4_data
                            
                            	MLDPv4 LSM\-ID context
                            	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data>`
                            
                            .. attribute:: pseudowire_head_end_data
                            
                            	Pseudowire Head\-end label context
                            	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData>`
                            
                            .. attribute:: tp_data
                            
                            	TP context
                            	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData>`
                            
                            .. attribute:: generic_routing_encapsulation
                            
                            	Generic routing encapsulation context
                            	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation>`
                            
                            .. attribute:: ipv6_generic_routing_encapsulation
                            
                            	Generic routing encapsulation context
                            	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation>`
                            
                            .. attribute:: evpn_data
                            
                            	EVPN context
                            	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData>`
                            
                            .. attribute:: ipv4blb_data
                            
                            	BFD BLB label context
                            	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData>`
                            
                            .. attribute:: ipv6blb_data
                            
                            	BFD BLB label context
                            	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData>`
                            
                            .. attribute:: pi_mi_pmsi_data
                            
                            	PIM I\-PMSI label conext
                            	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData>`
                            
                            .. attribute:: pi_ms_pmsi_data
                            
                            	PIM S\-PMSI label conext
                            	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData>`
                            
                            .. attribute:: next_hop_set_l3vpn
                            
                            	L3VPN NH SET label context
                            	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn>`
                            
                            .. attribute:: sr_prefix_segment
                            
                            	SR Prefix Segment context
                            	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment>`
                            
                            .. attribute:: sr_adj_segment_ipv4
                            
                            	SR Adj Segment ipv4 context
                            	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4>`
                            
                            .. attribute:: sr_adj_segment_ipv6
                            
                            	SR Adj Segment ipv6 context
                            	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6>`
                            
                            .. attribute:: label_block_srgb_data
                            
                            	Label block SRGB context
                            	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData>`
                            
                            .. attribute:: te_binding
                            
                            	MPLS TE tunnel binding context
                            	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding>`
                            
                            .. attribute:: label_block_srlb_data
                            
                            	Label block SRLB context
                            	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData>`
                            
                            .. attribute:: label_context_type
                            
                            	LabelContextType
                            	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext, self).__init__()

                                self.yang_name = "label-context"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                                ])
                                self.label_context_type = None

                                self.ipv4_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.tev4_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data()
                                self.tev4_data.parent = self
                                self._children_name_map["tev4_data"] = "tev4-data"
                                self._children_yang_names.add("tev4-data")

                                self.ipv4l3vpn_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData()
                                self.ipv4l3vpn_data.parent = self
                                self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                                self._children_yang_names.add("ipv4l3vpn-data")

                                self.ipv6l3vpn_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData()
                                self.ipv6l3vpn_data.parent = self
                                self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                                self._children_yang_names.add("ipv6l3vpn-data")

                                self.vrf_l3vpn_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData()
                                self.vrf_l3vpn_data.parent = self
                                self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                                self._children_yang_names.add("vrf-l3vpn-data")

                                self.cev4l3vpn_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData()
                                self.cev4l3vpn_data.parent = self
                                self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                                self._children_yang_names.add("cev4l3vpn-data")

                                self.cev6l3vpn_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData()
                                self.cev6l3vpn_data.parent = self
                                self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                                self._children_yang_names.add("cev6l3vpn-data")

                                self.pseudowire_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData()
                                self.pseudowire_data.parent = self
                                self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                self._children_yang_names.add("pseudowire-data")

                                self.label_block_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData()
                                self.label_block_data.parent = self
                                self._children_name_map["label_block_data"] = "label-block-data"
                                self._children_yang_names.add("label-block-data")

                                self.ip_sub_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData()
                                self.ip_sub_data.parent = self
                                self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                self._children_yang_names.add("ip-sub-data")

                                self.tev4p2mp_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData()
                                self.tev4p2mp_data.parent = self
                                self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                                self._children_yang_names.add("tev4p2mp-data")

                                self.mld_pv4_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data()
                                self.mld_pv4_data.parent = self
                                self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                                self._children_yang_names.add("mld-pv4-data")

                                self.pseudowire_head_end_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData()
                                self.pseudowire_head_end_data.parent = self
                                self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                self._children_yang_names.add("pseudowire-head-end-data")

                                self.tp_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData()
                                self.tp_data.parent = self
                                self._children_name_map["tp_data"] = "tp-data"
                                self._children_yang_names.add("tp-data")

                                self.generic_routing_encapsulation = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation()
                                self.generic_routing_encapsulation.parent = self
                                self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                                self._children_yang_names.add("generic-routing-encapsulation")

                                self.ipv6_generic_routing_encapsulation = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation()
                                self.ipv6_generic_routing_encapsulation.parent = self
                                self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                                self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                                self.evpn_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData()
                                self.evpn_data.parent = self
                                self._children_name_map["evpn_data"] = "evpn-data"
                                self._children_yang_names.add("evpn-data")

                                self.ipv4blb_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData()
                                self.ipv4blb_data.parent = self
                                self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                                self._children_yang_names.add("ipv4blb-data")

                                self.ipv6blb_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData()
                                self.ipv6blb_data.parent = self
                                self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                                self._children_yang_names.add("ipv6blb-data")

                                self.pi_mi_pmsi_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData()
                                self.pi_mi_pmsi_data.parent = self
                                self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                                self._children_yang_names.add("pi-mi-pmsi-data")

                                self.pi_ms_pmsi_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData()
                                self.pi_ms_pmsi_data.parent = self
                                self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                                self._children_yang_names.add("pi-ms-pmsi-data")

                                self.next_hop_set_l3vpn = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn()
                                self.next_hop_set_l3vpn.parent = self
                                self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                                self._children_yang_names.add("next-hop-set-l3vpn")

                                self.sr_prefix_segment = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment()
                                self.sr_prefix_segment.parent = self
                                self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                                self._children_yang_names.add("sr-prefix-segment")

                                self.sr_adj_segment_ipv4 = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4()
                                self.sr_adj_segment_ipv4.parent = self
                                self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                                self._children_yang_names.add("sr-adj-segment-ipv4")

                                self.sr_adj_segment_ipv6 = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6()
                                self.sr_adj_segment_ipv6.parent = self
                                self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                                self._children_yang_names.add("sr-adj-segment-ipv6")

                                self.label_block_srgb_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData()
                                self.label_block_srgb_data.parent = self
                                self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                                self._children_yang_names.add("label-block-srgb-data")

                                self.te_binding = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding()
                                self.te_binding.parent = self
                                self._children_name_map["te_binding"] = "te-binding"
                                self._children_yang_names.add("te-binding")

                                self.label_block_srlb_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData()
                                self.label_block_srlb_data.parent = self
                                self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                                self._children_yang_names.add("label-block-srlb-data")
                                self._segment_path = lambda: "label-context"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext, ['label_context_type'], name, value)


                            class Ipv4Data(Entity):
                                """
                                IPv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	IPv4 prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: vrf_name
                                
                                	VRF Name
                                	**type**\: str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.security_id = None
                                    self.vrf_name = None
                                    self._segment_path = lambda: "ipv4-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                            class Ipv6Data(Entity):
                                """
                                IPv6 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: vrf_name
                                
                                	VRF Name
                                	**type**\: str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.security_id = None
                                    self.vrf_name = None
                                    self._segment_path = lambda: "ipv6-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                            class Tev4Data(Entity):
                                """
                                TEv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_source
                                
                                	Tunnel source
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: tunnel_dest
                                
                                	Tunnel destination
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id_extension
                                
                                	Extended tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_lsp_id
                                
                                	Tunnel LSP ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: is_srte
                                
                                	Is this an SRTE head tunnel
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data, self).__init__()

                                    self.yang_name = "tev4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                        ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                        ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                        ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                        ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                        ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                    ])
                                    self.table_id = None
                                    self.tunnel_source = None
                                    self.tunnel_dest = None
                                    self.tunnel_id = None
                                    self.tunnel_id_extension = None
                                    self.tunnel_lsp_id = None
                                    self.is_srte = None
                                    self._segment_path = lambda: "tev4-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                            class Ipv4L3VpnData(Entity):
                                """
                                L3VPN IPv4 label context
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: route_distinguisher
                                
                                	Route distinguisher
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, self).__init__()

                                    self.yang_name = "ipv4l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.route_distinguisher = None
                                    self._segment_path = lambda: "ipv4l3vpn-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                            class Ipv6L3VpnData(Entity):
                                """
                                L3VPN IPv6 label context
                                
                                .. attribute:: prefix
                                
                                	IPv6 prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: route_distinguisher
                                
                                	Route distinguisher
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, self).__init__()

                                    self.yang_name = "ipv6l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.route_distinguisher = None
                                    self._segment_path = lambda: "ipv6l3vpn-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                            class VrfL3VpnData(Entity):
                                """
                                L3VPN VRF label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, self).__init__()

                                    self.yang_name = "vrf-l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.security_id = None
                                    self._segment_path = lambda: "vrf-l3vpn-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                            class Cev4L3VpnData(Entity):
                                """
                                L3VPN CEv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, self).__init__()

                                    self.yang_name = "cev4l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.ipv4_next_hop = None
                                    self.security_id = None
                                    self._segment_path = lambda: "cev4l3vpn-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                            class Cev6L3VpnData(Entity):
                                """
                                L3VPN CEv6 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_next_hop
                                
                                	IPv6 nexthop
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, self).__init__()

                                    self.yang_name = "cev6l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.ipv6_next_hop = None
                                    self.security_id = None
                                    self._segment_path = lambda: "cev6l3vpn-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                            class PseudowireData(Entity):
                                """
                                Pseudowire label context
                                
                                .. attribute:: prefix
                                
                                	Address prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: pseudowire_id
                                
                                	Pseudo\-wire ID
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: remote_l2_router_id
                                
                                	Remote L2 Router ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: subinterface
                                
                                	Subinterface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData, self).__init__()

                                    self.yang_name = "pseudowire-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                        ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                        ('subinterface', YLeaf(YType.str, 'subinterface')),
                                    ])
                                    self.prefix = None
                                    self.pseudowire_id = None
                                    self.remote_l2_router_id = None
                                    self.subinterface = None
                                    self._segment_path = lambda: "pseudowire-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                            class LabelBlockData(Entity):
                                """
                                Label block context
                                
                                .. attribute:: service
                                
                                	Service
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: vpn_id
                                
                                	VPN ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: edge_id
                                
                                	Edge ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData, self).__init__()

                                    self.yang_name = "label-block-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('service', YLeaf(YType.uint8, 'service')),
                                        ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                        ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.service = None
                                    self.vpn_id = None
                                    self.edge_id = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                            class IpSubData(Entity):
                                """
                                IP Subscriber context
                                
                                .. attribute:: table_id
                                
                                	Table Id
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: parent_interface
                                
                                	Parent interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData, self).__init__()

                                    self.yang_name = "ip-sub-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                    ])
                                    self.table_id = None
                                    self.parent_interface = None
                                    self._segment_path = lambda: "ip-sub-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.IpSubData, ['table_id', 'parent_interface'], name, value)


                            class Tev4P2MpData(Entity):
                                """
                                TEv4 P2MP context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_source
                                
                                	Tunnel source
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: p2mp_id
                                
                                	Point to multipoint ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id_extension
                                
                                	Tunnel ID extension
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_lsp_id
                                
                                	Tunnel LSP ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: previous_hop
                                
                                	Previous hop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, self).__init__()

                                    self.yang_name = "tev4p2mp-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                        ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                        ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                        ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                        ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                        ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                    ])
                                    self.table_id = None
                                    self.tunnel_source = None
                                    self.p2mp_id = None
                                    self.tunnel_id = None
                                    self.tunnel_id_extension = None
                                    self.tunnel_lsp_id = None
                                    self.previous_hop = None
                                    self._segment_path = lambda: "tev4p2mp-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                            class MldPv4Data(Entity):
                                """
                                MLDPv4 LSM\-ID context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	LSM ID Type
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsm_id
                                
                                	LSM ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: peer_lsrid
                                
                                	Peer LSR Id
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: peer_label_space_id
                                
                                	Peer Label Space Id
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data, self).__init__()

                                    self.yang_name = "mld-pv4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('type', YLeaf(YType.uint16, 'type')),
                                        ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                        ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                        ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                    ])
                                    self.table_id = None
                                    self.type = None
                                    self.lsm_id = None
                                    self.peer_lsrid = None
                                    self.peer_label_space_id = None
                                    self._segment_path = lambda: "mld-pv4-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                            class PseudowireHeadEndData(Entity):
                                """
                                Pseudowire Head\-end label context
                                
                                .. attribute:: pwhe_intf
                                
                                	Pseudo\-wire Head\-end interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, self).__init__()

                                    self.yang_name = "pseudowire-head-end-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                    ])
                                    self.pwhe_intf = None
                                    self._segment_path = lambda: "pseudowire-head-end-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                            class TpData(Entity):
                                """
                                TP context
                                
                                .. attribute:: source_global_id
                                
                                	TP source global ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: source_node_id
                                
                                	TP source node ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: dest_global_id
                                
                                	TP destination global ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dest_node_id
                                
                                	TP destination node ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: source_tunnel_id
                                
                                	TP source tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: dest_tunnel_id
                                
                                	TP destination tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_id
                                
                                	TP LSP ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData, self).__init__()

                                    self.yang_name = "tp-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                        ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                        ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                        ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                        ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                        ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                        ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                    ])
                                    self.source_global_id = None
                                    self.source_node_id = None
                                    self.dest_global_id = None
                                    self.dest_node_id = None
                                    self.source_tunnel_id = None
                                    self.dest_tunnel_id = None
                                    self.lsp_id = None
                                    self._segment_path = lambda: "tp-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                            class GenericRoutingEncapsulation(Entity):
                                """
                                Generic routing encapsulation context
                                
                                .. attribute:: gre_interface
                                
                                	Generic routing encapsulation interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, self).__init__()

                                    self.yang_name = "generic-routing-encapsulation"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                    ])
                                    self.gre_interface = None
                                    self._segment_path = lambda: "generic-routing-encapsulation"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                            class Ipv6GenericRoutingEncapsulation(Entity):
                                """
                                Generic routing encapsulation context
                                
                                .. attribute:: greipv6_interface
                                
                                	Generic routing encapsulation IPv6 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, self).__init__()

                                    self.yang_name = "ipv6-generic-routing-encapsulation"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                    ])
                                    self.greipv6_interface = None
                                    self._segment_path = lambda: "ipv6-generic-routing-encapsulation"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                            class EvpnData(Entity):
                                """
                                EVPN context
                                
                                .. attribute:: evpn_id
                                
                                	EVPN ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: evpn_tag
                                
                                	EVPN TAG
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ethernet_segment
                                
                                	Ethernet Segment ID
                                	**type**\: str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData, self).__init__()

                                    self.yang_name = "evpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                        ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                        ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                    ])
                                    self.evpn_id = None
                                    self.evpn_tag = None
                                    self.ethernet_segment = None
                                    self._segment_path = lambda: "evpn-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                            class Ipv4BlbData(Entity):
                                """
                                BFD BLB label context
                                
                                .. attribute:: blb_intf
                                
                                	BFD BLB interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, self).__init__()

                                    self.yang_name = "ipv4blb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                    ])
                                    self.blb_intf = None
                                    self.prefix = None
                                    self._segment_path = lambda: "ipv4blb-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                            class Ipv6BlbData(Entity):
                                """
                                BFD BLB label context
                                
                                .. attribute:: blb_intf
                                
                                	BFD BLB interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix
                                
                                	IPv6 prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, self).__init__()

                                    self.yang_name = "ipv6blb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                    ])
                                    self.blb_intf = None
                                    self.prefix = None
                                    self._segment_path = lambda: "ipv6blb-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                            class PiMiPmsiData(Entity):
                                """
                                PIM I\-PMSI label conext
                                
                                .. attribute:: vrf_id
                                
                                	VRF ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: head
                                
                                	Head
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: v6
                                
                                	PIM6
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, self).__init__()

                                    self.yang_name = "pi-mi-pmsi-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                        ('head', YLeaf(YType.int32, 'head')),
                                        ('v6', YLeaf(YType.int32, 'v6')),
                                    ])
                                    self.vrf_id = None
                                    self.head = None
                                    self.v6 = None
                                    self._segment_path = lambda: "pi-mi-pmsi-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                            class PiMsPmsiData(Entity):
                                """
                                PIM S\-PMSI label conext
                                
                                .. attribute:: vrf_id
                                
                                	VRF ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: source
                                
                                	Originating Router
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: head
                                
                                	Head
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: v6
                                
                                	PIM6
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: hli
                                
                                	Head LSM\-ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: seg
                                
                                	Segmented Multicast
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, self).__init__()

                                    self.yang_name = "pi-ms-pmsi-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                        ('source', YLeaf(YType.str, 'source')),
                                        ('head', YLeaf(YType.int32, 'head')),
                                        ('v6', YLeaf(YType.int32, 'v6')),
                                        ('hli', YLeaf(YType.uint32, 'hli')),
                                        ('seg', YLeaf(YType.int32, 'seg')),
                                    ])
                                    self.vrf_id = None
                                    self.source = None
                                    self.head = None
                                    self.v6 = None
                                    self.hli = None
                                    self.seg = None
                                    self._segment_path = lambda: "pi-ms-pmsi-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                            class NextHopSetL3Vpn(Entity):
                                """
                                L3VPN NH SET label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: next_hop_set_id
                                
                                	Next Hop Set ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, self).__init__()

                                    self.yang_name = "next-hop-set-l3vpn"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                    ])
                                    self.table_id = None
                                    self.next_hop_set_id = None
                                    self._segment_path = lambda: "next-hop-set-l3vpn"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                            class SrPrefixSegment(Entity):
                                """
                                SR Prefix Segment context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: segment_id
                                
                                	Prefix Segment ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, self).__init__()

                                    self.yang_name = "sr-prefix-segment"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                    ])
                                    self.table_id = None
                                    self.segment_id = None
                                    self._segment_path = lambda: "sr-prefix-segment"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                            class SrAdjSegmentIpv4(Entity):
                                """
                                SR Adj Segment ipv4 context
                                
                                .. attribute:: index
                                
                                	Adjacency index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Adjacency type
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: intf
                                
                                	Adjacency interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: addr
                                
                                	Adjacency nexthop IPv4 address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, self).__init__()

                                    self.yang_name = "sr-adj-segment-ipv4"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('index', YLeaf(YType.uint32, 'index')),
                                        ('type', YLeaf(YType.uint32, 'type')),
                                        ('intf', YLeaf(YType.str, 'intf')),
                                        ('addr', YLeaf(YType.str, 'addr')),
                                    ])
                                    self.index = None
                                    self.type = None
                                    self.intf = None
                                    self.addr = None
                                    self._segment_path = lambda: "sr-adj-segment-ipv4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                            class SrAdjSegmentIpv6(Entity):
                                """
                                SR Adj Segment ipv6 context
                                
                                .. attribute:: index
                                
                                	Adjacency index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Adjacency type
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: intf
                                
                                	Adjacency interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: addr
                                
                                	Adjacency nexthop IPv6 address
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, self).__init__()

                                    self.yang_name = "sr-adj-segment-ipv6"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('index', YLeaf(YType.uint32, 'index')),
                                        ('type', YLeaf(YType.uint32, 'type')),
                                        ('intf', YLeaf(YType.str, 'intf')),
                                        ('addr', YLeaf(YType.str, 'addr')),
                                    ])
                                    self.index = None
                                    self.type = None
                                    self.intf = None
                                    self.addr = None
                                    self._segment_path = lambda: "sr-adj-segment-ipv6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                            class LabelBlockSrgbData(Entity):
                                """
                                Label block SRGB context
                                
                                .. attribute:: start_label
                                
                                	Start Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, self).__init__()

                                    self.yang_name = "label-block-srgb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('start_label', YLeaf(YType.uint32, 'start-label')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.start_label = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-srgb-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                            class TeBinding(Entity):
                                """
                                MPLS TE tunnel binding context
                                
                                .. attribute:: te_identifier
                                
                                	MPLS Traffic Engineering Tunnel or Group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: te_type
                                
                                	Type of identifier for the binding
                                	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding, self).__init__()

                                    self.yang_name = "te-binding"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                        ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                    ])
                                    self.te_identifier = None
                                    self.te_type = None
                                    self._segment_path = lambda: "te-binding"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.TeBinding, ['te_identifier', 'te_type'], name, value)


                            class LabelBlockSrlbData(Entity):
                                """
                                Label block SRLB context
                                
                                .. attribute:: start_label
                                
                                	Start Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, self).__init__()

                                    self.yang_name = "label-block-srlb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('start_label', YLeaf(YType.uint32, 'start-label')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.start_label = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-srlb-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/label-context/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                        class LocalLabelRewrite(Entity):
                            """
                            Local label rewrite information
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\: list of  		 :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite.LabelData>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite, self).__init__()

                                self.yang_name = "local-label-rewrite"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite.LabelData))])
                                self._leafs = OrderedDict()

                                self.label_data = YList(self)
                                self._segment_path = lambda: "local-label-rewrite"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite, [], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "local-label-rewrite"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "label-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/rewrite-id/rewrite-id/local-label-rewrite/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, ['entry'], name, value)


                class AssociatedFpi(Entity):
                    """
                    Associated FPI
                    
                    .. attribute:: fpi
                    
                    	FPI
                    	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi>`
                    
                    .. attribute:: application_owner
                    
                    	Application owner instance
                    	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.ApplicationOwner>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi, self).__init__()

                        self.yang_name = "associated-fpi"
                        self.yang_parent_name = "rewrite-ipv4"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi))])
                        self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.ApplicationOwner))])
                        self._leafs = OrderedDict()

                        self.fpi = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi()
                        self.fpi.parent = self
                        self._children_name_map["fpi"] = "fpi"
                        self._children_yang_names.add("fpi")

                        self.application_owner = YList(self)
                        self._segment_path = lambda: "associated-fpi"
                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi, [], name, value)


                    class Fpi(Entity):
                        """
                        FPI
                        
                        .. attribute:: label_data
                        
                        	label data
                        	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData>`
                        
                        .. attribute:: te_data
                        
                        	te data
                        	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData>`
                        
                        .. attribute:: ipv4_data
                        
                        	ipv4 data
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	ipv6 data
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data>`
                        
                        .. attribute:: pw_list_data
                        
                        	pw list data
                        	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData>`
                        
                        .. attribute:: dmtc_ext_intf_data
                        
                        	dmtc ext intf data
                        	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData>`
                        
                        .. attribute:: fpi_type
                        
                        	FPIType
                        	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi, self).__init__()

                            self.yang_name = "fpi"
                            self.yang_parent_name = "associated-fpi"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData)), ("te-data", ("te_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                            ])
                            self.fpi_type = None

                            self.label_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData()
                            self.label_data.parent = self
                            self._children_name_map["label_data"] = "label-data"
                            self._children_yang_names.add("label-data")

                            self.te_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData()
                            self.te_data.parent = self
                            self._children_name_map["te_data"] = "te-data"
                            self._children_yang_names.add("te-data")

                            self.ipv4_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.pw_list_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData()
                            self.pw_list_data.parent = self
                            self._children_name_map["pw_list_data"] = "pw-list-data"
                            self._children_yang_names.add("pw-list-data")

                            self.dmtc_ext_intf_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData()
                            self.dmtc_ext_intf_data.parent = self
                            self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                            self._children_yang_names.add("dmtc-ext-intf-data")
                            self._segment_path = lambda: "fpi"
                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/associated-fpi/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi, ['fpi_type'], name, value)


                        class LabelData(Entity):
                            """
                            label data
                            
                            .. attribute:: label
                            
                            	Label value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: elc
                            
                            	ELC
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData, self).__init__()

                                self.yang_name = "label-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('elc', YLeaf(YType.int32, 'elc')),
                                ])
                                self.label = None
                                self.security_id = None
                                self.elc = None
                                self._segment_path = lambda: "label-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/associated-fpi/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                        class TeData(Entity):
                            """
                            te data
                            
                            .. attribute:: tunnel_interface
                            
                            	Tunnel interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: local_label
                            
                            	Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData, self).__init__()

                                self.yang_name = "te-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                    ('local_label', YLeaf(YType.uint32, 'local-label')),
                                ])
                                self.tunnel_interface = None
                                self.local_label = None
                                self._segment_path = lambda: "te-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/associated-fpi/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                        class Ipv4Data(Entity):
                            """
                            ipv4 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sr_local_label
                            
                            	SR related Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                    ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.version = None
                                self.sr_local_label = None
                                self._segment_path = lambda: "ipv4-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/associated-fpi/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                        class Ipv6Data(Entity):
                            """
                            ipv6 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: router_flags
                            
                            	Route flags
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix_len
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                    ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.router_flags = None
                                self.prefix_len = None
                                self.version = None
                                self._segment_path = lambda: "ipv6-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/associated-fpi/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                        class PwListData(Entity):
                            """
                            pw list data
                            
                            .. attribute:: pwhe_list_id
                            
                            	Pseudowire List Identifier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData, self).__init__()

                                self.yang_name = "pw-list-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                ])
                                self.pwhe_list_id = None
                                self._segment_path = lambda: "pw-list-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/associated-fpi/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.PwListData, ['pwhe_list_id'], name, value)


                        class DmtcExtIntfData(Entity):
                            """
                            dmtc ext intf data
                            
                            .. attribute:: dmtc_ext_ifh
                            
                            	DMTC External Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData, self).__init__()

                                self.yang_name = "dmtc-ext-intf-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                ])
                                self.dmtc_ext_ifh = None
                                self._segment_path = lambda: "dmtc-ext-intf-data"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/associated-fpi/fpi/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                    class ApplicationOwner(Entity):
                        """
                        Application owner instance
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.ApplicationOwner, self).__init__()

                            self.yang_name = "application-owner"
                            self.yang_parent_name = "associated-fpi"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-owner"
                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/associated-fpi/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.AssociatedFpi.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                class V4Rpf(Entity):
                    """
                    IPv4 RPF neighbors
                    
                    .. attribute:: table_id
                    
                    	Table ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: v4_rpf_neighbor
                    
                    	V4 RPF Neighbor
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.V4Rpf, self).__init__()

                        self.yang_name = "v4-rpf"
                        self.yang_parent_name = "rewrite-ipv4"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                            ('v4_rpf_neighbor', YLeaf(YType.str, 'v4-rpf-neighbor')),
                        ])
                        self.table_id = None
                        self.v4_rpf_neighbor = None
                        self._segment_path = lambda: "v4-rpf"
                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.V4Rpf, ['table_id', 'v4_rpf_neighbor'], name, value)


                class V6Rpf(Entity):
                    """
                    IPv6 RPF neighbors
                    
                    .. attribute:: table_id
                    
                    	Table ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: v6_rpf_neighbor
                    
                    	V6 RPF Neighbor
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.V6Rpf, self).__init__()

                        self.yang_name = "v6-rpf"
                        self.yang_parent_name = "rewrite-ipv4"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                            ('v6_rpf_neighbor', YLeaf(YType.str, 'v6-rpf-neighbor')),
                        ])
                        self.table_id = None
                        self.v6_rpf_neighbor = None
                        self._segment_path = lambda: "v6-rpf"
                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.V6Rpf, ['table_id', 'v6_rpf_neighbor'], name, value)


                class Mois(Entity):
                    """
                    Mois
                    
                    .. attribute:: application_resource
                    
                    	Application state
                    	**type**\:  :py:class:`ApplicationResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource>`
                    
                    .. attribute:: moi_array
                    
                    	moi array
                    	**type**\: list of  		 :py:class:`MoiArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois, self).__init__()

                        self.yang_name = "mois"
                        self.yang_parent_name = "rewrite-ipv4"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("application-resource", ("application_resource", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource))])
                        self._child_list_classes = OrderedDict([("moi-array", ("moi_array", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray))])
                        self._leafs = OrderedDict()

                        self.application_resource = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource()
                        self.application_resource.parent = self
                        self._children_name_map["application_resource"] = "application-resource"
                        self._children_yang_names.add("application-resource")

                        self.moi_array = YList(self)
                        self._segment_path = lambda: "mois"
                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois, [], name, value)


                    class ApplicationResource(Entity):
                        """
                        Application state
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource, self).__init__()

                            self.yang_name = "application-resource"
                            self.yang_parent_name = "mois"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-resource"
                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.ApplicationResource, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class MoiArray(Entity):
                        """
                        moi array
                        
                        .. attribute:: moi
                        
                        	Moi
                        	**type**\:  :py:class:`Moi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray, self).__init__()

                            self.yang_name = "moi-array"
                            self.yang_parent_name = "mois"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("moi", ("moi", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.moi = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi()
                            self.moi.parent = self
                            self._children_name_map["moi"] = "moi"
                            self._children_yang_names.add("moi")
                            self._segment_path = lambda: "moi-array"
                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/%s" % self._segment_path()


                        class Moi(Entity):
                            """
                            Moi
                            
                            .. attribute:: pop_and_lookup_ipv4
                            
                            	pop and lookup ipv4
                            	**type**\:  :py:class:`PopAndLookupIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4>`
                            
                            .. attribute:: pop_and_lookup_tp
                            
                            	pop and lookup tp
                            	**type**\:  :py:class:`PopAndLookupTp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp>`
                            
                            .. attribute:: pop_and_lookup_ipv6
                            
                            	pop and lookup ipv6
                            	**type**\:  :py:class:`PopAndLookupIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data>`
                            
                            .. attribute:: tev4_data
                            
                            	tev4 data
                            	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data>`
                            
                            .. attribute:: pseudowire_data
                            
                            	pseudowire data
                            	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData>`
                            
                            .. attribute:: ip_sub_data
                            
                            	ip sub data
                            	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData>`
                            
                            .. attribute:: pseudowire_head_end_data
                            
                            	pseudowire head end data
                            	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData>`
                            
                            .. attribute:: stackv4_data
                            
                            	stackv4 data
                            	**type**\:  :py:class:`Stackv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data>`
                            
                            .. attribute:: stackv6_data
                            
                            	stackv6 data
                            	**type**\:  :py:class:`Stackv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data>`
                            
                            .. attribute:: te_head_data
                            
                            	te head data
                            	**type**\:  :py:class:`TeHeadData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData>`
                            
                            .. attribute:: dmtc_data
                            
                            	dmtc data
                            	**type**\:  :py:class:`DmtcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData>`
                            
                            .. attribute:: moi_type
                            
                            	MoiType
                            	**type**\:  :py:class:`MgmtLsdMoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdMoi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi, self).__init__()

                                self.yang_name = "moi"
                                self.yang_parent_name = "moi-array"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("pop-and-lookup-ipv4", ("pop_and_lookup_ipv4", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4)), ("pop-and-lookup-tp", ("pop_and_lookup_tp", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp)), ("pop-and-lookup-ipv6", ("pop_and_lookup_ipv6", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData)), ("stackv4-data", ("stackv4_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data)), ("stackv6-data", ("stackv6_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data)), ("te-head-data", ("te_head_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData)), ("dmtc-data", ("dmtc_data", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('moi_type', YLeaf(YType.enumeration, 'moi-type')),
                                ])
                                self.moi_type = None

                                self.pop_and_lookup_ipv4 = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4()
                                self.pop_and_lookup_ipv4.parent = self
                                self._children_name_map["pop_and_lookup_ipv4"] = "pop-and-lookup-ipv4"
                                self._children_yang_names.add("pop-and-lookup-ipv4")

                                self.pop_and_lookup_tp = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp()
                                self.pop_and_lookup_tp.parent = self
                                self._children_name_map["pop_and_lookup_tp"] = "pop-and-lookup-tp"
                                self._children_yang_names.add("pop-and-lookup-tp")

                                self.pop_and_lookup_ipv6 = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6()
                                self.pop_and_lookup_ipv6.parent = self
                                self._children_name_map["pop_and_lookup_ipv6"] = "pop-and-lookup-ipv6"
                                self._children_yang_names.add("pop-and-lookup-ipv6")

                                self.ipv4_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.tev4_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data()
                                self.tev4_data.parent = self
                                self._children_name_map["tev4_data"] = "tev4-data"
                                self._children_yang_names.add("tev4-data")

                                self.pseudowire_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData()
                                self.pseudowire_data.parent = self
                                self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                self._children_yang_names.add("pseudowire-data")

                                self.ip_sub_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData()
                                self.ip_sub_data.parent = self
                                self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                self._children_yang_names.add("ip-sub-data")

                                self.pseudowire_head_end_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData()
                                self.pseudowire_head_end_data.parent = self
                                self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                self._children_yang_names.add("pseudowire-head-end-data")

                                self.pw_list_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.stackv4_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data()
                                self.stackv4_data.parent = self
                                self._children_name_map["stackv4_data"] = "stackv4-data"
                                self._children_yang_names.add("stackv4-data")

                                self.stackv6_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data()
                                self.stackv6_data.parent = self
                                self._children_name_map["stackv6_data"] = "stackv6-data"
                                self._children_yang_names.add("stackv6-data")

                                self.te_head_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData()
                                self.te_head_data.parent = self
                                self._children_name_map["te_head_data"] = "te-head-data"
                                self._children_yang_names.add("te-head-data")

                                self.dmtc_data = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData()
                                self.dmtc_data.parent = self
                                self._children_name_map["dmtc_data"] = "dmtc-data"
                                self._children_yang_names.add("dmtc-data")
                                self._segment_path = lambda: "moi"
                                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi, ['moi_type'], name, value)


                            class PopAndLookupIpv4(Entity):
                                """
                                pop and lookup ipv4
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4, self).__init__()

                                    self.yang_name = "pop-and-lookup-ipv4"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pop-and-lookup-ipv4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv4, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                            class PopAndLookupTp(Entity):
                                """
                                pop and lookup tp
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp, self).__init__()

                                    self.yang_name = "pop-and-lookup-tp"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_label = None
                                    self._segment_path = lambda: "pop-and-lookup-tp"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupTp, ['table_id', 'table_name', 'path_flags_decode', 'out_label'], name, value)


                            class PopAndLookupIpv6(Entity):
                                """
                                pop and lookup ipv6
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6, self).__init__()

                                    self.yang_name = "pop-and-lookup-ipv6"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pop-and-lookup-ipv6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PopAndLookupIpv6, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_interface_parent
                                
                                	Outgoing Interface's parent
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	Routing path id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: backup_path_id
                                
                                	Routing path backup id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: load_metric
                                
                                	Routing path's load metric
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_hop_id
                                
                                	Next hop ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: local_label
                                
                                	TE backup path local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('path_id', YLeaf(YType.uint8, 'path-id')),
                                        ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                        ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                        ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_interface_parent = None
                                    self.ipv4_next_hop = None
                                    self.path_id = None
                                    self.backup_path_id = None
                                    self.load_metric = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.tunnel_id = None
                                    self.next_hop_id = None
                                    self.local_label = None
                                    self._segment_path = lambda: "ipv4-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: ipv6_next_hop
                                
                                	IPv6 nexthop
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	Routing path id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: backup_path_id
                                
                                	Routing path backup id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_hop_id
                                
                                	Next hop ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_interface_parent
                                
                                	Outgoing Interface's parent
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                        ('path_id', YLeaf(YType.uint8, 'path-id')),
                                        ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                        ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                        ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.ipv6_next_hop = None
                                    self.path_id = None
                                    self.backup_path_id = None
                                    self.next_hop_id = None
                                    self.out_interface_parent = None
                                    self._segment_path = lambda: "ipv6-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Ipv6Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                            class Tev4Data(Entity):
                                """
                                tev4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: backup_interface
                                
                                	Backup interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: backup_ipv4_next_hop
                                
                                	Backup IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: merge_point_label
                                
                                	Merge point label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: backup_local_label
                                
                                	Backup local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: tunnel_weight
                                
                                	Tunnel weight
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: data_out_parent_interface
                                
                                	Outgoing data parent interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: tunnel_class
                                
                                	Tunnel class
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data, self).__init__()

                                    self.yang_name = "tev4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ('backup_ipv4_next_hop', YLeaf(YType.str, 'backup-ipv4-next-hop')),
                                        ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                                        ('backup_local_label', YLeaf(YType.uint32, 'backup-local-label')),
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('tunnel_weight', YLeaf(YType.uint32, 'tunnel-weight')),
                                        ('data_out_parent_interface', YLeaf(YType.str, 'data-out-parent-interface')),
                                        ('tunnel_class', YLeaf(YType.uint32, 'tunnel-class')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.ipv4_next_hop = None
                                    self.backup_interface = None
                                    self.backup_ipv4_next_hop = None
                                    self.merge_point_label = None
                                    self.backup_local_label = None
                                    self.tunnel_interface = None
                                    self.tunnel_weight = None
                                    self.data_out_parent_interface = None
                                    self.tunnel_class = None
                                    self._segment_path = lambda: "tev4-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Tev4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv4_next_hop', 'backup_interface', 'backup_ipv4_next_hop', 'merge_point_label', 'backup_local_label', 'tunnel_interface', 'tunnel_weight', 'data_out_parent_interface', 'tunnel_class'], name, value)


                            class PseudowireData(Entity):
                                """
                                pseudowire data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: cross_connect_id
                                
                                	Cross\-connect ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pseuodo_wire_connect_id
                                
                                	PseudoWire Cross\-connect ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: bridge_id
                                
                                	Bridge ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: split_horizon_id
                                
                                	Split horizon group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData, self).__init__()

                                    self.yang_name = "pseudowire-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('cross_connect_id', YLeaf(YType.uint32, 'cross-connect-id')),
                                        ('pseuodo_wire_connect_id', YLeaf(YType.uint32, 'pseuodo-wire-connect-id')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('bridge_id', YLeaf(YType.uint32, 'bridge-id')),
                                        ('split_horizon_id', YLeaf(YType.uint32, 'split-horizon-id')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.cross_connect_id = None
                                    self.pseuodo_wire_connect_id = None
                                    self.ipv4_next_hop = None
                                    self.bridge_id = None
                                    self.split_horizon_id = None
                                    self._segment_path = lambda: "pseudowire-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'cross_connect_id', 'pseuodo_wire_connect_id', 'ipv4_next_hop', 'bridge_id', 'split_horizon_id'], name, value)


                            class IpSubData(Entity):
                                """
                                ip sub data
                                
                                .. attribute:: table_id
                                
                                	VRF table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData, self).__init__()

                                    self.yang_name = "ip-sub-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.out_interface = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "ip-sub-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.IpSubData, ['table_id', 'table_name', 'out_interface', 'path_flags_decode'], name, value)


                            class PseudowireHeadEndData(Entity):
                                """
                                pseudowire head end data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: control_word
                                
                                	Is control word present
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: imposition
                                
                                	Is PWHE IMposition
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: vctype
                                
                                	Virtual Circuit Type
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: pw_list_id
                                
                                	Pseudo\-wire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: pwhe_interface
                                
                                	Pseudo\-wire Head\-end interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData, self).__init__()

                                    self.yang_name = "pseudowire-head-end-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('control_word', YLeaf(YType.int32, 'control-word')),
                                        ('imposition', YLeaf(YType.int32, 'imposition')),
                                        ('vctype', YLeaf(YType.uint8, 'vctype')),
                                        ('pw_list_id', YLeaf(YType.uint16, 'pw-list-id')),
                                        ('pwhe_interface', YLeaf(YType.str, 'pwhe-interface')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.ipv4_next_hop = None
                                    self.control_word = None
                                    self.imposition = None
                                    self.vctype = None
                                    self.pw_list_id = None
                                    self.pwhe_interface = None
                                    self._segment_path = lambda: "pseudowire-head-end-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PseudowireHeadEndData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'ipv4_next_hop', 'control_word', 'imposition', 'vctype', 'pw_list_id', 'pwhe_interface'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: l3_interface
                                
                                	Pseudo\-wire Layer 3 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: l2_interface
                                
                                	Pseudo\-wire Layer 2 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('l3_interface', YLeaf(YType.str, 'l3-interface')),
                                        ('l2_interface', YLeaf(YType.str, 'l2-interface')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.l3_interface = None
                                    self.l2_interface = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pw-list-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.PwListData, ['table_id', 'table_name', 'l3_interface', 'l2_interface', 'path_flags_decode'], name, value)


                            class Stackv4Data(Entity):
                                """
                                stackv4 data
                                
                                .. attribute:: nexthop
                                
                                	Nexthop
                                	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop>`
                                
                                .. attribute:: inner_stack
                                
                                	Inner stack
                                	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack>`
                                
                                .. attribute:: owner_application_type
                                
                                	Owner application type
                                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data, self).__init__()

                                    self.yang_name = "stackv4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('owner_application_type', YLeaf(YType.enumeration, 'owner-application-type')),
                                    ])
                                    self.owner_application_type = None

                                    self.nexthop = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop()
                                    self.nexthop.parent = self
                                    self._children_name_map["nexthop"] = "nexthop"
                                    self._children_yang_names.add("nexthop")

                                    self.inner_stack = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack()
                                    self.inner_stack.parent = self
                                    self._children_name_map["inner_stack"] = "inner-stack"
                                    self._children_yang_names.add("inner-stack")
                                    self._segment_path = lambda: "stackv4-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data, ['owner_application_type'], name, value)


                                class Nexthop(Entity):
                                    """
                                    Nexthop
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: load_metric
                                    
                                    	Routing path's load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_label
                                    
                                    	TE backup path local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop, self).__init__()

                                        self.yang_name = "nexthop"
                                        self.yang_parent_name = "stackv4-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('local_label', YLeaf(YType.uint32, 'local-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_interface_parent = None
                                        self.ipv4_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.load_metric = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.tunnel_id = None
                                        self.next_hop_id = None
                                        self.local_label = None
                                        self._segment_path = lambda: "nexthop"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/stackv4-data/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                class InnerStack(Entity):
                                    """
                                    Inner stack
                                    
                                    .. attribute:: num_nexthops
                                    
                                    	Number of remote nexthop addresses
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: num_lbls
                                    
                                    	Depth of inner label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nexthop
                                    
                                    	Remote nexthop addresses
                                    	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop>`
                                    
                                    .. attribute:: label
                                    
                                    	Info related to outgoing labels
                                    	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack, self).__init__()

                                        self.yang_name = "inner-stack"
                                        self.yang_parent_name = "stackv4-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop)), ("label", ("label", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label))])
                                        self._leafs = OrderedDict([
                                            ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                            ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                        ])
                                        self.num_nexthops = None
                                        self.num_lbls = None

                                        self.nexthop = YList(self)
                                        self.label = YList(self)
                                        self._segment_path = lambda: "inner-stack"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/stackv4-data/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Remote nexthop addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "nexthop"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/stackv4-data/inner-stack/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, ['entry'], name, value)


                                    class Label(Entity):
                                        """
                                        Info related to outgoing labels
                                        
                                        .. attribute:: outgoing_label
                                        
                                        	Remote Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outgoing_label_str
                                        
                                        	Remote Label string
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, self).__init__()

                                            self.yang_name = "label"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                            ])
                                            self.outgoing_label = None
                                            self.outgoing_label_str = None
                                            self._segment_path = lambda: "label"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/stackv4-data/inner-stack/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                            class Stackv6Data(Entity):
                                """
                                stackv6 data
                                
                                .. attribute:: nexthop
                                
                                	Nexthop
                                	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop>`
                                
                                .. attribute:: inner_stack
                                
                                	Inner stack
                                	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data, self).__init__()

                                    self.yang_name = "stackv6-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.nexthop = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop()
                                    self.nexthop.parent = self
                                    self._children_name_map["nexthop"] = "nexthop"
                                    self._children_yang_names.add("nexthop")

                                    self.inner_stack = MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack()
                                    self.inner_stack.parent = self
                                    self._children_name_map["inner_stack"] = "inner-stack"
                                    self._children_yang_names.add("inner-stack")
                                    self._segment_path = lambda: "stackv6-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()


                                class Nexthop(Entity):
                                    """
                                    Nexthop
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop, self).__init__()

                                        self.yang_name = "nexthop"
                                        self.yang_parent_name = "stackv6-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv6_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.next_hop_id = None
                                        self.out_interface_parent = None
                                        self._segment_path = lambda: "nexthop"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/stackv6-data/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                class InnerStack(Entity):
                                    """
                                    Inner stack
                                    
                                    .. attribute:: num_nexthops
                                    
                                    	Number of remote nexthop addresses
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: num_lbls
                                    
                                    	Depth of inner label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nexthop
                                    
                                    	Remote nexthop addresses
                                    	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop>`
                                    
                                    .. attribute:: label
                                    
                                    	Info related to outgoing labels
                                    	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack, self).__init__()

                                        self.yang_name = "inner-stack"
                                        self.yang_parent_name = "stackv6-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop)), ("label", ("label", MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label))])
                                        self._leafs = OrderedDict([
                                            ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                            ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                        ])
                                        self.num_nexthops = None
                                        self.num_lbls = None

                                        self.nexthop = YList(self)
                                        self.label = YList(self)
                                        self._segment_path = lambda: "inner-stack"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/stackv6-data/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Remote nexthop addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "nexthop"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/stackv6-data/inner-stack/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, ['entry'], name, value)


                                    class Label(Entity):
                                        """
                                        Info related to outgoing labels
                                        
                                        .. attribute:: outgoing_label
                                        
                                        	Remote Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outgoing_label_str
                                        
                                        	Remote Label string
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, self).__init__()

                                            self.yang_name = "label"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                            ])
                                            self.outgoing_label = None
                                            self.outgoing_label_str = None
                                            self._segment_path = lambda: "label"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/stackv6-data/inner-stack/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                            class TeHeadData(Entity):
                                """
                                te head data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: tunnel_local_label
                                
                                	Tunnel local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_local_label_str
                                
                                	Tunnel local label stringified
                                	**type**\: str
                                
                                .. attribute:: tunnel_fwd_class
                                
                                	Tunnel forwarding class
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: tunnel_load_metric
                                
                                	Tunnel Load metric
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flags_decode
                                
                                	Flags decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData, self).__init__()

                                    self.yang_name = "te-head-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('tunnel_local_label', YLeaf(YType.uint32, 'tunnel-local-label')),
                                        ('tunnel_local_label_str', YLeaf(YType.str, 'tunnel-local-label-str')),
                                        ('tunnel_fwd_class', YLeaf(YType.uint8, 'tunnel-fwd-class')),
                                        ('tunnel_load_metric', YLeaf(YType.uint32, 'tunnel-load-metric')),
                                        ('flags_decode', YLeaf(YType.str, 'flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.tunnel_local_label = None
                                    self.tunnel_local_label_str = None
                                    self.tunnel_fwd_class = None
                                    self.tunnel_load_metric = None
                                    self.flags_decode = None
                                    self._segment_path = lambda: "te-head-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.TeHeadData, ['table_id', 'table_name', 'tunnel_local_label', 'tunnel_local_label_str', 'tunnel_fwd_class', 'tunnel_load_metric', 'flags_decode'], name, value)


                            class DmtcData(Entity):
                                """
                                dmtc data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData, self).__init__()

                                    self.yang_name = "dmtc-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-data"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-ipv4s/rewrite-ipv4/mois/moi-array/moi/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteIpv4S.RewriteIpv4.Mois.MoiArray.Moi.DmtcData, ['dmtc_ext_ifh'], name, value)


        class RewriteTes(Entity):
            """
            Table of Traffic Engineering Rewrites
            
            .. attribute:: rewrite_te
            
            	FPI rewrite for TE
            	**type**\: list of  		 :py:class:`RewriteTe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.Rewrite.RewriteTes, self).__init__()

                self.yang_name = "rewrite-tes"
                self.yang_parent_name = "rewrite"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("rewrite-te", ("rewrite_te", MplsLsd.Rewrite.RewriteTes.RewriteTe))])
                self._leafs = OrderedDict()

                self.rewrite_te = YList(self)
                self._segment_path = lambda: "rewrite-tes"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.Rewrite.RewriteTes, [], name, value)


            class RewriteTe(Entity):
                """
                FPI rewrite for TE
                
                .. attribute:: interface_name  (key)
                
                	Tunnel interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: fpi_key
                
                	fpi key
                	**type**\:  :py:class:`FpiKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey>`
                
                .. attribute:: rewrite_id
                
                	Rewrite ID
                	**type**\:  :py:class:`RewriteId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId>`
                
                .. attribute:: rewrite_version
                
                	Rewrite version
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: bcdl_priority
                
                	BCDL Priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsd_queue
                
                	LSD queue
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rw_install_time
                
                	Rewrite install timestamp
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: rw_install_age
                
                	Rewrite install age
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: rw_updated
                
                	Is rewrite ever updated
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: priority_updated
                
                	Is rewrite's BCDL priority updated
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: associated_fpi
                
                	Associated FPI
                	**type**\: list of  		 :py:class:`AssociatedFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi>`
                
                .. attribute:: v4_rpf
                
                	IPv4 RPF neighbors
                	**type**\: list of  		 :py:class:`V4Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.V4Rpf>`
                
                .. attribute:: v6_rpf
                
                	IPv6 RPF neighbors
                	**type**\: list of  		 :py:class:`V6Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.V6Rpf>`
                
                .. attribute:: mois
                
                	Mois
                	**type**\: list of  		 :py:class:`Mois <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe, self).__init__()

                    self.yang_name = "rewrite-te"
                    self.yang_parent_name = "rewrite-tes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([("fpi-key", ("fpi_key", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey)), ("rewrite-id", ("rewrite_id", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId))])
                    self._child_list_classes = OrderedDict([("associated-fpi", ("associated_fpi", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi)), ("v4-rpf", ("v4_rpf", MplsLsd.Rewrite.RewriteTes.RewriteTe.V4Rpf)), ("v6-rpf", ("v6_rpf", MplsLsd.Rewrite.RewriteTes.RewriteTe.V6Rpf)), ("mois", ("mois", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois))])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('rewrite_version', YLeaf(YType.uint64, 'rewrite-version')),
                        ('bcdl_priority', YLeaf(YType.uint8, 'bcdl-priority')),
                        ('lsd_queue', YLeaf(YType.uint8, 'lsd-queue')),
                        ('rw_install_time', YLeaf(YType.uint64, 'rw-install-time')),
                        ('rw_install_age', YLeaf(YType.uint64, 'rw-install-age')),
                        ('rw_updated', YLeaf(YType.int32, 'rw-updated')),
                        ('priority_updated', YLeaf(YType.int32, 'priority-updated')),
                    ])
                    self.interface_name = None
                    self.rewrite_version = None
                    self.bcdl_priority = None
                    self.lsd_queue = None
                    self.rw_install_time = None
                    self.rw_install_age = None
                    self.rw_updated = None
                    self.priority_updated = None

                    self.fpi_key = MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey()
                    self.fpi_key.parent = self
                    self._children_name_map["fpi_key"] = "fpi-key"
                    self._children_yang_names.add("fpi-key")

                    self.rewrite_id = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId()
                    self.rewrite_id.parent = self
                    self._children_name_map["rewrite_id"] = "rewrite-id"
                    self._children_yang_names.add("rewrite-id")

                    self.associated_fpi = YList(self)
                    self.v4_rpf = YList(self)
                    self.v6_rpf = YList(self)
                    self.mois = YList(self)
                    self._segment_path = lambda: "rewrite-te" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-tes/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe, ['interface_name', 'rewrite_version', 'bcdl_priority', 'lsd_queue', 'rw_install_time', 'rw_install_age', 'rw_updated', 'priority_updated'], name, value)


                class FpiKey(Entity):
                    """
                    fpi key
                    
                    .. attribute:: fpi
                    
                    	FPI
                    	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi>`
                    
                    .. attribute:: application_owner
                    
                    	Application owner instance
                    	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.ApplicationOwner>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey, self).__init__()

                        self.yang_name = "fpi-key"
                        self.yang_parent_name = "rewrite-te"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi))])
                        self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.ApplicationOwner))])
                        self._leafs = OrderedDict()

                        self.fpi = MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi()
                        self.fpi.parent = self
                        self._children_name_map["fpi"] = "fpi"
                        self._children_yang_names.add("fpi")

                        self.application_owner = YList(self)
                        self._segment_path = lambda: "fpi-key"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey, [], name, value)


                    class Fpi(Entity):
                        """
                        FPI
                        
                        .. attribute:: label_data
                        
                        	label data
                        	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData>`
                        
                        .. attribute:: te_data
                        
                        	te data
                        	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData>`
                        
                        .. attribute:: ipv4_data
                        
                        	ipv4 data
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	ipv6 data
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data>`
                        
                        .. attribute:: pw_list_data
                        
                        	pw list data
                        	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData>`
                        
                        .. attribute:: dmtc_ext_intf_data
                        
                        	dmtc ext intf data
                        	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData>`
                        
                        .. attribute:: fpi_type
                        
                        	FPIType
                        	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi, self).__init__()

                            self.yang_name = "fpi"
                            self.yang_parent_name = "fpi-key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData)), ("te-data", ("te_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                            ])
                            self.fpi_type = None

                            self.label_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData()
                            self.label_data.parent = self
                            self._children_name_map["label_data"] = "label-data"
                            self._children_yang_names.add("label-data")

                            self.te_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData()
                            self.te_data.parent = self
                            self._children_name_map["te_data"] = "te-data"
                            self._children_yang_names.add("te-data")

                            self.ipv4_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.pw_list_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData()
                            self.pw_list_data.parent = self
                            self._children_name_map["pw_list_data"] = "pw-list-data"
                            self._children_yang_names.add("pw-list-data")

                            self.dmtc_ext_intf_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData()
                            self.dmtc_ext_intf_data.parent = self
                            self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                            self._children_yang_names.add("dmtc-ext-intf-data")
                            self._segment_path = lambda: "fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi, ['fpi_type'], name, value)


                        class LabelData(Entity):
                            """
                            label data
                            
                            .. attribute:: label
                            
                            	Label value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: elc
                            
                            	ELC
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData, self).__init__()

                                self.yang_name = "label-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('elc', YLeaf(YType.int32, 'elc')),
                                ])
                                self.label = None
                                self.security_id = None
                                self.elc = None
                                self._segment_path = lambda: "label-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                        class TeData(Entity):
                            """
                            te data
                            
                            .. attribute:: tunnel_interface
                            
                            	Tunnel interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: local_label
                            
                            	Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData, self).__init__()

                                self.yang_name = "te-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                    ('local_label', YLeaf(YType.uint32, 'local-label')),
                                ])
                                self.tunnel_interface = None
                                self.local_label = None
                                self._segment_path = lambda: "te-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                        class Ipv4Data(Entity):
                            """
                            ipv4 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sr_local_label
                            
                            	SR related Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                    ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.version = None
                                self.sr_local_label = None
                                self._segment_path = lambda: "ipv4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                        class Ipv6Data(Entity):
                            """
                            ipv6 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: router_flags
                            
                            	Route flags
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix_len
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                    ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.router_flags = None
                                self.prefix_len = None
                                self.version = None
                                self._segment_path = lambda: "ipv6-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                        class PwListData(Entity):
                            """
                            pw list data
                            
                            .. attribute:: pwhe_list_id
                            
                            	Pseudowire List Identifier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData, self).__init__()

                                self.yang_name = "pw-list-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                ])
                                self.pwhe_list_id = None
                                self._segment_path = lambda: "pw-list-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.PwListData, ['pwhe_list_id'], name, value)


                        class DmtcExtIntfData(Entity):
                            """
                            dmtc ext intf data
                            
                            .. attribute:: dmtc_ext_ifh
                            
                            	DMTC External Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData, self).__init__()

                                self.yang_name = "dmtc-ext-intf-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                ])
                                self.dmtc_ext_ifh = None
                                self._segment_path = lambda: "dmtc-ext-intf-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                    class ApplicationOwner(Entity):
                        """
                        Application owner instance
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.ApplicationOwner, self).__init__()

                            self.yang_name = "application-owner"
                            self.yang_parent_name = "fpi-key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-owner"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.FpiKey.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                class RewriteId(Entity):
                    """
                    Rewrite ID
                    
                    .. attribute:: rewrite_id
                    
                    	Rewrite ID
                    	**type**\:  :py:class:`RewriteId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId, self).__init__()

                        self.yang_name = "rewrite-id"
                        self.yang_parent_name = "rewrite-te"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("rewrite-id", ("rewrite_id", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.rewrite_id = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_()
                        self.rewrite_id.parent = self
                        self._children_name_map["rewrite_id"] = "rewrite-id"
                        self._children_yang_names.add("rewrite-id")
                        self._segment_path = lambda: "rewrite-id"


                    class RewriteId_(Entity):
                        """
                        Rewrite ID
                        
                        .. attribute:: label_context
                        
                        	Label context
                        	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext>`
                        
                        .. attribute:: local_label_rewrite
                        
                        	Local label rewrite information
                        	**type**\:  :py:class:`LocalLabelRewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite>`
                        
                        .. attribute:: rewrite_id_type
                        
                        	RewriteIDType
                        	**type**\:  :py:class:`MgmtLsdRwId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdRwId>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_, self).__init__()

                            self.yang_name = "rewrite-id"
                            self.yang_parent_name = "rewrite-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext)), ("local-label-rewrite", ("local_label_rewrite", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rewrite_id_type', YLeaf(YType.enumeration, 'rewrite-id-type')),
                            ])
                            self.rewrite_id_type = None

                            self.label_context = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext()
                            self.label_context.parent = self
                            self._children_name_map["label_context"] = "label-context"
                            self._children_yang_names.add("label-context")

                            self.local_label_rewrite = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite()
                            self.local_label_rewrite.parent = self
                            self._children_name_map["local_label_rewrite"] = "local-label-rewrite"
                            self._children_yang_names.add("local-label-rewrite")
                            self._segment_path = lambda: "rewrite-id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_, ['rewrite_id_type'], name, value)


                        class LabelContext(Entity):
                            """
                            Label context
                            
                            .. attribute:: ipv4_data
                            
                            	IPv4 label context
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	IPv6 label context
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data>`
                            
                            .. attribute:: tev4_data
                            
                            	TEv4 label context
                            	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data>`
                            
                            .. attribute:: ipv4l3vpn_data
                            
                            	L3VPN IPv4 label context
                            	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData>`
                            
                            .. attribute:: ipv6l3vpn_data
                            
                            	L3VPN IPv6 label context
                            	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData>`
                            
                            .. attribute:: vrf_l3vpn_data
                            
                            	L3VPN VRF label context
                            	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData>`
                            
                            .. attribute:: cev4l3vpn_data
                            
                            	L3VPN CEv4 label context
                            	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData>`
                            
                            .. attribute:: cev6l3vpn_data
                            
                            	L3VPN CEv6 label context
                            	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData>`
                            
                            .. attribute:: pseudowire_data
                            
                            	Pseudowire label context
                            	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData>`
                            
                            .. attribute:: label_block_data
                            
                            	Label block context
                            	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData>`
                            
                            .. attribute:: ip_sub_data
                            
                            	IP Subscriber context
                            	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData>`
                            
                            .. attribute:: tev4p2mp_data
                            
                            	TEv4 P2MP context
                            	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData>`
                            
                            .. attribute:: mld_pv4_data
                            
                            	MLDPv4 LSM\-ID context
                            	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data>`
                            
                            .. attribute:: pseudowire_head_end_data
                            
                            	Pseudowire Head\-end label context
                            	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData>`
                            
                            .. attribute:: tp_data
                            
                            	TP context
                            	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData>`
                            
                            .. attribute:: generic_routing_encapsulation
                            
                            	Generic routing encapsulation context
                            	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation>`
                            
                            .. attribute:: ipv6_generic_routing_encapsulation
                            
                            	Generic routing encapsulation context
                            	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation>`
                            
                            .. attribute:: evpn_data
                            
                            	EVPN context
                            	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData>`
                            
                            .. attribute:: ipv4blb_data
                            
                            	BFD BLB label context
                            	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData>`
                            
                            .. attribute:: ipv6blb_data
                            
                            	BFD BLB label context
                            	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData>`
                            
                            .. attribute:: pi_mi_pmsi_data
                            
                            	PIM I\-PMSI label conext
                            	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData>`
                            
                            .. attribute:: pi_ms_pmsi_data
                            
                            	PIM S\-PMSI label conext
                            	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData>`
                            
                            .. attribute:: next_hop_set_l3vpn
                            
                            	L3VPN NH SET label context
                            	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn>`
                            
                            .. attribute:: sr_prefix_segment
                            
                            	SR Prefix Segment context
                            	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment>`
                            
                            .. attribute:: sr_adj_segment_ipv4
                            
                            	SR Adj Segment ipv4 context
                            	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4>`
                            
                            .. attribute:: sr_adj_segment_ipv6
                            
                            	SR Adj Segment ipv6 context
                            	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6>`
                            
                            .. attribute:: label_block_srgb_data
                            
                            	Label block SRGB context
                            	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData>`
                            
                            .. attribute:: te_binding
                            
                            	MPLS TE tunnel binding context
                            	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding>`
                            
                            .. attribute:: label_block_srlb_data
                            
                            	Label block SRLB context
                            	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData>`
                            
                            .. attribute:: label_context_type
                            
                            	LabelContextType
                            	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext, self).__init__()

                                self.yang_name = "label-context"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                                ])
                                self.label_context_type = None

                                self.ipv4_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.tev4_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data()
                                self.tev4_data.parent = self
                                self._children_name_map["tev4_data"] = "tev4-data"
                                self._children_yang_names.add("tev4-data")

                                self.ipv4l3vpn_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData()
                                self.ipv4l3vpn_data.parent = self
                                self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                                self._children_yang_names.add("ipv4l3vpn-data")

                                self.ipv6l3vpn_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData()
                                self.ipv6l3vpn_data.parent = self
                                self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                                self._children_yang_names.add("ipv6l3vpn-data")

                                self.vrf_l3vpn_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData()
                                self.vrf_l3vpn_data.parent = self
                                self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                                self._children_yang_names.add("vrf-l3vpn-data")

                                self.cev4l3vpn_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData()
                                self.cev4l3vpn_data.parent = self
                                self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                                self._children_yang_names.add("cev4l3vpn-data")

                                self.cev6l3vpn_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData()
                                self.cev6l3vpn_data.parent = self
                                self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                                self._children_yang_names.add("cev6l3vpn-data")

                                self.pseudowire_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData()
                                self.pseudowire_data.parent = self
                                self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                self._children_yang_names.add("pseudowire-data")

                                self.label_block_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData()
                                self.label_block_data.parent = self
                                self._children_name_map["label_block_data"] = "label-block-data"
                                self._children_yang_names.add("label-block-data")

                                self.ip_sub_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData()
                                self.ip_sub_data.parent = self
                                self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                self._children_yang_names.add("ip-sub-data")

                                self.tev4p2mp_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData()
                                self.tev4p2mp_data.parent = self
                                self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                                self._children_yang_names.add("tev4p2mp-data")

                                self.mld_pv4_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data()
                                self.mld_pv4_data.parent = self
                                self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                                self._children_yang_names.add("mld-pv4-data")

                                self.pseudowire_head_end_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData()
                                self.pseudowire_head_end_data.parent = self
                                self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                self._children_yang_names.add("pseudowire-head-end-data")

                                self.tp_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData()
                                self.tp_data.parent = self
                                self._children_name_map["tp_data"] = "tp-data"
                                self._children_yang_names.add("tp-data")

                                self.generic_routing_encapsulation = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation()
                                self.generic_routing_encapsulation.parent = self
                                self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                                self._children_yang_names.add("generic-routing-encapsulation")

                                self.ipv6_generic_routing_encapsulation = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation()
                                self.ipv6_generic_routing_encapsulation.parent = self
                                self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                                self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                                self.evpn_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData()
                                self.evpn_data.parent = self
                                self._children_name_map["evpn_data"] = "evpn-data"
                                self._children_yang_names.add("evpn-data")

                                self.ipv4blb_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData()
                                self.ipv4blb_data.parent = self
                                self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                                self._children_yang_names.add("ipv4blb-data")

                                self.ipv6blb_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData()
                                self.ipv6blb_data.parent = self
                                self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                                self._children_yang_names.add("ipv6blb-data")

                                self.pi_mi_pmsi_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData()
                                self.pi_mi_pmsi_data.parent = self
                                self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                                self._children_yang_names.add("pi-mi-pmsi-data")

                                self.pi_ms_pmsi_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData()
                                self.pi_ms_pmsi_data.parent = self
                                self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                                self._children_yang_names.add("pi-ms-pmsi-data")

                                self.next_hop_set_l3vpn = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn()
                                self.next_hop_set_l3vpn.parent = self
                                self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                                self._children_yang_names.add("next-hop-set-l3vpn")

                                self.sr_prefix_segment = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment()
                                self.sr_prefix_segment.parent = self
                                self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                                self._children_yang_names.add("sr-prefix-segment")

                                self.sr_adj_segment_ipv4 = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4()
                                self.sr_adj_segment_ipv4.parent = self
                                self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                                self._children_yang_names.add("sr-adj-segment-ipv4")

                                self.sr_adj_segment_ipv6 = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6()
                                self.sr_adj_segment_ipv6.parent = self
                                self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                                self._children_yang_names.add("sr-adj-segment-ipv6")

                                self.label_block_srgb_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData()
                                self.label_block_srgb_data.parent = self
                                self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                                self._children_yang_names.add("label-block-srgb-data")

                                self.te_binding = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding()
                                self.te_binding.parent = self
                                self._children_name_map["te_binding"] = "te-binding"
                                self._children_yang_names.add("te-binding")

                                self.label_block_srlb_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData()
                                self.label_block_srlb_data.parent = self
                                self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                                self._children_yang_names.add("label-block-srlb-data")
                                self._segment_path = lambda: "label-context"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext, ['label_context_type'], name, value)


                            class Ipv4Data(Entity):
                                """
                                IPv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	IPv4 prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: vrf_name
                                
                                	VRF Name
                                	**type**\: str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.security_id = None
                                    self.vrf_name = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                            class Ipv6Data(Entity):
                                """
                                IPv6 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: vrf_name
                                
                                	VRF Name
                                	**type**\: str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.security_id = None
                                    self.vrf_name = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                            class Tev4Data(Entity):
                                """
                                TEv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_source
                                
                                	Tunnel source
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: tunnel_dest
                                
                                	Tunnel destination
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id_extension
                                
                                	Extended tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_lsp_id
                                
                                	Tunnel LSP ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: is_srte
                                
                                	Is this an SRTE head tunnel
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data, self).__init__()

                                    self.yang_name = "tev4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                        ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                        ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                        ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                        ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                        ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                    ])
                                    self.table_id = None
                                    self.tunnel_source = None
                                    self.tunnel_dest = None
                                    self.tunnel_id = None
                                    self.tunnel_id_extension = None
                                    self.tunnel_lsp_id = None
                                    self.is_srte = None
                                    self._segment_path = lambda: "tev4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                            class Ipv4L3VpnData(Entity):
                                """
                                L3VPN IPv4 label context
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: route_distinguisher
                                
                                	Route distinguisher
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, self).__init__()

                                    self.yang_name = "ipv4l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.route_distinguisher = None
                                    self._segment_path = lambda: "ipv4l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                            class Ipv6L3VpnData(Entity):
                                """
                                L3VPN IPv6 label context
                                
                                .. attribute:: prefix
                                
                                	IPv6 prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: route_distinguisher
                                
                                	Route distinguisher
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, self).__init__()

                                    self.yang_name = "ipv6l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.route_distinguisher = None
                                    self._segment_path = lambda: "ipv6l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                            class VrfL3VpnData(Entity):
                                """
                                L3VPN VRF label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, self).__init__()

                                    self.yang_name = "vrf-l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.security_id = None
                                    self._segment_path = lambda: "vrf-l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                            class Cev4L3VpnData(Entity):
                                """
                                L3VPN CEv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, self).__init__()

                                    self.yang_name = "cev4l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.ipv4_next_hop = None
                                    self.security_id = None
                                    self._segment_path = lambda: "cev4l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                            class Cev6L3VpnData(Entity):
                                """
                                L3VPN CEv6 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_next_hop
                                
                                	IPv6 nexthop
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, self).__init__()

                                    self.yang_name = "cev6l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.ipv6_next_hop = None
                                    self.security_id = None
                                    self._segment_path = lambda: "cev6l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                            class PseudowireData(Entity):
                                """
                                Pseudowire label context
                                
                                .. attribute:: prefix
                                
                                	Address prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: pseudowire_id
                                
                                	Pseudo\-wire ID
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: remote_l2_router_id
                                
                                	Remote L2 Router ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: subinterface
                                
                                	Subinterface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData, self).__init__()

                                    self.yang_name = "pseudowire-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                        ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                        ('subinterface', YLeaf(YType.str, 'subinterface')),
                                    ])
                                    self.prefix = None
                                    self.pseudowire_id = None
                                    self.remote_l2_router_id = None
                                    self.subinterface = None
                                    self._segment_path = lambda: "pseudowire-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                            class LabelBlockData(Entity):
                                """
                                Label block context
                                
                                .. attribute:: service
                                
                                	Service
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: vpn_id
                                
                                	VPN ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: edge_id
                                
                                	Edge ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData, self).__init__()

                                    self.yang_name = "label-block-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('service', YLeaf(YType.uint8, 'service')),
                                        ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                        ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.service = None
                                    self.vpn_id = None
                                    self.edge_id = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                            class IpSubData(Entity):
                                """
                                IP Subscriber context
                                
                                .. attribute:: table_id
                                
                                	Table Id
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: parent_interface
                                
                                	Parent interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData, self).__init__()

                                    self.yang_name = "ip-sub-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                    ])
                                    self.table_id = None
                                    self.parent_interface = None
                                    self._segment_path = lambda: "ip-sub-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.IpSubData, ['table_id', 'parent_interface'], name, value)


                            class Tev4P2MpData(Entity):
                                """
                                TEv4 P2MP context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_source
                                
                                	Tunnel source
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: p2mp_id
                                
                                	Point to multipoint ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id_extension
                                
                                	Tunnel ID extension
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_lsp_id
                                
                                	Tunnel LSP ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: previous_hop
                                
                                	Previous hop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, self).__init__()

                                    self.yang_name = "tev4p2mp-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                        ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                        ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                        ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                        ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                        ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                    ])
                                    self.table_id = None
                                    self.tunnel_source = None
                                    self.p2mp_id = None
                                    self.tunnel_id = None
                                    self.tunnel_id_extension = None
                                    self.tunnel_lsp_id = None
                                    self.previous_hop = None
                                    self._segment_path = lambda: "tev4p2mp-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                            class MldPv4Data(Entity):
                                """
                                MLDPv4 LSM\-ID context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	LSM ID Type
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsm_id
                                
                                	LSM ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: peer_lsrid
                                
                                	Peer LSR Id
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: peer_label_space_id
                                
                                	Peer Label Space Id
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data, self).__init__()

                                    self.yang_name = "mld-pv4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('type', YLeaf(YType.uint16, 'type')),
                                        ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                        ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                        ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                    ])
                                    self.table_id = None
                                    self.type = None
                                    self.lsm_id = None
                                    self.peer_lsrid = None
                                    self.peer_label_space_id = None
                                    self._segment_path = lambda: "mld-pv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                            class PseudowireHeadEndData(Entity):
                                """
                                Pseudowire Head\-end label context
                                
                                .. attribute:: pwhe_intf
                                
                                	Pseudo\-wire Head\-end interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, self).__init__()

                                    self.yang_name = "pseudowire-head-end-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                    ])
                                    self.pwhe_intf = None
                                    self._segment_path = lambda: "pseudowire-head-end-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                            class TpData(Entity):
                                """
                                TP context
                                
                                .. attribute:: source_global_id
                                
                                	TP source global ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: source_node_id
                                
                                	TP source node ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: dest_global_id
                                
                                	TP destination global ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dest_node_id
                                
                                	TP destination node ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: source_tunnel_id
                                
                                	TP source tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: dest_tunnel_id
                                
                                	TP destination tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_id
                                
                                	TP LSP ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData, self).__init__()

                                    self.yang_name = "tp-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                        ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                        ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                        ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                        ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                        ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                        ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                    ])
                                    self.source_global_id = None
                                    self.source_node_id = None
                                    self.dest_global_id = None
                                    self.dest_node_id = None
                                    self.source_tunnel_id = None
                                    self.dest_tunnel_id = None
                                    self.lsp_id = None
                                    self._segment_path = lambda: "tp-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                            class GenericRoutingEncapsulation(Entity):
                                """
                                Generic routing encapsulation context
                                
                                .. attribute:: gre_interface
                                
                                	Generic routing encapsulation interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, self).__init__()

                                    self.yang_name = "generic-routing-encapsulation"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                    ])
                                    self.gre_interface = None
                                    self._segment_path = lambda: "generic-routing-encapsulation"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                            class Ipv6GenericRoutingEncapsulation(Entity):
                                """
                                Generic routing encapsulation context
                                
                                .. attribute:: greipv6_interface
                                
                                	Generic routing encapsulation IPv6 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, self).__init__()

                                    self.yang_name = "ipv6-generic-routing-encapsulation"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                    ])
                                    self.greipv6_interface = None
                                    self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                            class EvpnData(Entity):
                                """
                                EVPN context
                                
                                .. attribute:: evpn_id
                                
                                	EVPN ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: evpn_tag
                                
                                	EVPN TAG
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ethernet_segment
                                
                                	Ethernet Segment ID
                                	**type**\: str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData, self).__init__()

                                    self.yang_name = "evpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                        ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                        ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                    ])
                                    self.evpn_id = None
                                    self.evpn_tag = None
                                    self.ethernet_segment = None
                                    self._segment_path = lambda: "evpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                            class Ipv4BlbData(Entity):
                                """
                                BFD BLB label context
                                
                                .. attribute:: blb_intf
                                
                                	BFD BLB interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, self).__init__()

                                    self.yang_name = "ipv4blb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                    ])
                                    self.blb_intf = None
                                    self.prefix = None
                                    self._segment_path = lambda: "ipv4blb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                            class Ipv6BlbData(Entity):
                                """
                                BFD BLB label context
                                
                                .. attribute:: blb_intf
                                
                                	BFD BLB interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix
                                
                                	IPv6 prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, self).__init__()

                                    self.yang_name = "ipv6blb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                    ])
                                    self.blb_intf = None
                                    self.prefix = None
                                    self._segment_path = lambda: "ipv6blb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                            class PiMiPmsiData(Entity):
                                """
                                PIM I\-PMSI label conext
                                
                                .. attribute:: vrf_id
                                
                                	VRF ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: head
                                
                                	Head
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: v6
                                
                                	PIM6
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, self).__init__()

                                    self.yang_name = "pi-mi-pmsi-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                        ('head', YLeaf(YType.int32, 'head')),
                                        ('v6', YLeaf(YType.int32, 'v6')),
                                    ])
                                    self.vrf_id = None
                                    self.head = None
                                    self.v6 = None
                                    self._segment_path = lambda: "pi-mi-pmsi-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                            class PiMsPmsiData(Entity):
                                """
                                PIM S\-PMSI label conext
                                
                                .. attribute:: vrf_id
                                
                                	VRF ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: source
                                
                                	Originating Router
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: head
                                
                                	Head
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: v6
                                
                                	PIM6
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: hli
                                
                                	Head LSM\-ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: seg
                                
                                	Segmented Multicast
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, self).__init__()

                                    self.yang_name = "pi-ms-pmsi-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                        ('source', YLeaf(YType.str, 'source')),
                                        ('head', YLeaf(YType.int32, 'head')),
                                        ('v6', YLeaf(YType.int32, 'v6')),
                                        ('hli', YLeaf(YType.uint32, 'hli')),
                                        ('seg', YLeaf(YType.int32, 'seg')),
                                    ])
                                    self.vrf_id = None
                                    self.source = None
                                    self.head = None
                                    self.v6 = None
                                    self.hli = None
                                    self.seg = None
                                    self._segment_path = lambda: "pi-ms-pmsi-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                            class NextHopSetL3Vpn(Entity):
                                """
                                L3VPN NH SET label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: next_hop_set_id
                                
                                	Next Hop Set ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, self).__init__()

                                    self.yang_name = "next-hop-set-l3vpn"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                    ])
                                    self.table_id = None
                                    self.next_hop_set_id = None
                                    self._segment_path = lambda: "next-hop-set-l3vpn"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                            class SrPrefixSegment(Entity):
                                """
                                SR Prefix Segment context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: segment_id
                                
                                	Prefix Segment ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, self).__init__()

                                    self.yang_name = "sr-prefix-segment"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                    ])
                                    self.table_id = None
                                    self.segment_id = None
                                    self._segment_path = lambda: "sr-prefix-segment"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                            class SrAdjSegmentIpv4(Entity):
                                """
                                SR Adj Segment ipv4 context
                                
                                .. attribute:: index
                                
                                	Adjacency index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Adjacency type
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: intf
                                
                                	Adjacency interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: addr
                                
                                	Adjacency nexthop IPv4 address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, self).__init__()

                                    self.yang_name = "sr-adj-segment-ipv4"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('index', YLeaf(YType.uint32, 'index')),
                                        ('type', YLeaf(YType.uint32, 'type')),
                                        ('intf', YLeaf(YType.str, 'intf')),
                                        ('addr', YLeaf(YType.str, 'addr')),
                                    ])
                                    self.index = None
                                    self.type = None
                                    self.intf = None
                                    self.addr = None
                                    self._segment_path = lambda: "sr-adj-segment-ipv4"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                            class SrAdjSegmentIpv6(Entity):
                                """
                                SR Adj Segment ipv6 context
                                
                                .. attribute:: index
                                
                                	Adjacency index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Adjacency type
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: intf
                                
                                	Adjacency interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: addr
                                
                                	Adjacency nexthop IPv6 address
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, self).__init__()

                                    self.yang_name = "sr-adj-segment-ipv6"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('index', YLeaf(YType.uint32, 'index')),
                                        ('type', YLeaf(YType.uint32, 'type')),
                                        ('intf', YLeaf(YType.str, 'intf')),
                                        ('addr', YLeaf(YType.str, 'addr')),
                                    ])
                                    self.index = None
                                    self.type = None
                                    self.intf = None
                                    self.addr = None
                                    self._segment_path = lambda: "sr-adj-segment-ipv6"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                            class LabelBlockSrgbData(Entity):
                                """
                                Label block SRGB context
                                
                                .. attribute:: start_label
                                
                                	Start Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, self).__init__()

                                    self.yang_name = "label-block-srgb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('start_label', YLeaf(YType.uint32, 'start-label')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.start_label = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-srgb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                            class TeBinding(Entity):
                                """
                                MPLS TE tunnel binding context
                                
                                .. attribute:: te_identifier
                                
                                	MPLS Traffic Engineering Tunnel or Group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: te_type
                                
                                	Type of identifier for the binding
                                	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding, self).__init__()

                                    self.yang_name = "te-binding"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                        ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                    ])
                                    self.te_identifier = None
                                    self.te_type = None
                                    self._segment_path = lambda: "te-binding"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.TeBinding, ['te_identifier', 'te_type'], name, value)


                            class LabelBlockSrlbData(Entity):
                                """
                                Label block SRLB context
                                
                                .. attribute:: start_label
                                
                                	Start Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, self).__init__()

                                    self.yang_name = "label-block-srlb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('start_label', YLeaf(YType.uint32, 'start-label')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.start_label = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-srlb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                        class LocalLabelRewrite(Entity):
                            """
                            Local label rewrite information
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\: list of  		 :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite.LabelData>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite, self).__init__()

                                self.yang_name = "local-label-rewrite"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite.LabelData))])
                                self._leafs = OrderedDict()

                                self.label_data = YList(self)
                                self._segment_path = lambda: "local-label-rewrite"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite, [], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "local-label-rewrite"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, ['entry'], name, value)


                class AssociatedFpi(Entity):
                    """
                    Associated FPI
                    
                    .. attribute:: fpi
                    
                    	FPI
                    	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi>`
                    
                    .. attribute:: application_owner
                    
                    	Application owner instance
                    	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.ApplicationOwner>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi, self).__init__()

                        self.yang_name = "associated-fpi"
                        self.yang_parent_name = "rewrite-te"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi))])
                        self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.ApplicationOwner))])
                        self._leafs = OrderedDict()

                        self.fpi = MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi()
                        self.fpi.parent = self
                        self._children_name_map["fpi"] = "fpi"
                        self._children_yang_names.add("fpi")

                        self.application_owner = YList(self)
                        self._segment_path = lambda: "associated-fpi"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi, [], name, value)


                    class Fpi(Entity):
                        """
                        FPI
                        
                        .. attribute:: label_data
                        
                        	label data
                        	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData>`
                        
                        .. attribute:: te_data
                        
                        	te data
                        	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData>`
                        
                        .. attribute:: ipv4_data
                        
                        	ipv4 data
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	ipv6 data
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data>`
                        
                        .. attribute:: pw_list_data
                        
                        	pw list data
                        	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData>`
                        
                        .. attribute:: dmtc_ext_intf_data
                        
                        	dmtc ext intf data
                        	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData>`
                        
                        .. attribute:: fpi_type
                        
                        	FPIType
                        	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi, self).__init__()

                            self.yang_name = "fpi"
                            self.yang_parent_name = "associated-fpi"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData)), ("te-data", ("te_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                            ])
                            self.fpi_type = None

                            self.label_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData()
                            self.label_data.parent = self
                            self._children_name_map["label_data"] = "label-data"
                            self._children_yang_names.add("label-data")

                            self.te_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData()
                            self.te_data.parent = self
                            self._children_name_map["te_data"] = "te-data"
                            self._children_yang_names.add("te-data")

                            self.ipv4_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.pw_list_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData()
                            self.pw_list_data.parent = self
                            self._children_name_map["pw_list_data"] = "pw-list-data"
                            self._children_yang_names.add("pw-list-data")

                            self.dmtc_ext_intf_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData()
                            self.dmtc_ext_intf_data.parent = self
                            self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                            self._children_yang_names.add("dmtc-ext-intf-data")
                            self._segment_path = lambda: "fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi, ['fpi_type'], name, value)


                        class LabelData(Entity):
                            """
                            label data
                            
                            .. attribute:: label
                            
                            	Label value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: elc
                            
                            	ELC
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData, self).__init__()

                                self.yang_name = "label-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('elc', YLeaf(YType.int32, 'elc')),
                                ])
                                self.label = None
                                self.security_id = None
                                self.elc = None
                                self._segment_path = lambda: "label-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                        class TeData(Entity):
                            """
                            te data
                            
                            .. attribute:: tunnel_interface
                            
                            	Tunnel interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: local_label
                            
                            	Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData, self).__init__()

                                self.yang_name = "te-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                    ('local_label', YLeaf(YType.uint32, 'local-label')),
                                ])
                                self.tunnel_interface = None
                                self.local_label = None
                                self._segment_path = lambda: "te-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                        class Ipv4Data(Entity):
                            """
                            ipv4 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sr_local_label
                            
                            	SR related Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                    ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.version = None
                                self.sr_local_label = None
                                self._segment_path = lambda: "ipv4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                        class Ipv6Data(Entity):
                            """
                            ipv6 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: router_flags
                            
                            	Route flags
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix_len
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                    ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.router_flags = None
                                self.prefix_len = None
                                self.version = None
                                self._segment_path = lambda: "ipv6-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                        class PwListData(Entity):
                            """
                            pw list data
                            
                            .. attribute:: pwhe_list_id
                            
                            	Pseudowire List Identifier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData, self).__init__()

                                self.yang_name = "pw-list-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                ])
                                self.pwhe_list_id = None
                                self._segment_path = lambda: "pw-list-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.PwListData, ['pwhe_list_id'], name, value)


                        class DmtcExtIntfData(Entity):
                            """
                            dmtc ext intf data
                            
                            .. attribute:: dmtc_ext_ifh
                            
                            	DMTC External Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData, self).__init__()

                                self.yang_name = "dmtc-ext-intf-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                ])
                                self.dmtc_ext_ifh = None
                                self._segment_path = lambda: "dmtc-ext-intf-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                    class ApplicationOwner(Entity):
                        """
                        Application owner instance
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.ApplicationOwner, self).__init__()

                            self.yang_name = "application-owner"
                            self.yang_parent_name = "associated-fpi"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-owner"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.AssociatedFpi.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                class V4Rpf(Entity):
                    """
                    IPv4 RPF neighbors
                    
                    .. attribute:: table_id
                    
                    	Table ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: v4_rpf_neighbor
                    
                    	V4 RPF Neighbor
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.V4Rpf, self).__init__()

                        self.yang_name = "v4-rpf"
                        self.yang_parent_name = "rewrite-te"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                            ('v4_rpf_neighbor', YLeaf(YType.str, 'v4-rpf-neighbor')),
                        ])
                        self.table_id = None
                        self.v4_rpf_neighbor = None
                        self._segment_path = lambda: "v4-rpf"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.V4Rpf, ['table_id', 'v4_rpf_neighbor'], name, value)


                class V6Rpf(Entity):
                    """
                    IPv6 RPF neighbors
                    
                    .. attribute:: table_id
                    
                    	Table ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: v6_rpf_neighbor
                    
                    	V6 RPF Neighbor
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.V6Rpf, self).__init__()

                        self.yang_name = "v6-rpf"
                        self.yang_parent_name = "rewrite-te"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                            ('v6_rpf_neighbor', YLeaf(YType.str, 'v6-rpf-neighbor')),
                        ])
                        self.table_id = None
                        self.v6_rpf_neighbor = None
                        self._segment_path = lambda: "v6-rpf"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.V6Rpf, ['table_id', 'v6_rpf_neighbor'], name, value)


                class Mois(Entity):
                    """
                    Mois
                    
                    .. attribute:: application_resource
                    
                    	Application state
                    	**type**\:  :py:class:`ApplicationResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource>`
                    
                    .. attribute:: moi_array
                    
                    	moi array
                    	**type**\: list of  		 :py:class:`MoiArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois, self).__init__()

                        self.yang_name = "mois"
                        self.yang_parent_name = "rewrite-te"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("application-resource", ("application_resource", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource))])
                        self._child_list_classes = OrderedDict([("moi-array", ("moi_array", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray))])
                        self._leafs = OrderedDict()

                        self.application_resource = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource()
                        self.application_resource.parent = self
                        self._children_name_map["application_resource"] = "application-resource"
                        self._children_yang_names.add("application-resource")

                        self.moi_array = YList(self)
                        self._segment_path = lambda: "mois"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois, [], name, value)


                    class ApplicationResource(Entity):
                        """
                        Application state
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource, self).__init__()

                            self.yang_name = "application-resource"
                            self.yang_parent_name = "mois"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-resource"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.ApplicationResource, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class MoiArray(Entity):
                        """
                        moi array
                        
                        .. attribute:: moi
                        
                        	Moi
                        	**type**\:  :py:class:`Moi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray, self).__init__()

                            self.yang_name = "moi-array"
                            self.yang_parent_name = "mois"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("moi", ("moi", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.moi = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi()
                            self.moi.parent = self
                            self._children_name_map["moi"] = "moi"
                            self._children_yang_names.add("moi")
                            self._segment_path = lambda: "moi-array"


                        class Moi(Entity):
                            """
                            Moi
                            
                            .. attribute:: pop_and_lookup_ipv4
                            
                            	pop and lookup ipv4
                            	**type**\:  :py:class:`PopAndLookupIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4>`
                            
                            .. attribute:: pop_and_lookup_tp
                            
                            	pop and lookup tp
                            	**type**\:  :py:class:`PopAndLookupTp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp>`
                            
                            .. attribute:: pop_and_lookup_ipv6
                            
                            	pop and lookup ipv6
                            	**type**\:  :py:class:`PopAndLookupIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data>`
                            
                            .. attribute:: tev4_data
                            
                            	tev4 data
                            	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data>`
                            
                            .. attribute:: pseudowire_data
                            
                            	pseudowire data
                            	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData>`
                            
                            .. attribute:: ip_sub_data
                            
                            	ip sub data
                            	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData>`
                            
                            .. attribute:: pseudowire_head_end_data
                            
                            	pseudowire head end data
                            	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData>`
                            
                            .. attribute:: stackv4_data
                            
                            	stackv4 data
                            	**type**\:  :py:class:`Stackv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data>`
                            
                            .. attribute:: stackv6_data
                            
                            	stackv6 data
                            	**type**\:  :py:class:`Stackv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data>`
                            
                            .. attribute:: te_head_data
                            
                            	te head data
                            	**type**\:  :py:class:`TeHeadData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData>`
                            
                            .. attribute:: dmtc_data
                            
                            	dmtc data
                            	**type**\:  :py:class:`DmtcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData>`
                            
                            .. attribute:: moi_type
                            
                            	MoiType
                            	**type**\:  :py:class:`MgmtLsdMoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdMoi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi, self).__init__()

                                self.yang_name = "moi"
                                self.yang_parent_name = "moi-array"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("pop-and-lookup-ipv4", ("pop_and_lookup_ipv4", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4)), ("pop-and-lookup-tp", ("pop_and_lookup_tp", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp)), ("pop-and-lookup-ipv6", ("pop_and_lookup_ipv6", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData)), ("stackv4-data", ("stackv4_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data)), ("stackv6-data", ("stackv6_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data)), ("te-head-data", ("te_head_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData)), ("dmtc-data", ("dmtc_data", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('moi_type', YLeaf(YType.enumeration, 'moi-type')),
                                ])
                                self.moi_type = None

                                self.pop_and_lookup_ipv4 = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4()
                                self.pop_and_lookup_ipv4.parent = self
                                self._children_name_map["pop_and_lookup_ipv4"] = "pop-and-lookup-ipv4"
                                self._children_yang_names.add("pop-and-lookup-ipv4")

                                self.pop_and_lookup_tp = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp()
                                self.pop_and_lookup_tp.parent = self
                                self._children_name_map["pop_and_lookup_tp"] = "pop-and-lookup-tp"
                                self._children_yang_names.add("pop-and-lookup-tp")

                                self.pop_and_lookup_ipv6 = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6()
                                self.pop_and_lookup_ipv6.parent = self
                                self._children_name_map["pop_and_lookup_ipv6"] = "pop-and-lookup-ipv6"
                                self._children_yang_names.add("pop-and-lookup-ipv6")

                                self.ipv4_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.tev4_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data()
                                self.tev4_data.parent = self
                                self._children_name_map["tev4_data"] = "tev4-data"
                                self._children_yang_names.add("tev4-data")

                                self.pseudowire_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData()
                                self.pseudowire_data.parent = self
                                self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                self._children_yang_names.add("pseudowire-data")

                                self.ip_sub_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData()
                                self.ip_sub_data.parent = self
                                self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                self._children_yang_names.add("ip-sub-data")

                                self.pseudowire_head_end_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData()
                                self.pseudowire_head_end_data.parent = self
                                self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                self._children_yang_names.add("pseudowire-head-end-data")

                                self.pw_list_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.stackv4_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data()
                                self.stackv4_data.parent = self
                                self._children_name_map["stackv4_data"] = "stackv4-data"
                                self._children_yang_names.add("stackv4-data")

                                self.stackv6_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data()
                                self.stackv6_data.parent = self
                                self._children_name_map["stackv6_data"] = "stackv6-data"
                                self._children_yang_names.add("stackv6-data")

                                self.te_head_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData()
                                self.te_head_data.parent = self
                                self._children_name_map["te_head_data"] = "te-head-data"
                                self._children_yang_names.add("te-head-data")

                                self.dmtc_data = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData()
                                self.dmtc_data.parent = self
                                self._children_name_map["dmtc_data"] = "dmtc-data"
                                self._children_yang_names.add("dmtc-data")
                                self._segment_path = lambda: "moi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi, ['moi_type'], name, value)


                            class PopAndLookupIpv4(Entity):
                                """
                                pop and lookup ipv4
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4, self).__init__()

                                    self.yang_name = "pop-and-lookup-ipv4"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pop-and-lookup-ipv4"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv4, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                            class PopAndLookupTp(Entity):
                                """
                                pop and lookup tp
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp, self).__init__()

                                    self.yang_name = "pop-and-lookup-tp"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_label = None
                                    self._segment_path = lambda: "pop-and-lookup-tp"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupTp, ['table_id', 'table_name', 'path_flags_decode', 'out_label'], name, value)


                            class PopAndLookupIpv6(Entity):
                                """
                                pop and lookup ipv6
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6, self).__init__()

                                    self.yang_name = "pop-and-lookup-ipv6"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pop-and-lookup-ipv6"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PopAndLookupIpv6, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_interface_parent
                                
                                	Outgoing Interface's parent
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	Routing path id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: backup_path_id
                                
                                	Routing path backup id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: load_metric
                                
                                	Routing path's load metric
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_hop_id
                                
                                	Next hop ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: local_label
                                
                                	TE backup path local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('path_id', YLeaf(YType.uint8, 'path-id')),
                                        ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                        ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                        ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_interface_parent = None
                                    self.ipv4_next_hop = None
                                    self.path_id = None
                                    self.backup_path_id = None
                                    self.load_metric = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.tunnel_id = None
                                    self.next_hop_id = None
                                    self.local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: ipv6_next_hop
                                
                                	IPv6 nexthop
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	Routing path id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: backup_path_id
                                
                                	Routing path backup id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_hop_id
                                
                                	Next hop ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_interface_parent
                                
                                	Outgoing Interface's parent
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                        ('path_id', YLeaf(YType.uint8, 'path-id')),
                                        ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                        ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                        ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.ipv6_next_hop = None
                                    self.path_id = None
                                    self.backup_path_id = None
                                    self.next_hop_id = None
                                    self.out_interface_parent = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Ipv6Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                            class Tev4Data(Entity):
                                """
                                tev4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: backup_interface
                                
                                	Backup interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: backup_ipv4_next_hop
                                
                                	Backup IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: merge_point_label
                                
                                	Merge point label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: backup_local_label
                                
                                	Backup local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: tunnel_weight
                                
                                	Tunnel weight
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: data_out_parent_interface
                                
                                	Outgoing data parent interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: tunnel_class
                                
                                	Tunnel class
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data, self).__init__()

                                    self.yang_name = "tev4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ('backup_ipv4_next_hop', YLeaf(YType.str, 'backup-ipv4-next-hop')),
                                        ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                                        ('backup_local_label', YLeaf(YType.uint32, 'backup-local-label')),
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('tunnel_weight', YLeaf(YType.uint32, 'tunnel-weight')),
                                        ('data_out_parent_interface', YLeaf(YType.str, 'data-out-parent-interface')),
                                        ('tunnel_class', YLeaf(YType.uint32, 'tunnel-class')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.ipv4_next_hop = None
                                    self.backup_interface = None
                                    self.backup_ipv4_next_hop = None
                                    self.merge_point_label = None
                                    self.backup_local_label = None
                                    self.tunnel_interface = None
                                    self.tunnel_weight = None
                                    self.data_out_parent_interface = None
                                    self.tunnel_class = None
                                    self._segment_path = lambda: "tev4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Tev4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv4_next_hop', 'backup_interface', 'backup_ipv4_next_hop', 'merge_point_label', 'backup_local_label', 'tunnel_interface', 'tunnel_weight', 'data_out_parent_interface', 'tunnel_class'], name, value)


                            class PseudowireData(Entity):
                                """
                                pseudowire data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: cross_connect_id
                                
                                	Cross\-connect ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pseuodo_wire_connect_id
                                
                                	PseudoWire Cross\-connect ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: bridge_id
                                
                                	Bridge ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: split_horizon_id
                                
                                	Split horizon group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData, self).__init__()

                                    self.yang_name = "pseudowire-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('cross_connect_id', YLeaf(YType.uint32, 'cross-connect-id')),
                                        ('pseuodo_wire_connect_id', YLeaf(YType.uint32, 'pseuodo-wire-connect-id')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('bridge_id', YLeaf(YType.uint32, 'bridge-id')),
                                        ('split_horizon_id', YLeaf(YType.uint32, 'split-horizon-id')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.cross_connect_id = None
                                    self.pseuodo_wire_connect_id = None
                                    self.ipv4_next_hop = None
                                    self.bridge_id = None
                                    self.split_horizon_id = None
                                    self._segment_path = lambda: "pseudowire-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'cross_connect_id', 'pseuodo_wire_connect_id', 'ipv4_next_hop', 'bridge_id', 'split_horizon_id'], name, value)


                            class IpSubData(Entity):
                                """
                                ip sub data
                                
                                .. attribute:: table_id
                                
                                	VRF table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData, self).__init__()

                                    self.yang_name = "ip-sub-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.out_interface = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "ip-sub-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.IpSubData, ['table_id', 'table_name', 'out_interface', 'path_flags_decode'], name, value)


                            class PseudowireHeadEndData(Entity):
                                """
                                pseudowire head end data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: control_word
                                
                                	Is control word present
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: imposition
                                
                                	Is PWHE IMposition
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: vctype
                                
                                	Virtual Circuit Type
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: pw_list_id
                                
                                	Pseudo\-wire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: pwhe_interface
                                
                                	Pseudo\-wire Head\-end interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData, self).__init__()

                                    self.yang_name = "pseudowire-head-end-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('control_word', YLeaf(YType.int32, 'control-word')),
                                        ('imposition', YLeaf(YType.int32, 'imposition')),
                                        ('vctype', YLeaf(YType.uint8, 'vctype')),
                                        ('pw_list_id', YLeaf(YType.uint16, 'pw-list-id')),
                                        ('pwhe_interface', YLeaf(YType.str, 'pwhe-interface')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.ipv4_next_hop = None
                                    self.control_word = None
                                    self.imposition = None
                                    self.vctype = None
                                    self.pw_list_id = None
                                    self.pwhe_interface = None
                                    self._segment_path = lambda: "pseudowire-head-end-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PseudowireHeadEndData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'ipv4_next_hop', 'control_word', 'imposition', 'vctype', 'pw_list_id', 'pwhe_interface'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: l3_interface
                                
                                	Pseudo\-wire Layer 3 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: l2_interface
                                
                                	Pseudo\-wire Layer 2 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('l3_interface', YLeaf(YType.str, 'l3-interface')),
                                        ('l2_interface', YLeaf(YType.str, 'l2-interface')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.l3_interface = None
                                    self.l2_interface = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.PwListData, ['table_id', 'table_name', 'l3_interface', 'l2_interface', 'path_flags_decode'], name, value)


                            class Stackv4Data(Entity):
                                """
                                stackv4 data
                                
                                .. attribute:: nexthop
                                
                                	Nexthop
                                	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop>`
                                
                                .. attribute:: inner_stack
                                
                                	Inner stack
                                	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack>`
                                
                                .. attribute:: owner_application_type
                                
                                	Owner application type
                                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data, self).__init__()

                                    self.yang_name = "stackv4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('owner_application_type', YLeaf(YType.enumeration, 'owner-application-type')),
                                    ])
                                    self.owner_application_type = None

                                    self.nexthop = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop()
                                    self.nexthop.parent = self
                                    self._children_name_map["nexthop"] = "nexthop"
                                    self._children_yang_names.add("nexthop")

                                    self.inner_stack = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack()
                                    self.inner_stack.parent = self
                                    self._children_name_map["inner_stack"] = "inner-stack"
                                    self._children_yang_names.add("inner-stack")
                                    self._segment_path = lambda: "stackv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data, ['owner_application_type'], name, value)


                                class Nexthop(Entity):
                                    """
                                    Nexthop
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: load_metric
                                    
                                    	Routing path's load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_label
                                    
                                    	TE backup path local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop, self).__init__()

                                        self.yang_name = "nexthop"
                                        self.yang_parent_name = "stackv4-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('local_label', YLeaf(YType.uint32, 'local-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_interface_parent = None
                                        self.ipv4_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.load_metric = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.tunnel_id = None
                                        self.next_hop_id = None
                                        self.local_label = None
                                        self._segment_path = lambda: "nexthop"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                class InnerStack(Entity):
                                    """
                                    Inner stack
                                    
                                    .. attribute:: num_nexthops
                                    
                                    	Number of remote nexthop addresses
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: num_lbls
                                    
                                    	Depth of inner label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nexthop
                                    
                                    	Remote nexthop addresses
                                    	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop>`
                                    
                                    .. attribute:: label
                                    
                                    	Info related to outgoing labels
                                    	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack, self).__init__()

                                        self.yang_name = "inner-stack"
                                        self.yang_parent_name = "stackv4-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop)), ("label", ("label", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label))])
                                        self._leafs = OrderedDict([
                                            ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                            ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                        ])
                                        self.num_nexthops = None
                                        self.num_lbls = None

                                        self.nexthop = YList(self)
                                        self.label = YList(self)
                                        self._segment_path = lambda: "inner-stack"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Remote nexthop addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, ['entry'], name, value)


                                    class Label(Entity):
                                        """
                                        Info related to outgoing labels
                                        
                                        .. attribute:: outgoing_label
                                        
                                        	Remote Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outgoing_label_str
                                        
                                        	Remote Label string
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, self).__init__()

                                            self.yang_name = "label"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                            ])
                                            self.outgoing_label = None
                                            self.outgoing_label_str = None
                                            self._segment_path = lambda: "label"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                            class Stackv6Data(Entity):
                                """
                                stackv6 data
                                
                                .. attribute:: nexthop
                                
                                	Nexthop
                                	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop>`
                                
                                .. attribute:: inner_stack
                                
                                	Inner stack
                                	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data, self).__init__()

                                    self.yang_name = "stackv6-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.nexthop = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop()
                                    self.nexthop.parent = self
                                    self._children_name_map["nexthop"] = "nexthop"
                                    self._children_yang_names.add("nexthop")

                                    self.inner_stack = MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack()
                                    self.inner_stack.parent = self
                                    self._children_name_map["inner_stack"] = "inner-stack"
                                    self._children_yang_names.add("inner-stack")
                                    self._segment_path = lambda: "stackv6-data"


                                class Nexthop(Entity):
                                    """
                                    Nexthop
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop, self).__init__()

                                        self.yang_name = "nexthop"
                                        self.yang_parent_name = "stackv6-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv6_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.next_hop_id = None
                                        self.out_interface_parent = None
                                        self._segment_path = lambda: "nexthop"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                class InnerStack(Entity):
                                    """
                                    Inner stack
                                    
                                    .. attribute:: num_nexthops
                                    
                                    	Number of remote nexthop addresses
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: num_lbls
                                    
                                    	Depth of inner label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nexthop
                                    
                                    	Remote nexthop addresses
                                    	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop>`
                                    
                                    .. attribute:: label
                                    
                                    	Info related to outgoing labels
                                    	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack, self).__init__()

                                        self.yang_name = "inner-stack"
                                        self.yang_parent_name = "stackv6-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop)), ("label", ("label", MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label))])
                                        self._leafs = OrderedDict([
                                            ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                            ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                        ])
                                        self.num_nexthops = None
                                        self.num_lbls = None

                                        self.nexthop = YList(self)
                                        self.label = YList(self)
                                        self._segment_path = lambda: "inner-stack"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Remote nexthop addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, ['entry'], name, value)


                                    class Label(Entity):
                                        """
                                        Info related to outgoing labels
                                        
                                        .. attribute:: outgoing_label
                                        
                                        	Remote Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outgoing_label_str
                                        
                                        	Remote Label string
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, self).__init__()

                                            self.yang_name = "label"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                            ])
                                            self.outgoing_label = None
                                            self.outgoing_label_str = None
                                            self._segment_path = lambda: "label"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                            class TeHeadData(Entity):
                                """
                                te head data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: tunnel_local_label
                                
                                	Tunnel local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_local_label_str
                                
                                	Tunnel local label stringified
                                	**type**\: str
                                
                                .. attribute:: tunnel_fwd_class
                                
                                	Tunnel forwarding class
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: tunnel_load_metric
                                
                                	Tunnel Load metric
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flags_decode
                                
                                	Flags decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData, self).__init__()

                                    self.yang_name = "te-head-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('tunnel_local_label', YLeaf(YType.uint32, 'tunnel-local-label')),
                                        ('tunnel_local_label_str', YLeaf(YType.str, 'tunnel-local-label-str')),
                                        ('tunnel_fwd_class', YLeaf(YType.uint8, 'tunnel-fwd-class')),
                                        ('tunnel_load_metric', YLeaf(YType.uint32, 'tunnel-load-metric')),
                                        ('flags_decode', YLeaf(YType.str, 'flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.tunnel_local_label = None
                                    self.tunnel_local_label_str = None
                                    self.tunnel_fwd_class = None
                                    self.tunnel_load_metric = None
                                    self.flags_decode = None
                                    self._segment_path = lambda: "te-head-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.TeHeadData, ['table_id', 'table_name', 'tunnel_local_label', 'tunnel_local_label_str', 'tunnel_fwd_class', 'tunnel_load_metric', 'flags_decode'], name, value)


                            class DmtcData(Entity):
                                """
                                dmtc data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData, self).__init__()

                                    self.yang_name = "dmtc-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteTes.RewriteTe.Mois.MoiArray.Moi.DmtcData, ['dmtc_ext_ifh'], name, value)


        class RewriteLabels(Entity):
            """
            Table of Rewrites
            
            .. attribute:: rewrite_label
            
            	FPI rewrite for label
            	**type**\: list of  		 :py:class:`RewriteLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.Rewrite.RewriteLabels, self).__init__()

                self.yang_name = "rewrite-labels"
                self.yang_parent_name = "rewrite"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("rewrite-label", ("rewrite_label", MplsLsd.Rewrite.RewriteLabels.RewriteLabel))])
                self._leafs = OrderedDict()

                self.rewrite_label = YList(self)
                self._segment_path = lambda: "rewrite-labels"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels, [], name, value)


            class RewriteLabel(Entity):
                """
                FPI rewrite for label
                
                .. attribute:: label_id  (key)
                
                	Label value
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: fpi_key
                
                	fpi key
                	**type**\:  :py:class:`FpiKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey>`
                
                .. attribute:: rewrite_id
                
                	Rewrite ID
                	**type**\:  :py:class:`RewriteId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId>`
                
                .. attribute:: rewrite_version
                
                	Rewrite version
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: bcdl_priority
                
                	BCDL Priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: lsd_queue
                
                	LSD queue
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rw_install_time
                
                	Rewrite install timestamp
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: rw_install_age
                
                	Rewrite install age
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: rw_updated
                
                	Is rewrite ever updated
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: priority_updated
                
                	Is rewrite's BCDL priority updated
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: associated_fpi
                
                	Associated FPI
                	**type**\: list of  		 :py:class:`AssociatedFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi>`
                
                .. attribute:: v4_rpf
                
                	IPv4 RPF neighbors
                	**type**\: list of  		 :py:class:`V4Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.V4Rpf>`
                
                .. attribute:: v6_rpf
                
                	IPv6 RPF neighbors
                	**type**\: list of  		 :py:class:`V6Rpf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.V6Rpf>`
                
                .. attribute:: mois
                
                	Mois
                	**type**\: list of  		 :py:class:`Mois <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel, self).__init__()

                    self.yang_name = "rewrite-label"
                    self.yang_parent_name = "rewrite-labels"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['label_id']
                    self._child_container_classes = OrderedDict([("fpi-key", ("fpi_key", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey)), ("rewrite-id", ("rewrite_id", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId))])
                    self._child_list_classes = OrderedDict([("associated-fpi", ("associated_fpi", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi)), ("v4-rpf", ("v4_rpf", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.V4Rpf)), ("v6-rpf", ("v6_rpf", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.V6Rpf)), ("mois", ("mois", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois))])
                    self._leafs = OrderedDict([
                        ('label_id', YLeaf(YType.int32, 'label-id')),
                        ('rewrite_version', YLeaf(YType.uint64, 'rewrite-version')),
                        ('bcdl_priority', YLeaf(YType.uint8, 'bcdl-priority')),
                        ('lsd_queue', YLeaf(YType.uint8, 'lsd-queue')),
                        ('rw_install_time', YLeaf(YType.uint64, 'rw-install-time')),
                        ('rw_install_age', YLeaf(YType.uint64, 'rw-install-age')),
                        ('rw_updated', YLeaf(YType.int32, 'rw-updated')),
                        ('priority_updated', YLeaf(YType.int32, 'priority-updated')),
                    ])
                    self.label_id = None
                    self.rewrite_version = None
                    self.bcdl_priority = None
                    self.lsd_queue = None
                    self.rw_install_time = None
                    self.rw_install_age = None
                    self.rw_updated = None
                    self.priority_updated = None

                    self.fpi_key = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey()
                    self.fpi_key.parent = self
                    self._children_name_map["fpi_key"] = "fpi-key"
                    self._children_yang_names.add("fpi-key")

                    self.rewrite_id = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId()
                    self.rewrite_id.parent = self
                    self._children_name_map["rewrite_id"] = "rewrite-id"
                    self._children_yang_names.add("rewrite-id")

                    self.associated_fpi = YList(self)
                    self.v4_rpf = YList(self)
                    self.v6_rpf = YList(self)
                    self.mois = YList(self)
                    self._segment_path = lambda: "rewrite-label" + "[label-id='" + str(self.label_id) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite/rewrite-labels/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel, ['label_id', 'rewrite_version', 'bcdl_priority', 'lsd_queue', 'rw_install_time', 'rw_install_age', 'rw_updated', 'priority_updated'], name, value)


                class FpiKey(Entity):
                    """
                    fpi key
                    
                    .. attribute:: fpi
                    
                    	FPI
                    	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi>`
                    
                    .. attribute:: application_owner
                    
                    	Application owner instance
                    	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.ApplicationOwner>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey, self).__init__()

                        self.yang_name = "fpi-key"
                        self.yang_parent_name = "rewrite-label"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi))])
                        self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.ApplicationOwner))])
                        self._leafs = OrderedDict()

                        self.fpi = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi()
                        self.fpi.parent = self
                        self._children_name_map["fpi"] = "fpi"
                        self._children_yang_names.add("fpi")

                        self.application_owner = YList(self)
                        self._segment_path = lambda: "fpi-key"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey, [], name, value)


                    class Fpi(Entity):
                        """
                        FPI
                        
                        .. attribute:: label_data
                        
                        	label data
                        	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData>`
                        
                        .. attribute:: te_data
                        
                        	te data
                        	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData>`
                        
                        .. attribute:: ipv4_data
                        
                        	ipv4 data
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	ipv6 data
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data>`
                        
                        .. attribute:: pw_list_data
                        
                        	pw list data
                        	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData>`
                        
                        .. attribute:: dmtc_ext_intf_data
                        
                        	dmtc ext intf data
                        	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData>`
                        
                        .. attribute:: fpi_type
                        
                        	FPIType
                        	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi, self).__init__()

                            self.yang_name = "fpi"
                            self.yang_parent_name = "fpi-key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData)), ("te-data", ("te_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                            ])
                            self.fpi_type = None

                            self.label_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData()
                            self.label_data.parent = self
                            self._children_name_map["label_data"] = "label-data"
                            self._children_yang_names.add("label-data")

                            self.te_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData()
                            self.te_data.parent = self
                            self._children_name_map["te_data"] = "te-data"
                            self._children_yang_names.add("te-data")

                            self.ipv4_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.pw_list_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData()
                            self.pw_list_data.parent = self
                            self._children_name_map["pw_list_data"] = "pw-list-data"
                            self._children_yang_names.add("pw-list-data")

                            self.dmtc_ext_intf_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData()
                            self.dmtc_ext_intf_data.parent = self
                            self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                            self._children_yang_names.add("dmtc-ext-intf-data")
                            self._segment_path = lambda: "fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi, ['fpi_type'], name, value)


                        class LabelData(Entity):
                            """
                            label data
                            
                            .. attribute:: label
                            
                            	Label value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: elc
                            
                            	ELC
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData, self).__init__()

                                self.yang_name = "label-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('elc', YLeaf(YType.int32, 'elc')),
                                ])
                                self.label = None
                                self.security_id = None
                                self.elc = None
                                self._segment_path = lambda: "label-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                        class TeData(Entity):
                            """
                            te data
                            
                            .. attribute:: tunnel_interface
                            
                            	Tunnel interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: local_label
                            
                            	Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData, self).__init__()

                                self.yang_name = "te-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                    ('local_label', YLeaf(YType.uint32, 'local-label')),
                                ])
                                self.tunnel_interface = None
                                self.local_label = None
                                self._segment_path = lambda: "te-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                        class Ipv4Data(Entity):
                            """
                            ipv4 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sr_local_label
                            
                            	SR related Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                    ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.version = None
                                self.sr_local_label = None
                                self._segment_path = lambda: "ipv4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                        class Ipv6Data(Entity):
                            """
                            ipv6 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: router_flags
                            
                            	Route flags
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix_len
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                    ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.router_flags = None
                                self.prefix_len = None
                                self.version = None
                                self._segment_path = lambda: "ipv6-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                        class PwListData(Entity):
                            """
                            pw list data
                            
                            .. attribute:: pwhe_list_id
                            
                            	Pseudowire List Identifier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData, self).__init__()

                                self.yang_name = "pw-list-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                ])
                                self.pwhe_list_id = None
                                self._segment_path = lambda: "pw-list-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.PwListData, ['pwhe_list_id'], name, value)


                        class DmtcExtIntfData(Entity):
                            """
                            dmtc ext intf data
                            
                            .. attribute:: dmtc_ext_ifh
                            
                            	DMTC External Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData, self).__init__()

                                self.yang_name = "dmtc-ext-intf-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                ])
                                self.dmtc_ext_ifh = None
                                self._segment_path = lambda: "dmtc-ext-intf-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                    class ApplicationOwner(Entity):
                        """
                        Application owner instance
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.ApplicationOwner, self).__init__()

                            self.yang_name = "application-owner"
                            self.yang_parent_name = "fpi-key"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-owner"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.FpiKey.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                class RewriteId(Entity):
                    """
                    Rewrite ID
                    
                    .. attribute:: rewrite_id
                    
                    	Rewrite ID
                    	**type**\:  :py:class:`RewriteId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId, self).__init__()

                        self.yang_name = "rewrite-id"
                        self.yang_parent_name = "rewrite-label"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("rewrite-id", ("rewrite_id", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.rewrite_id = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_()
                        self.rewrite_id.parent = self
                        self._children_name_map["rewrite_id"] = "rewrite-id"
                        self._children_yang_names.add("rewrite-id")
                        self._segment_path = lambda: "rewrite-id"


                    class RewriteId_(Entity):
                        """
                        Rewrite ID
                        
                        .. attribute:: label_context
                        
                        	Label context
                        	**type**\:  :py:class:`LabelContext <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext>`
                        
                        .. attribute:: local_label_rewrite
                        
                        	Local label rewrite information
                        	**type**\:  :py:class:`LocalLabelRewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite>`
                        
                        .. attribute:: rewrite_id_type
                        
                        	RewriteIDType
                        	**type**\:  :py:class:`MgmtLsdRwId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdRwId>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_, self).__init__()

                            self.yang_name = "rewrite-id"
                            self.yang_parent_name = "rewrite-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-context", ("label_context", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext)), ("local-label-rewrite", ("local_label_rewrite", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rewrite_id_type', YLeaf(YType.enumeration, 'rewrite-id-type')),
                            ])
                            self.rewrite_id_type = None

                            self.label_context = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext()
                            self.label_context.parent = self
                            self._children_name_map["label_context"] = "label-context"
                            self._children_yang_names.add("label-context")

                            self.local_label_rewrite = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite()
                            self.local_label_rewrite.parent = self
                            self._children_name_map["local_label_rewrite"] = "local-label-rewrite"
                            self._children_yang_names.add("local-label-rewrite")
                            self._segment_path = lambda: "rewrite-id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_, ['rewrite_id_type'], name, value)


                        class LabelContext(Entity):
                            """
                            Label context
                            
                            .. attribute:: ipv4_data
                            
                            	IPv4 label context
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	IPv6 label context
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data>`
                            
                            .. attribute:: tev4_data
                            
                            	TEv4 label context
                            	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data>`
                            
                            .. attribute:: ipv4l3vpn_data
                            
                            	L3VPN IPv4 label context
                            	**type**\:  :py:class:`Ipv4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData>`
                            
                            .. attribute:: ipv6l3vpn_data
                            
                            	L3VPN IPv6 label context
                            	**type**\:  :py:class:`Ipv6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData>`
                            
                            .. attribute:: vrf_l3vpn_data
                            
                            	L3VPN VRF label context
                            	**type**\:  :py:class:`VrfL3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData>`
                            
                            .. attribute:: cev4l3vpn_data
                            
                            	L3VPN CEv4 label context
                            	**type**\:  :py:class:`Cev4L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData>`
                            
                            .. attribute:: cev6l3vpn_data
                            
                            	L3VPN CEv6 label context
                            	**type**\:  :py:class:`Cev6L3VpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData>`
                            
                            .. attribute:: pseudowire_data
                            
                            	Pseudowire label context
                            	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData>`
                            
                            .. attribute:: label_block_data
                            
                            	Label block context
                            	**type**\:  :py:class:`LabelBlockData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData>`
                            
                            .. attribute:: ip_sub_data
                            
                            	IP Subscriber context
                            	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData>`
                            
                            .. attribute:: tev4p2mp_data
                            
                            	TEv4 P2MP context
                            	**type**\:  :py:class:`Tev4P2MpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData>`
                            
                            .. attribute:: mld_pv4_data
                            
                            	MLDPv4 LSM\-ID context
                            	**type**\:  :py:class:`MldPv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data>`
                            
                            .. attribute:: pseudowire_head_end_data
                            
                            	Pseudowire Head\-end label context
                            	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData>`
                            
                            .. attribute:: tp_data
                            
                            	TP context
                            	**type**\:  :py:class:`TpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData>`
                            
                            .. attribute:: generic_routing_encapsulation
                            
                            	Generic routing encapsulation context
                            	**type**\:  :py:class:`GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation>`
                            
                            .. attribute:: ipv6_generic_routing_encapsulation
                            
                            	Generic routing encapsulation context
                            	**type**\:  :py:class:`Ipv6GenericRoutingEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation>`
                            
                            .. attribute:: evpn_data
                            
                            	EVPN context
                            	**type**\:  :py:class:`EvpnData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData>`
                            
                            .. attribute:: ipv4blb_data
                            
                            	BFD BLB label context
                            	**type**\:  :py:class:`Ipv4BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData>`
                            
                            .. attribute:: ipv6blb_data
                            
                            	BFD BLB label context
                            	**type**\:  :py:class:`Ipv6BlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData>`
                            
                            .. attribute:: pi_mi_pmsi_data
                            
                            	PIM I\-PMSI label conext
                            	**type**\:  :py:class:`PiMiPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData>`
                            
                            .. attribute:: pi_ms_pmsi_data
                            
                            	PIM S\-PMSI label conext
                            	**type**\:  :py:class:`PiMsPmsiData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData>`
                            
                            .. attribute:: next_hop_set_l3vpn
                            
                            	L3VPN NH SET label context
                            	**type**\:  :py:class:`NextHopSetL3Vpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn>`
                            
                            .. attribute:: sr_prefix_segment
                            
                            	SR Prefix Segment context
                            	**type**\:  :py:class:`SrPrefixSegment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment>`
                            
                            .. attribute:: sr_adj_segment_ipv4
                            
                            	SR Adj Segment ipv4 context
                            	**type**\:  :py:class:`SrAdjSegmentIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4>`
                            
                            .. attribute:: sr_adj_segment_ipv6
                            
                            	SR Adj Segment ipv6 context
                            	**type**\:  :py:class:`SrAdjSegmentIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6>`
                            
                            .. attribute:: label_block_srgb_data
                            
                            	Label block SRGB context
                            	**type**\:  :py:class:`LabelBlockSrgbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData>`
                            
                            .. attribute:: te_binding
                            
                            	MPLS TE tunnel binding context
                            	**type**\:  :py:class:`TeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding>`
                            
                            .. attribute:: label_block_srlb_data
                            
                            	Label block SRLB context
                            	**type**\:  :py:class:`LabelBlockSrlbData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData>`
                            
                            .. attribute:: label_context_type
                            
                            	LabelContextType
                            	**type**\:  :py:class:`MgmtLsdLblCtx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdLblCtx>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext, self).__init__()

                                self.yang_name = "label-context"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data)), ("ipv4l3vpn-data", ("ipv4l3vpn_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData)), ("ipv6l3vpn-data", ("ipv6l3vpn_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData)), ("vrf-l3vpn-data", ("vrf_l3vpn_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData)), ("cev4l3vpn-data", ("cev4l3vpn_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData)), ("cev6l3vpn-data", ("cev6l3vpn_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData)), ("label-block-data", ("label_block_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData)), ("tev4p2mp-data", ("tev4p2mp_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData)), ("mld-pv4-data", ("mld_pv4_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData)), ("tp-data", ("tp_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData)), ("generic-routing-encapsulation", ("generic_routing_encapsulation", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation)), ("ipv6-generic-routing-encapsulation", ("ipv6_generic_routing_encapsulation", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation)), ("evpn-data", ("evpn_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData)), ("ipv4blb-data", ("ipv4blb_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData)), ("ipv6blb-data", ("ipv6blb_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData)), ("pi-mi-pmsi-data", ("pi_mi_pmsi_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData)), ("pi-ms-pmsi-data", ("pi_ms_pmsi_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData)), ("next-hop-set-l3vpn", ("next_hop_set_l3vpn", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn)), ("sr-prefix-segment", ("sr_prefix_segment", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment)), ("sr-adj-segment-ipv4", ("sr_adj_segment_ipv4", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4)), ("sr-adj-segment-ipv6", ("sr_adj_segment_ipv6", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6)), ("label-block-srgb-data", ("label_block_srgb_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData)), ("te-binding", ("te_binding", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding)), ("label-block-srlb-data", ("label_block_srlb_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label_context_type', YLeaf(YType.enumeration, 'label-context-type')),
                                ])
                                self.label_context_type = None

                                self.ipv4_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.tev4_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data()
                                self.tev4_data.parent = self
                                self._children_name_map["tev4_data"] = "tev4-data"
                                self._children_yang_names.add("tev4-data")

                                self.ipv4l3vpn_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData()
                                self.ipv4l3vpn_data.parent = self
                                self._children_name_map["ipv4l3vpn_data"] = "ipv4l3vpn-data"
                                self._children_yang_names.add("ipv4l3vpn-data")

                                self.ipv6l3vpn_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData()
                                self.ipv6l3vpn_data.parent = self
                                self._children_name_map["ipv6l3vpn_data"] = "ipv6l3vpn-data"
                                self._children_yang_names.add("ipv6l3vpn-data")

                                self.vrf_l3vpn_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData()
                                self.vrf_l3vpn_data.parent = self
                                self._children_name_map["vrf_l3vpn_data"] = "vrf-l3vpn-data"
                                self._children_yang_names.add("vrf-l3vpn-data")

                                self.cev4l3vpn_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData()
                                self.cev4l3vpn_data.parent = self
                                self._children_name_map["cev4l3vpn_data"] = "cev4l3vpn-data"
                                self._children_yang_names.add("cev4l3vpn-data")

                                self.cev6l3vpn_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData()
                                self.cev6l3vpn_data.parent = self
                                self._children_name_map["cev6l3vpn_data"] = "cev6l3vpn-data"
                                self._children_yang_names.add("cev6l3vpn-data")

                                self.pseudowire_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData()
                                self.pseudowire_data.parent = self
                                self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                self._children_yang_names.add("pseudowire-data")

                                self.label_block_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData()
                                self.label_block_data.parent = self
                                self._children_name_map["label_block_data"] = "label-block-data"
                                self._children_yang_names.add("label-block-data")

                                self.ip_sub_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData()
                                self.ip_sub_data.parent = self
                                self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                self._children_yang_names.add("ip-sub-data")

                                self.tev4p2mp_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData()
                                self.tev4p2mp_data.parent = self
                                self._children_name_map["tev4p2mp_data"] = "tev4p2mp-data"
                                self._children_yang_names.add("tev4p2mp-data")

                                self.mld_pv4_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data()
                                self.mld_pv4_data.parent = self
                                self._children_name_map["mld_pv4_data"] = "mld-pv4-data"
                                self._children_yang_names.add("mld-pv4-data")

                                self.pseudowire_head_end_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData()
                                self.pseudowire_head_end_data.parent = self
                                self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                self._children_yang_names.add("pseudowire-head-end-data")

                                self.tp_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData()
                                self.tp_data.parent = self
                                self._children_name_map["tp_data"] = "tp-data"
                                self._children_yang_names.add("tp-data")

                                self.generic_routing_encapsulation = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation()
                                self.generic_routing_encapsulation.parent = self
                                self._children_name_map["generic_routing_encapsulation"] = "generic-routing-encapsulation"
                                self._children_yang_names.add("generic-routing-encapsulation")

                                self.ipv6_generic_routing_encapsulation = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation()
                                self.ipv6_generic_routing_encapsulation.parent = self
                                self._children_name_map["ipv6_generic_routing_encapsulation"] = "ipv6-generic-routing-encapsulation"
                                self._children_yang_names.add("ipv6-generic-routing-encapsulation")

                                self.evpn_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData()
                                self.evpn_data.parent = self
                                self._children_name_map["evpn_data"] = "evpn-data"
                                self._children_yang_names.add("evpn-data")

                                self.ipv4blb_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData()
                                self.ipv4blb_data.parent = self
                                self._children_name_map["ipv4blb_data"] = "ipv4blb-data"
                                self._children_yang_names.add("ipv4blb-data")

                                self.ipv6blb_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData()
                                self.ipv6blb_data.parent = self
                                self._children_name_map["ipv6blb_data"] = "ipv6blb-data"
                                self._children_yang_names.add("ipv6blb-data")

                                self.pi_mi_pmsi_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData()
                                self.pi_mi_pmsi_data.parent = self
                                self._children_name_map["pi_mi_pmsi_data"] = "pi-mi-pmsi-data"
                                self._children_yang_names.add("pi-mi-pmsi-data")

                                self.pi_ms_pmsi_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData()
                                self.pi_ms_pmsi_data.parent = self
                                self._children_name_map["pi_ms_pmsi_data"] = "pi-ms-pmsi-data"
                                self._children_yang_names.add("pi-ms-pmsi-data")

                                self.next_hop_set_l3vpn = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn()
                                self.next_hop_set_l3vpn.parent = self
                                self._children_name_map["next_hop_set_l3vpn"] = "next-hop-set-l3vpn"
                                self._children_yang_names.add("next-hop-set-l3vpn")

                                self.sr_prefix_segment = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment()
                                self.sr_prefix_segment.parent = self
                                self._children_name_map["sr_prefix_segment"] = "sr-prefix-segment"
                                self._children_yang_names.add("sr-prefix-segment")

                                self.sr_adj_segment_ipv4 = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4()
                                self.sr_adj_segment_ipv4.parent = self
                                self._children_name_map["sr_adj_segment_ipv4"] = "sr-adj-segment-ipv4"
                                self._children_yang_names.add("sr-adj-segment-ipv4")

                                self.sr_adj_segment_ipv6 = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6()
                                self.sr_adj_segment_ipv6.parent = self
                                self._children_name_map["sr_adj_segment_ipv6"] = "sr-adj-segment-ipv6"
                                self._children_yang_names.add("sr-adj-segment-ipv6")

                                self.label_block_srgb_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData()
                                self.label_block_srgb_data.parent = self
                                self._children_name_map["label_block_srgb_data"] = "label-block-srgb-data"
                                self._children_yang_names.add("label-block-srgb-data")

                                self.te_binding = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding()
                                self.te_binding.parent = self
                                self._children_name_map["te_binding"] = "te-binding"
                                self._children_yang_names.add("te-binding")

                                self.label_block_srlb_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData()
                                self.label_block_srlb_data.parent = self
                                self._children_name_map["label_block_srlb_data"] = "label-block-srlb-data"
                                self._children_yang_names.add("label-block-srlb-data")
                                self._segment_path = lambda: "label-context"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext, ['label_context_type'], name, value)


                            class Ipv4Data(Entity):
                                """
                                IPv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	IPv4 prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: vrf_name
                                
                                	VRF Name
                                	**type**\: str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.security_id = None
                                    self.vrf_name = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                            class Ipv6Data(Entity):
                                """
                                IPv6 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix
                                
                                	Prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: vrf_name
                                
                                	VRF Name
                                	**type**\: str
                                
                                	**length:** 0..33
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                        ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                                    ])
                                    self.table_id = None
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.security_id = None
                                    self.vrf_name = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6Data, ['table_id', 'prefix', 'prefix_length', 'security_id', 'vrf_name'], name, value)


                            class Tev4Data(Entity):
                                """
                                TEv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_source
                                
                                	Tunnel source
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: tunnel_dest
                                
                                	Tunnel destination
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id_extension
                                
                                	Extended tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_lsp_id
                                
                                	Tunnel LSP ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: is_srte
                                
                                	Is this an SRTE head tunnel
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data, self).__init__()

                                    self.yang_name = "tev4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                        ('tunnel_dest', YLeaf(YType.str, 'tunnel-dest')),
                                        ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                        ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                        ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                        ('is_srte', YLeaf(YType.int32, 'is-srte')),
                                    ])
                                    self.table_id = None
                                    self.tunnel_source = None
                                    self.tunnel_dest = None
                                    self.tunnel_id = None
                                    self.tunnel_id_extension = None
                                    self.tunnel_lsp_id = None
                                    self.is_srte = None
                                    self._segment_path = lambda: "tev4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4Data, ['table_id', 'tunnel_source', 'tunnel_dest', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'is_srte'], name, value)


                            class Ipv4L3VpnData(Entity):
                                """
                                L3VPN IPv4 label context
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: route_distinguisher
                                
                                	Route distinguisher
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, self).__init__()

                                    self.yang_name = "ipv4l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.route_distinguisher = None
                                    self._segment_path = lambda: "ipv4l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                            class Ipv6L3VpnData(Entity):
                                """
                                L3VPN IPv6 label context
                                
                                .. attribute:: prefix
                                
                                	IPv6 prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	Prefix length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: route_distinguisher
                                
                                	Route distinguisher
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, self).__init__()

                                    self.yang_name = "ipv6l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                        ('route_distinguisher', YLeaf(YType.uint64, 'route-distinguisher')),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.route_distinguisher = None
                                    self._segment_path = lambda: "ipv6l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6L3VpnData, ['prefix', 'prefix_length', 'route_distinguisher'], name, value)


                            class VrfL3VpnData(Entity):
                                """
                                L3VPN VRF label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, self).__init__()

                                    self.yang_name = "vrf-l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.security_id = None
                                    self._segment_path = lambda: "vrf-l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.VrfL3VpnData, ['table_id', 'security_id'], name, value)


                            class Cev4L3VpnData(Entity):
                                """
                                L3VPN CEv4 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, self).__init__()

                                    self.yang_name = "cev4l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.ipv4_next_hop = None
                                    self.security_id = None
                                    self._segment_path = lambda: "cev4l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev4L3VpnData, ['table_id', 'ipv4_next_hop', 'security_id'], name, value)


                            class Cev6L3VpnData(Entity):
                                """
                                L3VPN CEv6 label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv6_next_hop
                                
                                	IPv6 nexthop
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: security_id
                                
                                	Security ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, self).__init__()

                                    self.yang_name = "cev6l3vpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                        ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ])
                                    self.table_id = None
                                    self.ipv6_next_hop = None
                                    self.security_id = None
                                    self._segment_path = lambda: "cev6l3vpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Cev6L3VpnData, ['table_id', 'ipv6_next_hop', 'security_id'], name, value)


                            class PseudowireData(Entity):
                                """
                                Pseudowire label context
                                
                                .. attribute:: prefix
                                
                                	Address prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: pseudowire_id
                                
                                	Pseudo\-wire ID
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: remote_l2_router_id
                                
                                	Remote L2 Router ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: subinterface
                                
                                	Subinterface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData, self).__init__()

                                    self.yang_name = "pseudowire-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                        ('pseudowire_id', YLeaf(YType.uint64, 'pseudowire-id')),
                                        ('remote_l2_router_id', YLeaf(YType.uint32, 'remote-l2-router-id')),
                                        ('subinterface', YLeaf(YType.str, 'subinterface')),
                                    ])
                                    self.prefix = None
                                    self.pseudowire_id = None
                                    self.remote_l2_router_id = None
                                    self.subinterface = None
                                    self._segment_path = lambda: "pseudowire-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireData, ['prefix', 'pseudowire_id', 'remote_l2_router_id', 'subinterface'], name, value)


                            class LabelBlockData(Entity):
                                """
                                Label block context
                                
                                .. attribute:: service
                                
                                	Service
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: vpn_id
                                
                                	VPN ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: edge_id
                                
                                	Edge ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData, self).__init__()

                                    self.yang_name = "label-block-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('service', YLeaf(YType.uint8, 'service')),
                                        ('vpn_id', YLeaf(YType.uint16, 'vpn-id')),
                                        ('edge_id', YLeaf(YType.uint16, 'edge-id')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.service = None
                                    self.vpn_id = None
                                    self.edge_id = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockData, ['service', 'vpn_id', 'edge_id', 'offset', 'size'], name, value)


                            class IpSubData(Entity):
                                """
                                IP Subscriber context
                                
                                .. attribute:: table_id
                                
                                	Table Id
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: parent_interface
                                
                                	Parent interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData, self).__init__()

                                    self.yang_name = "ip-sub-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('parent_interface', YLeaf(YType.str, 'parent-interface')),
                                    ])
                                    self.table_id = None
                                    self.parent_interface = None
                                    self._segment_path = lambda: "ip-sub-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.IpSubData, ['table_id', 'parent_interface'], name, value)


                            class Tev4P2MpData(Entity):
                                """
                                TEv4 P2MP context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_source
                                
                                	Tunnel source
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: p2mp_id
                                
                                	Point to multipoint ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_id_extension
                                
                                	Tunnel ID extension
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_lsp_id
                                
                                	Tunnel LSP ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: previous_hop
                                
                                	Previous hop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, self).__init__()

                                    self.yang_name = "tev4p2mp-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('tunnel_source', YLeaf(YType.str, 'tunnel-source')),
                                        ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                        ('tunnel_id', YLeaf(YType.uint32, 'tunnel-id')),
                                        ('tunnel_id_extension', YLeaf(YType.uint32, 'tunnel-id-extension')),
                                        ('tunnel_lsp_id', YLeaf(YType.uint32, 'tunnel-lsp-id')),
                                        ('previous_hop', YLeaf(YType.str, 'previous-hop')),
                                    ])
                                    self.table_id = None
                                    self.tunnel_source = None
                                    self.p2mp_id = None
                                    self.tunnel_id = None
                                    self.tunnel_id_extension = None
                                    self.tunnel_lsp_id = None
                                    self.previous_hop = None
                                    self._segment_path = lambda: "tev4p2mp-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Tev4P2MpData, ['table_id', 'tunnel_source', 'p2mp_id', 'tunnel_id', 'tunnel_id_extension', 'tunnel_lsp_id', 'previous_hop'], name, value)


                            class MldPv4Data(Entity):
                                """
                                MLDPv4 LSM\-ID context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	LSM ID Type
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsm_id
                                
                                	LSM ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: peer_lsrid
                                
                                	Peer LSR Id
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: peer_label_space_id
                                
                                	Peer Label Space Id
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data, self).__init__()

                                    self.yang_name = "mld-pv4-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('type', YLeaf(YType.uint16, 'type')),
                                        ('lsm_id', YLeaf(YType.uint32, 'lsm-id')),
                                        ('peer_lsrid', YLeaf(YType.str, 'peer-lsrid')),
                                        ('peer_label_space_id', YLeaf(YType.uint16, 'peer-label-space-id')),
                                    ])
                                    self.table_id = None
                                    self.type = None
                                    self.lsm_id = None
                                    self.peer_lsrid = None
                                    self.peer_label_space_id = None
                                    self._segment_path = lambda: "mld-pv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.MldPv4Data, ['table_id', 'type', 'lsm_id', 'peer_lsrid', 'peer_label_space_id'], name, value)


                            class PseudowireHeadEndData(Entity):
                                """
                                Pseudowire Head\-end label context
                                
                                .. attribute:: pwhe_intf
                                
                                	Pseudo\-wire Head\-end interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, self).__init__()

                                    self.yang_name = "pseudowire-head-end-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('pwhe_intf', YLeaf(YType.str, 'pwhe-intf')),
                                    ])
                                    self.pwhe_intf = None
                                    self._segment_path = lambda: "pseudowire-head-end-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PseudowireHeadEndData, ['pwhe_intf'], name, value)


                            class TpData(Entity):
                                """
                                TP context
                                
                                .. attribute:: source_global_id
                                
                                	TP source global ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: source_node_id
                                
                                	TP source node ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: dest_global_id
                                
                                	TP destination global ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: dest_node_id
                                
                                	TP destination node ID
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: source_tunnel_id
                                
                                	TP source tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: dest_tunnel_id
                                
                                	TP destination tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: lsp_id
                                
                                	TP LSP ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData, self).__init__()

                                    self.yang_name = "tp-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('source_global_id', YLeaf(YType.uint32, 'source-global-id')),
                                        ('source_node_id', YLeaf(YType.str, 'source-node-id')),
                                        ('dest_global_id', YLeaf(YType.uint32, 'dest-global-id')),
                                        ('dest_node_id', YLeaf(YType.str, 'dest-node-id')),
                                        ('source_tunnel_id', YLeaf(YType.uint16, 'source-tunnel-id')),
                                        ('dest_tunnel_id', YLeaf(YType.uint16, 'dest-tunnel-id')),
                                        ('lsp_id', YLeaf(YType.uint16, 'lsp-id')),
                                    ])
                                    self.source_global_id = None
                                    self.source_node_id = None
                                    self.dest_global_id = None
                                    self.dest_node_id = None
                                    self.source_tunnel_id = None
                                    self.dest_tunnel_id = None
                                    self.lsp_id = None
                                    self._segment_path = lambda: "tp-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TpData, ['source_global_id', 'source_node_id', 'dest_global_id', 'dest_node_id', 'source_tunnel_id', 'dest_tunnel_id', 'lsp_id'], name, value)


                            class GenericRoutingEncapsulation(Entity):
                                """
                                Generic routing encapsulation context
                                
                                .. attribute:: gre_interface
                                
                                	Generic routing encapsulation interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, self).__init__()

                                    self.yang_name = "generic-routing-encapsulation"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('gre_interface', YLeaf(YType.str, 'gre-interface')),
                                    ])
                                    self.gre_interface = None
                                    self._segment_path = lambda: "generic-routing-encapsulation"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.GenericRoutingEncapsulation, ['gre_interface'], name, value)


                            class Ipv6GenericRoutingEncapsulation(Entity):
                                """
                                Generic routing encapsulation context
                                
                                .. attribute:: greipv6_interface
                                
                                	Generic routing encapsulation IPv6 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, self).__init__()

                                    self.yang_name = "ipv6-generic-routing-encapsulation"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('greipv6_interface', YLeaf(YType.str, 'greipv6-interface')),
                                    ])
                                    self.greipv6_interface = None
                                    self._segment_path = lambda: "ipv6-generic-routing-encapsulation"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6GenericRoutingEncapsulation, ['greipv6_interface'], name, value)


                            class EvpnData(Entity):
                                """
                                EVPN context
                                
                                .. attribute:: evpn_id
                                
                                	EVPN ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: evpn_tag
                                
                                	EVPN TAG
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ethernet_segment
                                
                                	Ethernet Segment ID
                                	**type**\: str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData, self).__init__()

                                    self.yang_name = "evpn-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('evpn_id', YLeaf(YType.uint32, 'evpn-id')),
                                        ('evpn_tag', YLeaf(YType.uint32, 'evpn-tag')),
                                        ('ethernet_segment', YLeaf(YType.str, 'ethernet-segment')),
                                    ])
                                    self.evpn_id = None
                                    self.evpn_tag = None
                                    self.ethernet_segment = None
                                    self._segment_path = lambda: "evpn-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.EvpnData, ['evpn_id', 'evpn_tag', 'ethernet_segment'], name, value)


                            class Ipv4BlbData(Entity):
                                """
                                BFD BLB label context
                                
                                .. attribute:: blb_intf
                                
                                	BFD BLB interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix
                                
                                	IPv4 prefix
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, self).__init__()

                                    self.yang_name = "ipv4blb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                    ])
                                    self.blb_intf = None
                                    self.prefix = None
                                    self._segment_path = lambda: "ipv4blb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv4BlbData, ['blb_intf', 'prefix'], name, value)


                            class Ipv6BlbData(Entity):
                                """
                                BFD BLB label context
                                
                                .. attribute:: blb_intf
                                
                                	BFD BLB interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: prefix
                                
                                	IPv6 prefix
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, self).__init__()

                                    self.yang_name = "ipv6blb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('blb_intf', YLeaf(YType.str, 'blb-intf')),
                                        ('prefix', YLeaf(YType.str, 'prefix')),
                                    ])
                                    self.blb_intf = None
                                    self.prefix = None
                                    self._segment_path = lambda: "ipv6blb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.Ipv6BlbData, ['blb_intf', 'prefix'], name, value)


                            class PiMiPmsiData(Entity):
                                """
                                PIM I\-PMSI label conext
                                
                                .. attribute:: vrf_id
                                
                                	VRF ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: head
                                
                                	Head
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: v6
                                
                                	PIM6
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, self).__init__()

                                    self.yang_name = "pi-mi-pmsi-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                        ('head', YLeaf(YType.int32, 'head')),
                                        ('v6', YLeaf(YType.int32, 'v6')),
                                    ])
                                    self.vrf_id = None
                                    self.head = None
                                    self.v6 = None
                                    self._segment_path = lambda: "pi-mi-pmsi-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMiPmsiData, ['vrf_id', 'head', 'v6'], name, value)


                            class PiMsPmsiData(Entity):
                                """
                                PIM S\-PMSI label conext
                                
                                .. attribute:: vrf_id
                                
                                	VRF ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: source
                                
                                	Originating Router
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: head
                                
                                	Head
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: v6
                                
                                	PIM6
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: hli
                                
                                	Head LSM\-ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: seg
                                
                                	Segmented Multicast
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, self).__init__()

                                    self.yang_name = "pi-ms-pmsi-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('vrf_id', YLeaf(YType.uint32, 'vrf-id')),
                                        ('source', YLeaf(YType.str, 'source')),
                                        ('head', YLeaf(YType.int32, 'head')),
                                        ('v6', YLeaf(YType.int32, 'v6')),
                                        ('hli', YLeaf(YType.uint32, 'hli')),
                                        ('seg', YLeaf(YType.int32, 'seg')),
                                    ])
                                    self.vrf_id = None
                                    self.source = None
                                    self.head = None
                                    self.v6 = None
                                    self.hli = None
                                    self.seg = None
                                    self._segment_path = lambda: "pi-ms-pmsi-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.PiMsPmsiData, ['vrf_id', 'source', 'head', 'v6', 'hli', 'seg'], name, value)


                            class NextHopSetL3Vpn(Entity):
                                """
                                L3VPN NH SET label context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: next_hop_set_id
                                
                                	Next Hop Set ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, self).__init__()

                                    self.yang_name = "next-hop-set-l3vpn"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('next_hop_set_id', YLeaf(YType.uint32, 'next-hop-set-id')),
                                    ])
                                    self.table_id = None
                                    self.next_hop_set_id = None
                                    self._segment_path = lambda: "next-hop-set-l3vpn"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.NextHopSetL3Vpn, ['table_id', 'next_hop_set_id'], name, value)


                            class SrPrefixSegment(Entity):
                                """
                                SR Prefix Segment context
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: segment_id
                                
                                	Prefix Segment ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, self).__init__()

                                    self.yang_name = "sr-prefix-segment"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('segment_id', YLeaf(YType.uint32, 'segment-id')),
                                    ])
                                    self.table_id = None
                                    self.segment_id = None
                                    self._segment_path = lambda: "sr-prefix-segment"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrPrefixSegment, ['table_id', 'segment_id'], name, value)


                            class SrAdjSegmentIpv4(Entity):
                                """
                                SR Adj Segment ipv4 context
                                
                                .. attribute:: index
                                
                                	Adjacency index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Adjacency type
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: intf
                                
                                	Adjacency interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: addr
                                
                                	Adjacency nexthop IPv4 address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, self).__init__()

                                    self.yang_name = "sr-adj-segment-ipv4"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('index', YLeaf(YType.uint32, 'index')),
                                        ('type', YLeaf(YType.uint32, 'type')),
                                        ('intf', YLeaf(YType.str, 'intf')),
                                        ('addr', YLeaf(YType.str, 'addr')),
                                    ])
                                    self.index = None
                                    self.type = None
                                    self.intf = None
                                    self.addr = None
                                    self._segment_path = lambda: "sr-adj-segment-ipv4"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv4, ['index', 'type', 'intf', 'addr'], name, value)


                            class SrAdjSegmentIpv6(Entity):
                                """
                                SR Adj Segment ipv6 context
                                
                                .. attribute:: index
                                
                                	Adjacency index
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Adjacency type
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: intf
                                
                                	Adjacency interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: addr
                                
                                	Adjacency nexthop IPv6 address
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, self).__init__()

                                    self.yang_name = "sr-adj-segment-ipv6"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('index', YLeaf(YType.uint32, 'index')),
                                        ('type', YLeaf(YType.uint32, 'type')),
                                        ('intf', YLeaf(YType.str, 'intf')),
                                        ('addr', YLeaf(YType.str, 'addr')),
                                    ])
                                    self.index = None
                                    self.type = None
                                    self.intf = None
                                    self.addr = None
                                    self._segment_path = lambda: "sr-adj-segment-ipv6"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.SrAdjSegmentIpv6, ['index', 'type', 'intf', 'addr'], name, value)


                            class LabelBlockSrgbData(Entity):
                                """
                                Label block SRGB context
                                
                                .. attribute:: start_label
                                
                                	Start Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, self).__init__()

                                    self.yang_name = "label-block-srgb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('start_label', YLeaf(YType.uint32, 'start-label')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.start_label = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-srgb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrgbData, ['start_label', 'offset', 'size'], name, value)


                            class TeBinding(Entity):
                                """
                                MPLS TE tunnel binding context
                                
                                .. attribute:: te_identifier
                                
                                	MPLS Traffic Engineering Tunnel or Group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: te_type
                                
                                	Type of identifier for the binding
                                	**type**\:  :py:class:`MgmtLsdTeBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdTeBinding>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding, self).__init__()

                                    self.yang_name = "te-binding"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('te_identifier', YLeaf(YType.uint32, 'te-identifier')),
                                        ('te_type', YLeaf(YType.enumeration, 'te-type')),
                                    ])
                                    self.te_identifier = None
                                    self.te_type = None
                                    self._segment_path = lambda: "te-binding"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.TeBinding, ['te_identifier', 'te_type'], name, value)


                            class LabelBlockSrlbData(Entity):
                                """
                                Label block SRLB context
                                
                                .. attribute:: start_label
                                
                                	Start Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: offset
                                
                                	Offset
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: size
                                
                                	Number of labels
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, self).__init__()

                                    self.yang_name = "label-block-srlb-data"
                                    self.yang_parent_name = "label-context"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('start_label', YLeaf(YType.uint32, 'start-label')),
                                        ('offset', YLeaf(YType.uint32, 'offset')),
                                        ('size', YLeaf(YType.uint32, 'size')),
                                    ])
                                    self.start_label = None
                                    self.offset = None
                                    self.size = None
                                    self._segment_path = lambda: "label-block-srlb-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LabelContext.LabelBlockSrlbData, ['start_label', 'offset', 'size'], name, value)


                        class LocalLabelRewrite(Entity):
                            """
                            Local label rewrite information
                            
                            .. attribute:: label_data
                            
                            	label data
                            	**type**\: list of  		 :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite.LabelData>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite, self).__init__()

                                self.yang_name = "local-label-rewrite"
                                self.yang_parent_name = "rewrite-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite.LabelData))])
                                self._leafs = OrderedDict()

                                self.label_data = YList(self)
                                self._segment_path = lambda: "local-label-rewrite"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite, [], name, value)


                            class LabelData(Entity):
                                """
                                label data
                                
                                .. attribute:: entry
                                
                                	
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, self).__init__()

                                    self.yang_name = "label-data"
                                    self.yang_parent_name = "local-label-rewrite"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('entry', YLeaf(YType.uint32, 'entry')),
                                    ])
                                    self.entry = None
                                    self._segment_path = lambda: "label-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.RewriteId.RewriteId_.LocalLabelRewrite.LabelData, ['entry'], name, value)


                class AssociatedFpi(Entity):
                    """
                    Associated FPI
                    
                    .. attribute:: fpi
                    
                    	FPI
                    	**type**\:  :py:class:`Fpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi>`
                    
                    .. attribute:: application_owner
                    
                    	Application owner instance
                    	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.ApplicationOwner>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi, self).__init__()

                        self.yang_name = "associated-fpi"
                        self.yang_parent_name = "rewrite-label"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("fpi", ("fpi", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi))])
                        self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.ApplicationOwner))])
                        self._leafs = OrderedDict()

                        self.fpi = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi()
                        self.fpi.parent = self
                        self._children_name_map["fpi"] = "fpi"
                        self._children_yang_names.add("fpi")

                        self.application_owner = YList(self)
                        self._segment_path = lambda: "associated-fpi"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi, [], name, value)


                    class Fpi(Entity):
                        """
                        FPI
                        
                        .. attribute:: label_data
                        
                        	label data
                        	**type**\:  :py:class:`LabelData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData>`
                        
                        .. attribute:: te_data
                        
                        	te data
                        	**type**\:  :py:class:`TeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData>`
                        
                        .. attribute:: ipv4_data
                        
                        	ipv4 data
                        	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data>`
                        
                        .. attribute:: ipv6_data
                        
                        	ipv6 data
                        	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data>`
                        
                        .. attribute:: pw_list_data
                        
                        	pw list data
                        	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData>`
                        
                        .. attribute:: dmtc_ext_intf_data
                        
                        	dmtc ext intf data
                        	**type**\:  :py:class:`DmtcExtIntfData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData>`
                        
                        .. attribute:: fpi_type
                        
                        	FPIType
                        	**type**\:  :py:class:`MgmtLsdFpi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdFpi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi, self).__init__()

                            self.yang_name = "fpi"
                            self.yang_parent_name = "associated-fpi"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("label-data", ("label_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData)), ("te-data", ("te_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData)), ("dmtc-ext-intf-data", ("dmtc_ext_intf_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('fpi_type', YLeaf(YType.enumeration, 'fpi-type')),
                            ])
                            self.fpi_type = None

                            self.label_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData()
                            self.label_data.parent = self
                            self._children_name_map["label_data"] = "label-data"
                            self._children_yang_names.add("label-data")

                            self.te_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData()
                            self.te_data.parent = self
                            self._children_name_map["te_data"] = "te-data"
                            self._children_yang_names.add("te-data")

                            self.ipv4_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data()
                            self.ipv4_data.parent = self
                            self._children_name_map["ipv4_data"] = "ipv4-data"
                            self._children_yang_names.add("ipv4-data")

                            self.ipv6_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data()
                            self.ipv6_data.parent = self
                            self._children_name_map["ipv6_data"] = "ipv6-data"
                            self._children_yang_names.add("ipv6-data")

                            self.pw_list_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData()
                            self.pw_list_data.parent = self
                            self._children_name_map["pw_list_data"] = "pw-list-data"
                            self._children_yang_names.add("pw-list-data")

                            self.dmtc_ext_intf_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData()
                            self.dmtc_ext_intf_data.parent = self
                            self._children_name_map["dmtc_ext_intf_data"] = "dmtc-ext-intf-data"
                            self._children_yang_names.add("dmtc-ext-intf-data")
                            self._segment_path = lambda: "fpi"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi, ['fpi_type'], name, value)


                        class LabelData(Entity):
                            """
                            label data
                            
                            .. attribute:: label
                            
                            	Label value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: security_id
                            
                            	Security ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: elc
                            
                            	ELC
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData, self).__init__()

                                self.yang_name = "label-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('security_id', YLeaf(YType.uint32, 'security-id')),
                                    ('elc', YLeaf(YType.int32, 'elc')),
                                ])
                                self.label = None
                                self.security_id = None
                                self.elc = None
                                self._segment_path = lambda: "label-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.LabelData, ['label', 'security_id', 'elc'], name, value)


                        class TeData(Entity):
                            """
                            te data
                            
                            .. attribute:: tunnel_interface
                            
                            	Tunnel interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: local_label
                            
                            	Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData, self).__init__()

                                self.yang_name = "te-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                    ('local_label', YLeaf(YType.uint32, 'local-label')),
                                ])
                                self.tunnel_interface = None
                                self.local_label = None
                                self._segment_path = lambda: "te-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.TeData, ['tunnel_interface', 'local_label'], name, value)


                        class Ipv4Data(Entity):
                            """
                            ipv4 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sr_local_label
                            
                            	SR related Local label
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data, self).__init__()

                                self.yang_name = "ipv4-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                    ('sr_local_label', YLeaf(YType.uint32, 'sr-local-label')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.prefix_length = None
                                self.version = None
                                self.sr_local_label = None
                                self._segment_path = lambda: "ipv4-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv4Data, ['table_id', 'prefix', 'prefix_length', 'version', 'sr_local_label'], name, value)


                        class Ipv6Data(Entity):
                            """
                            ipv6 data
                            
                            .. attribute:: table_id
                            
                            	Table ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix
                            
                            	Prefix
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: router_flags
                            
                            	Route flags
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: prefix_len
                            
                            	Prefix length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: version
                            
                            	Version
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data, self).__init__()

                                self.yang_name = "ipv6-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('table_id', YLeaf(YType.uint32, 'table-id')),
                                    ('prefix', YLeaf(YType.str, 'prefix')),
                                    ('router_flags', YLeaf(YType.uint32, 'router-flags')),
                                    ('prefix_len', YLeaf(YType.uint8, 'prefix-len')),
                                    ('version', YLeaf(YType.uint32, 'version')),
                                ])
                                self.table_id = None
                                self.prefix = None
                                self.router_flags = None
                                self.prefix_len = None
                                self.version = None
                                self._segment_path = lambda: "ipv6-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.Ipv6Data, ['table_id', 'prefix', 'router_flags', 'prefix_len', 'version'], name, value)


                        class PwListData(Entity):
                            """
                            pw list data
                            
                            .. attribute:: pwhe_list_id
                            
                            	Pseudowire List Identifier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData, self).__init__()

                                self.yang_name = "pw-list-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pwhe_list_id', YLeaf(YType.uint16, 'pwhe-list-id')),
                                ])
                                self.pwhe_list_id = None
                                self._segment_path = lambda: "pw-list-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.PwListData, ['pwhe_list_id'], name, value)


                        class DmtcExtIntfData(Entity):
                            """
                            dmtc ext intf data
                            
                            .. attribute:: dmtc_ext_ifh
                            
                            	DMTC External Interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData, self).__init__()

                                self.yang_name = "dmtc-ext-intf-data"
                                self.yang_parent_name = "fpi"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                ])
                                self.dmtc_ext_ifh = None
                                self._segment_path = lambda: "dmtc-ext-intf-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.Fpi.DmtcExtIntfData, ['dmtc_ext_ifh'], name, value)


                    class ApplicationOwner(Entity):
                        """
                        Application owner instance
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.ApplicationOwner, self).__init__()

                            self.yang_name = "application-owner"
                            self.yang_parent_name = "associated-fpi"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-owner"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.AssociatedFpi.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                class V4Rpf(Entity):
                    """
                    IPv4 RPF neighbors
                    
                    .. attribute:: table_id
                    
                    	Table ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: v4_rpf_neighbor
                    
                    	V4 RPF Neighbor
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.V4Rpf, self).__init__()

                        self.yang_name = "v4-rpf"
                        self.yang_parent_name = "rewrite-label"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                            ('v4_rpf_neighbor', YLeaf(YType.str, 'v4-rpf-neighbor')),
                        ])
                        self.table_id = None
                        self.v4_rpf_neighbor = None
                        self._segment_path = lambda: "v4-rpf"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.V4Rpf, ['table_id', 'v4_rpf_neighbor'], name, value)


                class V6Rpf(Entity):
                    """
                    IPv6 RPF neighbors
                    
                    .. attribute:: table_id
                    
                    	Table ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: v6_rpf_neighbor
                    
                    	V6 RPF Neighbor
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.V6Rpf, self).__init__()

                        self.yang_name = "v6-rpf"
                        self.yang_parent_name = "rewrite-label"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                            ('v6_rpf_neighbor', YLeaf(YType.str, 'v6-rpf-neighbor')),
                        ])
                        self.table_id = None
                        self.v6_rpf_neighbor = None
                        self._segment_path = lambda: "v6-rpf"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.V6Rpf, ['table_id', 'v6_rpf_neighbor'], name, value)


                class Mois(Entity):
                    """
                    Mois
                    
                    .. attribute:: application_resource
                    
                    	Application state
                    	**type**\:  :py:class:`ApplicationResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource>`
                    
                    .. attribute:: moi_array
                    
                    	moi array
                    	**type**\: list of  		 :py:class:`MoiArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray>`
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois, self).__init__()

                        self.yang_name = "mois"
                        self.yang_parent_name = "rewrite-label"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("application-resource", ("application_resource", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource))])
                        self._child_list_classes = OrderedDict([("moi-array", ("moi_array", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray))])
                        self._leafs = OrderedDict()

                        self.application_resource = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource()
                        self.application_resource.parent = self
                        self._children_name_map["application_resource"] = "application-resource"
                        self._children_yang_names.add("application-resource")

                        self.moi_array = YList(self)
                        self._segment_path = lambda: "mois"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois, [], name, value)


                    class ApplicationResource(Entity):
                        """
                        Application state
                        
                        .. attribute:: application_name
                        
                        	Application name
                        	**type**\: str
                        
                        .. attribute:: application_type
                        
                        	Application type
                        	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                        
                        .. attribute:: application_role_primary
                        
                        	Primary/Backup role
                        	**type**\: int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: application_instance
                        
                        	Application instance Name
                        	**type**\: str
                        
                        .. attribute:: resource_state
                        
                        	Application resource state
                        	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource, self).__init__()

                            self.yang_name = "application-resource"
                            self.yang_parent_name = "mois"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('application_name', YLeaf(YType.str, 'application-name')),
                                ('application_type', YLeaf(YType.enumeration, 'application-type')),
                                ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                                ('application_instance', YLeaf(YType.str, 'application-instance')),
                                ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                            ])
                            self.application_name = None
                            self.application_type = None
                            self.application_role_primary = None
                            self.application_instance = None
                            self.resource_state = None
                            self._segment_path = lambda: "application-resource"

                        def __setattr__(self, name, value):
                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.ApplicationResource, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)


                    class MoiArray(Entity):
                        """
                        moi array
                        
                        .. attribute:: moi
                        
                        	Moi
                        	**type**\:  :py:class:`Moi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi>`
                        
                        

                        """

                        _prefix = 'mpls-lsd-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray, self).__init__()

                            self.yang_name = "moi-array"
                            self.yang_parent_name = "mois"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("moi", ("moi", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.moi = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi()
                            self.moi.parent = self
                            self._children_name_map["moi"] = "moi"
                            self._children_yang_names.add("moi")
                            self._segment_path = lambda: "moi-array"


                        class Moi(Entity):
                            """
                            Moi
                            
                            .. attribute:: pop_and_lookup_ipv4
                            
                            	pop and lookup ipv4
                            	**type**\:  :py:class:`PopAndLookupIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4>`
                            
                            .. attribute:: pop_and_lookup_tp
                            
                            	pop and lookup tp
                            	**type**\:  :py:class:`PopAndLookupTp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp>`
                            
                            .. attribute:: pop_and_lookup_ipv6
                            
                            	pop and lookup ipv6
                            	**type**\:  :py:class:`PopAndLookupIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6>`
                            
                            .. attribute:: ipv4_data
                            
                            	ipv4 data
                            	**type**\:  :py:class:`Ipv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data>`
                            
                            .. attribute:: ipv6_data
                            
                            	ipv6 data
                            	**type**\:  :py:class:`Ipv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data>`
                            
                            .. attribute:: tev4_data
                            
                            	tev4 data
                            	**type**\:  :py:class:`Tev4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data>`
                            
                            .. attribute:: pseudowire_data
                            
                            	pseudowire data
                            	**type**\:  :py:class:`PseudowireData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData>`
                            
                            .. attribute:: ip_sub_data
                            
                            	ip sub data
                            	**type**\:  :py:class:`IpSubData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData>`
                            
                            .. attribute:: pseudowire_head_end_data
                            
                            	pseudowire head end data
                            	**type**\:  :py:class:`PseudowireHeadEndData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData>`
                            
                            .. attribute:: pw_list_data
                            
                            	pw list data
                            	**type**\:  :py:class:`PwListData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData>`
                            
                            .. attribute:: stackv4_data
                            
                            	stackv4 data
                            	**type**\:  :py:class:`Stackv4Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data>`
                            
                            .. attribute:: stackv6_data
                            
                            	stackv6 data
                            	**type**\:  :py:class:`Stackv6Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data>`
                            
                            .. attribute:: te_head_data
                            
                            	te head data
                            	**type**\:  :py:class:`TeHeadData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData>`
                            
                            .. attribute:: dmtc_data
                            
                            	dmtc data
                            	**type**\:  :py:class:`DmtcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData>`
                            
                            .. attribute:: moi_type
                            
                            	MoiType
                            	**type**\:  :py:class:`MgmtLsdMoi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdMoi>`
                            
                            

                            """

                            _prefix = 'mpls-lsd-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi, self).__init__()

                                self.yang_name = "moi"
                                self.yang_parent_name = "moi-array"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("pop-and-lookup-ipv4", ("pop_and_lookup_ipv4", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4)), ("pop-and-lookup-tp", ("pop_and_lookup_tp", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp)), ("pop-and-lookup-ipv6", ("pop_and_lookup_ipv6", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6)), ("ipv4-data", ("ipv4_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data)), ("ipv6-data", ("ipv6_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data)), ("tev4-data", ("tev4_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data)), ("pseudowire-data", ("pseudowire_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData)), ("ip-sub-data", ("ip_sub_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData)), ("pseudowire-head-end-data", ("pseudowire_head_end_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData)), ("pw-list-data", ("pw_list_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData)), ("stackv4-data", ("stackv4_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data)), ("stackv6-data", ("stackv6_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data)), ("te-head-data", ("te_head_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData)), ("dmtc-data", ("dmtc_data", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('moi_type', YLeaf(YType.enumeration, 'moi-type')),
                                ])
                                self.moi_type = None

                                self.pop_and_lookup_ipv4 = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4()
                                self.pop_and_lookup_ipv4.parent = self
                                self._children_name_map["pop_and_lookup_ipv4"] = "pop-and-lookup-ipv4"
                                self._children_yang_names.add("pop-and-lookup-ipv4")

                                self.pop_and_lookup_tp = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp()
                                self.pop_and_lookup_tp.parent = self
                                self._children_name_map["pop_and_lookup_tp"] = "pop-and-lookup-tp"
                                self._children_yang_names.add("pop-and-lookup-tp")

                                self.pop_and_lookup_ipv6 = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6()
                                self.pop_and_lookup_ipv6.parent = self
                                self._children_name_map["pop_and_lookup_ipv6"] = "pop-and-lookup-ipv6"
                                self._children_yang_names.add("pop-and-lookup-ipv6")

                                self.ipv4_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data()
                                self.ipv4_data.parent = self
                                self._children_name_map["ipv4_data"] = "ipv4-data"
                                self._children_yang_names.add("ipv4-data")

                                self.ipv6_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data()
                                self.ipv6_data.parent = self
                                self._children_name_map["ipv6_data"] = "ipv6-data"
                                self._children_yang_names.add("ipv6-data")

                                self.tev4_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data()
                                self.tev4_data.parent = self
                                self._children_name_map["tev4_data"] = "tev4-data"
                                self._children_yang_names.add("tev4-data")

                                self.pseudowire_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData()
                                self.pseudowire_data.parent = self
                                self._children_name_map["pseudowire_data"] = "pseudowire-data"
                                self._children_yang_names.add("pseudowire-data")

                                self.ip_sub_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData()
                                self.ip_sub_data.parent = self
                                self._children_name_map["ip_sub_data"] = "ip-sub-data"
                                self._children_yang_names.add("ip-sub-data")

                                self.pseudowire_head_end_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData()
                                self.pseudowire_head_end_data.parent = self
                                self._children_name_map["pseudowire_head_end_data"] = "pseudowire-head-end-data"
                                self._children_yang_names.add("pseudowire-head-end-data")

                                self.pw_list_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData()
                                self.pw_list_data.parent = self
                                self._children_name_map["pw_list_data"] = "pw-list-data"
                                self._children_yang_names.add("pw-list-data")

                                self.stackv4_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data()
                                self.stackv4_data.parent = self
                                self._children_name_map["stackv4_data"] = "stackv4-data"
                                self._children_yang_names.add("stackv4-data")

                                self.stackv6_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data()
                                self.stackv6_data.parent = self
                                self._children_name_map["stackv6_data"] = "stackv6-data"
                                self._children_yang_names.add("stackv6-data")

                                self.te_head_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData()
                                self.te_head_data.parent = self
                                self._children_name_map["te_head_data"] = "te-head-data"
                                self._children_yang_names.add("te-head-data")

                                self.dmtc_data = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData()
                                self.dmtc_data.parent = self
                                self._children_name_map["dmtc_data"] = "dmtc-data"
                                self._children_yang_names.add("dmtc-data")
                                self._segment_path = lambda: "moi"

                            def __setattr__(self, name, value):
                                self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi, ['moi_type'], name, value)


                            class PopAndLookupIpv4(Entity):
                                """
                                pop and lookup ipv4
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4, self).__init__()

                                    self.yang_name = "pop-and-lookup-ipv4"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pop-and-lookup-ipv4"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv4, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                            class PopAndLookupTp(Entity):
                                """
                                pop and lookup tp
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp, self).__init__()

                                    self.yang_name = "pop-and-lookup-tp"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_label = None
                                    self._segment_path = lambda: "pop-and-lookup-tp"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupTp, ['table_id', 'table_name', 'path_flags_decode', 'out_label'], name, value)


                            class PopAndLookupIpv6(Entity):
                                """
                                pop and lookup ipv6
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6, self).__init__()

                                    self.yang_name = "pop-and-lookup-ipv6"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pop-and-lookup-ipv6"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PopAndLookupIpv6, ['table_id', 'table_name', 'path_flags_decode'], name, value)


                            class Ipv4Data(Entity):
                                """
                                ipv4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_interface_parent
                                
                                	Outgoing Interface's parent
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	Routing path id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: backup_path_id
                                
                                	Routing path backup id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: load_metric
                                
                                	Routing path's load metric
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: tunnel_id
                                
                                	Tunnel ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: next_hop_id
                                
                                	Next hop ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: local_label
                                
                                	TE backup path local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data, self).__init__()

                                    self.yang_name = "ipv4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('path_id', YLeaf(YType.uint8, 'path-id')),
                                        ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                        ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                        ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                        ('local_label', YLeaf(YType.uint32, 'local-label')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_interface_parent = None
                                    self.ipv4_next_hop = None
                                    self.path_id = None
                                    self.backup_path_id = None
                                    self.load_metric = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.tunnel_id = None
                                    self.next_hop_id = None
                                    self.local_label = None
                                    self._segment_path = lambda: "ipv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                            class Ipv6Data(Entity):
                                """
                                ipv6 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: ipv6_next_hop
                                
                                	IPv6 nexthop
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_id
                                
                                	Routing path id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: backup_path_id
                                
                                	Routing path backup id
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_hop_id
                                
                                	Next hop ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_interface_parent
                                
                                	Outgoing Interface's parent
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data, self).__init__()

                                    self.yang_name = "ipv6-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                        ('path_id', YLeaf(YType.uint8, 'path-id')),
                                        ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                        ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                        ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.ipv6_next_hop = None
                                    self.path_id = None
                                    self.backup_path_id = None
                                    self.next_hop_id = None
                                    self.out_interface_parent = None
                                    self._segment_path = lambda: "ipv6-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Ipv6Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                            class Tev4Data(Entity):
                                """
                                tev4 data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: out_label_name
                                
                                	Outgoing label name
                                	**type**\: str
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: backup_interface
                                
                                	Backup interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: backup_ipv4_next_hop
                                
                                	Backup IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: merge_point_label
                                
                                	Merge point label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: backup_local_label
                                
                                	Backup local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_interface
                                
                                	Tunnel interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: tunnel_weight
                                
                                	Tunnel weight
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: data_out_parent_interface
                                
                                	Outgoing data parent interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: tunnel_class
                                
                                	Tunnel class
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data, self).__init__()

                                    self.yang_name = "tev4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                                        ('backup_ipv4_next_hop', YLeaf(YType.str, 'backup-ipv4-next-hop')),
                                        ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                                        ('backup_local_label', YLeaf(YType.uint32, 'backup-local-label')),
                                        ('tunnel_interface', YLeaf(YType.str, 'tunnel-interface')),
                                        ('tunnel_weight', YLeaf(YType.uint32, 'tunnel-weight')),
                                        ('data_out_parent_interface', YLeaf(YType.str, 'data-out-parent-interface')),
                                        ('tunnel_class', YLeaf(YType.uint32, 'tunnel-class')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.out_label_name = None
                                    self.ipv4_next_hop = None
                                    self.backup_interface = None
                                    self.backup_ipv4_next_hop = None
                                    self.merge_point_label = None
                                    self.backup_local_label = None
                                    self.tunnel_interface = None
                                    self.tunnel_weight = None
                                    self.data_out_parent_interface = None
                                    self.tunnel_class = None
                                    self._segment_path = lambda: "tev4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Tev4Data, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv4_next_hop', 'backup_interface', 'backup_ipv4_next_hop', 'merge_point_label', 'backup_local_label', 'tunnel_interface', 'tunnel_weight', 'data_out_parent_interface', 'tunnel_class'], name, value)


                            class PseudowireData(Entity):
                                """
                                pseudowire data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: cross_connect_id
                                
                                	Cross\-connect ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pseuodo_wire_connect_id
                                
                                	PseudoWire Cross\-connect ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: bridge_id
                                
                                	Bridge ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: split_horizon_id
                                
                                	Split horizon group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData, self).__init__()

                                    self.yang_name = "pseudowire-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('cross_connect_id', YLeaf(YType.uint32, 'cross-connect-id')),
                                        ('pseuodo_wire_connect_id', YLeaf(YType.uint32, 'pseuodo-wire-connect-id')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('bridge_id', YLeaf(YType.uint32, 'bridge-id')),
                                        ('split_horizon_id', YLeaf(YType.uint32, 'split-horizon-id')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.cross_connect_id = None
                                    self.pseuodo_wire_connect_id = None
                                    self.ipv4_next_hop = None
                                    self.bridge_id = None
                                    self.split_horizon_id = None
                                    self._segment_path = lambda: "pseudowire-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'cross_connect_id', 'pseuodo_wire_connect_id', 'ipv4_next_hop', 'bridge_id', 'split_horizon_id'], name, value)


                            class IpSubData(Entity):
                                """
                                ip sub data
                                
                                .. attribute:: table_id
                                
                                	VRF table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData, self).__init__()

                                    self.yang_name = "ip-sub-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.out_interface = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "ip-sub-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.IpSubData, ['table_id', 'table_name', 'out_interface', 'path_flags_decode'], name, value)


                            class PseudowireHeadEndData(Entity):
                                """
                                pseudowire head end data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                .. attribute:: out_interface
                                
                                	Outgoing interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: out_label
                                
                                	Outgoing Label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ipv4_next_hop
                                
                                	IPv4 nexthop
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: control_word
                                
                                	Is control word present
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: imposition
                                
                                	Is PWHE IMposition
                                	**type**\: int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: vctype
                                
                                	Virtual Circuit Type
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: pw_list_id
                                
                                	Pseudo\-wire List Identifier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: pwhe_interface
                                
                                	Pseudo\-wire Head\-end interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData, self).__init__()

                                    self.yang_name = "pseudowire-head-end-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                        ('out_interface', YLeaf(YType.str, 'out-interface')),
                                        ('out_label', YLeaf(YType.uint32, 'out-label')),
                                        ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                        ('control_word', YLeaf(YType.int32, 'control-word')),
                                        ('imposition', YLeaf(YType.int32, 'imposition')),
                                        ('vctype', YLeaf(YType.uint8, 'vctype')),
                                        ('pw_list_id', YLeaf(YType.uint16, 'pw-list-id')),
                                        ('pwhe_interface', YLeaf(YType.str, 'pwhe-interface')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.path_flags_decode = None
                                    self.out_interface = None
                                    self.out_label = None
                                    self.ipv4_next_hop = None
                                    self.control_word = None
                                    self.imposition = None
                                    self.vctype = None
                                    self.pw_list_id = None
                                    self.pwhe_interface = None
                                    self._segment_path = lambda: "pseudowire-head-end-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PseudowireHeadEndData, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'ipv4_next_hop', 'control_word', 'imposition', 'vctype', 'pw_list_id', 'pwhe_interface'], name, value)


                            class PwListData(Entity):
                                """
                                pw list data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: l3_interface
                                
                                	Pseudo\-wire Layer 3 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: l2_interface
                                
                                	Pseudo\-wire Layer 2 interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: path_flags_decode
                                
                                	Path flag decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData, self).__init__()

                                    self.yang_name = "pw-list-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('l3_interface', YLeaf(YType.str, 'l3-interface')),
                                        ('l2_interface', YLeaf(YType.str, 'l2-interface')),
                                        ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.l3_interface = None
                                    self.l2_interface = None
                                    self.path_flags_decode = None
                                    self._segment_path = lambda: "pw-list-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.PwListData, ['table_id', 'table_name', 'l3_interface', 'l2_interface', 'path_flags_decode'], name, value)


                            class Stackv4Data(Entity):
                                """
                                stackv4 data
                                
                                .. attribute:: nexthop
                                
                                	Nexthop
                                	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop>`
                                
                                .. attribute:: inner_stack
                                
                                	Inner stack
                                	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack>`
                                
                                .. attribute:: owner_application_type
                                
                                	Owner application type
                                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data, self).__init__()

                                    self.yang_name = "stackv4-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('owner_application_type', YLeaf(YType.enumeration, 'owner-application-type')),
                                    ])
                                    self.owner_application_type = None

                                    self.nexthop = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop()
                                    self.nexthop.parent = self
                                    self._children_name_map["nexthop"] = "nexthop"
                                    self._children_yang_names.add("nexthop")

                                    self.inner_stack = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack()
                                    self.inner_stack.parent = self
                                    self._children_name_map["inner_stack"] = "inner-stack"
                                    self._children_yang_names.add("inner-stack")
                                    self._segment_path = lambda: "stackv4-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data, ['owner_application_type'], name, value)


                                class Nexthop(Entity):
                                    """
                                    Nexthop
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: ipv4_next_hop
                                    
                                    	IPv4 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: load_metric
                                    
                                    	Routing path's load metric
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing Label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: tunnel_id
                                    
                                    	Tunnel ID
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_label
                                    
                                    	TE backup path local label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop, self).__init__()

                                        self.yang_name = "nexthop"
                                        self.yang_parent_name = "stackv4-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                            ('ipv4_next_hop', YLeaf(YType.str, 'ipv4-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('load_metric', YLeaf(YType.uint32, 'load-metric')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('local_label', YLeaf(YType.uint32, 'local-label')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_interface_parent = None
                                        self.ipv4_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.load_metric = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.tunnel_id = None
                                        self.next_hop_id = None
                                        self.local_label = None
                                        self._segment_path = lambda: "nexthop"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_interface_parent', 'ipv4_next_hop', 'path_id', 'backup_path_id', 'load_metric', 'out_label', 'out_label_name', 'tunnel_id', 'next_hop_id', 'local_label'], name, value)


                                class InnerStack(Entity):
                                    """
                                    Inner stack
                                    
                                    .. attribute:: num_nexthops
                                    
                                    	Number of remote nexthop addresses
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: num_lbls
                                    
                                    	Depth of inner label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nexthop
                                    
                                    	Remote nexthop addresses
                                    	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop>`
                                    
                                    .. attribute:: label
                                    
                                    	Info related to outgoing labels
                                    	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack, self).__init__()

                                        self.yang_name = "inner-stack"
                                        self.yang_parent_name = "stackv4-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop)), ("label", ("label", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label))])
                                        self._leafs = OrderedDict([
                                            ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                            ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                        ])
                                        self.num_nexthops = None
                                        self.num_lbls = None

                                        self.nexthop = YList(self)
                                        self.label = YList(self)
                                        self._segment_path = lambda: "inner-stack"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Remote nexthop addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Nexthop, ['entry'], name, value)


                                    class Label(Entity):
                                        """
                                        Info related to outgoing labels
                                        
                                        .. attribute:: outgoing_label
                                        
                                        	Remote Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outgoing_label_str
                                        
                                        	Remote Label string
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, self).__init__()

                                            self.yang_name = "label"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                            ])
                                            self.outgoing_label = None
                                            self.outgoing_label_str = None
                                            self._segment_path = lambda: "label"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv4Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                            class Stackv6Data(Entity):
                                """
                                stackv6 data
                                
                                .. attribute:: nexthop
                                
                                	Nexthop
                                	**type**\:  :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop>`
                                
                                .. attribute:: inner_stack
                                
                                	Inner stack
                                	**type**\:  :py:class:`InnerStack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack>`
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data, self).__init__()

                                    self.yang_name = "stackv6-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop)), ("inner-stack", ("inner_stack", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.nexthop = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop()
                                    self.nexthop.parent = self
                                    self._children_name_map["nexthop"] = "nexthop"
                                    self._children_yang_names.add("nexthop")

                                    self.inner_stack = MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack()
                                    self.inner_stack.parent = self
                                    self._children_name_map["inner_stack"] = "inner-stack"
                                    self._children_yang_names.add("inner-stack")
                                    self._segment_path = lambda: "stackv6-data"


                                class Nexthop(Entity):
                                    """
                                    Nexthop
                                    
                                    .. attribute:: table_id
                                    
                                    	Table ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: table_name
                                    
                                    	VRF table name
                                    	**type**\: str
                                    
                                    .. attribute:: path_flags_decode
                                    
                                    	Path flag decoded string
                                    	**type**\: str
                                    
                                    .. attribute:: out_interface
                                    
                                    	Outgoing interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    .. attribute:: out_label
                                    
                                    	Outgoing label
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_label_name
                                    
                                    	Outgoing label name
                                    	**type**\: str
                                    
                                    .. attribute:: ipv6_next_hop
                                    
                                    	IPv6 nexthop
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: path_id
                                    
                                    	Routing path id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: backup_path_id
                                    
                                    	Routing path backup id
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: next_hop_id
                                    
                                    	Next hop ID
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: out_interface_parent
                                    
                                    	Outgoing Interface's parent
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop, self).__init__()

                                        self.yang_name = "nexthop"
                                        self.yang_parent_name = "stackv6-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('table_id', YLeaf(YType.uint32, 'table-id')),
                                            ('table_name', YLeaf(YType.str, 'table-name')),
                                            ('path_flags_decode', YLeaf(YType.str, 'path-flags-decode')),
                                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                                            ('out_label_name', YLeaf(YType.str, 'out-label-name')),
                                            ('ipv6_next_hop', YLeaf(YType.str, 'ipv6-next-hop')),
                                            ('path_id', YLeaf(YType.uint8, 'path-id')),
                                            ('backup_path_id', YLeaf(YType.uint8, 'backup-path-id')),
                                            ('next_hop_id', YLeaf(YType.uint32, 'next-hop-id')),
                                            ('out_interface_parent', YLeaf(YType.str, 'out-interface-parent')),
                                        ])
                                        self.table_id = None
                                        self.table_name = None
                                        self.path_flags_decode = None
                                        self.out_interface = None
                                        self.out_label = None
                                        self.out_label_name = None
                                        self.ipv6_next_hop = None
                                        self.path_id = None
                                        self.backup_path_id = None
                                        self.next_hop_id = None
                                        self.out_interface_parent = None
                                        self._segment_path = lambda: "nexthop"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.Nexthop, ['table_id', 'table_name', 'path_flags_decode', 'out_interface', 'out_label', 'out_label_name', 'ipv6_next_hop', 'path_id', 'backup_path_id', 'next_hop_id', 'out_interface_parent'], name, value)


                                class InnerStack(Entity):
                                    """
                                    Inner stack
                                    
                                    .. attribute:: num_nexthops
                                    
                                    	Number of remote nexthop addresses
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: num_lbls
                                    
                                    	Depth of inner label stack
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: nexthop
                                    
                                    	Remote nexthop addresses
                                    	**type**\: list of  		 :py:class:`Nexthop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop>`
                                    
                                    .. attribute:: label
                                    
                                    	Info related to outgoing labels
                                    	**type**\: list of  		 :py:class:`Label <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label>`
                                    
                                    

                                    """

                                    _prefix = 'mpls-lsd-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack, self).__init__()

                                        self.yang_name = "inner-stack"
                                        self.yang_parent_name = "stackv6-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("nexthop", ("nexthop", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop)), ("label", ("label", MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label))])
                                        self._leafs = OrderedDict([
                                            ('num_nexthops', YLeaf(YType.uint8, 'num-nexthops')),
                                            ('num_lbls', YLeaf(YType.uint8, 'num-lbls')),
                                        ])
                                        self.num_nexthops = None
                                        self.num_lbls = None

                                        self.nexthop = YList(self)
                                        self.label = YList(self)
                                        self._segment_path = lambda: "inner-stack"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack, ['num_nexthops', 'num_lbls'], name, value)


                                    class Nexthop(Entity):
                                        """
                                        Remote nexthop addresses
                                        
                                        .. attribute:: entry
                                        
                                        	
                                        	**type**\: str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, self).__init__()

                                            self.yang_name = "nexthop"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('entry', YLeaf(YType.str, 'entry')),
                                            ])
                                            self.entry = None
                                            self._segment_path = lambda: "nexthop"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Nexthop, ['entry'], name, value)


                                    class Label(Entity):
                                        """
                                        Info related to outgoing labels
                                        
                                        .. attribute:: outgoing_label
                                        
                                        	Remote Label
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: outgoing_label_str
                                        
                                        	Remote Label string
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'mpls-lsd-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, self).__init__()

                                            self.yang_name = "label"
                                            self.yang_parent_name = "inner-stack"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('outgoing_label', YLeaf(YType.uint32, 'outgoing-label')),
                                                ('outgoing_label_str', YLeaf(YType.str, 'outgoing-label-str')),
                                            ])
                                            self.outgoing_label = None
                                            self.outgoing_label_str = None
                                            self._segment_path = lambda: "label"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.Stackv6Data.InnerStack.Label, ['outgoing_label', 'outgoing_label_str'], name, value)


                            class TeHeadData(Entity):
                                """
                                te head data
                                
                                .. attribute:: table_id
                                
                                	Table ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: table_name
                                
                                	VRF table name
                                	**type**\: str
                                
                                .. attribute:: tunnel_local_label
                                
                                	Tunnel local label
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: tunnel_local_label_str
                                
                                	Tunnel local label stringified
                                	**type**\: str
                                
                                .. attribute:: tunnel_fwd_class
                                
                                	Tunnel forwarding class
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: tunnel_load_metric
                                
                                	Tunnel Load metric
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: flags_decode
                                
                                	Flags decoded string
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData, self).__init__()

                                    self.yang_name = "te-head-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('table_id', YLeaf(YType.uint32, 'table-id')),
                                        ('table_name', YLeaf(YType.str, 'table-name')),
                                        ('tunnel_local_label', YLeaf(YType.uint32, 'tunnel-local-label')),
                                        ('tunnel_local_label_str', YLeaf(YType.str, 'tunnel-local-label-str')),
                                        ('tunnel_fwd_class', YLeaf(YType.uint8, 'tunnel-fwd-class')),
                                        ('tunnel_load_metric', YLeaf(YType.uint32, 'tunnel-load-metric')),
                                        ('flags_decode', YLeaf(YType.str, 'flags-decode')),
                                    ])
                                    self.table_id = None
                                    self.table_name = None
                                    self.tunnel_local_label = None
                                    self.tunnel_local_label_str = None
                                    self.tunnel_fwd_class = None
                                    self.tunnel_load_metric = None
                                    self.flags_decode = None
                                    self._segment_path = lambda: "te-head-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.TeHeadData, ['table_id', 'table_name', 'tunnel_local_label', 'tunnel_local_label_str', 'tunnel_fwd_class', 'tunnel_load_metric', 'flags_decode'], name, value)


                            class DmtcData(Entity):
                                """
                                dmtc data
                                
                                .. attribute:: dmtc_ext_ifh
                                
                                	DMTC External Interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'mpls-lsd-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData, self).__init__()

                                    self.yang_name = "dmtc-data"
                                    self.yang_parent_name = "moi"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('dmtc_ext_ifh', YLeaf(YType.str, 'dmtc-ext-ifh')),
                                    ])
                                    self.dmtc_ext_ifh = None
                                    self._segment_path = lambda: "dmtc-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(MplsLsd.Rewrite.RewriteLabels.RewriteLabel.Mois.MoiArray.Moi.DmtcData, ['dmtc_ext_ifh'], name, value)


    class RewriteSummary(Entity):
        """
        Rewrite Summary 
        
        .. attribute:: ipv4_paths
        
        	Count for IPv4 paths
        	**type**\:  :py:class:`Ipv4Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.RewriteSummary.Ipv4Paths>`
        
        .. attribute:: ipv6_paths
        
        	Count for IPv6 paths
        	**type**\:  :py:class:`Ipv6Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.RewriteSummary.Ipv6Paths>`
        
        .. attribute:: num_label_fpi
        
        	Number of label FPI
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: num_tefpi
        
        	Number of TE FPI
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: num_ipv4fpi
        
        	Number of IPv4 FPI
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: num_ipv6fpi
        
        	Number of IPv6 FPI
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: num_pw_list_tefpi
        
        	Number of PW List FPI
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: num_dmtctefpi
        
        	Number of DMTC FPI
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: num_rewrite
        
        	Number of rewrites
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_forward_update
        
        	Total number of forward updates
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_forwad_update_message
        
        	Total number of forward update messages
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_paths
        
        	Total paths
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_t_ev4_paths
        
        	Total number of Traffic Eng IPv4 paths
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_te_head_paths
        
        	Total number of Traffic Eng Head paths
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_pw_paths
        
        	Total number of Pseudo\-wire paths
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_ip_sub_paths
        
        	Total number of IP Subscriber paths
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_ipv4rpf_neighbors
        
        	Total number of IPv4 RPF Neighbors
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_ipv6rpf_neighbors
        
        	Total number of IPv6 RPF Neighbors
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: num_rewrite_rpf_neighbors
        
        	Number of rewrites with RPF Neighbors
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: total_dmtc_intf
        
        	Total number of DMTC External Interfaces
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: vrf_name_xr
        
        	VRF Name
        	**type**\: str
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.RewriteSummary, self).__init__()

            self.yang_name = "rewrite-summary"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("ipv4-paths", ("ipv4_paths", MplsLsd.RewriteSummary.Ipv4Paths)), ("ipv6-paths", ("ipv6_paths", MplsLsd.RewriteSummary.Ipv6Paths))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('num_label_fpi', YLeaf(YType.uint32, 'num-label-fpi')),
                ('num_tefpi', YLeaf(YType.uint32, 'num-tefpi')),
                ('num_ipv4fpi', YLeaf(YType.uint32, 'num-ipv4fpi')),
                ('num_ipv6fpi', YLeaf(YType.uint32, 'num-ipv6fpi')),
                ('num_pw_list_tefpi', YLeaf(YType.uint32, 'num-pw-list-tefpi')),
                ('num_dmtctefpi', YLeaf(YType.uint32, 'num-dmtctefpi')),
                ('num_rewrite', YLeaf(YType.uint32, 'num-rewrite')),
                ('total_forward_update', YLeaf(YType.uint32, 'total-forward-update')),
                ('total_forwad_update_message', YLeaf(YType.uint32, 'total-forwad-update-message')),
                ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                ('total_t_ev4_paths', YLeaf(YType.uint32, 'total-t-ev4-paths')),
                ('total_te_head_paths', YLeaf(YType.uint32, 'total-te-head-paths')),
                ('total_pw_paths', YLeaf(YType.uint32, 'total-pw-paths')),
                ('total_ip_sub_paths', YLeaf(YType.uint32, 'total-ip-sub-paths')),
                ('total_ipv4rpf_neighbors', YLeaf(YType.uint32, 'total-ipv4rpf-neighbors')),
                ('total_ipv6rpf_neighbors', YLeaf(YType.uint32, 'total-ipv6rpf-neighbors')),
                ('num_rewrite_rpf_neighbors', YLeaf(YType.uint32, 'num-rewrite-rpf-neighbors')),
                ('total_dmtc_intf', YLeaf(YType.uint32, 'total-dmtc-intf')),
                ('vrf_name_xr', YLeaf(YType.str, 'vrf-name-xr')),
            ])
            self.num_label_fpi = None
            self.num_tefpi = None
            self.num_ipv4fpi = None
            self.num_ipv6fpi = None
            self.num_pw_list_tefpi = None
            self.num_dmtctefpi = None
            self.num_rewrite = None
            self.total_forward_update = None
            self.total_forwad_update_message = None
            self.total_paths = None
            self.total_t_ev4_paths = None
            self.total_te_head_paths = None
            self.total_pw_paths = None
            self.total_ip_sub_paths = None
            self.total_ipv4rpf_neighbors = None
            self.total_ipv6rpf_neighbors = None
            self.num_rewrite_rpf_neighbors = None
            self.total_dmtc_intf = None
            self.vrf_name_xr = None

            self.ipv4_paths = MplsLsd.RewriteSummary.Ipv4Paths()
            self.ipv4_paths.parent = self
            self._children_name_map["ipv4_paths"] = "ipv4-paths"
            self._children_yang_names.add("ipv4-paths")

            self.ipv6_paths = MplsLsd.RewriteSummary.Ipv6Paths()
            self.ipv6_paths.parent = self
            self._children_name_map["ipv6_paths"] = "ipv6-paths"
            self._children_yang_names.add("ipv6-paths")
            self._segment_path = lambda: "rewrite-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.RewriteSummary, ['num_label_fpi', 'num_tefpi', 'num_ipv4fpi', 'num_ipv6fpi', 'num_pw_list_tefpi', 'num_dmtctefpi', 'num_rewrite', 'total_forward_update', 'total_forwad_update_message', 'total_paths', 'total_t_ev4_paths', 'total_te_head_paths', 'total_pw_paths', 'total_ip_sub_paths', 'total_ipv4rpf_neighbors', 'total_ipv6rpf_neighbors', 'num_rewrite_rpf_neighbors', 'total_dmtc_intf', 'vrf_name_xr'], name, value)


        class Ipv4Paths(Entity):
            """
            Count for IPv4 paths
            
            .. attribute:: total_paths
            
            	Total number of IP paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_backup_paths
            
            	Total number of non\-primary backup paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_remote_backup_paths
            
            	Total number of remote backup paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_protected_paths
            
            	Total number of protected paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_pop_lkup_paths
            
            	Total number of Pop\-and\-Lookup paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.RewriteSummary.Ipv4Paths, self).__init__()

                self.yang_name = "ipv4-paths"
                self.yang_parent_name = "rewrite-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                    ('total_backup_paths', YLeaf(YType.uint32, 'total-backup-paths')),
                    ('total_remote_backup_paths', YLeaf(YType.uint32, 'total-remote-backup-paths')),
                    ('total_protected_paths', YLeaf(YType.uint32, 'total-protected-paths')),
                    ('total_pop_lkup_paths', YLeaf(YType.uint32, 'total-pop-lkup-paths')),
                ])
                self.total_paths = None
                self.total_backup_paths = None
                self.total_remote_backup_paths = None
                self.total_protected_paths = None
                self.total_pop_lkup_paths = None
                self._segment_path = lambda: "ipv4-paths"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.RewriteSummary.Ipv4Paths, ['total_paths', 'total_backup_paths', 'total_remote_backup_paths', 'total_protected_paths', 'total_pop_lkup_paths'], name, value)


        class Ipv6Paths(Entity):
            """
            Count for IPv6 paths
            
            .. attribute:: total_paths
            
            	Total number of IP paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_backup_paths
            
            	Total number of non\-primary backup paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_remote_backup_paths
            
            	Total number of remote backup paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_protected_paths
            
            	Total number of protected paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_pop_lkup_paths
            
            	Total number of Pop\-and\-Lookup paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.RewriteSummary.Ipv6Paths, self).__init__()

                self.yang_name = "ipv6-paths"
                self.yang_parent_name = "rewrite-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                    ('total_backup_paths', YLeaf(YType.uint32, 'total-backup-paths')),
                    ('total_remote_backup_paths', YLeaf(YType.uint32, 'total-remote-backup-paths')),
                    ('total_protected_paths', YLeaf(YType.uint32, 'total-protected-paths')),
                    ('total_pop_lkup_paths', YLeaf(YType.uint32, 'total-pop-lkup-paths')),
                ])
                self.total_paths = None
                self.total_backup_paths = None
                self.total_remote_backup_paths = None
                self.total_protected_paths = None
                self.total_pop_lkup_paths = None
                self._segment_path = lambda: "ipv6-paths"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.RewriteSummary.Ipv6Paths, ['total_paths', 'total_backup_paths', 'total_remote_backup_paths', 'total_protected_paths', 'total_pop_lkup_paths'], name, value)


    class Applications(Entity):
        """
        Table of MPLS applications using LSD
        
        .. attribute:: application
        
        	Data for MPLS application using LSD
        	**type**\: list of  		 :py:class:`Application <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Applications.Application>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.Applications, self).__init__()

            self.yang_name = "applications"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("application", ("application", MplsLsd.Applications.Application))])
            self._leafs = OrderedDict()

            self.application = YList(self)
            self._segment_path = lambda: "applications"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.Applications, [], name, value)


        class Application(Entity):
            """
            Data for MPLS application using LSD
            
            .. attribute:: application_name  (key)
            
            	Application Instance name in the form of '<app\_type\_name>[\:<instance>]'
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: application_statistics
            
            	Application Statistics
            	**type**\:  :py:class:`ApplicationStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Applications.Application.ApplicationStatistics>`
            
            .. attribute:: application_name_xr
            
            	Application name
            	**type**\: str
            
            .. attribute:: application_type
            
            	Application type
            	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
            
            .. attribute:: application_role_primary
            
            	Primary/Backup role
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: application_instance
            
            	client\-app instance
            	**type**\: str
            
            .. attribute:: app_reg_time
            
            	App reg ts
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: app_disconnect_time
            
            	App disconnect ts
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: app_flow_controlled
            
            	App flow control status
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: flow_ctrl_time
            
            	Flow Ctrl ts
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: flow_ctrl_clr_time
            
            	Flow Ctrl Clr ts
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: go_act_ts
            
            	App go active timestamp
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: application_state
            
            	Application state
            	**type**\:  :py:class:`MgmtLsdAppState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppState>`
            
            .. attribute:: recovery_time_remaining_seconds
            
            	Recovery time [secs] remaining if client is timing out
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: recovery_time_elapsed_seconds
            
            	Recovery time [secs] elapsed if client is timing out
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: recovery_time_register_seconds
            
            	Recovery time [secs] specified at registration or set explicitly
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: node_id
            
            	Node ID where application is/was running
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.Applications.Application, self).__init__()

                self.yang_name = "application"
                self.yang_parent_name = "applications"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['application_name']
                self._child_container_classes = OrderedDict([("application-statistics", ("application_statistics", MplsLsd.Applications.Application.ApplicationStatistics))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('application_name', YLeaf(YType.str, 'application-name')),
                    ('application_name_xr', YLeaf(YType.str, 'application-name-xr')),
                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                    ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                    ('application_instance', YLeaf(YType.str, 'application-instance')),
                    ('app_reg_time', YLeaf(YType.uint64, 'app-reg-time')),
                    ('app_disconnect_time', YLeaf(YType.uint64, 'app-disconnect-time')),
                    ('app_flow_controlled', YLeaf(YType.int32, 'app-flow-controlled')),
                    ('flow_ctrl_time', YLeaf(YType.uint64, 'flow-ctrl-time')),
                    ('flow_ctrl_clr_time', YLeaf(YType.uint64, 'flow-ctrl-clr-time')),
                    ('go_act_ts', YLeaf(YType.uint64, 'go-act-ts')),
                    ('application_state', YLeaf(YType.enumeration, 'application-state')),
                    ('recovery_time_remaining_seconds', YLeaf(YType.uint32, 'recovery-time-remaining-seconds')),
                    ('recovery_time_elapsed_seconds', YLeaf(YType.uint32, 'recovery-time-elapsed-seconds')),
                    ('recovery_time_register_seconds', YLeaf(YType.uint32, 'recovery-time-register-seconds')),
                    ('node_id', YLeaf(YType.str, 'node-id')),
                ])
                self.application_name = None
                self.application_name_xr = None
                self.application_type = None
                self.application_role_primary = None
                self.application_instance = None
                self.app_reg_time = None
                self.app_disconnect_time = None
                self.app_flow_controlled = None
                self.flow_ctrl_time = None
                self.flow_ctrl_clr_time = None
                self.go_act_ts = None
                self.application_state = None
                self.recovery_time_remaining_seconds = None
                self.recovery_time_elapsed_seconds = None
                self.recovery_time_register_seconds = None
                self.node_id = None

                self.application_statistics = MplsLsd.Applications.Application.ApplicationStatistics()
                self.application_statistics.parent = self
                self._children_name_map["application_statistics"] = "application-statistics"
                self._children_yang_names.add("application-statistics")
                self._segment_path = lambda: "application" + "[application-name='" + str(self.application_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/applications/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.Applications.Application, ['application_name', 'application_name_xr', 'application_type', 'application_role_primary', 'application_instance', 'app_reg_time', 'app_disconnect_time', 'app_flow_controlled', 'flow_ctrl_time', 'flow_ctrl_clr_time', 'go_act_ts', 'application_state', 'recovery_time_remaining_seconds', 'recovery_time_elapsed_seconds', 'recovery_time_register_seconds', 'node_id'], name, value)


            class ApplicationStatistics(Entity):
                """
                Application Statistics
                
                .. attribute:: connected
                
                	Connected statistics
                	**type**\:  :py:class:`Connected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Applications.Application.ApplicationStatistics.Connected>`
                
                .. attribute:: interface_enable
                
                	Number of interface enabled
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: interface_enable_pending
                
                	Number of interface enable pending
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: connect_count
                
                	Connect count
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: label_context_count
                
                	Label context count
                	**type**\: list of  		 :py:class:`LabelContextCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Applications.Application.ApplicationStatistics.LabelContextCount>`
                
                .. attribute:: label_context_pending_count
                
                	Label context pending count
                	**type**\: list of  		 :py:class:`LabelContextPendingCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Applications.Application.ApplicationStatistics.LabelContextPendingCount>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Applications.Application.ApplicationStatistics, self).__init__()

                    self.yang_name = "application-statistics"
                    self.yang_parent_name = "application"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("connected", ("connected", MplsLsd.Applications.Application.ApplicationStatistics.Connected))])
                    self._child_list_classes = OrderedDict([("label-context-count", ("label_context_count", MplsLsd.Applications.Application.ApplicationStatistics.LabelContextCount)), ("label-context-pending-count", ("label_context_pending_count", MplsLsd.Applications.Application.ApplicationStatistics.LabelContextPendingCount))])
                    self._leafs = OrderedDict([
                        ('interface_enable', YLeaf(YType.uint32, 'interface-enable')),
                        ('interface_enable_pending', YLeaf(YType.uint32, 'interface-enable-pending')),
                        ('connect_count', YLeaf(YType.uint32, 'connect-count')),
                    ])
                    self.interface_enable = None
                    self.interface_enable_pending = None
                    self.connect_count = None

                    self.connected = MplsLsd.Applications.Application.ApplicationStatistics.Connected()
                    self.connected.parent = self
                    self._children_name_map["connected"] = "connected"
                    self._children_yang_names.add("connected")

                    self.label_context_count = YList(self)
                    self.label_context_pending_count = YList(self)
                    self._segment_path = lambda: "application-statistics"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Applications.Application.ApplicationStatistics, ['interface_enable', 'interface_enable_pending', 'connect_count'], name, value)


                class Connected(Entity):
                    """
                    Connected statistics
                    
                    .. attribute:: rt_set_msg_count
                    
                    	RT set count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: operation_msg_count
                    
                    	Operation count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: oor_label_count
                    
                    	Label OOR count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: error_msg_count
                    
                    	Error count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Applications.Application.ApplicationStatistics.Connected, self).__init__()

                        self.yang_name = "connected"
                        self.yang_parent_name = "application-statistics"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('rt_set_msg_count', YLeaf(YType.uint32, 'rt-set-msg-count')),
                            ('operation_msg_count', YLeaf(YType.uint32, 'operation-msg-count')),
                            ('oor_label_count', YLeaf(YType.uint32, 'oor-label-count')),
                            ('error_msg_count', YLeaf(YType.uint32, 'error-msg-count')),
                        ])
                        self.rt_set_msg_count = None
                        self.operation_msg_count = None
                        self.oor_label_count = None
                        self.error_msg_count = None
                        self._segment_path = lambda: "connected"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Applications.Application.ApplicationStatistics.Connected, ['rt_set_msg_count', 'operation_msg_count', 'oor_label_count', 'error_msg_count'], name, value)


                class LabelContextCount(Entity):
                    """
                    Label context count
                    
                    .. attribute:: entry
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Applications.Application.ApplicationStatistics.LabelContextCount, self).__init__()

                        self.yang_name = "label-context-count"
                        self.yang_parent_name = "application-statistics"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('entry', YLeaf(YType.uint32, 'entry')),
                        ])
                        self.entry = None
                        self._segment_path = lambda: "label-context-count"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Applications.Application.ApplicationStatistics.LabelContextCount, ['entry'], name, value)


                class LabelContextPendingCount(Entity):
                    """
                    Label context pending count
                    
                    .. attribute:: entry
                    
                    	
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'mpls-lsd-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(MplsLsd.Applications.Application.ApplicationStatistics.LabelContextPendingCount, self).__init__()

                        self.yang_name = "label-context-pending-count"
                        self.yang_parent_name = "application-statistics"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('entry', YLeaf(YType.uint32, 'entry')),
                        ])
                        self.entry = None
                        self._segment_path = lambda: "label-context-pending-count"

                    def __setattr__(self, name, value):
                        self._perform_setattr(MplsLsd.Applications.Application.ApplicationStatistics.LabelContextPendingCount, ['entry'], name, value)


    class LabelSummaryVrfs(Entity):
        """
        Dynamic label range summary by VRF
        
        .. attribute:: label_summary_vrf
        
        	Dynamic label range summary by VRF
        	**type**\: list of  		 :py:class:`LabelSummaryVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.LabelSummaryVrfs.LabelSummaryVrf>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.LabelSummaryVrfs, self).__init__()

            self.yang_name = "label-summary-vrfs"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("label-summary-vrf", ("label_summary_vrf", MplsLsd.LabelSummaryVrfs.LabelSummaryVrf))])
            self._leafs = OrderedDict()

            self.label_summary_vrf = YList(self)
            self._segment_path = lambda: "label-summary-vrfs"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.LabelSummaryVrfs, [], name, value)


        class LabelSummaryVrf(Entity):
            """
            Dynamic label range summary by VRF
            
            .. attribute:: vrf_name  (key)
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: vrf_name_xr
            
            	VRF Name
            	**type**\: str
            
            .. attribute:: total_labels
            
            	Total labels
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: rsi_connected
            
            	Rsi connected
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: owner_count
            
            	Owner counts
            	**type**\: list of  		 :py:class:`OwnerCount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.LabelSummaryVrfs.LabelSummaryVrf.OwnerCount>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.LabelSummaryVrfs.LabelSummaryVrf, self).__init__()

                self.yang_name = "label-summary-vrf"
                self.yang_parent_name = "label-summary-vrfs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['vrf_name']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("owner-count", ("owner_count", MplsLsd.LabelSummaryVrfs.LabelSummaryVrf.OwnerCount))])
                self._leafs = OrderedDict([
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('vrf_name_xr', YLeaf(YType.str, 'vrf-name-xr')),
                    ('total_labels', YLeaf(YType.uint32, 'total-labels')),
                    ('rsi_connected', YLeaf(YType.int32, 'rsi-connected')),
                ])
                self.vrf_name = None
                self.vrf_name_xr = None
                self.total_labels = None
                self.rsi_connected = None

                self.owner_count = YList(self)
                self._segment_path = lambda: "label-summary-vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/label-summary-vrfs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.LabelSummaryVrfs.LabelSummaryVrf, ['vrf_name', 'vrf_name_xr', 'total_labels', 'rsi_connected'], name, value)


            class OwnerCount(Entity):
                """
                Owner counts
                
                .. attribute:: application_type
                
                	Application type
                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                
                .. attribute:: application_name
                
                	Application name
                	**type**\: str
                
                .. attribute:: application_role_primary
                
                	Primary/Backup role
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: application_instance
                
                	client\-app identifier
                	**type**\: str
                
                .. attribute:: number_of_labels
                
                	Number of labels
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.LabelSummaryVrfs.LabelSummaryVrf.OwnerCount, self).__init__()

                    self.yang_name = "owner-count"
                    self.yang_parent_name = "label-summary-vrf"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('application_type', YLeaf(YType.enumeration, 'application-type')),
                        ('application_name', YLeaf(YType.str, 'application-name')),
                        ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                        ('application_instance', YLeaf(YType.str, 'application-instance')),
                        ('number_of_labels', YLeaf(YType.uint32, 'number-of-labels')),
                    ])
                    self.application_type = None
                    self.application_name = None
                    self.application_role_primary = None
                    self.application_instance = None
                    self.number_of_labels = None
                    self._segment_path = lambda: "owner-count"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.LabelSummaryVrfs.LabelSummaryVrf.OwnerCount, ['application_type', 'application_name', 'application_role_primary', 'application_instance', 'number_of_labels'], name, value)


    class LabelRange(Entity):
        """
        Label range
        
        .. attribute:: min_dynamic_label_value
        
        	Minimum dynamic label value
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: max_dynamic_label_value
        
        	Maximum dynamic label value
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: min_static_label_value
        
        	Minimum static label value
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: max_static_label_value
        
        	Maximum static label value
        	**type**\: int
        
        	**range:** 0..4294967295
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.LabelRange, self).__init__()

            self.yang_name = "label-range"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('min_dynamic_label_value', YLeaf(YType.uint32, 'min-dynamic-label-value')),
                ('max_dynamic_label_value', YLeaf(YType.uint32, 'max-dynamic-label-value')),
                ('min_static_label_value', YLeaf(YType.uint32, 'min-static-label-value')),
                ('max_static_label_value', YLeaf(YType.uint32, 'max-static-label-value')),
            ])
            self.min_dynamic_label_value = None
            self.max_dynamic_label_value = None
            self.min_static_label_value = None
            self.max_static_label_value = None
            self._segment_path = lambda: "label-range"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.LabelRange, ['min_dynamic_label_value', 'max_dynamic_label_value', 'min_static_label_value', 'max_static_label_value'], name, value)


    class RewriteSummaryVrfs(Entity):
        """
        Rewrite Summary by VRF
        
        .. attribute:: rewrite_summary_vrf
        
        	Rewrite summary by VRF VRF\-name
        	**type**\: list of  		 :py:class:`RewriteSummaryVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.RewriteSummaryVrfs, self).__init__()

            self.yang_name = "rewrite-summary-vrfs"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("rewrite-summary-vrf", ("rewrite_summary_vrf", MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf))])
            self._leafs = OrderedDict()

            self.rewrite_summary_vrf = YList(self)
            self._segment_path = lambda: "rewrite-summary-vrfs"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.RewriteSummaryVrfs, [], name, value)


        class RewriteSummaryVrf(Entity):
            """
            Rewrite summary by VRF VRF\-name
            
            .. attribute:: vrf_name  (key)
            
            	VRF name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: ipv4_paths
            
            	Count for IPv4 paths
            	**type**\:  :py:class:`Ipv4Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths>`
            
            .. attribute:: ipv6_paths
            
            	Count for IPv6 paths
            	**type**\:  :py:class:`Ipv6Paths <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths>`
            
            .. attribute:: num_label_fpi
            
            	Number of label FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_tefpi
            
            	Number of TE FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_ipv4fpi
            
            	Number of IPv4 FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_ipv6fpi
            
            	Number of IPv6 FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_pw_list_tefpi
            
            	Number of PW List FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_dmtctefpi
            
            	Number of DMTC FPI
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_rewrite
            
            	Number of rewrites
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_forward_update
            
            	Total number of forward updates
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_forwad_update_message
            
            	Total number of forward update messages
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_paths
            
            	Total paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_t_ev4_paths
            
            	Total number of Traffic Eng IPv4 paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_te_head_paths
            
            	Total number of Traffic Eng Head paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_pw_paths
            
            	Total number of Pseudo\-wire paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_ip_sub_paths
            
            	Total number of IP Subscriber paths
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_ipv4rpf_neighbors
            
            	Total number of IPv4 RPF Neighbors
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_ipv6rpf_neighbors
            
            	Total number of IPv6 RPF Neighbors
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_rewrite_rpf_neighbors
            
            	Number of rewrites with RPF Neighbors
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_dmtc_intf
            
            	Total number of DMTC External Interfaces
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: vrf_name_xr
            
            	VRF Name
            	**type**\: str
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf, self).__init__()

                self.yang_name = "rewrite-summary-vrf"
                self.yang_parent_name = "rewrite-summary-vrfs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['vrf_name']
                self._child_container_classes = OrderedDict([("ipv4-paths", ("ipv4_paths", MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths)), ("ipv6-paths", ("ipv6_paths", MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('num_label_fpi', YLeaf(YType.uint32, 'num-label-fpi')),
                    ('num_tefpi', YLeaf(YType.uint32, 'num-tefpi')),
                    ('num_ipv4fpi', YLeaf(YType.uint32, 'num-ipv4fpi')),
                    ('num_ipv6fpi', YLeaf(YType.uint32, 'num-ipv6fpi')),
                    ('num_pw_list_tefpi', YLeaf(YType.uint32, 'num-pw-list-tefpi')),
                    ('num_dmtctefpi', YLeaf(YType.uint32, 'num-dmtctefpi')),
                    ('num_rewrite', YLeaf(YType.uint32, 'num-rewrite')),
                    ('total_forward_update', YLeaf(YType.uint32, 'total-forward-update')),
                    ('total_forwad_update_message', YLeaf(YType.uint32, 'total-forwad-update-message')),
                    ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                    ('total_t_ev4_paths', YLeaf(YType.uint32, 'total-t-ev4-paths')),
                    ('total_te_head_paths', YLeaf(YType.uint32, 'total-te-head-paths')),
                    ('total_pw_paths', YLeaf(YType.uint32, 'total-pw-paths')),
                    ('total_ip_sub_paths', YLeaf(YType.uint32, 'total-ip-sub-paths')),
                    ('total_ipv4rpf_neighbors', YLeaf(YType.uint32, 'total-ipv4rpf-neighbors')),
                    ('total_ipv6rpf_neighbors', YLeaf(YType.uint32, 'total-ipv6rpf-neighbors')),
                    ('num_rewrite_rpf_neighbors', YLeaf(YType.uint32, 'num-rewrite-rpf-neighbors')),
                    ('total_dmtc_intf', YLeaf(YType.uint32, 'total-dmtc-intf')),
                    ('vrf_name_xr', YLeaf(YType.str, 'vrf-name-xr')),
                ])
                self.vrf_name = None
                self.num_label_fpi = None
                self.num_tefpi = None
                self.num_ipv4fpi = None
                self.num_ipv6fpi = None
                self.num_pw_list_tefpi = None
                self.num_dmtctefpi = None
                self.num_rewrite = None
                self.total_forward_update = None
                self.total_forwad_update_message = None
                self.total_paths = None
                self.total_t_ev4_paths = None
                self.total_te_head_paths = None
                self.total_pw_paths = None
                self.total_ip_sub_paths = None
                self.total_ipv4rpf_neighbors = None
                self.total_ipv6rpf_neighbors = None
                self.num_rewrite_rpf_neighbors = None
                self.total_dmtc_intf = None
                self.vrf_name_xr = None

                self.ipv4_paths = MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths()
                self.ipv4_paths.parent = self
                self._children_name_map["ipv4_paths"] = "ipv4-paths"
                self._children_yang_names.add("ipv4-paths")

                self.ipv6_paths = MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths()
                self.ipv6_paths.parent = self
                self._children_name_map["ipv6_paths"] = "ipv6-paths"
                self._children_yang_names.add("ipv6-paths")
                self._segment_path = lambda: "rewrite-summary-vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/rewrite-summary-vrfs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf, ['vrf_name', 'num_label_fpi', 'num_tefpi', 'num_ipv4fpi', 'num_ipv6fpi', 'num_pw_list_tefpi', 'num_dmtctefpi', 'num_rewrite', 'total_forward_update', 'total_forwad_update_message', 'total_paths', 'total_t_ev4_paths', 'total_te_head_paths', 'total_pw_paths', 'total_ip_sub_paths', 'total_ipv4rpf_neighbors', 'total_ipv6rpf_neighbors', 'num_rewrite_rpf_neighbors', 'total_dmtc_intf', 'vrf_name_xr'], name, value)


            class Ipv4Paths(Entity):
                """
                Count for IPv4 paths
                
                .. attribute:: total_paths
                
                	Total number of IP paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_backup_paths
                
                	Total number of non\-primary backup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_remote_backup_paths
                
                	Total number of remote backup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_protected_paths
                
                	Total number of protected paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_pop_lkup_paths
                
                	Total number of Pop\-and\-Lookup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths, self).__init__()

                    self.yang_name = "ipv4-paths"
                    self.yang_parent_name = "rewrite-summary-vrf"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                        ('total_backup_paths', YLeaf(YType.uint32, 'total-backup-paths')),
                        ('total_remote_backup_paths', YLeaf(YType.uint32, 'total-remote-backup-paths')),
                        ('total_protected_paths', YLeaf(YType.uint32, 'total-protected-paths')),
                        ('total_pop_lkup_paths', YLeaf(YType.uint32, 'total-pop-lkup-paths')),
                    ])
                    self.total_paths = None
                    self.total_backup_paths = None
                    self.total_remote_backup_paths = None
                    self.total_protected_paths = None
                    self.total_pop_lkup_paths = None
                    self._segment_path = lambda: "ipv4-paths"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv4Paths, ['total_paths', 'total_backup_paths', 'total_remote_backup_paths', 'total_protected_paths', 'total_pop_lkup_paths'], name, value)


            class Ipv6Paths(Entity):
                """
                Count for IPv6 paths
                
                .. attribute:: total_paths
                
                	Total number of IP paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_backup_paths
                
                	Total number of non\-primary backup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_remote_backup_paths
                
                	Total number of remote backup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_protected_paths
                
                	Total number of protected paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: total_pop_lkup_paths
                
                	Total number of Pop\-and\-Lookup paths
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths, self).__init__()

                    self.yang_name = "ipv6-paths"
                    self.yang_parent_name = "rewrite-summary-vrf"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('total_paths', YLeaf(YType.uint32, 'total-paths')),
                        ('total_backup_paths', YLeaf(YType.uint32, 'total-backup-paths')),
                        ('total_remote_backup_paths', YLeaf(YType.uint32, 'total-remote-backup-paths')),
                        ('total_protected_paths', YLeaf(YType.uint32, 'total-protected-paths')),
                        ('total_pop_lkup_paths', YLeaf(YType.uint32, 'total-pop-lkup-paths')),
                    ])
                    self.total_paths = None
                    self.total_backup_paths = None
                    self.total_remote_backup_paths = None
                    self.total_protected_paths = None
                    self.total_pop_lkup_paths = None
                    self._segment_path = lambda: "ipv6-paths"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.RewriteSummaryVrfs.RewriteSummaryVrf.Ipv6Paths, ['total_paths', 'total_backup_paths', 'total_remote_backup_paths', 'total_protected_paths', 'total_pop_lkup_paths'], name, value)


    class Interfaces(Entity):
        """
        Table of MPLS interfaces
        
        .. attribute:: interface
        
        	Data for MPLS interface
        	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Interfaces.Interface>`
        
        

        """

        _prefix = 'mpls-lsd-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(MplsLsd.Interfaces, self).__init__()

            self.yang_name = "interfaces"
            self.yang_parent_name = "mpls-lsd"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface", ("interface", MplsLsd.Interfaces.Interface))])
            self._leafs = OrderedDict()

            self.interface = YList(self)
            self._segment_path = lambda: "interfaces"
            self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(MplsLsd.Interfaces, [], name, value)


        class Interface(Entity):
            """
            Data for MPLS interface
            
            .. attribute:: interface_name  (key)
            
            	Interface
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: interface
            
            	Interface
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: interface_state
            
            	Interface state
            	**type**\:  :py:class:`MgmtLsdIntfState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdIntfState>`
            
            .. attribute:: application_owner
            
            	Application Owner
            	**type**\: list of  		 :py:class:`ApplicationOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MplsLsd.Interfaces.Interface.ApplicationOwner>`
            
            

            """

            _prefix = 'mpls-lsd-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(MplsLsd.Interfaces.Interface, self).__init__()

                self.yang_name = "interface"
                self.yang_parent_name = "interfaces"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['interface_name']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("application-owner", ("application_owner", MplsLsd.Interfaces.Interface.ApplicationOwner))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('interface', YLeaf(YType.str, 'interface')),
                    ('interface_state', YLeaf(YType.enumeration, 'interface-state')),
                ])
                self.interface_name = None
                self.interface = None
                self.interface_state = None

                self.application_owner = YList(self)
                self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd/interfaces/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(MplsLsd.Interfaces.Interface, ['interface_name', 'interface', 'interface_state'], name, value)


            class ApplicationOwner(Entity):
                """
                Application Owner
                
                .. attribute:: application_name
                
                	Application name
                	**type**\: str
                
                .. attribute:: application_type
                
                	Application type
                	**type**\:  :py:class:`MgmtLsdApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdApp>`
                
                .. attribute:: application_role_primary
                
                	Primary/Backup role
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: application_instance
                
                	Application instance Name
                	**type**\: str
                
                .. attribute:: resource_state
                
                	Application resource state
                	**type**\:  :py:class:`MgmtLsdAppRsrcState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_lsd_oper.MgmtLsdAppRsrcState>`
                
                

                """

                _prefix = 'mpls-lsd-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(MplsLsd.Interfaces.Interface.ApplicationOwner, self).__init__()

                    self.yang_name = "application-owner"
                    self.yang_parent_name = "interface"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('application_name', YLeaf(YType.str, 'application-name')),
                        ('application_type', YLeaf(YType.enumeration, 'application-type')),
                        ('application_role_primary', YLeaf(YType.int32, 'application-role-primary')),
                        ('application_instance', YLeaf(YType.str, 'application-instance')),
                        ('resource_state', YLeaf(YType.enumeration, 'resource-state')),
                    ])
                    self.application_name = None
                    self.application_type = None
                    self.application_role_primary = None
                    self.application_instance = None
                    self.resource_state = None
                    self._segment_path = lambda: "application-owner"

                def __setattr__(self, name, value):
                    self._perform_setattr(MplsLsd.Interfaces.Interface.ApplicationOwner, ['application_name', 'application_type', 'application_role_primary', 'application_instance', 'resource_state'], name, value)

    def clone_ptr(self):
        self._top_entity = MplsLsd()
        return self._top_entity

