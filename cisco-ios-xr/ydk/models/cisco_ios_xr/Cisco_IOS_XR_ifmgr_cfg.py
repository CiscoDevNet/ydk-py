""" Cisco_IOS_XR_ifmgr_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ifmgr package configuration.

This module contains definitions
for the following management objects\:
  global\-interface\-configuration\: Global scoped configuration
    for interfaces
  interface\-configurations\: interface configurations

Copyright (c) 2013\-2018 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class InterfaceModeEnum(Enum):
    """
    InterfaceModeEnum (Enum Class)

    Interface mode enum

    .. data:: default = 0

    	Default Interface Mode

    .. data:: point_to_point = 1

    	Point-to-Point Interface Mode

    .. data:: multipoint = 2

    	Multipoint Interface Mode

    .. data:: l2_transport = 3

    	L2 Transport Interface Mode

    """

    default = Enum.YLeaf(0, "default")

    point_to_point = Enum.YLeaf(1, "point-to-point")

    multipoint = Enum.YLeaf(2, "multipoint")

    l2_transport = Enum.YLeaf(3, "l2-transport")


class LinkStatusEnum(Enum):
    """
    LinkStatusEnum (Enum Class)

    Link status enum

    .. data:: default = 0

    	Display link status messages for physical links

    .. data:: disable = 1

    	Disable link status messages

    .. data:: software_interfaces = 2

    	Display link status messages for all interfaces

    """

    default = Enum.YLeaf(0, "default")

    disable = Enum.YLeaf(1, "disable")

    software_interfaces = Enum.YLeaf(2, "software-interfaces")


class SecondaryAdminStateEnum(Enum):
    """
    SecondaryAdminStateEnum (Enum Class)

    Secondary admin state enum

    .. data:: normal = 0

    	Normal Mode

    .. data:: maintenance = 1

    	Maintenance Mode

    """

    normal = Enum.YLeaf(0, "normal")

    maintenance = Enum.YLeaf(1, "maintenance")



class GlobalInterfaceConfiguration(Entity):
    """
    Global scoped configuration for interfaces
    
    .. attribute:: link_status
    
    	Enable or disable link\-status messages
    	**type**\:  :py:class:`LinkStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.LinkStatusEnum>`
    
    	**default value**\: default
    
    

    """

    _prefix = 'ifmgr-cfg'
    _revision = '2017-09-07'

    def __init__(self):
        super(GlobalInterfaceConfiguration, self).__init__()
        self._top_entity = None

        self.yang_name = "global-interface-configuration"
        self.yang_parent_name = "Cisco-IOS-XR-ifmgr-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([])
        self._leafs = OrderedDict([
            ('link_status', (YLeaf(YType.enumeration, 'link-status'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg', 'LinkStatusEnum', '')])),
        ])
        self.link_status = None
        self._segment_path = lambda: "Cisco-IOS-XR-ifmgr-cfg:global-interface-configuration"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(GlobalInterfaceConfiguration, [u'link_status'], name, value)

    def clone_ptr(self):
        self._top_entity = GlobalInterfaceConfiguration()
        return self._top_entity



class InterfaceConfigurations(Entity):
    """
    interface configurations
    
    .. attribute:: interface_configuration
    
    	The configuration for an interface
    	**type**\: list of  		 :py:class:`InterfaceConfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration>`
    
    

    """

    _prefix = 'ifmgr-cfg'
    _revision = '2017-09-07'

    def __init__(self):
        super(InterfaceConfigurations, self).__init__()
        self._top_entity = None

        self.yang_name = "interface-configurations"
        self.yang_parent_name = "Cisco-IOS-XR-ifmgr-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("interface-configuration", ("interface_configuration", InterfaceConfigurations.InterfaceConfiguration))])
        self._leafs = OrderedDict()

        self.interface_configuration = YList(self)
        self._segment_path = lambda: "Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(InterfaceConfigurations, [], name, value)


    class InterfaceConfiguration(Entity):
        """
        The configuration for an interface
        
        .. attribute:: active  (key)
        
        	Whether the interface is active or preconfigured
        	**type**\: str
        
        	**pattern:** (act)\|(pre)
        
        .. attribute:: interface_name  (key)
        
        	The name of the interface
        	**type**\: str
        
        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
        
        .. attribute:: dampening
        
        	Whether this interface's state changes are dampened or not
        	**type**\:  :py:class:`Dampening <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dampening>`
        
        .. attribute:: mtus
        
        	The MTU configuration for the interface
        	**type**\:  :py:class:`Mtus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mtus>`
        
        .. attribute:: encapsulation
        
        	The encapsulation on the interface
        	**type**\:  :py:class:`Encapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Encapsulation>`
        
        .. attribute:: shutdown
        
        	The existence of this configuration indicates the interface is shut down
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: interface_virtual
        
        	The mode in which an interface is running. The existence of this object causes the creation of the software virtual/subinterface
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: secondary_admin_state
        
        	The secondary admin state of the interface
        	**type**\:  :py:class:`SecondaryAdminStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.SecondaryAdminStateEnum>`
        
        .. attribute:: interface_mode_non_physical
        
        	The mode in which an interface is running. The existence of this object causes the creation of the software subinterface
        	**type**\:  :py:class:`InterfaceModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceModeEnum>`
        
        	**default value**\: default
        
        .. attribute:: bandwidth
        
        	The bandwidth of the interface in kbps
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**units**\: kbit/s
        
        .. attribute:: link_status
        
        	Enable interface and line\-protocol state change alarms
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: description
        
        	The description of this interface
        	**type**\: str
        
        .. attribute:: cisco_ios_xr_ppp_ma_fsm_cfg_ppp
        
        	Interface PPP configuration data
        	**type**\:  :py:class:`CiscoIOSXRPppMaFsmCfgPpp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp>`
        
        .. attribute:: vrf
        
        	Assign the interface to a VRF
        	**type**\: str
        
        	**length:** 1..32
        
        .. attribute:: afs
        
        	Per\-address\-family and topology configuration
        	**type**\:  :py:class:`Afs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Afs>`
        
        .. attribute:: pseudowire_ether
        
        	PW\-Ether attributes
        	**type**\:  :py:class:`PseudowireEther <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PseudowireEther>`
        
        .. attribute:: pseudowire_iw
        
        	PW\-IW attributes
        	**type**\:  :py:class:`PseudowireIw <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PseudowireIw>`
        
        .. attribute:: bvi
        
        	BVI attributes
        	**type**\:  :py:class:`Bvi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bvi>`
        
        .. attribute:: l2_transport
        
        	Interface Layer 2 Transport service configuration data
        	**type**\:  :py:class:`L2Transport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport>`
        
        .. attribute:: cisco_ios_xr_ppp_ma_lcp_cfg_ppp_
        
        	Interface PPP configuration data
        	**type**\:  :py:class:`CiscoIOSXRPppMaLcpCfgPpp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp>`
        
        .. attribute:: statistics
        
        	Per\-interface statistics configuration
        	**type**\:  :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Statistics>`
        
        .. attribute:: cisco_ios_xr_ppp_ma_ipcpiw_cfg_ppp__
        
        	Interface PPP configuration data
        	**type**\:  :py:class:`CiscoIOSXRPppMaIpcpiwCfgPpp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp>`
        
        .. attribute:: pppoe
        
        	Interface PPPoE configuration data
        	**type**\:  :py:class:`Pppoe <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Pppoe>`
        
        .. attribute:: ethernet
        
        	Ether specific interface configuration
        	**type**\:  :py:class:`Ethernet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet>`
        
        .. attribute:: span_monitor_sessions
        
        	Monitor Session container for this source interface
        	**type**\:  :py:class:`SpanMonitorSessions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions>`
        
        .. attribute:: frequency_synchronization
        
        	Frequency Synchronization interface configuration
        	**type**\:  :py:class:`FrequencySynchronization <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization>`
        
        .. attribute:: nv_satellite_access
        
        	nV Satellite Access Link Configuration
        	**type**\:  :py:class:`NvSatelliteAccess <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess>`
        
        .. attribute:: nv_satellite_fabric_link
        
        	nV Satellite Fabric Link Configuration
        	**type**\:  :py:class:`NvSatelliteFabricLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink>`
        
        	**presence node**\: True
        
        .. attribute:: nv_satellite_fabric_network
        
        	Complex Network connection to one or more Satellites
        	**type**\:  :py:class:`NvSatelliteFabricNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork>`
        
        	**presence node**\: True
        
        .. attribute:: nve
        
        	NVE operational data
        	**type**\:  :py:class:`Nve <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Nve>`
        
        .. attribute:: performance_management
        
        	Configure pm parameters
        	**type**\:  :py:class:`PerformanceManagement <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement>`
        
        .. attribute:: ptp
        
        	Precision Time Protocol interface configuration
        	**type**\:  :py:class:`Ptp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp>`
        
        .. attribute:: ethernet_control
        
        	EthernetControl
        	**type**\:  :py:class:`EthernetControl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetControl>`
        
        .. attribute:: pbr
        
        	Interface PBR configuration
        	**type**\:  :py:class:`Pbr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Pbr>`
        
        .. attribute:: tunnel_ip
        
        	IP over GRE encapsulation
        	**type**\:  :py:class:`TunnelIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelIp>`
        
        .. attribute:: optics
        
        	Optics controller configuration
        	**type**\:  :py:class:`Optics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics>`
        
        .. attribute:: laser_squelch
        
        	Configure Laser\-Squelch
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: holdoff_time
        
        	Configure Holdoff Time
        	**type**\: int
        
        	**range:** 0..3000
        
        .. attribute:: loopbacks
        
        	Configure Extended loopback (diagnostics)
        	**type**\:  :py:class:`Loopbacks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Loopbacks>`
        
        .. attribute:: perf_mon_disable
        
        	Configure Performance Monitoring 
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: subscriber
        
        	Subscribers on interface
        	**type**\:  :py:class:`Subscriber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber>`
        
        .. attribute:: vlan_sub_configuration
        
        	IEEE 802.1Q VLAN subinterface configuration
        	**type**\:  :py:class:`VlanSubConfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration>`
        
        .. attribute:: ethernet_service
        
        	Ethernet service configuration
        	**type**\:  :py:class:`EthernetService <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetService>`
        
        .. attribute:: ethernet_bng
        
        	Ethernet Infra BNG specific configuration
        	**type**\:  :py:class:`EthernetBng <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetBng>`
        
        .. attribute:: mac_accounting
        
        	MAC Accounting Configuration
        	**type**\:  :py:class:`MacAccounting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MacAccounting>`
        
        .. attribute:: ethernet_features
        
        	Ethernet Features Configuration
        	**type**\:  :py:class:`EthernetFeatures <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures>`
        
        .. attribute:: carrier_delay
        
        	Set the carrier transition delay on an interface in msecs
        	**type**\:  :py:class:`CarrierDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CarrierDelay>`
        
        .. attribute:: vlan_trunk_configuration
        
        	IEEE 802.1Q VLAN trunk interface configuration
        	**type**\:  :py:class:`VlanTrunkConfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration>`
        
        .. attribute:: ssrp_session
        
        	SSRP Config
        	**type**\:  :py:class:`SsrpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SsrpSession>`
        
        .. attribute:: cdp
        
        	Interface specific CDP configuration
        	**type**\:  :py:class:`Cdp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Cdp>`
        
        .. attribute:: maintenance_embargo
        
        	configure maintenance embargo flag on the given interface
        	**type**\: bool
        
        .. attribute:: dwdm
        
        	DWDM port controller configuration
        	**type**\:  :py:class:`Dwdm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm>`
        
        .. attribute:: qos
        
        	Interface QOS configuration
        	**type**\:  :py:class:`Qos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos>`
        
        .. attribute:: cisco_ios_xr_ppp_ma_cfg_ppp___
        
        	Interface PPP configuration data
        	**type**\:  :py:class:`CiscoIOSXRPppMaCfgPpp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaCfgPpp>`
        
        .. attribute:: lldp
        
        	Disable LLDP TX or RX
        	**type**\:  :py:class:`Lldp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lldp>`
        
        	**presence node**\: True
        
        .. attribute:: atm
        
        	ATM Configuration
        	**type**\:  :py:class:`Atm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm>`
        
        .. attribute:: dot1x_interface
        
        	Interface Specific Dot1x Configuration
        	**type**\:  :py:class:`Dot1xInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dot1xInterface>`
        
        .. attribute:: ipv4_network
        
        	Interface IPv4 Network configuration data
        	**type**\:  :py:class:`Ipv4Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network>`
        
        .. attribute:: ipv4_network_forwarding
        
        	Interface IPv4 Network configuration data also used for forwarding
        	**type**\:  :py:class:`Ipv4NetworkForwarding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4NetworkForwarding>`
        
        .. attribute:: track_name
        
        	Track Name
        	**type**\: str
        
        	**length:** 1..32
        
        .. attribute:: aaa_table
        
        	AAA configuration
        	**type**\:  :py:class:`AaaTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.AaaTable>`
        
        .. attribute:: ipv6_packet_filter
        
        	IPv6 Packet Filtering configuration for the interface
        	**type**\:  :py:class:`Ipv6PacketFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter>`
        
        .. attribute:: es_packet_filter
        
        	ES Packet Filtering configuration for the interface
        	**type**\:  :py:class:`EsPacketFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EsPacketFilter>`
        
        .. attribute:: ipv4_packet_filter
        
        	IPv4 Packet Filtering configuration for the interface
        	**type**\:  :py:class:`Ipv4PacketFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter>`
        
        .. attribute:: ipv4_flow_spec
        
        	Flowspec on IPv4 interface
        	**type**\:  :py:class:`Ipv4FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4FlowSpec>`
        
        .. attribute:: ipv6_flow_spec
        
        	Flowspec on IPv6 interface
        	**type**\:  :py:class:`Ipv6FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6FlowSpec>`
        
        .. attribute:: wanphy
        
        	WANPHY port controller configuration
        	**type**\:  :py:class:`Wanphy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Wanphy>`
        
        .. attribute:: ipv6_network
        
        	Interface IPv6 Network configuration data
        	**type**\:  :py:class:`Ipv6Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network>`
        
        .. attribute:: mpls
        
        	MPLS configuration under an interface
        	**type**\:  :py:class:`Mpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mpls>`
        
        .. attribute:: tunnel_te_attributes
        
        	MPLS tunnel attributes
        	**type**\:  :py:class:`TunnelTeAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes>`
        
        .. attribute:: transport_profile_tunnel
        
        	MPLS\-TP tunnel attributes
        	**type**\:  :py:class:`TransportProfileTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel>`
        
        .. attribute:: mte_tunnel_attributes
        
        	MPLS P2MP tunnel attributes
        	**type**\:  :py:class:`MteTunnelAttributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes>`
        
        .. attribute:: otu
        
        	OTU port controller configuration
        	**type**\:  :py:class:`Otu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu>`
        
        .. attribute:: net_flow
        
        	Interface netflow configuration
        	**type**\:  :py:class:`NetFlow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow>`
        
        .. attribute:: bfd
        
        	BFD over bundle members configuration
        	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd>`
        
        .. attribute:: bundle
        
        	Generic per\-bundle configuration
        	**type**\:  :py:class:`Bundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle>`
        
        .. attribute:: lacp
        
        	Link Aggregation Control Protocol per\-interface configuration (for bundle or member)
        	**type**\:  :py:class:`Lacp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lacp>`
        
        .. attribute:: bundle_member
        
        	Generic per\-member configuration
        	**type**\:  :py:class:`BundleMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.BundleMember>`
        
        .. attribute:: mlacp
        
        	Multi\-chassis LACP configuration
        	**type**\:  :py:class:`Mlacp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mlacp>`
        
        .. attribute:: macsec
        
        	MACSec service for an interface
        	**type**\:  :py:class:`Macsec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Macsec>`
        
        .. attribute:: fast_shutdown
        
        	Enable Fast Shutdown for this interface
        	**type**\: :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: mac_addr
        
        	Set the Mac address on an interface
        	**type**\: str
        
        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
        
        .. attribute:: ipv6_neighbor
        
        	IPv6 interface neighbor or neighbor discovery configuration
        	**type**\:  :py:class:`Ipv6Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor>`
        
        .. attribute:: service_policies
        
        	Interface control subscriber policy configuration
        	**type**\:  :py:class:`ServicePolicies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.ServicePolicies>`
        
        .. attribute:: portmode
        
        	Configure through port\-mode
        	**type**\:  :py:class:`Portmode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Portmode>`
        
        .. attribute:: cisco_ios_xr_ppp_ma_ipcp_cfg_ppp____
        
        	Interface PPP configuration data
        	**type**\:  :py:class:`CiscoIOSXRPppMaIpcpCfgPpp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp>`
        
        .. attribute:: dagrs
        
        	Direct\-Attached Gateway Redundancy configuration
        	**type**\:  :py:class:`Dagrs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs>`
        
        .. attribute:: ipv4arp
        
        	Configure Address Resolution Protocol
        	**type**\:  :py:class:`Ipv4arp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4arp>`
        
        

        """

        _prefix = 'ifmgr-cfg'
        _revision = '2017-09-07'

        def __init__(self):
            super(InterfaceConfigurations.InterfaceConfiguration, self).__init__()

            self.yang_name = "interface-configuration"
            self.yang_parent_name = "interface-configurations"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = ['active','interface_name']
            self._child_classes = OrderedDict([("dampening", ("dampening", InterfaceConfigurations.InterfaceConfiguration.Dampening)), ("mtus", ("mtus", InterfaceConfigurations.InterfaceConfiguration.Mtus)), ("encapsulation", ("encapsulation", InterfaceConfigurations.InterfaceConfiguration.Encapsulation)), ("Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp", ("cisco_ios_xr_ppp_ma_fsm_cfg_ppp", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp)), ("Cisco-IOS-XR-infra-rsi-cfg:afs", ("afs", InterfaceConfigurations.InterfaceConfiguration.Afs)), ("Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether", ("pseudowire_ether", InterfaceConfigurations.InterfaceConfiguration.PseudowireEther)), ("Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw", ("pseudowire_iw", InterfaceConfigurations.InterfaceConfiguration.PseudowireIw)), ("Cisco-IOS-XR-l2vpn-cfg:bvi", ("bvi", InterfaceConfigurations.InterfaceConfiguration.Bvi)), ("Cisco-IOS-XR-l2vpn-cfg:l2-transport", ("l2_transport", InterfaceConfigurations.InterfaceConfiguration.L2Transport)), ("Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp", ("cisco_ios_xr_ppp_ma_lcp_cfg_ppp_", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp)), ("Cisco-IOS-XR-infra-statsd-cfg:statistics", ("statistics", InterfaceConfigurations.InterfaceConfiguration.Statistics)), ("Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp", ("cisco_ios_xr_ppp_ma_ipcpiw_cfg_ppp__", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp)), ("Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe", ("pppoe", InterfaceConfigurations.InterfaceConfiguration.Pppoe)), ("Cisco-IOS-XR-drivers-media-eth-cfg:ethernet", ("ethernet", InterfaceConfigurations.InterfaceConfiguration.Ethernet)), ("Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions", ("span_monitor_sessions", InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions)), ("Cisco-IOS-XR-freqsync-cfg:frequency-synchronization", ("frequency_synchronization", InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization)), ("Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access", ("nv_satellite_access", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess)), ("Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link", ("nv_satellite_fabric_link", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink)), ("Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network", ("nv_satellite_fabric_network", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork)), ("Cisco-IOS-XR-tunnel-nve-cfg:nve", ("nve", InterfaceConfigurations.InterfaceConfiguration.Nve)), ("Cisco-IOS-XR-pmengine-cfg:performance-management", ("performance_management", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement)), ("Cisco-IOS-XR-ptp-cfg:ptp", ("ptp", InterfaceConfigurations.InterfaceConfiguration.Ptp)), ("Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control", ("ethernet_control", InterfaceConfigurations.InterfaceConfiguration.EthernetControl)), ("Cisco-IOS-XR-pbr-cfg:pbr", ("pbr", InterfaceConfigurations.InterfaceConfiguration.Pbr)), ("Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip", ("tunnel_ip", InterfaceConfigurations.InterfaceConfiguration.TunnelIp)), ("Cisco-IOS-XR-controller-optics-cfg:optics", ("optics", InterfaceConfigurations.InterfaceConfiguration.Optics)), ("Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks", ("loopbacks", InterfaceConfigurations.InterfaceConfiguration.Loopbacks)), ("Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber", ("subscriber", InterfaceConfigurations.InterfaceConfiguration.Subscriber)), ("Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration", ("vlan_sub_configuration", InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration)), ("Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service", ("ethernet_service", InterfaceConfigurations.InterfaceConfiguration.EthernetService)), ("Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng", ("ethernet_bng", InterfaceConfigurations.InterfaceConfiguration.EthernetBng)), ("Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting", ("mac_accounting", InterfaceConfigurations.InterfaceConfiguration.MacAccounting)), ("Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features", ("ethernet_features", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures)), ("Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay", ("carrier_delay", InterfaceConfigurations.InterfaceConfiguration.CarrierDelay)), ("Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration", ("vlan_trunk_configuration", InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration)), ("Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session", ("ssrp_session", InterfaceConfigurations.InterfaceConfiguration.SsrpSession)), ("Cisco-IOS-XR-cdp-cfg:cdp", ("cdp", InterfaceConfigurations.InterfaceConfiguration.Cdp)), ("Cisco-IOS-XR-dwdm-ui-cfg:dwdm", ("dwdm", InterfaceConfigurations.InterfaceConfiguration.Dwdm)), ("Cisco-IOS-XR-qos-ma-cfg:qos", ("qos", InterfaceConfigurations.InterfaceConfiguration.Qos)), ("Cisco-IOS-XR-ppp-ma-cfg:ppp", ("cisco_ios_xr_ppp_ma_cfg_ppp___", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaCfgPpp)), ("Cisco-IOS-XR-ethernet-lldp-cfg:lldp", ("lldp", InterfaceConfigurations.InterfaceConfiguration.Lldp)), ("Cisco-IOS-XR-atm-vcm-cfg:atm", ("atm", InterfaceConfigurations.InterfaceConfiguration.Atm)), ("Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface", ("dot1x_interface", InterfaceConfigurations.InterfaceConfiguration.Dot1xInterface)), ("Cisco-IOS-XR-ipv4-io-cfg:ipv4-network", ("ipv4_network", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network)), ("Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding", ("ipv4_network_forwarding", InterfaceConfigurations.InterfaceConfiguration.Ipv4NetworkForwarding)), ("Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table", ("aaa_table", InterfaceConfigurations.InterfaceConfiguration.AaaTable)), ("Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter", ("ipv6_packet_filter", InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter)), ("Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter", ("es_packet_filter", InterfaceConfigurations.InterfaceConfiguration.EsPacketFilter)), ("Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter", ("ipv4_packet_filter", InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter)), ("Cisco-IOS-XR-flowspec-cfg:ipv4-flow-spec", ("ipv4_flow_spec", InterfaceConfigurations.InterfaceConfiguration.Ipv4FlowSpec)), ("Cisco-IOS-XR-flowspec-cfg:ipv6-flow-spec", ("ipv6_flow_spec", InterfaceConfigurations.InterfaceConfiguration.Ipv6FlowSpec)), ("Cisco-IOS-XR-wanphy-ui-cfg:wanphy", ("wanphy", InterfaceConfigurations.InterfaceConfiguration.Wanphy)), ("Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network", ("ipv6_network", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network)), ("Cisco-IOS-XR-mpls-io-cfg:mpls", ("mpls", InterfaceConfigurations.InterfaceConfiguration.Mpls)), ("Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes", ("tunnel_te_attributes", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes)), ("Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel", ("transport_profile_tunnel", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel)), ("Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes", ("mte_tunnel_attributes", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes)), ("Cisco-IOS-XR-controller-otu-cfg:otu", ("otu", InterfaceConfigurations.InterfaceConfiguration.Otu)), ("Cisco-IOS-XR-traffmon-netflow-cfg:net-flow", ("net_flow", InterfaceConfigurations.InterfaceConfiguration.NetFlow)), ("Cisco-IOS-XR-bundlemgr-cfg:bfd", ("bfd", InterfaceConfigurations.InterfaceConfiguration.Bfd)), ("Cisco-IOS-XR-bundlemgr-cfg:bundle", ("bundle", InterfaceConfigurations.InterfaceConfiguration.Bundle)), ("Cisco-IOS-XR-bundlemgr-cfg:lacp", ("lacp", InterfaceConfigurations.InterfaceConfiguration.Lacp)), ("Cisco-IOS-XR-bundlemgr-cfg:bundle-member", ("bundle_member", InterfaceConfigurations.InterfaceConfiguration.BundleMember)), ("Cisco-IOS-XR-bundlemgr-cfg:mlacp", ("mlacp", InterfaceConfigurations.InterfaceConfiguration.Mlacp)), ("Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec", ("macsec", InterfaceConfigurations.InterfaceConfiguration.Macsec)), ("Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor", ("ipv6_neighbor", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor)), ("Cisco-IOS-XR-iedge4710-cfg:service-policies", ("service_policies", InterfaceConfigurations.InterfaceConfiguration.ServicePolicies)), ("Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode", ("portmode", InterfaceConfigurations.InterfaceConfiguration.Portmode)), ("Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp", ("cisco_ios_xr_ppp_ma_ipcp_cfg_ppp____", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp)), ("Cisco-IOS-XR-ipv4-arp-cfg:dagrs", ("dagrs", InterfaceConfigurations.InterfaceConfiguration.Dagrs)), ("Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp", ("ipv4arp", InterfaceConfigurations.InterfaceConfiguration.Ipv4arp))])
            self._leafs = OrderedDict([
                ('active', (YLeaf(YType.str, 'active'), ['str'])),
                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                ('shutdown', (YLeaf(YType.empty, 'shutdown'), ['Empty'])),
                ('interface_virtual', (YLeaf(YType.empty, 'interface-virtual'), ['Empty'])),
                ('secondary_admin_state', (YLeaf(YType.enumeration, 'secondary-admin-state'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg', 'SecondaryAdminStateEnum', '')])),
                ('interface_mode_non_physical', (YLeaf(YType.enumeration, 'interface-mode-non-physical'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg', 'InterfaceModeEnum', '')])),
                ('bandwidth', (YLeaf(YType.uint32, 'bandwidth'), ['int'])),
                ('link_status', (YLeaf(YType.empty, 'link-status'), ['Empty'])),
                ('description', (YLeaf(YType.str, 'description'), ['str'])),
                ('vrf', (YLeaf(YType.str, 'Cisco-IOS-XR-infra-rsi-cfg:vrf'), ['str'])),
                ('laser_squelch', (YLeaf(YType.empty, 'Cisco-IOS-XR-drivers-icpe-ethernet-cfg:laser-squelch'), ['Empty'])),
                ('holdoff_time', (YLeaf(YType.uint32, 'Cisco-IOS-XR-drivers-icpe-ethernet-cfg:holdoff-time'), ['int'])),
                ('perf_mon_disable', (YLeaf(YType.empty, 'Cisco-IOS-XR-drivers-icpe-ethernet-cfg:perf-mon-disable'), ['Empty'])),
                ('maintenance_embargo', (YLeaf(YType.boolean, 'Cisco-IOS-XR-dwdm-ui-cfg:maintenance-embargo'), ['bool'])),
                ('track_name', (YLeaf(YType.str, 'Cisco-IOS-XR-manageability-object-tracking-cfg:track-name'), ['str'])),
                ('fast_shutdown', (YLeaf(YType.empty, 'Cisco-IOS-XR-mdrv-lib-cfg:fast-shutdown'), ['Empty'])),
                ('mac_addr', (YLeaf(YType.str, 'Cisco-IOS-XR-mdrv-lib-cfg:mac-addr'), ['str'])),
            ])
            self.active = None
            self.interface_name = None
            self.shutdown = None
            self.interface_virtual = None
            self.secondary_admin_state = None
            self.interface_mode_non_physical = None
            self.bandwidth = None
            self.link_status = None
            self.description = None
            self.vrf = None
            self.laser_squelch = None
            self.holdoff_time = None
            self.perf_mon_disable = None
            self.maintenance_embargo = None
            self.track_name = None
            self.fast_shutdown = None
            self.mac_addr = None

            self.dampening = InterfaceConfigurations.InterfaceConfiguration.Dampening()
            self.dampening.parent = self
            self._children_name_map["dampening"] = "dampening"

            self.mtus = InterfaceConfigurations.InterfaceConfiguration.Mtus()
            self.mtus.parent = self
            self._children_name_map["mtus"] = "mtus"

            self.encapsulation = InterfaceConfigurations.InterfaceConfiguration.Encapsulation()
            self.encapsulation.parent = self
            self._children_name_map["encapsulation"] = "encapsulation"

            self.cisco_ios_xr_ppp_ma_fsm_cfg_ppp = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp()
            self.cisco_ios_xr_ppp_ma_fsm_cfg_ppp.parent = self
            self._children_name_map["cisco_ios_xr_ppp_ma_fsm_cfg_ppp"] = "Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp"

            self.afs = InterfaceConfigurations.InterfaceConfiguration.Afs()
            self.afs.parent = self
            self._children_name_map["afs"] = "Cisco-IOS-XR-infra-rsi-cfg:afs"

            self.pseudowire_ether = InterfaceConfigurations.InterfaceConfiguration.PseudowireEther()
            self.pseudowire_ether.parent = self
            self._children_name_map["pseudowire_ether"] = "Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether"

            self.pseudowire_iw = InterfaceConfigurations.InterfaceConfiguration.PseudowireIw()
            self.pseudowire_iw.parent = self
            self._children_name_map["pseudowire_iw"] = "Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw"

            self.bvi = InterfaceConfigurations.InterfaceConfiguration.Bvi()
            self.bvi.parent = self
            self._children_name_map["bvi"] = "Cisco-IOS-XR-l2vpn-cfg:bvi"

            self.l2_transport = InterfaceConfigurations.InterfaceConfiguration.L2Transport()
            self.l2_transport.parent = self
            self._children_name_map["l2_transport"] = "Cisco-IOS-XR-l2vpn-cfg:l2-transport"

            self.cisco_ios_xr_ppp_ma_lcp_cfg_ppp_ = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp()
            self.cisco_ios_xr_ppp_ma_lcp_cfg_ppp_.parent = self
            self._children_name_map["cisco_ios_xr_ppp_ma_lcp_cfg_ppp_"] = "Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp"

            self.statistics = InterfaceConfigurations.InterfaceConfiguration.Statistics()
            self.statistics.parent = self
            self._children_name_map["statistics"] = "Cisco-IOS-XR-infra-statsd-cfg:statistics"

            self.cisco_ios_xr_ppp_ma_ipcpiw_cfg_ppp__ = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp()
            self.cisco_ios_xr_ppp_ma_ipcpiw_cfg_ppp__.parent = self
            self._children_name_map["cisco_ios_xr_ppp_ma_ipcpiw_cfg_ppp__"] = "Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp"

            self.pppoe = InterfaceConfigurations.InterfaceConfiguration.Pppoe()
            self.pppoe.parent = self
            self._children_name_map["pppoe"] = "Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe"

            self.ethernet = InterfaceConfigurations.InterfaceConfiguration.Ethernet()
            self.ethernet.parent = self
            self._children_name_map["ethernet"] = "Cisco-IOS-XR-drivers-media-eth-cfg:ethernet"

            self.span_monitor_sessions = InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions()
            self.span_monitor_sessions.parent = self
            self._children_name_map["span_monitor_sessions"] = "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"

            self.frequency_synchronization = InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization()
            self.frequency_synchronization.parent = self
            self._children_name_map["frequency_synchronization"] = "Cisco-IOS-XR-freqsync-cfg:frequency-synchronization"

            self.nv_satellite_access = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess()
            self.nv_satellite_access.parent = self
            self._children_name_map["nv_satellite_access"] = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access"

            self.nv_satellite_fabric_link = None
            self._children_name_map["nv_satellite_fabric_link"] = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link"

            self.nv_satellite_fabric_network = None
            self._children_name_map["nv_satellite_fabric_network"] = "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network"

            self.nve = InterfaceConfigurations.InterfaceConfiguration.Nve()
            self.nve.parent = self
            self._children_name_map["nve"] = "Cisco-IOS-XR-tunnel-nve-cfg:nve"

            self.performance_management = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement()
            self.performance_management.parent = self
            self._children_name_map["performance_management"] = "Cisco-IOS-XR-pmengine-cfg:performance-management"

            self.ptp = InterfaceConfigurations.InterfaceConfiguration.Ptp()
            self.ptp.parent = self
            self._children_name_map["ptp"] = "Cisco-IOS-XR-ptp-cfg:ptp"

            self.ethernet_control = InterfaceConfigurations.InterfaceConfiguration.EthernetControl()
            self.ethernet_control.parent = self
            self._children_name_map["ethernet_control"] = "Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control"

            self.pbr = InterfaceConfigurations.InterfaceConfiguration.Pbr()
            self.pbr.parent = self
            self._children_name_map["pbr"] = "Cisco-IOS-XR-pbr-cfg:pbr"

            self.tunnel_ip = InterfaceConfigurations.InterfaceConfiguration.TunnelIp()
            self.tunnel_ip.parent = self
            self._children_name_map["tunnel_ip"] = "Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip"

            self.optics = InterfaceConfigurations.InterfaceConfiguration.Optics()
            self.optics.parent = self
            self._children_name_map["optics"] = "Cisco-IOS-XR-controller-optics-cfg:optics"

            self.loopbacks = InterfaceConfigurations.InterfaceConfiguration.Loopbacks()
            self.loopbacks.parent = self
            self._children_name_map["loopbacks"] = "Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks"

            self.subscriber = InterfaceConfigurations.InterfaceConfiguration.Subscriber()
            self.subscriber.parent = self
            self._children_name_map["subscriber"] = "Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber"

            self.vlan_sub_configuration = InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration()
            self.vlan_sub_configuration.parent = self
            self._children_name_map["vlan_sub_configuration"] = "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration"

            self.ethernet_service = InterfaceConfigurations.InterfaceConfiguration.EthernetService()
            self.ethernet_service.parent = self
            self._children_name_map["ethernet_service"] = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service"

            self.ethernet_bng = InterfaceConfigurations.InterfaceConfiguration.EthernetBng()
            self.ethernet_bng.parent = self
            self._children_name_map["ethernet_bng"] = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng"

            self.mac_accounting = InterfaceConfigurations.InterfaceConfiguration.MacAccounting()
            self.mac_accounting.parent = self
            self._children_name_map["mac_accounting"] = "Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting"

            self.ethernet_features = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures()
            self.ethernet_features.parent = self
            self._children_name_map["ethernet_features"] = "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features"

            self.carrier_delay = InterfaceConfigurations.InterfaceConfiguration.CarrierDelay()
            self.carrier_delay.parent = self
            self._children_name_map["carrier_delay"] = "Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay"

            self.vlan_trunk_configuration = InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration()
            self.vlan_trunk_configuration.parent = self
            self._children_name_map["vlan_trunk_configuration"] = "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration"

            self.ssrp_session = InterfaceConfigurations.InterfaceConfiguration.SsrpSession()
            self.ssrp_session.parent = self
            self._children_name_map["ssrp_session"] = "Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session"

            self.cdp = InterfaceConfigurations.InterfaceConfiguration.Cdp()
            self.cdp.parent = self
            self._children_name_map["cdp"] = "Cisco-IOS-XR-cdp-cfg:cdp"

            self.dwdm = InterfaceConfigurations.InterfaceConfiguration.Dwdm()
            self.dwdm.parent = self
            self._children_name_map["dwdm"] = "Cisco-IOS-XR-dwdm-ui-cfg:dwdm"

            self.qos = InterfaceConfigurations.InterfaceConfiguration.Qos()
            self.qos.parent = self
            self._children_name_map["qos"] = "Cisco-IOS-XR-qos-ma-cfg:qos"

            self.cisco_ios_xr_ppp_ma_cfg_ppp___ = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaCfgPpp()
            self.cisco_ios_xr_ppp_ma_cfg_ppp___.parent = self
            self._children_name_map["cisco_ios_xr_ppp_ma_cfg_ppp___"] = "Cisco-IOS-XR-ppp-ma-cfg:ppp"

            self.lldp = None
            self._children_name_map["lldp"] = "Cisco-IOS-XR-ethernet-lldp-cfg:lldp"

            self.atm = InterfaceConfigurations.InterfaceConfiguration.Atm()
            self.atm.parent = self
            self._children_name_map["atm"] = "Cisco-IOS-XR-atm-vcm-cfg:atm"

            self.dot1x_interface = InterfaceConfigurations.InterfaceConfiguration.Dot1xInterface()
            self.dot1x_interface.parent = self
            self._children_name_map["dot1x_interface"] = "Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface"

            self.ipv4_network = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network()
            self.ipv4_network.parent = self
            self._children_name_map["ipv4_network"] = "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network"

            self.ipv4_network_forwarding = InterfaceConfigurations.InterfaceConfiguration.Ipv4NetworkForwarding()
            self.ipv4_network_forwarding.parent = self
            self._children_name_map["ipv4_network_forwarding"] = "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding"

            self.aaa_table = InterfaceConfigurations.InterfaceConfiguration.AaaTable()
            self.aaa_table.parent = self
            self._children_name_map["aaa_table"] = "Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table"

            self.ipv6_packet_filter = InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter()
            self.ipv6_packet_filter.parent = self
            self._children_name_map["ipv6_packet_filter"] = "Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter"

            self.es_packet_filter = InterfaceConfigurations.InterfaceConfiguration.EsPacketFilter()
            self.es_packet_filter.parent = self
            self._children_name_map["es_packet_filter"] = "Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter"

            self.ipv4_packet_filter = InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter()
            self.ipv4_packet_filter.parent = self
            self._children_name_map["ipv4_packet_filter"] = "Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter"

            self.ipv4_flow_spec = InterfaceConfigurations.InterfaceConfiguration.Ipv4FlowSpec()
            self.ipv4_flow_spec.parent = self
            self._children_name_map["ipv4_flow_spec"] = "Cisco-IOS-XR-flowspec-cfg:ipv4-flow-spec"

            self.ipv6_flow_spec = InterfaceConfigurations.InterfaceConfiguration.Ipv6FlowSpec()
            self.ipv6_flow_spec.parent = self
            self._children_name_map["ipv6_flow_spec"] = "Cisco-IOS-XR-flowspec-cfg:ipv6-flow-spec"

            self.wanphy = InterfaceConfigurations.InterfaceConfiguration.Wanphy()
            self.wanphy.parent = self
            self._children_name_map["wanphy"] = "Cisco-IOS-XR-wanphy-ui-cfg:wanphy"

            self.ipv6_network = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network()
            self.ipv6_network.parent = self
            self._children_name_map["ipv6_network"] = "Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network"

            self.mpls = InterfaceConfigurations.InterfaceConfiguration.Mpls()
            self.mpls.parent = self
            self._children_name_map["mpls"] = "Cisco-IOS-XR-mpls-io-cfg:mpls"

            self.tunnel_te_attributes = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes()
            self.tunnel_te_attributes.parent = self
            self._children_name_map["tunnel_te_attributes"] = "Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes"

            self.transport_profile_tunnel = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel()
            self.transport_profile_tunnel.parent = self
            self._children_name_map["transport_profile_tunnel"] = "Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel"

            self.mte_tunnel_attributes = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes()
            self.mte_tunnel_attributes.parent = self
            self._children_name_map["mte_tunnel_attributes"] = "Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes"

            self.otu = InterfaceConfigurations.InterfaceConfiguration.Otu()
            self.otu.parent = self
            self._children_name_map["otu"] = "Cisco-IOS-XR-controller-otu-cfg:otu"

            self.net_flow = InterfaceConfigurations.InterfaceConfiguration.NetFlow()
            self.net_flow.parent = self
            self._children_name_map["net_flow"] = "Cisco-IOS-XR-traffmon-netflow-cfg:net-flow"

            self.bfd = InterfaceConfigurations.InterfaceConfiguration.Bfd()
            self.bfd.parent = self
            self._children_name_map["bfd"] = "Cisco-IOS-XR-bundlemgr-cfg:bfd"

            self.bundle = InterfaceConfigurations.InterfaceConfiguration.Bundle()
            self.bundle.parent = self
            self._children_name_map["bundle"] = "Cisco-IOS-XR-bundlemgr-cfg:bundle"

            self.lacp = InterfaceConfigurations.InterfaceConfiguration.Lacp()
            self.lacp.parent = self
            self._children_name_map["lacp"] = "Cisco-IOS-XR-bundlemgr-cfg:lacp"

            self.bundle_member = InterfaceConfigurations.InterfaceConfiguration.BundleMember()
            self.bundle_member.parent = self
            self._children_name_map["bundle_member"] = "Cisco-IOS-XR-bundlemgr-cfg:bundle-member"

            self.mlacp = InterfaceConfigurations.InterfaceConfiguration.Mlacp()
            self.mlacp.parent = self
            self._children_name_map["mlacp"] = "Cisco-IOS-XR-bundlemgr-cfg:mlacp"

            self.macsec = InterfaceConfigurations.InterfaceConfiguration.Macsec()
            self.macsec.parent = self
            self._children_name_map["macsec"] = "Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec"

            self.ipv6_neighbor = InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor()
            self.ipv6_neighbor.parent = self
            self._children_name_map["ipv6_neighbor"] = "Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor"

            self.service_policies = InterfaceConfigurations.InterfaceConfiguration.ServicePolicies()
            self.service_policies.parent = self
            self._children_name_map["service_policies"] = "Cisco-IOS-XR-iedge4710-cfg:service-policies"

            self.portmode = InterfaceConfigurations.InterfaceConfiguration.Portmode()
            self.portmode.parent = self
            self._children_name_map["portmode"] = "Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode"

            self.cisco_ios_xr_ppp_ma_ipcp_cfg_ppp____ = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp()
            self.cisco_ios_xr_ppp_ma_ipcp_cfg_ppp____.parent = self
            self._children_name_map["cisco_ios_xr_ppp_ma_ipcp_cfg_ppp____"] = "Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp"

            self.dagrs = InterfaceConfigurations.InterfaceConfiguration.Dagrs()
            self.dagrs.parent = self
            self._children_name_map["dagrs"] = "Cisco-IOS-XR-ipv4-arp-cfg:dagrs"

            self.ipv4arp = InterfaceConfigurations.InterfaceConfiguration.Ipv4arp()
            self.ipv4arp.parent = self
            self._children_name_map["ipv4arp"] = "Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp"
            self._segment_path = lambda: "interface-configuration" + "[active='" + str(self.active) + "']" + "[interface-name='" + str(self.interface_name) + "']"
            self._absolute_path = lambda: "Cisco-IOS-XR-ifmgr-cfg:interface-configurations/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration, [u'active', u'interface_name', u'shutdown', u'interface_virtual', u'secondary_admin_state', u'interface_mode_non_physical', u'bandwidth', u'link_status', u'description', u'vrf', 'laser_squelch', 'holdoff_time', 'perf_mon_disable', 'maintenance_embargo', 'track_name', 'fast_shutdown', 'mac_addr'], name, value)


        class Dampening(Entity):
            """
            Whether this interface's state changes are
            dampened or not
            
            .. attribute:: args
            
            	Dampening Arguments
            	**type**\:  :py:class:`Args <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dampening.Args>`
            
            .. attribute:: half_life
            
            	Decay half life (in minutes)
            	**type**\: int
            
            	**range:** 1..45
            
            	**units**\: minute
            
            .. attribute:: reuse_threshold
            
            	Reuse threshold
            	**type**\: int
            
            	**range:** 1..20000
            
            .. attribute:: suppress_threshold
            
            	Suppress threshold
            	**type**\: int
            
            	**range:** 1..20000
            
            .. attribute:: suppress_time
            
            	Max suppress time (in minutes)
            	**type**\: int
            
            	**range:** 1..255
            
            	**units**\: minute
            
            .. attribute:: restart_penalty
            
            	Restart penalty
            	**type**\: int
            
            	**range:** 0..20000
            
            

            """

            _prefix = 'ifmgr-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Dampening, self).__init__()

                self.yang_name = "dampening"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('args', (YLeaf(YType.enumeration, 'args'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg', 'InterfaceConfigurations', 'InterfaceConfiguration.Dampening.Args')])),
                    ('half_life', (YLeaf(YType.uint32, 'half-life'), ['int'])),
                    ('reuse_threshold', (YLeaf(YType.uint32, 'reuse-threshold'), ['int'])),
                    ('suppress_threshold', (YLeaf(YType.uint32, 'suppress-threshold'), ['int'])),
                    ('suppress_time', (YLeaf(YType.uint32, 'suppress-time'), ['int'])),
                    ('restart_penalty', (YLeaf(YType.uint32, 'restart-penalty'), ['int'])),
                ])
                self.args = None
                self.half_life = None
                self.reuse_threshold = None
                self.suppress_threshold = None
                self.suppress_time = None
                self.restart_penalty = None
                self._segment_path = lambda: "dampening"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dampening, [u'args', u'half_life', u'reuse_threshold', u'suppress_threshold', u'suppress_time', u'restart_penalty'], name, value)

            class Args(Enum):
                """
                Args (Enum Class)

                Dampening Arguments

                .. data:: default_values = 0

                	Default values

                .. data:: specify_half_life = 1

                	Half Life Specified

                .. data:: specify_all = 4

                	All Arguments except Restart Penalty

                	Specified

                .. data:: specify_rp = 5

                	All Arguments Specified

                """

                default_values = Enum.YLeaf(0, "default-values")

                specify_half_life = Enum.YLeaf(1, "specify-half-life")

                specify_all = Enum.YLeaf(4, "specify-all")

                specify_rp = Enum.YLeaf(5, "specify-rp")




        class Mtus(Entity):
            """
            The MTU configuration for the interface
            
            .. attribute:: mtu
            
            	The MTU for the interface
            	**type**\: list of  		 :py:class:`Mtu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mtus.Mtu>`
            
            

            """

            _prefix = 'ifmgr-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Mtus, self).__init__()

                self.yang_name = "mtus"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("mtu", ("mtu", InterfaceConfigurations.InterfaceConfiguration.Mtus.Mtu))])
                self._leafs = OrderedDict()

                self.mtu = YList(self)
                self._segment_path = lambda: "mtus"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Mtus, [], name, value)


            class Mtu(Entity):
                """
                The MTU for the interface
                
                .. attribute:: owner  (key)
                
                	The Owner of the interface \- eg. for 'LoopbackX' main interface this is 'loopback'
                	**type**\: str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: mtu
                
                	The MTU value
                	**type**\: int
                
                	**range:** 64..65535
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'ifmgr-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Mtus.Mtu, self).__init__()

                    self.yang_name = "mtu"
                    self.yang_parent_name = "mtus"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['owner']
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('owner', (YLeaf(YType.str, 'owner'), ['str'])),
                        ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                    ])
                    self.owner = None
                    self.mtu = None
                    self._segment_path = lambda: "mtu" + "[owner='" + str(self.owner) + "']"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Mtus.Mtu, [u'owner', u'mtu'], name, value)




        class Encapsulation(Entity):
            """
            The encapsulation on the interface
            
            .. attribute:: encapsulation
            
            	The encapsulation \- e.g. hdlc, ppp
            	**type**\: str
            
            .. attribute:: capsulation_options
            
            	The options for this capsulation, usually '0'
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ifmgr-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Encapsulation, self).__init__()

                self.yang_name = "encapsulation"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('encapsulation', (YLeaf(YType.str, 'encapsulation'), ['str'])),
                    ('capsulation_options', (YLeaf(YType.uint32, 'capsulation-options'), ['int'])),
                ])
                self.encapsulation = None
                self.capsulation_options = None
                self._segment_path = lambda: "encapsulation"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Encapsulation, [u'encapsulation', u'capsulation_options'], name, value)



        class CiscoIOSXRPppMaFsmCfgPpp(Entity):
            """
            Interface PPP configuration data
            
            .. attribute:: fsm
            
            	PPP FSM configuration data
            	**type**\:  :py:class:`Fsm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp.Fsm>`
            
            

            """

            _prefix = 'ppp-ma-fsm-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp, self).__init__()

                self.yang_name = "ppp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("fsm", ("fsm", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp.Fsm))])
                self._leafs = OrderedDict()

                self.fsm = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp.Fsm()
                self.fsm.parent = self
                self._children_name_map["fsm"] = "fsm"
                self._segment_path = lambda: "Cisco-IOS-XR-ppp-ma-fsm-cfg:ppp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp, [], name, value)


            class Fsm(Entity):
                """
                PPP FSM configuration data
                
                .. attribute:: retry_timeout
                
                	This specifies the maximum time to wait for a response during PPP negotiation
                	**type**\: int
                
                	**range:** 1..10
                
                	**default value**\: 3
                
                .. attribute:: max_unacknowledged_term_requests
                
                	This specifies the maximum number of Term\-Requests
                	**type**\: int
                
                	**range:** 2..10
                
                	**default value**\: 2
                
                .. attribute:: max_consecutive_conf_naks
                
                	This specifies the maximum number of consecutive Conf\-Naks
                	**type**\: int
                
                	**range:** 2..10
                
                	**default value**\: 5
                
                .. attribute:: max_unacknowledged_conf_requests
                
                	This specifies the maximum number of unacknowledged Conf\-Requests
                	**type**\: int
                
                	**range:** 4..20
                
                	**default value**\: 10
                
                

                """

                _prefix = 'ppp-ma-fsm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp.Fsm, self).__init__()

                    self.yang_name = "fsm"
                    self.yang_parent_name = "ppp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('retry_timeout', (YLeaf(YType.uint32, 'retry-timeout'), ['int'])),
                        ('max_unacknowledged_term_requests', (YLeaf(YType.uint32, 'max-unacknowledged-term-requests'), ['int'])),
                        ('max_consecutive_conf_naks', (YLeaf(YType.uint32, 'max-consecutive-conf-naks'), ['int'])),
                        ('max_unacknowledged_conf_requests', (YLeaf(YType.uint32, 'max-unacknowledged-conf-requests'), ['int'])),
                    ])
                    self.retry_timeout = None
                    self.max_unacknowledged_term_requests = None
                    self.max_consecutive_conf_naks = None
                    self.max_unacknowledged_conf_requests = None
                    self._segment_path = lambda: "fsm"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaFsmCfgPpp.Fsm, ['retry_timeout', 'max_unacknowledged_term_requests', 'max_consecutive_conf_naks', 'max_unacknowledged_conf_requests'], name, value)




        class Afs(Entity):
            """
            Per\-address\-family and topology configuration
            
            .. attribute:: af
            
            	The presence of this object enables the givenaddress\-family and topology on the interface
            	**type**\: list of  		 :py:class:`Af <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Afs.Af>`
            
            .. attribute:: af_topology_name
            
            	The presence of this object enables the givenaddress\-family and topology on the interface
            	**type**\: list of  		 :py:class:`AfTopologyName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Afs.AfTopologyName>`
            
            

            """

            _prefix = 'infra-rsi-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Afs, self).__init__()

                self.yang_name = "afs"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("af", ("af", InterfaceConfigurations.InterfaceConfiguration.Afs.Af)), ("af-topology-name", ("af_topology_name", InterfaceConfigurations.InterfaceConfiguration.Afs.AfTopologyName))])
                self._leafs = OrderedDict()

                self.af = YList(self)
                self.af_topology_name = YList(self)
                self._segment_path = lambda: "Cisco-IOS-XR-infra-rsi-cfg:afs"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Afs, [], name, value)


            class Af(Entity):
                """
                The presence of this object enables the
                givenaddress\-family and topology on the
                interface.
                
                .. attribute:: af_name  (key)
                
                	Address\-family
                	**type**\:  :py:class:`VrfAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rsi_cfg.VrfAddressFamily>`
                
                .. attribute:: saf_name  (key)
                
                	Sub\-address\-family
                	**type**\:  :py:class:`VrfSubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rsi_cfg.VrfSubAddressFamily>`
                
                

                """

                _prefix = 'infra-rsi-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Afs.Af, self).__init__()

                    self.yang_name = "af"
                    self.yang_parent_name = "afs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['af_name','saf_name']
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rsi_cfg', 'VrfAddressFamily', '')])),
                        ('saf_name', (YLeaf(YType.enumeration, 'saf-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rsi_cfg', 'VrfSubAddressFamily', '')])),
                    ])
                    self.af_name = None
                    self.saf_name = None
                    self._segment_path = lambda: "af" + "[af-name='" + str(self.af_name) + "']" + "[saf-name='" + str(self.saf_name) + "']"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Afs.Af, [u'af_name', u'saf_name'], name, value)



            class AfTopologyName(Entity):
                """
                The presence of this object enables the
                givenaddress\-family and topology on the
                interface.
                
                .. attribute:: topology_name  (key)
                
                	Topology name
                	**type**\: str
                
                	**length:** 1..32
                
                .. attribute:: af_name  (key)
                
                	Address\-family
                	**type**\:  :py:class:`VrfAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rsi_cfg.VrfAddressFamily>`
                
                .. attribute:: saf_name  (key)
                
                	Sub\-address\-family
                	**type**\:  :py:class:`VrfSubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rsi_cfg.VrfSubAddressFamily>`
                
                

                """

                _prefix = 'infra-rsi-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Afs.AfTopologyName, self).__init__()

                    self.yang_name = "af-topology-name"
                    self.yang_parent_name = "afs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['topology_name','af_name','saf_name']
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('topology_name', (YLeaf(YType.str, 'topology-name'), ['str'])),
                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rsi_cfg', 'VrfAddressFamily', '')])),
                        ('saf_name', (YLeaf(YType.enumeration, 'saf-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rsi_cfg', 'VrfSubAddressFamily', '')])),
                    ])
                    self.topology_name = None
                    self.af_name = None
                    self.saf_name = None
                    self._segment_path = lambda: "af-topology-name" + "[topology-name='" + str(self.topology_name) + "']" + "[af-name='" + str(self.af_name) + "']" + "[saf-name='" + str(self.saf_name) + "']"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Afs.AfTopologyName, [u'topology_name', u'af_name', u'saf_name'], name, value)




        class PseudowireEther(Entity):
            """
            PW\-Ether attributes
            
            .. attribute:: generic_interface_list
            
            	Name of the interface list
            	**type**\: str
            
            	**length:** 1..32
            
            .. attribute:: l2_overhead
            
            	PW Ether L2 overhead requirement
            	**type**\: int
            
            	**range:** 1..64
            
            

            """

            _prefix = 'l2vpn-cfg'
            _revision = '2017-06-26'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.PseudowireEther, self).__init__()

                self.yang_name = "pseudowire-ether"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('generic_interface_list', (YLeaf(YType.str, 'generic-interface-list'), ['str'])),
                    ('l2_overhead', (YLeaf(YType.uint32, 'l2-overhead'), ['int'])),
                ])
                self.generic_interface_list = None
                self.l2_overhead = None
                self._segment_path = lambda: "Cisco-IOS-XR-l2vpn-cfg:pseudowire-ether"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PseudowireEther, ['generic_interface_list', 'l2_overhead'], name, value)



        class PseudowireIw(Entity):
            """
            PW\-IW attributes
            
            .. attribute:: l2_overhead
            
            	L2 overhead size in bytes
            	**type**\: int
            
            	**range:** 1..64
            
            	**units**\: byte
            
            .. attribute:: generic_interface_list
            
            	Name of the interface list
            	**type**\: str
            
            	**length:** 1..32
            
            

            """

            _prefix = 'l2vpn-cfg'
            _revision = '2017-06-26'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.PseudowireIw, self).__init__()

                self.yang_name = "pseudowire-iw"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('l2_overhead', (YLeaf(YType.uint32, 'l2-overhead'), ['int'])),
                    ('generic_interface_list', (YLeaf(YType.str, 'generic-interface-list'), ['str'])),
                ])
                self.l2_overhead = None
                self.generic_interface_list = None
                self._segment_path = lambda: "Cisco-IOS-XR-l2vpn-cfg:pseudowire-iw"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PseudowireIw, ['l2_overhead', 'generic_interface_list'], name, value)



        class Bvi(Entity):
            """
            BVI attributes
            
            .. attribute:: host_routing
            
            	Enable host\-routing on this BVI
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'l2vpn-cfg'
            _revision = '2017-06-26'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Bvi, self).__init__()

                self.yang_name = "bvi"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('host_routing', (YLeaf(YType.empty, 'host-routing'), ['Empty'])),
                ])
                self.host_routing = None
                self._segment_path = lambda: "Cisco-IOS-XR-l2vpn-cfg:bvi"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bvi, ['host_routing'], name, value)



        class L2Transport(Entity):
            """
            Interface Layer 2 Transport service
            configuration data
            
            .. attribute:: enabled
            
            	This object is only valid on physical interfaces and it controls whether that interface is a port mode Layer 2 attachment circuit (note that for subinterfaces, the Layer 2 property is specified when the subinterface is created).The object must be set before any other L2Transport configuration is supplied for the interface, and must be the last per\-interface configuration object to be removed
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: span_monitor_sessions
            
            	Monitor Session container for this source interface
            	**type**\:  :py:class:`SpanMonitorSessions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions>`
            
            .. attribute:: l2_protocols
            
            	Interface specific Layer 2 protocol handling
            	**type**\:  :py:class:`L2Protocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols>`
            
            .. attribute:: propagate_remote_status
            
            	Enable propagation of the remote attachment\-circuit link state to the localattachment\-circuit link state
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: l2_ethernet_features
            
            	L2 Ethernet Features Configuration
            	**type**\:  :py:class:`L2EthernetFeatures <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2EthernetFeatures>`
            
            .. attribute:: pac
            
            	Port Attachment Circuit configuration
            	**type**\:  :py:class:`Pac <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac>`
            
            .. attribute:: cac
            
            	Connection Attachment Circuit configuration
            	**type**\:  :py:class:`Cac <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac>`
            
            .. attribute:: atm_port_mode_parameters
            
            	ATM L2transport Port Mode Parameters Configuration
            	**type**\:  :py:class:`AtmPortModeParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters>`
            
            

            """

            _prefix = 'l2vpn-cfg'
            _revision = '2017-06-26'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport, self).__init__()

                self.yang_name = "l2-transport"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions", ("span_monitor_sessions", InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions)), ("Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols", ("l2_protocols", InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols)), ("Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features", ("l2_ethernet_features", InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2EthernetFeatures)), ("Cisco-IOS-XR-qos-ma-cfg:pac", ("pac", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac)), ("Cisco-IOS-XR-qos-ma-cfg:cac", ("cac", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac)), ("Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters", ("atm_port_mode_parameters", InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters))])
                self._leafs = OrderedDict([
                    ('enabled', (YLeaf(YType.empty, 'enabled'), ['Empty'])),
                    ('propagate_remote_status', (YLeaf(YType.empty, 'Cisco-IOS-XR-l2-eth-infra-cfg:propagate-remote-status'), ['Empty'])),
                ])
                self.enabled = None
                self.propagate_remote_status = None

                self.span_monitor_sessions = InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions()
                self.span_monitor_sessions.parent = self
                self._children_name_map["span_monitor_sessions"] = "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"

                self.l2_protocols = InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols()
                self.l2_protocols.parent = self
                self._children_name_map["l2_protocols"] = "Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols"

                self.l2_ethernet_features = InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2EthernetFeatures()
                self.l2_ethernet_features.parent = self
                self._children_name_map["l2_ethernet_features"] = "Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features"

                self.pac = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac()
                self.pac.parent = self
                self._children_name_map["pac"] = "Cisco-IOS-XR-qos-ma-cfg:pac"

                self.cac = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac()
                self.cac.parent = self
                self._children_name_map["cac"] = "Cisco-IOS-XR-qos-ma-cfg:cac"

                self.atm_port_mode_parameters = InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters()
                self.atm_port_mode_parameters.parent = self
                self._children_name_map["atm_port_mode_parameters"] = "Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters"
                self._segment_path = lambda: "Cisco-IOS-XR-l2vpn-cfg:l2-transport"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport, ['enabled', u'propagate_remote_status'], name, value)


            class SpanMonitorSessions(Entity):
                """
                Monitor Session container for this source
                interface
                
                .. attribute:: span_monitor_session
                
                	Configuration for a particular class of Monitor Session
                	**type**\: list of  		 :py:class:`SpanMonitorSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession>`
                
                

                """

                _prefix = 'ethernet-span-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions, self).__init__()

                    self.yang_name = "span-monitor-sessions"
                    self.yang_parent_name = "l2-transport"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("span-monitor-session", ("span_monitor_session", InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession))])
                    self._leafs = OrderedDict()

                    self.span_monitor_session = YList(self)
                    self._segment_path = lambda: "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions, [], name, value)


                class SpanMonitorSession(Entity):
                    """
                    Configuration for a particular class of Monitor
                    Session
                    
                    .. attribute:: session_class  (key)
                    
                    	Session Class
                    	**type**\:  :py:class:`SpanSessionClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_datatypes.SpanSessionClass>`
                    
                    .. attribute:: mirror_first
                    
                    	Mirror a specified number of bytes from start of packet
                    	**type**\: int
                    
                    	**range:** 1..10000
                    
                    	**units**\: byte
                    
                    .. attribute:: attachment
                    
                    	Attach the interface to a Monitor Session
                    	**type**\:  :py:class:`Attachment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Attachment>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: mirror_interval
                    
                    	Specify the mirror interval
                    	**type**\:  :py:class:`SpanMirrorInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_cfg.SpanMirrorInterval>`
                    
                    .. attribute:: acl
                    
                    	Enable ACL matching for traffic mirroring
                    	**type**\:  :py:class:`Acl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Acl>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'ethernet-span-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession, self).__init__()

                        self.yang_name = "span-monitor-session"
                        self.yang_parent_name = "span-monitor-sessions"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['session_class']
                        self._child_classes = OrderedDict([("attachment", ("attachment", InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Attachment)), ("acl", ("acl", InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Acl))])
                        self._leafs = OrderedDict([
                            ('session_class', (YLeaf(YType.enumeration, 'session-class'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_datatypes', 'SpanSessionClass', '')])),
                            ('mirror_first', (YLeaf(YType.uint32, 'mirror-first'), ['int'])),
                            ('mirror_interval', (YLeaf(YType.enumeration, 'mirror-interval'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_cfg', 'SpanMirrorInterval', '')])),
                        ])
                        self.session_class = None
                        self.mirror_first = None
                        self.mirror_interval = None

                        self.attachment = None
                        self._children_name_map["attachment"] = "attachment"

                        self.acl = None
                        self._children_name_map["acl"] = "acl"
                        self._segment_path = lambda: "span-monitor-session" + "[session-class='" + str(self.session_class) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession, ['session_class', 'mirror_first', 'mirror_interval'], name, value)


                    class Attachment(Entity):
                        """
                        Attach the interface to a Monitor Session
                        
                        .. attribute:: session_name
                        
                        	Session Name
                        	**type**\: str
                        
                        	**length:** 1..79
                        
                        	**mandatory**\: True
                        
                        .. attribute:: direction
                        
                        	Specify the direction of traffic to replicate (optional)
                        	**type**\:  :py:class:`SpanTrafficDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_cfg.SpanTrafficDirection>`
                        
                        .. attribute:: port_level_enable
                        
                        	Enable port level traffic mirroring
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ethernet-span-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Attachment, self).__init__()

                            self.yang_name = "attachment"
                            self.yang_parent_name = "span-monitor-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('session_name', (YLeaf(YType.str, 'session-name'), ['str'])),
                                ('direction', (YLeaf(YType.enumeration, 'direction'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_cfg', 'SpanTrafficDirection', '')])),
                                ('port_level_enable', (YLeaf(YType.empty, 'port-level-enable'), ['Empty'])),
                            ])
                            self.session_name = None
                            self.direction = None
                            self.port_level_enable = None
                            self._segment_path = lambda: "attachment"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Attachment, ['session_name', 'direction', 'port_level_enable'], name, value)



                    class Acl(Entity):
                        """
                        Enable ACL matching for traffic mirroring
                        
                        .. attribute:: acl_enable
                        
                        	Enable ACL
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: acl_name
                        
                        	ACL Name
                        	**type**\: str
                        
                        	**length:** 1..80
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ethernet-span-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Acl, self).__init__()

                            self.yang_name = "acl"
                            self.yang_parent_name = "span-monitor-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('acl_enable', (YLeaf(YType.empty, 'acl-enable'), ['Empty'])),
                                ('acl_name', (YLeaf(YType.str, 'acl-name'), ['str'])),
                            ])
                            self.acl_enable = None
                            self.acl_name = None
                            self._segment_path = lambda: "acl"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.SpanMonitorSessions.SpanMonitorSession.Acl, ['acl_enable', 'acl_name'], name, value)





            class L2Protocols(Entity):
                """
                Interface specific Layer 2 protocol handling
                
                .. attribute:: l2_protocol
                
                	Handling of a specific Layer 2 protocol
                	**type**\: list of  		 :py:class:`L2Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols.L2Protocol>`
                
                

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols, self).__init__()

                    self.yang_name = "l2-protocols"
                    self.yang_parent_name = "l2-transport"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("l2-protocol", ("l2_protocol", InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols.L2Protocol))])
                    self._leafs = OrderedDict()

                    self.l2_protocol = YList(self)
                    self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:l2-protocols"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols, [], name, value)


                class L2Protocol(Entity):
                    """
                    Handling of a specific Layer 2 protocol
                    
                    .. attribute:: l2_protocol_name  (key)
                    
                    	Protocol name
                    	**type**\:  :py:class:`L2ProtocolName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_cfg.L2ProtocolName>`
                    
                    .. attribute:: mode
                    
                    	How to handle the protocol's packets
                    	**type**\:  :py:class:`L2ProtocolMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_cfg.L2ProtocolMode>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: mpls_exp_bits_value
                    
                    	The value to set the MPLS Exp bits to within the PW.This value may be specified if the mode is forward or tunnel and must not be specified if the mode is drop
                    	**type**\: int
                    
                    	**range:** 0..7
                    
                    

                    """

                    _prefix = 'l2-eth-infra-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols.L2Protocol, self).__init__()

                        self.yang_name = "l2-protocol"
                        self.yang_parent_name = "l2-protocols"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['l2_protocol_name']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('l2_protocol_name', (YLeaf(YType.enumeration, 'l2-protocol-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_cfg', 'L2ProtocolName', '')])),
                            ('mode', (YLeaf(YType.enumeration, 'mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_cfg', 'L2ProtocolMode', '')])),
                            ('mpls_exp_bits_value', (YLeaf(YType.uint32, 'mpls-exp-bits-value'), ['int'])),
                        ])
                        self.l2_protocol_name = None
                        self.mode = None
                        self.mpls_exp_bits_value = None
                        self._segment_path = lambda: "l2-protocol" + "[l2-protocol-name='" + str(self.l2_protocol_name) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2Protocols.L2Protocol, [u'l2_protocol_name', u'mode', u'mpls_exp_bits_value'], name, value)




            class L2EthernetFeatures(Entity):
                """
                L2 Ethernet Features Configuration
                
                .. attribute:: egress_filtering
                
                	Egress Ethernet filtering
                	**type**\:  :py:class:`EgressFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_cfg.EgressFiltering>`
                
                	**default value**\: egress-filtering-type-default
                
                .. attribute:: source_bypass_egress_filtering
                
                	Mark all ingress packets to bypass any egress VLAN filter
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2EthernetFeatures, self).__init__()

                    self.yang_name = "l2-ethernet-features"
                    self.yang_parent_name = "l2-transport"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('egress_filtering', (YLeaf(YType.enumeration, 'egress-filtering'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_cfg', 'EgressFiltering', '')])),
                        ('source_bypass_egress_filtering', (YLeaf(YType.empty, 'source-bypass-egress-filtering'), ['Empty'])),
                    ])
                    self.egress_filtering = None
                    self.source_bypass_egress_filtering = None
                    self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:l2-ethernet-features"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.L2EthernetFeatures, [u'egress_filtering', u'source_bypass_egress_filtering'], name, value)



            class Pac(Entity):
                """
                Port Attachment Circuit configuration.
                
                .. attribute:: qos
                
                	Interface QOS configuration
                	**type**\:  :py:class:`Qos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos>`
                
                

                """

                _prefix = 'qos-ma-cfg'
                _revision = '2018-02-27'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac, self).__init__()

                    self.yang_name = "pac"
                    self.yang_parent_name = "l2-transport"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("qos", ("qos", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos))])
                    self._leafs = OrderedDict()

                    self.qos = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos()
                    self.qos.parent = self
                    self._children_name_map["qos"] = "qos"
                    self._segment_path = lambda: "Cisco-IOS-XR-qos-ma-cfg:pac"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac, [], name, value)


                class Qos(Entity):
                    """
                    Interface QOS configuration
                    
                    .. attribute:: output
                    
                    	Egress service policy
                    	**type**\:  :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output>`
                    
                    .. attribute:: input
                    
                    	Ingress service policy
                    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input>`
                    
                    

                    """

                    _prefix = 'qos-ma-cfg'
                    _revision = '2018-02-27'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos, self).__init__()

                        self.yang_name = "qos"
                        self.yang_parent_name = "pac"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("output", ("output", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output)), ("input", ("input", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input))])
                        self._leafs = OrderedDict()

                        self.output = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output()
                        self.output.parent = self
                        self._children_name_map["output"] = "output"

                        self.input = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input()
                        self.input.parent = self
                        self._children_name_map["input"] = "input"
                        self._segment_path = lambda: "qos"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos, [], name, value)


                    class Output(Entity):
                        """
                        Egress service policy
                        
                        .. attribute:: service_policy
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicy>`
                        
                        .. attribute:: service_policy_qos
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicyQos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos>`
                        
                        

                        """

                        _prefix = 'qos-ma-cfg'
                        _revision = '2018-02-27'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output, self).__init__()

                            self.yang_name = "output"
                            self.yang_parent_name = "qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicy)), ("service-policy-qos", ("service_policy_qos", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos))])
                            self._leafs = OrderedDict()

                            self.service_policy = YList(self)
                            self.service_policy_qos = YList(self)
                            self._segment_path = lambda: "output"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output, [], name, value)


                        class ServicePolicy(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: account_type
                            
                            	Turn off L2 or L3 accounting
                            	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                            
                            .. attribute:: l1_user_defined
                            
                            	User specified value
                            	**type**\: int
                            
                            	**range:** \-63..63
                            
                            .. attribute:: spi_name
                            
                            	Name of the SPI
                            	**type**\: str
                            
                            .. attribute:: subscriber_parent_policy
                            
                            	TRUE if service\-policy applied on svlan
                            	**type**\: bool
                            
                            .. attribute:: resource_id
                            
                            	Resource ID value
                            	**type**\: int
                            
                            	**range:** 0..3
                            
                            .. attribute:: service_fragment_parent_policy
                            
                            	service\-fragment\-parent\-policy
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicy, self).__init__()

                                self.yang_name = "service-policy"
                                self.yang_parent_name = "output"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                    ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                    ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                    ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                    ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                    ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                    ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                ])
                                self.service_policy_name = None
                                self.account_type = None
                                self.l1_user_defined = None
                                self.spi_name = None
                                self.subscriber_parent_policy = None
                                self.resource_id = None
                                self.service_fragment_parent_policy = None
                                self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicy, ['service_policy_name', 'account_type', 'l1_user_defined', 'spi_name', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)



                        class ServicePolicyQos(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: subscriber_group_names
                            
                            	Subscriber Group Name Details
                            	**type**\:  :py:class:`SubscriberGroupNames <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames>`
                            
                            .. attribute:: subscriber_parent
                            
                            	Subscriber Parent Details
                            	**type**\:  :py:class:`SubscriberParent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberParent>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos, self).__init__()

                                self.yang_name = "service-policy-qos"
                                self.yang_parent_name = "output"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([("subscriber-group-names", ("subscriber_group_names", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames)), ("subscriber-parent", ("subscriber_parent", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberParent))])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                ])
                                self.service_policy_name = None

                                self.subscriber_group_names = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames()
                                self.subscriber_group_names.parent = self
                                self._children_name_map["subscriber_group_names"] = "subscriber-group-names"

                                self.subscriber_parent = None
                                self._children_name_map["subscriber_parent"] = "subscriber-parent"
                                self._segment_path = lambda: "service-policy-qos" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos, ['service_policy_name'], name, value)


                            class SubscriberGroupNames(Entity):
                                """
                                Subscriber Group Name Details
                                
                                .. attribute:: subscriber_group_name
                                
                                	Subscriber Group details
                                	**type**\: list of  		 :py:class:`SubscriberGroupName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName>`
                                
                                

                                """

                                _prefix = 'qos-ma-cfg'
                                _revision = '2018-02-27'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames, self).__init__()

                                    self.yang_name = "subscriber-group-names"
                                    self.yang_parent_name = "service-policy-qos"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("subscriber-group-name", ("subscriber_group_name", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName))])
                                    self._leafs = OrderedDict()

                                    self.subscriber_group_name = YList(self)
                                    self._segment_path = lambda: "subscriber-group-names"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames, [], name, value)


                                class SubscriberGroupName(Entity):
                                    """
                                    Subscriber Group details
                                    
                                    .. attribute:: subscriber_group_string  (key)
                                    
                                    	Name of policy\-map
                                    	**type**\: str
                                    
                                    	**length:** 0..64
                                    
                                    .. attribute:: account_type
                                    
                                    	Turn off L2 or L3 accounting
                                    	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                                    
                                    .. attribute:: l1_user_defined
                                    
                                    	User specified value
                                    	**type**\: int
                                    
                                    	**range:** \-63..63
                                    
                                    .. attribute:: spi_name
                                    
                                    	Name of the SPI
                                    	**type**\: str
                                    
                                    .. attribute:: policy_merge
                                    
                                    	Not supported (Leave unspecified)
                                    	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                                    
                                    .. attribute:: subscriber_parent_policy
                                    
                                    	TRUE if service\-policy applied on svlan
                                    	**type**\: bool
                                    
                                    .. attribute:: resource_id
                                    
                                    	Resource ID value
                                    	**type**\: int
                                    
                                    	**range:** 0..3
                                    
                                    .. attribute:: service_fragment_parent_policy
                                    
                                    	TRUE if service\-policy applied is a service\-fragment policy)
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'qos-ma-cfg'
                                    _revision = '2018-02-27'

                                    def __init__(self):
                                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, self).__init__()

                                        self.yang_name = "subscriber-group-name"
                                        self.yang_parent_name = "subscriber-group-names"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['subscriber_group_string']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('subscriber_group_string', (YLeaf(YType.str, 'subscriber-group-string'), ['str'])),
                                            ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                            ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                            ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                            ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                            ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                            ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                            ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                        ])
                                        self.subscriber_group_string = None
                                        self.account_type = None
                                        self.l1_user_defined = None
                                        self.spi_name = None
                                        self.policy_merge = None
                                        self.subscriber_parent_policy = None
                                        self.resource_id = None
                                        self.service_fragment_parent_policy = None
                                        self._segment_path = lambda: "subscriber-group-name" + "[subscriber-group-string='" + str(self.subscriber_group_string) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, ['subscriber_group_string', 'account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)




                            class SubscriberParent(Entity):
                                """
                                Subscriber Parent Details
                                
                                .. attribute:: account_type
                                
                                	Turn off L2 or L3 accounting
                                	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                                
                                .. attribute:: l1_user_defined
                                
                                	User specified value
                                	**type**\: int
                                
                                	**range:** \-63..63
                                
                                .. attribute:: spi_name
                                
                                	Name of the SPI
                                	**type**\: str
                                
                                .. attribute:: policy_merge
                                
                                	Not supported (Leave unspecified)
                                	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                                
                                .. attribute:: subscriber_parent_policy
                                
                                	TRUE if service\-policy applied on svlan
                                	**type**\: bool
                                
                                .. attribute:: resource_id
                                
                                	Resource ID value
                                	**type**\: int
                                
                                	**range:** 0..3
                                
                                .. attribute:: service_fragment_parent_policy
                                
                                	TRUE if service\-policy applied is a service\-fragment policy)
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos-ma-cfg'
                                _revision = '2018-02-27'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberParent, self).__init__()

                                    self.yang_name = "subscriber-parent"
                                    self.yang_parent_name = "service-policy-qos"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                        ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                        ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                        ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                        ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                        ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                        ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                    ])
                                    self.account_type = None
                                    self.l1_user_defined = None
                                    self.spi_name = None
                                    self.policy_merge = None
                                    self.subscriber_parent_policy = None
                                    self.resource_id = None
                                    self.service_fragment_parent_policy = None
                                    self._segment_path = lambda: "subscriber-parent"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Output.ServicePolicyQos.SubscriberParent, ['account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)





                    class Input(Entity):
                        """
                        Ingress service policy
                        
                        .. attribute:: service_policy
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicy>`
                        
                        .. attribute:: service_policy_qos
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicyQos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos>`
                        
                        

                        """

                        _prefix = 'qos-ma-cfg'
                        _revision = '2018-02-27'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input, self).__init__()

                            self.yang_name = "input"
                            self.yang_parent_name = "qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicy)), ("service-policy-qos", ("service_policy_qos", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos))])
                            self._leafs = OrderedDict()

                            self.service_policy = YList(self)
                            self.service_policy_qos = YList(self)
                            self._segment_path = lambda: "input"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input, [], name, value)


                        class ServicePolicy(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: account_type
                            
                            	Turn off L2 or L3 accounting
                            	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                            
                            .. attribute:: l1_user_defined
                            
                            	User specified value
                            	**type**\: int
                            
                            	**range:** \-63..63
                            
                            .. attribute:: spi_name
                            
                            	Name of the SPI
                            	**type**\: str
                            
                            .. attribute:: subscriber_parent_policy
                            
                            	TRUE if service\-policy applied on svlan
                            	**type**\: bool
                            
                            .. attribute:: resource_id
                            
                            	Resource ID value
                            	**type**\: int
                            
                            	**range:** 0..3
                            
                            .. attribute:: service_fragment_parent_policy
                            
                            	service\-fragment\-parent\-policy
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicy, self).__init__()

                                self.yang_name = "service-policy"
                                self.yang_parent_name = "input"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                    ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                    ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                    ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                    ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                    ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                    ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                ])
                                self.service_policy_name = None
                                self.account_type = None
                                self.l1_user_defined = None
                                self.spi_name = None
                                self.subscriber_parent_policy = None
                                self.resource_id = None
                                self.service_fragment_parent_policy = None
                                self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicy, ['service_policy_name', 'account_type', 'l1_user_defined', 'spi_name', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)



                        class ServicePolicyQos(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: subscriber_group_names
                            
                            	Subscriber Group Name Details
                            	**type**\:  :py:class:`SubscriberGroupNames <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames>`
                            
                            .. attribute:: subscriber_parent
                            
                            	Subscriber Parent Details
                            	**type**\:  :py:class:`SubscriberParent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberParent>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos, self).__init__()

                                self.yang_name = "service-policy-qos"
                                self.yang_parent_name = "input"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([("subscriber-group-names", ("subscriber_group_names", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames)), ("subscriber-parent", ("subscriber_parent", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberParent))])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                ])
                                self.service_policy_name = None

                                self.subscriber_group_names = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames()
                                self.subscriber_group_names.parent = self
                                self._children_name_map["subscriber_group_names"] = "subscriber-group-names"

                                self.subscriber_parent = None
                                self._children_name_map["subscriber_parent"] = "subscriber-parent"
                                self._segment_path = lambda: "service-policy-qos" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos, ['service_policy_name'], name, value)


                            class SubscriberGroupNames(Entity):
                                """
                                Subscriber Group Name Details
                                
                                .. attribute:: subscriber_group_name
                                
                                	Subscriber Group details
                                	**type**\: list of  		 :py:class:`SubscriberGroupName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName>`
                                
                                

                                """

                                _prefix = 'qos-ma-cfg'
                                _revision = '2018-02-27'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames, self).__init__()

                                    self.yang_name = "subscriber-group-names"
                                    self.yang_parent_name = "service-policy-qos"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("subscriber-group-name", ("subscriber_group_name", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName))])
                                    self._leafs = OrderedDict()

                                    self.subscriber_group_name = YList(self)
                                    self._segment_path = lambda: "subscriber-group-names"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames, [], name, value)


                                class SubscriberGroupName(Entity):
                                    """
                                    Subscriber Group details
                                    
                                    .. attribute:: subscriber_group_string  (key)
                                    
                                    	Name of policy\-map
                                    	**type**\: str
                                    
                                    	**length:** 0..64
                                    
                                    .. attribute:: account_type
                                    
                                    	Turn off L2 or L3 accounting
                                    	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                                    
                                    .. attribute:: l1_user_defined
                                    
                                    	User specified value
                                    	**type**\: int
                                    
                                    	**range:** \-63..63
                                    
                                    .. attribute:: spi_name
                                    
                                    	Name of the SPI
                                    	**type**\: str
                                    
                                    .. attribute:: policy_merge
                                    
                                    	Not supported (Leave unspecified)
                                    	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                                    
                                    .. attribute:: subscriber_parent_policy
                                    
                                    	TRUE if service\-policy applied on svlan
                                    	**type**\: bool
                                    
                                    .. attribute:: resource_id
                                    
                                    	Resource ID value
                                    	**type**\: int
                                    
                                    	**range:** 0..3
                                    
                                    .. attribute:: service_fragment_parent_policy
                                    
                                    	TRUE if service\-policy applied is a service\-fragment policy)
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'qos-ma-cfg'
                                    _revision = '2018-02-27'

                                    def __init__(self):
                                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, self).__init__()

                                        self.yang_name = "subscriber-group-name"
                                        self.yang_parent_name = "subscriber-group-names"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['subscriber_group_string']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('subscriber_group_string', (YLeaf(YType.str, 'subscriber-group-string'), ['str'])),
                                            ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                            ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                            ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                            ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                            ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                            ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                            ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                        ])
                                        self.subscriber_group_string = None
                                        self.account_type = None
                                        self.l1_user_defined = None
                                        self.spi_name = None
                                        self.policy_merge = None
                                        self.subscriber_parent_policy = None
                                        self.resource_id = None
                                        self.service_fragment_parent_policy = None
                                        self._segment_path = lambda: "subscriber-group-name" + "[subscriber-group-string='" + str(self.subscriber_group_string) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, ['subscriber_group_string', 'account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)




                            class SubscriberParent(Entity):
                                """
                                Subscriber Parent Details
                                
                                .. attribute:: account_type
                                
                                	Turn off L2 or L3 accounting
                                	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                                
                                .. attribute:: l1_user_defined
                                
                                	User specified value
                                	**type**\: int
                                
                                	**range:** \-63..63
                                
                                .. attribute:: spi_name
                                
                                	Name of the SPI
                                	**type**\: str
                                
                                .. attribute:: policy_merge
                                
                                	Not supported (Leave unspecified)
                                	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                                
                                .. attribute:: subscriber_parent_policy
                                
                                	TRUE if service\-policy applied on svlan
                                	**type**\: bool
                                
                                .. attribute:: resource_id
                                
                                	Resource ID value
                                	**type**\: int
                                
                                	**range:** 0..3
                                
                                .. attribute:: service_fragment_parent_policy
                                
                                	TRUE if service\-policy applied is a service\-fragment policy)
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos-ma-cfg'
                                _revision = '2018-02-27'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberParent, self).__init__()

                                    self.yang_name = "subscriber-parent"
                                    self.yang_parent_name = "service-policy-qos"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                        ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                        ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                        ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                        ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                        ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                        ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                    ])
                                    self.account_type = None
                                    self.l1_user_defined = None
                                    self.spi_name = None
                                    self.policy_merge = None
                                    self.subscriber_parent_policy = None
                                    self.resource_id = None
                                    self.service_fragment_parent_policy = None
                                    self._segment_path = lambda: "subscriber-parent"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Pac.Qos.Input.ServicePolicyQos.SubscriberParent, ['account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)







            class Cac(Entity):
                """
                Connection Attachment Circuit configuration.
                
                .. attribute:: qos
                
                	Interface QOS configuration
                	**type**\:  :py:class:`Qos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos>`
                
                

                """

                _prefix = 'qos-ma-cfg'
                _revision = '2018-02-27'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac, self).__init__()

                    self.yang_name = "cac"
                    self.yang_parent_name = "l2-transport"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("qos", ("qos", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos))])
                    self._leafs = OrderedDict()

                    self.qos = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos()
                    self.qos.parent = self
                    self._children_name_map["qos"] = "qos"
                    self._segment_path = lambda: "Cisco-IOS-XR-qos-ma-cfg:cac"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac, [], name, value)


                class Qos(Entity):
                    """
                    Interface QOS configuration
                    
                    .. attribute:: output
                    
                    	Egress service policy
                    	**type**\:  :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output>`
                    
                    .. attribute:: input
                    
                    	Ingress service policy
                    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input>`
                    
                    

                    """

                    _prefix = 'qos-ma-cfg'
                    _revision = '2018-02-27'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos, self).__init__()

                        self.yang_name = "qos"
                        self.yang_parent_name = "cac"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("output", ("output", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output)), ("input", ("input", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input))])
                        self._leafs = OrderedDict()

                        self.output = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output()
                        self.output.parent = self
                        self._children_name_map["output"] = "output"

                        self.input = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input()
                        self.input.parent = self
                        self._children_name_map["input"] = "input"
                        self._segment_path = lambda: "qos"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos, [], name, value)


                    class Output(Entity):
                        """
                        Egress service policy
                        
                        .. attribute:: service_policy
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicy>`
                        
                        .. attribute:: service_policy_qos
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicyQos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos>`
                        
                        

                        """

                        _prefix = 'qos-ma-cfg'
                        _revision = '2018-02-27'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output, self).__init__()

                            self.yang_name = "output"
                            self.yang_parent_name = "qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicy)), ("service-policy-qos", ("service_policy_qos", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos))])
                            self._leafs = OrderedDict()

                            self.service_policy = YList(self)
                            self.service_policy_qos = YList(self)
                            self._segment_path = lambda: "output"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output, [], name, value)


                        class ServicePolicy(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: account_type
                            
                            	Turn off L2 or L3 accounting
                            	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                            
                            .. attribute:: l1_user_defined
                            
                            	User specified value
                            	**type**\: int
                            
                            	**range:** \-63..63
                            
                            .. attribute:: spi_name
                            
                            	Name of the SPI
                            	**type**\: str
                            
                            .. attribute:: subscriber_parent_policy
                            
                            	TRUE if service\-policy applied on svlan
                            	**type**\: bool
                            
                            .. attribute:: resource_id
                            
                            	Resource ID value
                            	**type**\: int
                            
                            	**range:** 0..3
                            
                            .. attribute:: service_fragment_parent_policy
                            
                            	service\-fragment\-parent\-policy
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicy, self).__init__()

                                self.yang_name = "service-policy"
                                self.yang_parent_name = "output"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                    ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                    ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                    ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                    ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                    ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                    ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                ])
                                self.service_policy_name = None
                                self.account_type = None
                                self.l1_user_defined = None
                                self.spi_name = None
                                self.subscriber_parent_policy = None
                                self.resource_id = None
                                self.service_fragment_parent_policy = None
                                self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicy, ['service_policy_name', 'account_type', 'l1_user_defined', 'spi_name', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)



                        class ServicePolicyQos(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: subscriber_group_names
                            
                            	Subscriber Group Name Details
                            	**type**\:  :py:class:`SubscriberGroupNames <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames>`
                            
                            .. attribute:: subscriber_parent
                            
                            	Subscriber Parent Details
                            	**type**\:  :py:class:`SubscriberParent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberParent>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos, self).__init__()

                                self.yang_name = "service-policy-qos"
                                self.yang_parent_name = "output"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([("subscriber-group-names", ("subscriber_group_names", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames)), ("subscriber-parent", ("subscriber_parent", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberParent))])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                ])
                                self.service_policy_name = None

                                self.subscriber_group_names = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames()
                                self.subscriber_group_names.parent = self
                                self._children_name_map["subscriber_group_names"] = "subscriber-group-names"

                                self.subscriber_parent = None
                                self._children_name_map["subscriber_parent"] = "subscriber-parent"
                                self._segment_path = lambda: "service-policy-qos" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos, ['service_policy_name'], name, value)


                            class SubscriberGroupNames(Entity):
                                """
                                Subscriber Group Name Details
                                
                                .. attribute:: subscriber_group_name
                                
                                	Subscriber Group details
                                	**type**\: list of  		 :py:class:`SubscriberGroupName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName>`
                                
                                

                                """

                                _prefix = 'qos-ma-cfg'
                                _revision = '2018-02-27'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames, self).__init__()

                                    self.yang_name = "subscriber-group-names"
                                    self.yang_parent_name = "service-policy-qos"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("subscriber-group-name", ("subscriber_group_name", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName))])
                                    self._leafs = OrderedDict()

                                    self.subscriber_group_name = YList(self)
                                    self._segment_path = lambda: "subscriber-group-names"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames, [], name, value)


                                class SubscriberGroupName(Entity):
                                    """
                                    Subscriber Group details
                                    
                                    .. attribute:: subscriber_group_string  (key)
                                    
                                    	Name of policy\-map
                                    	**type**\: str
                                    
                                    	**length:** 0..64
                                    
                                    .. attribute:: account_type
                                    
                                    	Turn off L2 or L3 accounting
                                    	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                                    
                                    .. attribute:: l1_user_defined
                                    
                                    	User specified value
                                    	**type**\: int
                                    
                                    	**range:** \-63..63
                                    
                                    .. attribute:: spi_name
                                    
                                    	Name of the SPI
                                    	**type**\: str
                                    
                                    .. attribute:: policy_merge
                                    
                                    	Not supported (Leave unspecified)
                                    	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                                    
                                    .. attribute:: subscriber_parent_policy
                                    
                                    	TRUE if service\-policy applied on svlan
                                    	**type**\: bool
                                    
                                    .. attribute:: resource_id
                                    
                                    	Resource ID value
                                    	**type**\: int
                                    
                                    	**range:** 0..3
                                    
                                    .. attribute:: service_fragment_parent_policy
                                    
                                    	TRUE if service\-policy applied is a service\-fragment policy)
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'qos-ma-cfg'
                                    _revision = '2018-02-27'

                                    def __init__(self):
                                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, self).__init__()

                                        self.yang_name = "subscriber-group-name"
                                        self.yang_parent_name = "subscriber-group-names"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['subscriber_group_string']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('subscriber_group_string', (YLeaf(YType.str, 'subscriber-group-string'), ['str'])),
                                            ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                            ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                            ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                            ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                            ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                            ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                            ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                        ])
                                        self.subscriber_group_string = None
                                        self.account_type = None
                                        self.l1_user_defined = None
                                        self.spi_name = None
                                        self.policy_merge = None
                                        self.subscriber_parent_policy = None
                                        self.resource_id = None
                                        self.service_fragment_parent_policy = None
                                        self._segment_path = lambda: "subscriber-group-name" + "[subscriber-group-string='" + str(self.subscriber_group_string) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, ['subscriber_group_string', 'account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)




                            class SubscriberParent(Entity):
                                """
                                Subscriber Parent Details
                                
                                .. attribute:: account_type
                                
                                	Turn off L2 or L3 accounting
                                	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                                
                                .. attribute:: l1_user_defined
                                
                                	User specified value
                                	**type**\: int
                                
                                	**range:** \-63..63
                                
                                .. attribute:: spi_name
                                
                                	Name of the SPI
                                	**type**\: str
                                
                                .. attribute:: policy_merge
                                
                                	Not supported (Leave unspecified)
                                	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                                
                                .. attribute:: subscriber_parent_policy
                                
                                	TRUE if service\-policy applied on svlan
                                	**type**\: bool
                                
                                .. attribute:: resource_id
                                
                                	Resource ID value
                                	**type**\: int
                                
                                	**range:** 0..3
                                
                                .. attribute:: service_fragment_parent_policy
                                
                                	TRUE if service\-policy applied is a service\-fragment policy)
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos-ma-cfg'
                                _revision = '2018-02-27'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberParent, self).__init__()

                                    self.yang_name = "subscriber-parent"
                                    self.yang_parent_name = "service-policy-qos"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                        ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                        ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                        ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                        ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                        ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                        ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                    ])
                                    self.account_type = None
                                    self.l1_user_defined = None
                                    self.spi_name = None
                                    self.policy_merge = None
                                    self.subscriber_parent_policy = None
                                    self.resource_id = None
                                    self.service_fragment_parent_policy = None
                                    self._segment_path = lambda: "subscriber-parent"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Output.ServicePolicyQos.SubscriberParent, ['account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)





                    class Input(Entity):
                        """
                        Ingress service policy
                        
                        .. attribute:: service_policy
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicy>`
                        
                        .. attribute:: service_policy_qos
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicyQos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos>`
                        
                        

                        """

                        _prefix = 'qos-ma-cfg'
                        _revision = '2018-02-27'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input, self).__init__()

                            self.yang_name = "input"
                            self.yang_parent_name = "qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicy)), ("service-policy-qos", ("service_policy_qos", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos))])
                            self._leafs = OrderedDict()

                            self.service_policy = YList(self)
                            self.service_policy_qos = YList(self)
                            self._segment_path = lambda: "input"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input, [], name, value)


                        class ServicePolicy(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: account_type
                            
                            	Turn off L2 or L3 accounting
                            	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                            
                            .. attribute:: l1_user_defined
                            
                            	User specified value
                            	**type**\: int
                            
                            	**range:** \-63..63
                            
                            .. attribute:: spi_name
                            
                            	Name of the SPI
                            	**type**\: str
                            
                            .. attribute:: subscriber_parent_policy
                            
                            	TRUE if service\-policy applied on svlan
                            	**type**\: bool
                            
                            .. attribute:: resource_id
                            
                            	Resource ID value
                            	**type**\: int
                            
                            	**range:** 0..3
                            
                            .. attribute:: service_fragment_parent_policy
                            
                            	service\-fragment\-parent\-policy
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicy, self).__init__()

                                self.yang_name = "service-policy"
                                self.yang_parent_name = "input"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                    ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                    ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                    ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                    ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                    ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                    ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                ])
                                self.service_policy_name = None
                                self.account_type = None
                                self.l1_user_defined = None
                                self.spi_name = None
                                self.subscriber_parent_policy = None
                                self.resource_id = None
                                self.service_fragment_parent_policy = None
                                self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicy, ['service_policy_name', 'account_type', 'l1_user_defined', 'spi_name', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)



                        class ServicePolicyQos(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: subscriber_group_names
                            
                            	Subscriber Group Name Details
                            	**type**\:  :py:class:`SubscriberGroupNames <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames>`
                            
                            .. attribute:: subscriber_parent
                            
                            	Subscriber Parent Details
                            	**type**\:  :py:class:`SubscriberParent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberParent>`
                            
                            	**presence node**\: True
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos, self).__init__()

                                self.yang_name = "service-policy-qos"
                                self.yang_parent_name = "input"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([("subscriber-group-names", ("subscriber_group_names", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames)), ("subscriber-parent", ("subscriber_parent", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberParent))])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                ])
                                self.service_policy_name = None

                                self.subscriber_group_names = InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames()
                                self.subscriber_group_names.parent = self
                                self._children_name_map["subscriber_group_names"] = "subscriber-group-names"

                                self.subscriber_parent = None
                                self._children_name_map["subscriber_parent"] = "subscriber-parent"
                                self._segment_path = lambda: "service-policy-qos" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos, ['service_policy_name'], name, value)


                            class SubscriberGroupNames(Entity):
                                """
                                Subscriber Group Name Details
                                
                                .. attribute:: subscriber_group_name
                                
                                	Subscriber Group details
                                	**type**\: list of  		 :py:class:`SubscriberGroupName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName>`
                                
                                

                                """

                                _prefix = 'qos-ma-cfg'
                                _revision = '2018-02-27'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames, self).__init__()

                                    self.yang_name = "subscriber-group-names"
                                    self.yang_parent_name = "service-policy-qos"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("subscriber-group-name", ("subscriber_group_name", InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName))])
                                    self._leafs = OrderedDict()

                                    self.subscriber_group_name = YList(self)
                                    self._segment_path = lambda: "subscriber-group-names"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames, [], name, value)


                                class SubscriberGroupName(Entity):
                                    """
                                    Subscriber Group details
                                    
                                    .. attribute:: subscriber_group_string  (key)
                                    
                                    	Name of policy\-map
                                    	**type**\: str
                                    
                                    	**length:** 0..64
                                    
                                    .. attribute:: account_type
                                    
                                    	Turn off L2 or L3 accounting
                                    	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                                    
                                    .. attribute:: l1_user_defined
                                    
                                    	User specified value
                                    	**type**\: int
                                    
                                    	**range:** \-63..63
                                    
                                    .. attribute:: spi_name
                                    
                                    	Name of the SPI
                                    	**type**\: str
                                    
                                    .. attribute:: policy_merge
                                    
                                    	Not supported (Leave unspecified)
                                    	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                                    
                                    .. attribute:: subscriber_parent_policy
                                    
                                    	TRUE if service\-policy applied on svlan
                                    	**type**\: bool
                                    
                                    .. attribute:: resource_id
                                    
                                    	Resource ID value
                                    	**type**\: int
                                    
                                    	**range:** 0..3
                                    
                                    .. attribute:: service_fragment_parent_policy
                                    
                                    	TRUE if service\-policy applied is a service\-fragment policy)
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'qos-ma-cfg'
                                    _revision = '2018-02-27'

                                    def __init__(self):
                                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, self).__init__()

                                        self.yang_name = "subscriber-group-name"
                                        self.yang_parent_name = "subscriber-group-names"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['subscriber_group_string']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('subscriber_group_string', (YLeaf(YType.str, 'subscriber-group-string'), ['str'])),
                                            ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                            ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                            ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                            ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                            ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                            ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                            ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                        ])
                                        self.subscriber_group_string = None
                                        self.account_type = None
                                        self.l1_user_defined = None
                                        self.spi_name = None
                                        self.policy_merge = None
                                        self.subscriber_parent_policy = None
                                        self.resource_id = None
                                        self.service_fragment_parent_policy = None
                                        self._segment_path = lambda: "subscriber-group-name" + "[subscriber-group-string='" + str(self.subscriber_group_string) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, ['subscriber_group_string', 'account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)




                            class SubscriberParent(Entity):
                                """
                                Subscriber Parent Details
                                
                                .. attribute:: account_type
                                
                                	Turn off L2 or L3 accounting
                                	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                                
                                .. attribute:: l1_user_defined
                                
                                	User specified value
                                	**type**\: int
                                
                                	**range:** \-63..63
                                
                                .. attribute:: spi_name
                                
                                	Name of the SPI
                                	**type**\: str
                                
                                .. attribute:: policy_merge
                                
                                	Not supported (Leave unspecified)
                                	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                                
                                .. attribute:: subscriber_parent_policy
                                
                                	TRUE if service\-policy applied on svlan
                                	**type**\: bool
                                
                                .. attribute:: resource_id
                                
                                	Resource ID value
                                	**type**\: int
                                
                                	**range:** 0..3
                                
                                .. attribute:: service_fragment_parent_policy
                                
                                	TRUE if service\-policy applied is a service\-fragment policy)
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'qos-ma-cfg'
                                _revision = '2018-02-27'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberParent, self).__init__()

                                    self.yang_name = "subscriber-parent"
                                    self.yang_parent_name = "service-policy-qos"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                        ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                        ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                        ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                        ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                        ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                        ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                    ])
                                    self.account_type = None
                                    self.l1_user_defined = None
                                    self.spi_name = None
                                    self.policy_merge = None
                                    self.subscriber_parent_policy = None
                                    self.resource_id = None
                                    self.service_fragment_parent_policy = None
                                    self._segment_path = lambda: "subscriber-parent"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.Cac.Qos.Input.ServicePolicyQos.SubscriberParent, ['account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)







            class AtmPortModeParameters(Entity):
                """
                ATM L2transport Port Mode Parameters
                Configuration
                
                .. attribute:: cell_packing
                
                	Configure cell\-packing parameters.  All parameters are mandatory
                	**type**\:  :py:class:`CellPacking <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters.CellPacking>`
                
                	**presence node**\: True
                
                

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters, self).__init__()

                    self.yang_name = "atm-port-mode-parameters"
                    self.yang_parent_name = "l2-transport"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("cell-packing", ("cell_packing", InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters.CellPacking))])
                    self._leafs = OrderedDict()

                    self.cell_packing = None
                    self._children_name_map["cell_packing"] = "cell-packing"
                    self._segment_path = lambda: "Cisco-IOS-XR-atm-vcm-cfg:atm-port-mode-parameters"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters, [], name, value)


                class CellPacking(Entity):
                    """
                    Configure cell\-packing parameters.  All
                    parameters are mandatory.
                    
                    .. attribute:: maximum_cells_packed
                    
                    	Maximum number of cells to be packed in a packet
                    	**type**\: int
                    
                    	**range:** 2..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: cell_packing_timer_id
                    
                    	Which cell packing timer to use
                    	**type**\: int
                    
                    	**range:** 1..3
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'atm-vcm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters.CellPacking, self).__init__()

                        self.yang_name = "cell-packing"
                        self.yang_parent_name = "atm-port-mode-parameters"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('maximum_cells_packed', (YLeaf(YType.uint32, 'maximum-cells-packed'), ['int'])),
                            ('cell_packing_timer_id', (YLeaf(YType.uint32, 'cell-packing-timer-id'), ['int'])),
                        ])
                        self.maximum_cells_packed = None
                        self.cell_packing_timer_id = None
                        self._segment_path = lambda: "cell-packing"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.L2Transport.AtmPortModeParameters.CellPacking, ['maximum_cells_packed', 'cell_packing_timer_id'], name, value)





        class CiscoIOSXRPppMaLcpCfgPpp(Entity):
            """
            Interface PPP configuration data
            
            .. attribute:: mcmp
            
            	PPP Multiclass Multilink parameters
            	**type**\:  :py:class:`Mcmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp>`
            
            .. attribute:: lcp
            
            	PPP LCP configuration data
            	**type**\:  :py:class:`Lcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp>`
            
            

            """

            _prefix = 'ppp-ma-lcp-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp, self).__init__()

                self.yang_name = "ppp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("mcmp", ("mcmp", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp)), ("lcp", ("lcp", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp))])
                self._leafs = OrderedDict()

                self.mcmp = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp()
                self.mcmp.parent = self
                self._children_name_map["mcmp"] = "mcmp"

                self.lcp = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp()
                self.lcp.parent = self
                self._children_name_map["lcp"] = "lcp"
                self._segment_path = lambda: "Cisco-IOS-XR-ppp-ma-lcp-cfg:ppp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp, [], name, value)


            class Mcmp(Entity):
                """
                PPP Multiclass Multilink parameters
                
                .. attribute:: local
                
                	This specifies the MCMP options for the local host
                	**type**\:  :py:class:`Local <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp.Local>`
                
                .. attribute:: enable
                
                	This specifies that MCMP is enabled on this interface
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: remote
                
                	This specifies the MCMP options for the peer
                	**type**\: int
                
                	**range:** 1..16
                
                	**default value**\: 2
                
                

                """

                _prefix = 'ppp-ma-lcp-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp, self).__init__()

                    self.yang_name = "mcmp"
                    self.yang_parent_name = "ppp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("local", ("local", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp.Local))])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ('remote', (YLeaf(YType.uint32, 'remote'), ['int'])),
                    ])
                    self.enable = None
                    self.remote = None

                    self.local = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp.Local()
                    self.local.parent = self
                    self._children_name_map["local"] = "local"
                    self._segment_path = lambda: "mcmp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp, ['enable', 'remote'], name, value)


                class Local(Entity):
                    """
                    This specifies the MCMP options for the local
                    host
                    
                    .. attribute:: initial
                    
                    	Local Initial #classes
                    	**type**\: int
                    
                    	**range:** 1..16
                    
                    	**default value**\: 2
                    
                    .. attribute:: maximum
                    
                    	Local Maximum #classes
                    	**type**\: int
                    
                    	**range:** 1..16
                    
                    	**default value**\: 4
                    
                    

                    """

                    _prefix = 'ppp-ma-lcp-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp.Local, self).__init__()

                        self.yang_name = "local"
                        self.yang_parent_name = "mcmp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('initial', (YLeaf(YType.uint32, 'initial'), ['int'])),
                            ('maximum', (YLeaf(YType.uint32, 'maximum'), ['int'])),
                        ])
                        self.initial = None
                        self.maximum = None
                        self._segment_path = lambda: "local"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Mcmp.Local, ['initial', 'maximum'], name, value)




            class Lcp(Entity):
                """
                PPP LCP configuration data
                
                .. attribute:: multilink
                
                	Multilink configuration
                	**type**\:  :py:class:`Multilink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink>`
                
                .. attribute:: pap
                
                	Password Authentication Protocol (PAP) configuration data
                	**type**\:  :py:class:`Pap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap>`
                
                .. attribute:: loop_back
                
                	Loopback configuration
                	**type**\:  :py:class:`LoopBack <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.LoopBack>`
                
                .. attribute:: ms_chap
                
                	Microsoft Challenge Handshake Authentication Protocol (MS\-CHAP) configuration data
                	**type**\:  :py:class:`MsChap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.MsChap>`
                
                .. attribute:: authentication
                
                	PPP authentication parameters
                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication>`
                
                .. attribute:: chap
                
                	Challenge Handshake Authentication Protocol (CHAP) configuration data
                	**type**\:  :py:class:`Chap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Chap>`
                
                .. attribute:: service_type
                
                	This specifies whether to allow multiple authentication failures and, if so, how many
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ppp-ma-lcp-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp, self).__init__()

                    self.yang_name = "lcp"
                    self.yang_parent_name = "ppp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("multilink", ("multilink", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink)), ("pap", ("pap", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap)), ("loop-back", ("loop_back", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.LoopBack)), ("ms-chap", ("ms_chap", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.MsChap)), ("authentication", ("authentication", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication)), ("chap", ("chap", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Chap))])
                    self._leafs = OrderedDict([
                        ('service_type', (YLeaf(YType.uint32, 'service-type'), ['int'])),
                    ])
                    self.service_type = None

                    self.multilink = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink()
                    self.multilink.parent = self
                    self._children_name_map["multilink"] = "multilink"

                    self.pap = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap()
                    self.pap.parent = self
                    self._children_name_map["pap"] = "pap"

                    self.loop_back = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.LoopBack()
                    self.loop_back.parent = self
                    self._children_name_map["loop_back"] = "loop-back"

                    self.ms_chap = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.MsChap()
                    self.ms_chap.parent = self
                    self._children_name_map["ms_chap"] = "ms-chap"

                    self.authentication = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication()
                    self.authentication.parent = self
                    self._children_name_map["authentication"] = "authentication"

                    self.chap = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Chap()
                    self.chap.parent = self
                    self._children_name_map["chap"] = "chap"
                    self._segment_path = lambda: "lcp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp, ['service_type'], name, value)


                class Multilink(Entity):
                    """
                    Multilink configuration
                    
                    .. attribute:: minimum_active
                    
                    	Minimum criteria for the linestate of a Multilink PPPinterface to be brought up
                    	**type**\:  :py:class:`MinimumActive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink.MinimumActive>`
                    
                    

                    """

                    _prefix = 'ppp-ma-lcp-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink, self).__init__()

                        self.yang_name = "multilink"
                        self.yang_parent_name = "lcp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minimum-active", ("minimum_active", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink.MinimumActive))])
                        self._leafs = OrderedDict()

                        self.minimum_active = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink.MinimumActive()
                        self.minimum_active.parent = self
                        self._children_name_map["minimum_active"] = "minimum-active"
                        self._segment_path = lambda: "multilink"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink, [], name, value)


                    class MinimumActive(Entity):
                        """
                        Minimum criteria for the linestate of a
                        Multilink PPPinterface to be brought up
                        
                        .. attribute:: links
                        
                        	Number of active links needed to bring up an MP interface
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**default value**\: 1
                        
                        

                        """

                        _prefix = 'ppp-ma-lcp-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink.MinimumActive, self).__init__()

                            self.yang_name = "minimum-active"
                            self.yang_parent_name = "multilink"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('links', (YLeaf(YType.uint32, 'links'), ['int'])),
                            ])
                            self.links = None
                            self._segment_path = lambda: "minimum-active"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Multilink.MinimumActive, ['links'], name, value)




                class Pap(Entity):
                    """
                    Password Authentication Protocol (PAP)
                    configuration data
                    
                    .. attribute:: send_user_info
                    
                    	This specifies the outbound PAP username and password
                    	**type**\:  :py:class:`SendUserInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap.SendUserInfo>`
                    
                    .. attribute:: refuse
                    
                    	This specifies whether to refuse to authenticate using PAP
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ppp-ma-lcp-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap, self).__init__()

                        self.yang_name = "pap"
                        self.yang_parent_name = "lcp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("send-user-info", ("send_user_info", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap.SendUserInfo))])
                        self._leafs = OrderedDict([
                            ('refuse', (YLeaf(YType.empty, 'refuse'), ['Empty'])),
                        ])
                        self.refuse = None

                        self.send_user_info = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap.SendUserInfo()
                        self.send_user_info.parent = self
                        self._children_name_map["send_user_info"] = "send-user-info"
                        self._segment_path = lambda: "pap"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap, ['refuse'], name, value)


                    class SendUserInfo(Entity):
                        """
                        This specifies the outbound PAP username and
                        password
                        
                        .. attribute:: username
                        
                        	Outbound PAP username
                        	**type**\: str
                        
                        .. attribute:: password
                        
                        	Outbound PAP password
                        	**type**\: str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        

                        """

                        _prefix = 'ppp-ma-lcp-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap.SendUserInfo, self).__init__()

                            self.yang_name = "send-user-info"
                            self.yang_parent_name = "pap"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('username', (YLeaf(YType.str, 'username'), ['str'])),
                                ('password', (YLeaf(YType.str, 'password'), ['str'])),
                            ])
                            self.username = None
                            self.password = None
                            self._segment_path = lambda: "send-user-info"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Pap.SendUserInfo, ['username', 'password'], name, value)




                class LoopBack(Entity):
                    """
                    Loopback configuration
                    
                    .. attribute:: ignore
                    
                    	Allow magic numbers to be equal
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ppp-ma-lcp-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.LoopBack, self).__init__()

                        self.yang_name = "loop-back"
                        self.yang_parent_name = "lcp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('ignore', (YLeaf(YType.empty, 'ignore'), ['Empty'])),
                        ])
                        self.ignore = None
                        self._segment_path = lambda: "loop-back"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.LoopBack, ['ignore'], name, value)



                class MsChap(Entity):
                    """
                    Microsoft Challenge Handshake Authentication
                    Protocol (MS\-CHAP) configuration data
                    
                    .. attribute:: password
                    
                    	This specifies the default MS\-CHAP password
                    	**type**\: str
                    
                    	**pattern:** (!.+)\|([^!].+)
                    
                    .. attribute:: host_name
                    
                    	This specifies the MS\-CHAP hostname
                    	**type**\: str
                    
                    .. attribute:: refuse
                    
                    	This specifies whether to refuse to authenticate using MS\-CHAP
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ppp-ma-lcp-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.MsChap, self).__init__()

                        self.yang_name = "ms-chap"
                        self.yang_parent_name = "lcp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                            ('host_name', (YLeaf(YType.str, 'host-name'), ['str'])),
                            ('refuse', (YLeaf(YType.empty, 'refuse'), ['Empty'])),
                        ])
                        self.password = None
                        self.host_name = None
                        self.refuse = None
                        self._segment_path = lambda: "ms-chap"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.MsChap, ['password', 'host_name', 'refuse'], name, value)



                class Authentication(Entity):
                    """
                    PPP authentication parameters
                    
                    .. attribute:: method
                    
                    	This specifies the PPP link authentication method
                    	**type**\:  :py:class:`Method <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication.Method>`
                    
                    .. attribute:: max_authentication_failures
                    
                    	This specifies whether to allow multiple authentication failures and, if so, how many
                    	**type**\: int
                    
                    	**range:** 0..10
                    
                    .. attribute:: timeout
                    
                    	Maximum time to wait for an authentication response
                    	**type**\: int
                    
                    	**range:** 3..30
                    
                    	**default value**\: 10
                    
                    

                    """

                    _prefix = 'ppp-ma-lcp-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication, self).__init__()

                        self.yang_name = "authentication"
                        self.yang_parent_name = "lcp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("method", ("method", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication.Method))])
                        self._leafs = OrderedDict([
                            ('max_authentication_failures', (YLeaf(YType.uint32, 'max-authentication-failures'), ['int'])),
                            ('timeout', (YLeaf(YType.uint32, 'timeout'), ['int'])),
                        ])
                        self.max_authentication_failures = None
                        self.timeout = None

                        self.method = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication.Method()
                        self.method.parent = self
                        self._children_name_map["method"] = "method"
                        self._segment_path = lambda: "authentication"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication, ['max_authentication_failures', 'timeout'], name, value)


                    class Method(Entity):
                        """
                        This specifies the PPP link authentication
                        method
                        
                        .. attribute:: name
                        
                        	Use an authentication list with this name
                        	**type**\: str
                        
                        .. attribute:: method
                        
                        	Select between one and three authentication methods in order of preference
                        	**type**\: list of   :py:class:`PppAuthenticationMethod <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ppp_ma_lcp_cfg.PppAuthenticationMethod>`
                        
                        

                        """

                        _prefix = 'ppp-ma-lcp-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication.Method, self).__init__()

                            self.yang_name = "method"
                            self.yang_parent_name = "authentication"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('name', (YLeaf(YType.str, 'name'), ['str'])),
                                ('method', (YLeafList(YType.enumeration, 'method'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ppp_ma_lcp_cfg', 'PppAuthenticationMethod', '')])),
                            ])
                            self.name = None
                            self.method = []
                            self._segment_path = lambda: "method"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Authentication.Method, ['name', 'method'], name, value)




                class Chap(Entity):
                    """
                    Challenge Handshake Authentication Protocol
                    (CHAP) configuration data
                    
                    .. attribute:: password
                    
                    	This specifies the default CHAP password
                    	**type**\: str
                    
                    	**pattern:** (!.+)\|([^!].+)
                    
                    .. attribute:: host_name
                    
                    	This specifies the CHAP hostname
                    	**type**\: str
                    
                    .. attribute:: refuse
                    
                    	This specifies whether to refuse to authenticate using CHAP
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ppp-ma-lcp-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Chap, self).__init__()

                        self.yang_name = "chap"
                        self.yang_parent_name = "lcp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                            ('host_name', (YLeaf(YType.str, 'host-name'), ['str'])),
                            ('refuse', (YLeaf(YType.empty, 'refuse'), ['Empty'])),
                        ])
                        self.password = None
                        self.host_name = None
                        self.refuse = None
                        self._segment_path = lambda: "chap"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaLcpCfgPpp.Lcp.Chap, ['password', 'host_name', 'refuse'], name, value)





        class Statistics(Entity):
            """
            Per\-interface statistics configuration
            
            .. attribute:: load_interval
            
            	Specify interval for load calculation for an interface
            	**type**\: int
            
            	**range:** 0..600
            
            	**default value**\: 300
            
            

            """

            _prefix = 'infra-statsd-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Statistics, self).__init__()

                self.yang_name = "statistics"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('load_interval', (YLeaf(YType.uint32, 'load-interval'), ['int'])),
                ])
                self.load_interval = None
                self._segment_path = lambda: "Cisco-IOS-XR-infra-statsd-cfg:statistics"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Statistics, ['load_interval'], name, value)



        class CiscoIOSXRPppMaIpcpiwCfgPpp(Entity):
            """
            Interface PPP configuration data
            
            .. attribute:: ipcpiw
            
            	PPP IPCPIW configuration data
            	**type**\:  :py:class:`Ipcpiw <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw>`
            
            

            """

            _prefix = 'ppp-ma-ipcpiw-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp, self).__init__()

                self.yang_name = "ppp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("ipcpiw", ("ipcpiw", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw))])
                self._leafs = OrderedDict()

                self.ipcpiw = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw()
                self.ipcpiw.parent = self
                self._children_name_map["ipcpiw"] = "ipcpiw"
                self._segment_path = lambda: "Cisco-IOS-XR-ppp-ma-ipcpiw-cfg:ppp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp, [], name, value)


            class Ipcpiw(Entity):
                """
                PPP IPCPIW configuration data
                
                .. attribute:: proxy_address
                
                	Specify an IP address to publish to peers through IPCPIW
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ppp-ma-ipcpiw-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw, self).__init__()

                    self.yang_name = "ipcpiw"
                    self.yang_parent_name = "ppp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('proxy_address', (YLeaf(YType.str, 'proxy-address'), ['str'])),
                    ])
                    self.proxy_address = None
                    self._segment_path = lambda: "ipcpiw"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpiwCfgPpp.Ipcpiw, ['proxy_address'], name, value)




        class Pppoe(Entity):
            """
            Interface PPPoE configuration data
            
            .. attribute:: enable_bba_group
            
            	Use this BBA\-Group to enable PPPoE on this interface
            	**type**\:  :py:class:`EnableBbaGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Pppoe.EnableBbaGroup>`
            
            	**presence node**\: True
            
            

            """

            _prefix = 'subscriber-pppoe-ma-cmd-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Pppoe, self).__init__()

                self.yang_name = "pppoe"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("enable-bba-group", ("enable_bba_group", InterfaceConfigurations.InterfaceConfiguration.Pppoe.EnableBbaGroup))])
                self._leafs = OrderedDict()

                self.enable_bba_group = None
                self._children_name_map["enable_bba_group"] = "enable-bba-group"
                self._segment_path = lambda: "Cisco-IOS-XR-subscriber-pppoe-ma-cmd-cfg:pppoe"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Pppoe, [], name, value)


            class EnableBbaGroup(Entity):
                """
                Use this BBA\-Group to enable PPPoE on this
                interface
                
                .. attribute:: enable
                
                	Enable PPPoE on this interface
                	**type**\: bool
                
                	**mandatory**\: True
                
                .. attribute:: bba_group_name
                
                	Name of the BBA\-Group
                	**type**\: str
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'subscriber-pppoe-ma-cmd-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Pppoe.EnableBbaGroup, self).__init__()

                    self.yang_name = "enable-bba-group"
                    self.yang_parent_name = "pppoe"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                        ('bba_group_name', (YLeaf(YType.str, 'bba-group-name'), ['str'])),
                    ])
                    self.enable = None
                    self.bba_group_name = None
                    self._segment_path = lambda: "enable-bba-group"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Pppoe.EnableBbaGroup, ['enable', 'bba_group_name'], name, value)




        class Ethernet(Entity):
            """
            Ether specific interface configuration
            
            .. attribute:: signal_fail_bit_error_rate
            
            	Signal Fail Bit Error Rate handling options
            	**type**\:  :py:class:`SignalFailBitErrorRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalFailBitErrorRate>`
            
            .. attribute:: optical_power_degrade
            
            	Optical power degrade handling options
            	**type**\:  :py:class:`OpticalPowerDegrade <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet.OpticalPowerDegrade>`
            
            .. attribute:: signal_degrade_bit_error_rate
            
            	Signal Degrade Bit Error Rate handling options
            	**type**\:  :py:class:`SignalDegradeBitErrorRate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalDegradeBitErrorRate>`
            
            .. attribute:: carrier_delay
            
            	Set the carrier transition delay on an interface in msecs
            	**type**\:  :py:class:`CarrierDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ethernet.CarrierDelay>`
            
            .. attribute:: duplex
            
            	Configure duplex operational mode
            	**type**\:  :py:class:`EthernetDuplex <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetDuplex>`
            
            .. attribute:: auto_negotiation
            
            	Link auto\-negotiation
            	**type**\:  :py:class:`EthernetAutoNegotiation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetAutoNegotiation>`
            
            .. attribute:: flow_control
            
            	Configure flow\-control mode
            	**type**\:  :py:class:`EthernetFlowCtrl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetFlowCtrl>`
            
            .. attribute:: forward_error_correction
            
            	Forward Error Correction
            	**type**\:  :py:class:`EthernetFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetFec>`
            
            .. attribute:: priority_flow_control
            
            	Configure priority flow\-control mode
            	**type**\:  :py:class:`EthernetPfc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetPfc>`
            
            .. attribute:: loopback
            
            	Configure loopback mode
            	**type**\:  :py:class:`EthernetLoopback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetLoopback>`
            
            .. attribute:: speed
            
            	Set the ethernet speed on an interface
            	**type**\:  :py:class:`EthernetSpeed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetSpeed>`
            
            .. attribute:: inter_packet_gap
            
            	Inter\-packet gap
            	**type**\:  :py:class:`EthernetIpg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg.EthernetIpg>`
            
            

            """

            _prefix = 'drivers-media-eth-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ethernet, self).__init__()

                self.yang_name = "ethernet"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("signal-fail-bit-error-rate", ("signal_fail_bit_error_rate", InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalFailBitErrorRate)), ("optical-power-degrade", ("optical_power_degrade", InterfaceConfigurations.InterfaceConfiguration.Ethernet.OpticalPowerDegrade)), ("signal-degrade-bit-error-rate", ("signal_degrade_bit_error_rate", InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalDegradeBitErrorRate)), ("carrier-delay", ("carrier_delay", InterfaceConfigurations.InterfaceConfiguration.Ethernet.CarrierDelay))])
                self._leafs = OrderedDict([
                    ('duplex', (YLeaf(YType.enumeration, 'duplex'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg', 'EthernetDuplex', '')])),
                    ('auto_negotiation', (YLeaf(YType.enumeration, 'auto-negotiation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg', 'EthernetAutoNegotiation', '')])),
                    ('flow_control', (YLeaf(YType.enumeration, 'flow-control'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg', 'EthernetFlowCtrl', '')])),
                    ('forward_error_correction', (YLeaf(YType.enumeration, 'forward-error-correction'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg', 'EthernetFec', '')])),
                    ('priority_flow_control', (YLeaf(YType.enumeration, 'priority-flow-control'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg', 'EthernetPfc', '')])),
                    ('loopback', (YLeaf(YType.enumeration, 'loopback'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg', 'EthernetLoopback', '')])),
                    ('speed', (YLeaf(YType.enumeration, 'speed'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg', 'EthernetSpeed', '')])),
                    ('inter_packet_gap', (YLeaf(YType.enumeration, 'inter-packet-gap'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_media_eth_cfg', 'EthernetIpg', '')])),
                ])
                self.duplex = None
                self.auto_negotiation = None
                self.flow_control = None
                self.forward_error_correction = None
                self.priority_flow_control = None
                self.loopback = None
                self.speed = None
                self.inter_packet_gap = None

                self.signal_fail_bit_error_rate = InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalFailBitErrorRate()
                self.signal_fail_bit_error_rate.parent = self
                self._children_name_map["signal_fail_bit_error_rate"] = "signal-fail-bit-error-rate"

                self.optical_power_degrade = InterfaceConfigurations.InterfaceConfiguration.Ethernet.OpticalPowerDegrade()
                self.optical_power_degrade.parent = self
                self._children_name_map["optical_power_degrade"] = "optical-power-degrade"

                self.signal_degrade_bit_error_rate = InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalDegradeBitErrorRate()
                self.signal_degrade_bit_error_rate.parent = self
                self._children_name_map["signal_degrade_bit_error_rate"] = "signal-degrade-bit-error-rate"

                self.carrier_delay = InterfaceConfigurations.InterfaceConfiguration.Ethernet.CarrierDelay()
                self.carrier_delay.parent = self
                self._children_name_map["carrier_delay"] = "carrier-delay"
                self._segment_path = lambda: "Cisco-IOS-XR-drivers-media-eth-cfg:ethernet"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ethernet, ['duplex', 'auto_negotiation', 'flow_control', 'forward_error_correction', 'priority_flow_control', 'loopback', 'speed', 'inter_packet_gap'], name, value)


            class SignalFailBitErrorRate(Entity):
                """
                Signal Fail Bit Error Rate handling options
                
                .. attribute:: signal_remote_fault
                
                	Signal a remote fault to the peer device whenever the link is taken down due to crossing the SF\-BER threshold
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: signal_fail_threshold
                
                	Set the Signal Fail bit error rate threshold on an interface to a value of 10e\-x, where x is the value passed in here
                	**type**\: int
                
                	**range:** 4..12
                
                	**default value**\: 4
                
                .. attribute:: signal_fail_report_disable
                
                	Disable generation of an alarm whenever the SF\-BER threshold is crossed for this interface
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'drivers-media-eth-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalFailBitErrorRate, self).__init__()

                    self.yang_name = "signal-fail-bit-error-rate"
                    self.yang_parent_name = "ethernet"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('signal_remote_fault', (YLeaf(YType.empty, 'signal-remote-fault'), ['Empty'])),
                        ('signal_fail_threshold', (YLeaf(YType.uint32, 'signal-fail-threshold'), ['int'])),
                        ('signal_fail_report_disable', (YLeaf(YType.empty, 'signal-fail-report-disable'), ['Empty'])),
                    ])
                    self.signal_remote_fault = None
                    self.signal_fail_threshold = None
                    self.signal_fail_report_disable = None
                    self._segment_path = lambda: "signal-fail-bit-error-rate"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalFailBitErrorRate, ['signal_remote_fault', 'signal_fail_threshold', 'signal_fail_report_disable'], name, value)



            class OpticalPowerDegrade(Entity):
                """
                Optical power degrade handling options
                
                .. attribute:: rx_alarm_threshold
                
                	Set the value of the received optical power degrade alarm threshold on an interface
                	**type**\: int
                
                	**range:** \-300..50
                
                

                """

                _prefix = 'drivers-media-eth-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ethernet.OpticalPowerDegrade, self).__init__()

                    self.yang_name = "optical-power-degrade"
                    self.yang_parent_name = "ethernet"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rx_alarm_threshold', (YLeaf(YType.int32, 'rx-alarm-threshold'), ['int'])),
                    ])
                    self.rx_alarm_threshold = None
                    self._segment_path = lambda: "optical-power-degrade"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ethernet.OpticalPowerDegrade, ['rx_alarm_threshold'], name, value)



            class SignalDegradeBitErrorRate(Entity):
                """
                Signal Degrade Bit Error Rate handling options
                
                .. attribute:: signal_degrade_threshold
                
                	Set the Signal Degrade bit error rate threshold on an interface to a value of 10e\-x, where x is the value passed in here
                	**type**\: int
                
                	**range:** 3..12
                
                	**default value**\: 6
                
                .. attribute:: signal_degrade_report
                
                	Generate an alarm whenever the SD\-BER threshold is crossed for this interface
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'drivers-media-eth-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalDegradeBitErrorRate, self).__init__()

                    self.yang_name = "signal-degrade-bit-error-rate"
                    self.yang_parent_name = "ethernet"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('signal_degrade_threshold', (YLeaf(YType.uint32, 'signal-degrade-threshold'), ['int'])),
                        ('signal_degrade_report', (YLeaf(YType.empty, 'signal-degrade-report'), ['Empty'])),
                    ])
                    self.signal_degrade_threshold = None
                    self.signal_degrade_report = None
                    self._segment_path = lambda: "signal-degrade-bit-error-rate"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ethernet.SignalDegradeBitErrorRate, ['signal_degrade_threshold', 'signal_degrade_report'], name, value)



            class CarrierDelay(Entity):
                """
                Set the carrier transition delay on an
                interface in msecs
                
                .. attribute:: carrier_delay_up
                
                	Carrier Delay (up) in msecs
                	**type**\: int
                
                	**range:** 0..2147483647
                
                .. attribute:: carrier_delay_down
                
                	Carrier Delay (down) in msecs
                	**type**\: int
                
                	**range:** 0..2147483647
                
                

                """

                _prefix = 'drivers-media-eth-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ethernet.CarrierDelay, self).__init__()

                    self.yang_name = "carrier-delay"
                    self.yang_parent_name = "ethernet"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('carrier_delay_up', (YLeaf(YType.uint32, 'carrier-delay-up'), ['int'])),
                        ('carrier_delay_down', (YLeaf(YType.uint32, 'carrier-delay-down'), ['int'])),
                    ])
                    self.carrier_delay_up = None
                    self.carrier_delay_down = None
                    self._segment_path = lambda: "carrier-delay"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ethernet.CarrierDelay, ['carrier_delay_up', 'carrier_delay_down'], name, value)




        class SpanMonitorSessions(Entity):
            """
            Monitor Session container for this source
            interface
            
            .. attribute:: span_monitor_session
            
            	Configuration for a particular class of Monitor Session
            	**type**\: list of  		 :py:class:`SpanMonitorSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession>`
            
            

            """

            _prefix = 'ethernet-span-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions, self).__init__()

                self.yang_name = "span-monitor-sessions"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("span-monitor-session", ("span_monitor_session", InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession))])
                self._leafs = OrderedDict()

                self.span_monitor_session = YList(self)
                self._segment_path = lambda: "Cisco-IOS-XR-Ethernet-SPAN-cfg:span-monitor-sessions"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions, [], name, value)


            class SpanMonitorSession(Entity):
                """
                Configuration for a particular class of Monitor
                Session
                
                .. attribute:: session_class  (key)
                
                	Session Class
                	**type**\:  :py:class:`SpanSessionClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_datatypes.SpanSessionClass>`
                
                .. attribute:: mirror_first
                
                	Mirror a specified number of bytes from start of packet
                	**type**\: int
                
                	**range:** 1..10000
                
                	**units**\: byte
                
                .. attribute:: attachment
                
                	Attach the interface to a Monitor Session
                	**type**\:  :py:class:`Attachment <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Attachment>`
                
                	**presence node**\: True
                
                .. attribute:: mirror_interval
                
                	Specify the mirror interval
                	**type**\:  :py:class:`SpanMirrorInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_cfg.SpanMirrorInterval>`
                
                .. attribute:: acl
                
                	Enable ACL matching for traffic mirroring
                	**type**\:  :py:class:`Acl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Acl>`
                
                	**presence node**\: True
                
                

                """

                _prefix = 'ethernet-span-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession, self).__init__()

                    self.yang_name = "span-monitor-session"
                    self.yang_parent_name = "span-monitor-sessions"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['session_class']
                    self._child_classes = OrderedDict([("attachment", ("attachment", InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Attachment)), ("acl", ("acl", InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Acl))])
                    self._leafs = OrderedDict([
                        ('session_class', (YLeaf(YType.enumeration, 'session-class'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_datatypes', 'SpanSessionClass', '')])),
                        ('mirror_first', (YLeaf(YType.uint32, 'mirror-first'), ['int'])),
                        ('mirror_interval', (YLeaf(YType.enumeration, 'mirror-interval'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_cfg', 'SpanMirrorInterval', '')])),
                    ])
                    self.session_class = None
                    self.mirror_first = None
                    self.mirror_interval = None

                    self.attachment = None
                    self._children_name_map["attachment"] = "attachment"

                    self.acl = None
                    self._children_name_map["acl"] = "acl"
                    self._segment_path = lambda: "span-monitor-session" + "[session-class='" + str(self.session_class) + "']"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession, ['session_class', 'mirror_first', 'mirror_interval'], name, value)


                class Attachment(Entity):
                    """
                    Attach the interface to a Monitor Session
                    
                    .. attribute:: session_name
                    
                    	Session Name
                    	**type**\: str
                    
                    	**length:** 1..79
                    
                    	**mandatory**\: True
                    
                    .. attribute:: direction
                    
                    	Specify the direction of traffic to replicate (optional)
                    	**type**\:  :py:class:`SpanTrafficDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_cfg.SpanTrafficDirection>`
                    
                    .. attribute:: port_level_enable
                    
                    	Enable port level traffic mirroring
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ethernet-span-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Attachment, self).__init__()

                        self.yang_name = "attachment"
                        self.yang_parent_name = "span-monitor-session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('session_name', (YLeaf(YType.str, 'session-name'), ['str'])),
                            ('direction', (YLeaf(YType.enumeration, 'direction'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_Ethernet_SPAN_cfg', 'SpanTrafficDirection', '')])),
                            ('port_level_enable', (YLeaf(YType.empty, 'port-level-enable'), ['Empty'])),
                        ])
                        self.session_name = None
                        self.direction = None
                        self.port_level_enable = None
                        self._segment_path = lambda: "attachment"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Attachment, ['session_name', 'direction', 'port_level_enable'], name, value)



                class Acl(Entity):
                    """
                    Enable ACL matching for traffic mirroring
                    
                    .. attribute:: acl_enable
                    
                    	Enable ACL
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: acl_name
                    
                    	ACL Name
                    	**type**\: str
                    
                    	**length:** 1..80
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ethernet-span-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Acl, self).__init__()

                        self.yang_name = "acl"
                        self.yang_parent_name = "span-monitor-session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('acl_enable', (YLeaf(YType.empty, 'acl-enable'), ['Empty'])),
                            ('acl_name', (YLeaf(YType.str, 'acl-name'), ['str'])),
                        ])
                        self.acl_enable = None
                        self.acl_name = None
                        self._segment_path = lambda: "acl"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.SpanMonitorSessions.SpanMonitorSession.Acl, ['acl_enable', 'acl_name'], name, value)





        class FrequencySynchronization(Entity):
            """
            Frequency Synchronization interface
            configuration
            
            .. attribute:: input_quality_level
            
            	Set the input quality level
            	**type**\:  :py:class:`InputQualityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.InputQualityLevel>`
            
            .. attribute:: output_quality_level
            
            	Set the output quality level
            	**type**\:  :py:class:`OutputQualityLevel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.OutputQualityLevel>`
            
            .. attribute:: ssm_disable
            
            	Disable SSM on this source
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: time_of_day_priority
            
            	Set the time\-of\-day priority of this source
            	**type**\: int
            
            	**range:** 1..254
            
            	**default value**\: 100
            
            .. attribute:: selection_input
            
            	Assign this source as a selection input
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: enable
            
            	Enable Frequency Synchronization
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: priority
            
            	Set the priority of this source
            	**type**\: int
            
            	**range:** 1..254
            
            	**default value**\: 100
            
            .. attribute:: wait_to_restore_time
            
            	Set the wait\-to\-restore time for this source
            	**type**\: int
            
            	**range:** 0..12
            
            	**default value**\: 5
            
            

            """

            _prefix = 'freqsync-cfg'
            _revision = '2017-09-30'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization, self).__init__()

                self.yang_name = "frequency-synchronization"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("input-quality-level", ("input_quality_level", InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.InputQualityLevel)), ("output-quality-level", ("output_quality_level", InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.OutputQualityLevel))])
                self._leafs = OrderedDict([
                    ('ssm_disable', (YLeaf(YType.empty, 'ssm-disable'), ['Empty'])),
                    ('time_of_day_priority', (YLeaf(YType.uint32, 'time-of-day-priority'), ['int'])),
                    ('selection_input', (YLeaf(YType.empty, 'selection-input'), ['Empty'])),
                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                    ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                    ('wait_to_restore_time', (YLeaf(YType.uint32, 'wait-to-restore-time'), ['int'])),
                ])
                self.ssm_disable = None
                self.time_of_day_priority = None
                self.selection_input = None
                self.enable = None
                self.priority = None
                self.wait_to_restore_time = None

                self.input_quality_level = InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.InputQualityLevel()
                self.input_quality_level.parent = self
                self._children_name_map["input_quality_level"] = "input-quality-level"

                self.output_quality_level = InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.OutputQualityLevel()
                self.output_quality_level.parent = self
                self._children_name_map["output_quality_level"] = "output-quality-level"
                self._segment_path = lambda: "Cisco-IOS-XR-freqsync-cfg:frequency-synchronization"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization, ['ssm_disable', 'time_of_day_priority', 'selection_input', 'enable', 'priority', 'wait_to_restore_time'], name, value)


            class InputQualityLevel(Entity):
                """
                Set the input quality level
                
                .. attribute:: quality_level_option
                
                	Quality level option
                	**type**\:  :py:class:`FsyncQlOption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes.FsyncQlOption>`
                
                .. attribute:: exact_quality_level_value
                
                	Exact quality level value
                	**type**\:  :py:class:`FsyncQlValue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes.FsyncQlValue>`
                
                .. attribute:: min_quality_level_value
                
                	Minimum quality level value
                	**type**\:  :py:class:`FsyncQlValue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes.FsyncQlValue>`
                
                .. attribute:: max_quality_level_value
                
                	Maximum quality level value
                	**type**\:  :py:class:`FsyncQlValue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes.FsyncQlValue>`
                
                

                """

                _prefix = 'freqsync-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.InputQualityLevel, self).__init__()

                    self.yang_name = "input-quality-level"
                    self.yang_parent_name = "frequency-synchronization"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('quality_level_option', (YLeaf(YType.enumeration, 'quality-level-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes', 'FsyncQlOption', '')])),
                        ('exact_quality_level_value', (YLeaf(YType.enumeration, 'exact-quality-level-value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes', 'FsyncQlValue', '')])),
                        ('min_quality_level_value', (YLeaf(YType.enumeration, 'min-quality-level-value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes', 'FsyncQlValue', '')])),
                        ('max_quality_level_value', (YLeaf(YType.enumeration, 'max-quality-level-value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes', 'FsyncQlValue', '')])),
                    ])
                    self.quality_level_option = None
                    self.exact_quality_level_value = None
                    self.min_quality_level_value = None
                    self.max_quality_level_value = None
                    self._segment_path = lambda: "input-quality-level"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.InputQualityLevel, ['quality_level_option', 'exact_quality_level_value', 'min_quality_level_value', 'max_quality_level_value'], name, value)



            class OutputQualityLevel(Entity):
                """
                Set the output quality level
                
                .. attribute:: quality_level_option
                
                	Quality level option
                	**type**\:  :py:class:`FsyncQlOption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes.FsyncQlOption>`
                
                .. attribute:: exact_quality_level_value
                
                	Exact quality level value
                	**type**\:  :py:class:`FsyncQlValue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes.FsyncQlValue>`
                
                .. attribute:: min_quality_level_value
                
                	Minimum quality level value
                	**type**\:  :py:class:`FsyncQlValue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes.FsyncQlValue>`
                
                .. attribute:: max_quality_level_value
                
                	Maximum quality level value
                	**type**\:  :py:class:`FsyncQlValue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes.FsyncQlValue>`
                
                

                """

                _prefix = 'freqsync-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.OutputQualityLevel, self).__init__()

                    self.yang_name = "output-quality-level"
                    self.yang_parent_name = "frequency-synchronization"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('quality_level_option', (YLeaf(YType.enumeration, 'quality-level-option'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes', 'FsyncQlOption', '')])),
                        ('exact_quality_level_value', (YLeaf(YType.enumeration, 'exact-quality-level-value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes', 'FsyncQlValue', '')])),
                        ('min_quality_level_value', (YLeaf(YType.enumeration, 'min-quality-level-value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes', 'FsyncQlValue', '')])),
                        ('max_quality_level_value', (YLeaf(YType.enumeration, 'max-quality-level-value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_freqsync_datatypes', 'FsyncQlValue', '')])),
                    ])
                    self.quality_level_option = None
                    self.exact_quality_level_value = None
                    self.min_quality_level_value = None
                    self.max_quality_level_value = None
                    self._segment_path = lambda: "output-quality-level"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.FrequencySynchronization.OutputQualityLevel, ['quality_level_option', 'exact_quality_level_value', 'min_quality_level_value', 'max_quality_level_value'], name, value)




        class NvSatelliteAccess(Entity):
            """
            nV Satellite Access Link Configuration
            
            .. attribute:: qos
            
            	Interface QOS configuration
            	**type**\:  :py:class:`Qos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos>`
            
            

            """

            _prefix = 'icpe-infra-cfg'
            _revision = '2017-09-30'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess, self).__init__()

                self.yang_name = "nv-satellite-access"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("Cisco-IOS-XR-qos-ma-sat-cfg:qos", ("qos", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos))])
                self._leafs = OrderedDict()

                self.qos = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos()
                self.qos.parent = self
                self._children_name_map["qos"] = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
                self._segment_path = lambda: "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-access"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess, [], name, value)


            class Qos(Entity):
                """
                Interface QOS configuration
                
                .. attribute:: output
                
                	Egress service policy
                	**type**\:  :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output>`
                
                .. attribute:: input
                
                	Ingress service policy
                	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input>`
                
                

                """

                _prefix = 'qos-ma-sat-cfg'
                _revision = '2017-03-03'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos, self).__init__()

                    self.yang_name = "qos"
                    self.yang_parent_name = "nv-satellite-access"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("output", ("output", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output)), ("input", ("input", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input))])
                    self._leafs = OrderedDict()

                    self.output = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output()
                    self.output.parent = self
                    self._children_name_map["output"] = "output"

                    self.input = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input()
                    self.input.parent = self
                    self._children_name_map["input"] = "input"
                    self._segment_path = lambda: "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos, [], name, value)


                class Output(Entity):
                    """
                    Egress service policy
                    
                    .. attribute:: service_policy
                    
                    	Service policy details
                    	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output.ServicePolicy>`
                    
                    

                    """

                    _prefix = 'qos-ma-sat-cfg'
                    _revision = '2017-03-03'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output, self).__init__()

                        self.yang_name = "output"
                        self.yang_parent_name = "qos"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output.ServicePolicy))])
                        self._leafs = OrderedDict()

                        self.service_policy = YList(self)
                        self._segment_path = lambda: "output"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output, [], name, value)


                    class ServicePolicy(Entity):
                        """
                        Service policy details
                        
                        .. attribute:: service_policy_name  (key)
                        
                        	Name of policy\-map
                        	**type**\: str
                        
                        	**length:** 0..64
                        
                        

                        """

                        _prefix = 'qos-ma-sat-cfg'
                        _revision = '2017-03-03'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output.ServicePolicy, self).__init__()

                            self.yang_name = "service-policy"
                            self.yang_parent_name = "output"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['service_policy_name']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                            ])
                            self.service_policy_name = None
                            self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Output.ServicePolicy, ['service_policy_name'], name, value)




                class Input(Entity):
                    """
                    Ingress service policy
                    
                    .. attribute:: service_policy
                    
                    	Service policy details
                    	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input.ServicePolicy>`
                    
                    

                    """

                    _prefix = 'qos-ma-sat-cfg'
                    _revision = '2017-03-03'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input, self).__init__()

                        self.yang_name = "input"
                        self.yang_parent_name = "qos"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input.ServicePolicy))])
                        self._leafs = OrderedDict()

                        self.service_policy = YList(self)
                        self._segment_path = lambda: "input"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input, [], name, value)


                    class ServicePolicy(Entity):
                        """
                        Service policy details
                        
                        .. attribute:: service_policy_name  (key)
                        
                        	Name of policy\-map
                        	**type**\: str
                        
                        	**length:** 0..64
                        
                        

                        """

                        _prefix = 'qos-ma-sat-cfg'
                        _revision = '2017-03-03'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input.ServicePolicy, self).__init__()

                            self.yang_name = "service-policy"
                            self.yang_parent_name = "input"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['service_policy_name']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                            ])
                            self.service_policy_name = None
                            self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteAccess.Qos.Input.ServicePolicy, ['service_policy_name'], name, value)






        class NvSatelliteFabricLink(Entity):
            """
            nV Satellite Fabric Link Configuration
            
            .. attribute:: satellite
            
            	Hub & Spoke connection to a single Satellite
            	**type**\: int
            
            	**range:** 100..65534
            
            	**mandatory**\: True
            
            .. attribute:: minimum_required_links
            
            	Mininum number of active links required
            	**type**\: int
            
            	**range:** 1..64
            
            .. attribute:: redundancy
            
            	Redundancy submode
            	**type**\:  :py:class:`Redundancy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Redundancy>`
            
            .. attribute:: remote_ports
            
            	Remote Ports table
            	**type**\:  :py:class:`RemotePorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts>`
            
            .. attribute:: qos
            
            	Interface QOS configuration
            	**type**\:  :py:class:`Qos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos>`
            
            .. attribute:: ethernet_features
            
            	Ethernet Satellite configuration
            	**type**\:  :py:class:`EthernetFeatures <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures>`
            
            .. attribute:: frequency_synchronization
            
            	Frequency Synchronization satellite configuration
            	**type**\:  :py:class:`FrequencySynchronization <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.FrequencySynchronization>`
            
            

            This class is a :ref:`presence class<presence-class>`

            """

            _prefix = 'icpe-infra-cfg'
            _revision = '2017-09-30'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink, self).__init__()

                self.yang_name = "nv-satellite-fabric-link"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("redundancy", ("redundancy", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Redundancy)), ("remote-ports", ("remote_ports", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts)), ("Cisco-IOS-XR-qos-ma-sat-cfg:qos", ("qos", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos)), ("Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features", ("ethernet_features", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures)), ("Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization", ("frequency_synchronization", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.FrequencySynchronization))])
                self.is_presence_container = True
                self._leafs = OrderedDict([
                    ('satellite', (YLeaf(YType.uint32, 'satellite'), ['int'])),
                    ('minimum_required_links', (YLeaf(YType.uint32, 'minimum-required-links'), ['int'])),
                ])
                self.satellite = None
                self.minimum_required_links = None

                self.redundancy = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Redundancy()
                self.redundancy.parent = self
                self._children_name_map["redundancy"] = "redundancy"

                self.remote_ports = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts()
                self.remote_ports.parent = self
                self._children_name_map["remote_ports"] = "remote-ports"

                self.qos = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos()
                self.qos.parent = self
                self._children_name_map["qos"] = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"

                self.ethernet_features = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures()
                self.ethernet_features.parent = self
                self._children_name_map["ethernet_features"] = "Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features"

                self.frequency_synchronization = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.FrequencySynchronization()
                self.frequency_synchronization.parent = self
                self._children_name_map["frequency_synchronization"] = "Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization"
                self._segment_path = lambda: "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-link"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink, [u'satellite', u'minimum_required_links'], name, value)


            class Redundancy(Entity):
                """
                Redundancy submode
                
                .. attribute:: iccp_group
                
                	Links the satellite fabric to the given ICCP group
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: minimum_preferred_links
                
                	Mininum number of active links preferred
                	**type**\: int
                
                	**range:** 1..64
                
                

                """

                _prefix = 'icpe-infra-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Redundancy, self).__init__()

                    self.yang_name = "redundancy"
                    self.yang_parent_name = "nv-satellite-fabric-link"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', (YLeaf(YType.uint32, 'iccp-group'), ['int'])),
                        ('minimum_preferred_links', (YLeaf(YType.uint32, 'minimum-preferred-links'), ['int'])),
                    ])
                    self.iccp_group = None
                    self.minimum_preferred_links = None
                    self._segment_path = lambda: "redundancy"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Redundancy, [u'iccp_group', u'minimum_preferred_links'], name, value)



            class RemotePorts(Entity):
                """
                Remote Ports table
                
                .. attribute:: remote_port
                
                	Remote Ports
                	**type**\: list of  		 :py:class:`RemotePort <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts.RemotePort>`
                
                

                """

                _prefix = 'icpe-infra-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts, self).__init__()

                    self.yang_name = "remote-ports"
                    self.yang_parent_name = "nv-satellite-fabric-link"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("remote-port", ("remote_port", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts.RemotePort))])
                    self._leafs = OrderedDict()

                    self.remote_port = YList(self)
                    self._segment_path = lambda: "remote-ports"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts, [], name, value)


                class RemotePort(Entity):
                    """
                    Remote Ports
                    
                    .. attribute:: port_type  (key)
                    
                    	Port type
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: slot  (key)
                    
                    	Slot
                    	**type**\: int
                    
                    	**range:** 0..8
                    
                    .. attribute:: sub_slot  (key)
                    
                    	Sub slot
                    	**type**\: int
                    
                    	**range:** 0..8
                    
                    .. attribute:: port_range
                    
                    	Port range
                    	**type**\: str
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'icpe-infra-cfg'
                    _revision = '2017-09-30'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts.RemotePort, self).__init__()

                        self.yang_name = "remote-port"
                        self.yang_parent_name = "remote-ports"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['port_type','slot','sub_slot']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('port_type', (YLeaf(YType.str, 'port-type'), ['str'])),
                            ('slot', (YLeaf(YType.uint32, 'slot'), ['int'])),
                            ('sub_slot', (YLeaf(YType.uint32, 'sub-slot'), ['int'])),
                            ('port_range', (YLeaf(YType.str, 'port-range'), ['str'])),
                        ])
                        self.port_type = None
                        self.slot = None
                        self.sub_slot = None
                        self.port_range = None
                        self._segment_path = lambda: "remote-port" + "[port-type='" + str(self.port_type) + "']" + "[slot='" + str(self.slot) + "']" + "[sub-slot='" + str(self.sub_slot) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.RemotePorts.RemotePort, [u'port_type', u'slot', u'sub_slot', u'port_range'], name, value)




            class Qos(Entity):
                """
                Interface QOS configuration
                
                .. attribute:: output
                
                	Egress service policy
                	**type**\:  :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output>`
                
                .. attribute:: input
                
                	Ingress service policy
                	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input>`
                
                

                """

                _prefix = 'qos-ma-sat-cfg'
                _revision = '2017-03-03'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos, self).__init__()

                    self.yang_name = "qos"
                    self.yang_parent_name = "nv-satellite-fabric-link"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("output", ("output", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output)), ("input", ("input", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input))])
                    self._leafs = OrderedDict()

                    self.output = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output()
                    self.output.parent = self
                    self._children_name_map["output"] = "output"

                    self.input = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input()
                    self.input.parent = self
                    self._children_name_map["input"] = "input"
                    self._segment_path = lambda: "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos, [], name, value)


                class Output(Entity):
                    """
                    Egress service policy
                    
                    .. attribute:: service_policy
                    
                    	Service policy details
                    	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output.ServicePolicy>`
                    
                    

                    """

                    _prefix = 'qos-ma-sat-cfg'
                    _revision = '2017-03-03'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output, self).__init__()

                        self.yang_name = "output"
                        self.yang_parent_name = "qos"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output.ServicePolicy))])
                        self._leafs = OrderedDict()

                        self.service_policy = YList(self)
                        self._segment_path = lambda: "output"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output, [], name, value)


                    class ServicePolicy(Entity):
                        """
                        Service policy details
                        
                        .. attribute:: service_policy_name  (key)
                        
                        	Name of policy\-map
                        	**type**\: str
                        
                        	**length:** 0..64
                        
                        

                        """

                        _prefix = 'qos-ma-sat-cfg'
                        _revision = '2017-03-03'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output.ServicePolicy, self).__init__()

                            self.yang_name = "service-policy"
                            self.yang_parent_name = "output"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['service_policy_name']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                            ])
                            self.service_policy_name = None
                            self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Output.ServicePolicy, ['service_policy_name'], name, value)




                class Input(Entity):
                    """
                    Ingress service policy
                    
                    .. attribute:: service_policy
                    
                    	Service policy details
                    	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input.ServicePolicy>`
                    
                    

                    """

                    _prefix = 'qos-ma-sat-cfg'
                    _revision = '2017-03-03'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input, self).__init__()

                        self.yang_name = "input"
                        self.yang_parent_name = "qos"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input.ServicePolicy))])
                        self._leafs = OrderedDict()

                        self.service_policy = YList(self)
                        self._segment_path = lambda: "input"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input, [], name, value)


                    class ServicePolicy(Entity):
                        """
                        Service policy details
                        
                        .. attribute:: service_policy_name  (key)
                        
                        	Name of policy\-map
                        	**type**\: str
                        
                        	**length:** 0..64
                        
                        

                        """

                        _prefix = 'qos-ma-sat-cfg'
                        _revision = '2017-03-03'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input.ServicePolicy, self).__init__()

                            self.yang_name = "service-policy"
                            self.yang_parent_name = "input"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['service_policy_name']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                            ])
                            self.service_policy_name = None
                            self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.Qos.Input.ServicePolicy, ['service_policy_name'], name, value)





            class EthernetFeatures(Entity):
                """
                Ethernet Satellite configuration
                
                .. attribute:: cfm
                
                	CFM Satellite configuration
                	**type**\:  :py:class:`Cfm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures.Cfm>`
                
                

                """

                _prefix = 'ethernet-cfm-sat-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures, self).__init__()

                    self.yang_name = "ethernet-features"
                    self.yang_parent_name = "nv-satellite-fabric-link"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("cfm", ("cfm", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures.Cfm))])
                    self._leafs = OrderedDict()

                    self.cfm = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures.Cfm()
                    self.cfm.parent = self
                    self._children_name_map["cfm"] = "cfm"
                    self._segment_path = lambda: "Cisco-IOS-XR-ethernet-cfm-sat-cfg:ethernet-features"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures, [], name, value)


                class Cfm(Entity):
                    """
                    CFM Satellite configuration
                    
                    .. attribute:: continuity_check_interval
                    
                    	Continuity\-Check Interval
                    	**type**\:  :py:class:`CfmCcmInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_cfm_datatypes.CfmCcmInterval>`
                    
                    .. attribute:: level
                    
                    	Maintenance Domain Level
                    	**type**\: int
                    
                    	**range:** 0..7
                    
                    .. attribute:: enable
                    
                    	Enable CFM on Satellite
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ethernet-cfm-sat-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures.Cfm, self).__init__()

                        self.yang_name = "cfm"
                        self.yang_parent_name = "ethernet-features"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('continuity_check_interval', (YLeaf(YType.enumeration, 'continuity-check-interval'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_cfm_datatypes', 'CfmCcmInterval', '')])),
                            ('level', (YLeaf(YType.uint32, 'level'), ['int'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ])
                        self.continuity_check_interval = None
                        self.level = None
                        self.enable = None
                        self._segment_path = lambda: "cfm"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.EthernetFeatures.Cfm, ['continuity_check_interval', 'level', 'enable'], name, value)




            class FrequencySynchronization(Entity):
                """
                Frequency Synchronization satellite
                configuration
                
                .. attribute:: enable
                
                	Enable Frequency Synchronization
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'freqsync-sat-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.FrequencySynchronization, self).__init__()

                    self.yang_name = "frequency-synchronization"
                    self.yang_parent_name = "nv-satellite-fabric-link"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                    ])
                    self.enable = None
                    self._segment_path = lambda: "Cisco-IOS-XR-freqsync-sat-cfg:frequency-synchronization"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricLink.FrequencySynchronization, ['enable'], name, value)




        class NvSatelliteFabricNetwork(Entity):
            """
            Complex Network connection to one or more
            Satellites
            
            .. attribute:: satellites
            
            	Connected Satellite table
            	**type**\:  :py:class:`Satellites <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites>`
            
            .. attribute:: redundancy
            
            	Redundancy submode
            	**type**\:  :py:class:`Redundancy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Redundancy>`
            
            .. attribute:: enable
            
            	Enable
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            	**mandatory**\: True
            
            

            This class is a :ref:`presence class<presence-class>`

            """

            _prefix = 'icpe-infra-cfg'
            _revision = '2017-09-30'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork, self).__init__()

                self.yang_name = "nv-satellite-fabric-network"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("satellites", ("satellites", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites)), ("redundancy", ("redundancy", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Redundancy))])
                self.is_presence_container = True
                self._leafs = OrderedDict([
                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                ])
                self.enable = None

                self.satellites = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites()
                self.satellites.parent = self
                self._children_name_map["satellites"] = "satellites"

                self.redundancy = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Redundancy()
                self.redundancy.parent = self
                self._children_name_map["redundancy"] = "redundancy"
                self._segment_path = lambda: "Cisco-IOS-XR-icpe-infra-cfg:nv-satellite-fabric-network"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork, [u'enable'], name, value)


            class Satellites(Entity):
                """
                Connected Satellite table
                
                .. attribute:: satellite
                
                	Connected Satellite
                	**type**\: list of  		 :py:class:`Satellite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite>`
                
                .. attribute:: qos
                
                	Interface QOS configuration
                	**type**\:  :py:class:`Qos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos>`
                
                

                """

                _prefix = 'icpe-infra-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites, self).__init__()

                    self.yang_name = "satellites"
                    self.yang_parent_name = "nv-satellite-fabric-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("satellite", ("satellite", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite)), ("Cisco-IOS-XR-qos-ma-sat-cfg:qos", ("qos", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos))])
                    self._leafs = OrderedDict()

                    self.qos = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos()
                    self.qos.parent = self
                    self._children_name_map["qos"] = "Cisco-IOS-XR-qos-ma-sat-cfg:qos"

                    self.satellite = YList(self)
                    self._segment_path = lambda: "satellites"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites, [], name, value)


                class Satellite(Entity):
                    """
                    Connected Satellite
                    
                    .. attribute:: satellite_id  (key)
                    
                    	Satellite ID
                    	**type**\: int
                    
                    	**range:** 100..65534
                    
                    .. attribute:: remote_ports
                    
                    	Remote Ports table
                    	**type**\:  :py:class:`RemotePorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts>`
                    
                    .. attribute:: enable
                    
                    	Enable
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'icpe-infra-cfg'
                    _revision = '2017-09-30'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite, self).__init__()

                        self.yang_name = "satellite"
                        self.yang_parent_name = "satellites"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['satellite_id']
                        self._child_classes = OrderedDict([("remote-ports", ("remote_ports", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts))])
                        self._leafs = OrderedDict([
                            ('satellite_id', (YLeaf(YType.uint32, 'satellite-id'), ['int'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ])
                        self.satellite_id = None
                        self.enable = None

                        self.remote_ports = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts()
                        self.remote_ports.parent = self
                        self._children_name_map["remote_ports"] = "remote-ports"
                        self._segment_path = lambda: "satellite" + "[satellite-id='" + str(self.satellite_id) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite, [u'satellite_id', u'enable'], name, value)


                    class RemotePorts(Entity):
                        """
                        Remote Ports table
                        
                        .. attribute:: remote_port
                        
                        	Remote Ports
                        	**type**\: list of  		 :py:class:`RemotePort <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts.RemotePort>`
                        
                        

                        """

                        _prefix = 'icpe-infra-cfg'
                        _revision = '2017-09-30'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts, self).__init__()

                            self.yang_name = "remote-ports"
                            self.yang_parent_name = "satellite"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("remote-port", ("remote_port", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts.RemotePort))])
                            self._leafs = OrderedDict()

                            self.remote_port = YList(self)
                            self._segment_path = lambda: "remote-ports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts, [], name, value)


                        class RemotePort(Entity):
                            """
                            Remote Ports
                            
                            .. attribute:: port_type  (key)
                            
                            	Port type
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: slot  (key)
                            
                            	Slot
                            	**type**\: int
                            
                            	**range:** 0..8
                            
                            .. attribute:: sub_slot  (key)
                            
                            	Sub slot
                            	**type**\: int
                            
                            	**range:** 0..8
                            
                            .. attribute:: port_range
                            
                            	Port range
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'icpe-infra-cfg'
                            _revision = '2017-09-30'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts.RemotePort, self).__init__()

                                self.yang_name = "remote-port"
                                self.yang_parent_name = "remote-ports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['port_type','slot','sub_slot']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port_type', (YLeaf(YType.str, 'port-type'), ['str'])),
                                    ('slot', (YLeaf(YType.uint32, 'slot'), ['int'])),
                                    ('sub_slot', (YLeaf(YType.uint32, 'sub-slot'), ['int'])),
                                    ('port_range', (YLeaf(YType.str, 'port-range'), ['str'])),
                                ])
                                self.port_type = None
                                self.slot = None
                                self.sub_slot = None
                                self.port_range = None
                                self._segment_path = lambda: "remote-port" + "[port-type='" + str(self.port_type) + "']" + "[slot='" + str(self.slot) + "']" + "[sub-slot='" + str(self.sub_slot) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Satellite.RemotePorts.RemotePort, [u'port_type', u'slot', u'sub_slot', u'port_range'], name, value)





                class Qos(Entity):
                    """
                    Interface QOS configuration
                    
                    .. attribute:: output
                    
                    	Egress service policy
                    	**type**\:  :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output>`
                    
                    .. attribute:: input
                    
                    	Ingress service policy
                    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input>`
                    
                    

                    """

                    _prefix = 'qos-ma-sat-cfg'
                    _revision = '2017-03-03'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos, self).__init__()

                        self.yang_name = "qos"
                        self.yang_parent_name = "satellites"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("output", ("output", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output)), ("input", ("input", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input))])
                        self._leafs = OrderedDict()

                        self.output = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output()
                        self.output.parent = self
                        self._children_name_map["output"] = "output"

                        self.input = InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input()
                        self.input.parent = self
                        self._children_name_map["input"] = "input"
                        self._segment_path = lambda: "Cisco-IOS-XR-qos-ma-sat-cfg:qos"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos, [], name, value)


                    class Output(Entity):
                        """
                        Egress service policy
                        
                        .. attribute:: service_policy
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output.ServicePolicy>`
                        
                        

                        """

                        _prefix = 'qos-ma-sat-cfg'
                        _revision = '2017-03-03'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output, self).__init__()

                            self.yang_name = "output"
                            self.yang_parent_name = "qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output.ServicePolicy))])
                            self._leafs = OrderedDict()

                            self.service_policy = YList(self)
                            self._segment_path = lambda: "output"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output, [], name, value)


                        class ServicePolicy(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            

                            """

                            _prefix = 'qos-ma-sat-cfg'
                            _revision = '2017-03-03'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output.ServicePolicy, self).__init__()

                                self.yang_name = "service-policy"
                                self.yang_parent_name = "output"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                ])
                                self.service_policy_name = None
                                self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Output.ServicePolicy, ['service_policy_name'], name, value)




                    class Input(Entity):
                        """
                        Ingress service policy
                        
                        .. attribute:: service_policy
                        
                        	Service policy details
                        	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input.ServicePolicy>`
                        
                        

                        """

                        _prefix = 'qos-ma-sat-cfg'
                        _revision = '2017-03-03'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input, self).__init__()

                            self.yang_name = "input"
                            self.yang_parent_name = "qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input.ServicePolicy))])
                            self._leafs = OrderedDict()

                            self.service_policy = YList(self)
                            self._segment_path = lambda: "input"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input, [], name, value)


                        class ServicePolicy(Entity):
                            """
                            Service policy details
                            
                            .. attribute:: service_policy_name  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            

                            """

                            _prefix = 'qos-ma-sat-cfg'
                            _revision = '2017-03-03'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input.ServicePolicy, self).__init__()

                                self.yang_name = "service-policy"
                                self.yang_parent_name = "input"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['service_policy_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                                ])
                                self.service_policy_name = None
                                self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Satellites.Qos.Input.ServicePolicy, ['service_policy_name'], name, value)






            class Redundancy(Entity):
                """
                Redundancy submode
                
                .. attribute:: iccp_group
                
                	Links the satellite fabric to the given ICCP group
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: minimum_preferred_links
                
                	Mininum number of active links preferred
                	**type**\: int
                
                	**range:** 1..64
                
                

                """

                _prefix = 'icpe-infra-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Redundancy, self).__init__()

                    self.yang_name = "redundancy"
                    self.yang_parent_name = "nv-satellite-fabric-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', (YLeaf(YType.uint32, 'iccp-group'), ['int'])),
                        ('minimum_preferred_links', (YLeaf(YType.uint32, 'minimum-preferred-links'), ['int'])),
                    ])
                    self.iccp_group = None
                    self.minimum_preferred_links = None
                    self._segment_path = lambda: "redundancy"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NvSatelliteFabricNetwork.Redundancy, [u'iccp_group', u'minimum_preferred_links'], name, value)




        class Nve(Entity):
            """
            NVE operational data
            
            .. attribute:: anycast
            
            	Enable anycast mode for this NVE interface
            	**type**\:  :py:class:`Anycast <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Nve.Anycast>`
            
            .. attribute:: redundancy
            
            	Redundancy configuration for this NVE
            	**type**\:  :py:class:`Redundancy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy>`
            
            .. attribute:: member_vnis
            
            	VNI configuration Table for this NVE
            	**type**\:  :py:class:`MemberVnis <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis>`
            
            .. attribute:: vx_lan_udp_port
            
            	UDP port number in VxLAN encapsulation
            	**type**\:  :py:class:`VxlanUdpPortEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg.VxlanUdpPortEnum>`
            
            	**default value**\: ietf-udp-port
            
            .. attribute:: overlay_encapsulation
            
            	The Overlay Encapsulation for this NVE
            	**type**\:  :py:class:`OverlayEncapEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg.OverlayEncapEnum>`
            
            	**default value**\: vx-lan-encapsulation
            
            .. attribute:: source_interface
            
            	Source Interface for this NVE
            	**type**\: str
            
            .. attribute:: ingress_replication_protocol
            
            	The Ingress Replication Protocol for this NVE
            	**type**\:  :py:class:`IrProtocolEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg.IrProtocolEnum>`
            
            

            """

            _prefix = 'tunnel-nve-cfg'
            _revision = '2016-08-30'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Nve, self).__init__()

                self.yang_name = "nve"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("anycast", ("anycast", InterfaceConfigurations.InterfaceConfiguration.Nve.Anycast)), ("redundancy", ("redundancy", InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy)), ("member-vnis", ("member_vnis", InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis))])
                self._leafs = OrderedDict([
                    ('vx_lan_udp_port', (YLeaf(YType.enumeration, 'vx-lan-udp-port'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg', 'VxlanUdpPortEnum', '')])),
                    ('overlay_encapsulation', (YLeaf(YType.enumeration, 'overlay-encapsulation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg', 'OverlayEncapEnum', '')])),
                    ('source_interface', (YLeaf(YType.str, 'source-interface'), ['str'])),
                    ('ingress_replication_protocol', (YLeaf(YType.enumeration, 'ingress-replication-protocol'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg', 'IrProtocolEnum', '')])),
                ])
                self.vx_lan_udp_port = None
                self.overlay_encapsulation = None
                self.source_interface = None
                self.ingress_replication_protocol = None

                self.anycast = InterfaceConfigurations.InterfaceConfiguration.Nve.Anycast()
                self.anycast.parent = self
                self._children_name_map["anycast"] = "anycast"

                self.redundancy = InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy()
                self.redundancy.parent = self
                self._children_name_map["redundancy"] = "redundancy"

                self.member_vnis = InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis()
                self.member_vnis.parent = self
                self._children_name_map["member_vnis"] = "member-vnis"
                self._segment_path = lambda: "Cisco-IOS-XR-tunnel-nve-cfg:nve"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Nve, ['vx_lan_udp_port', 'overlay_encapsulation', 'source_interface', 'ingress_replication_protocol'], name, value)


            class Anycast(Entity):
                """
                Enable anycast mode for this NVE interface
                
                .. attribute:: source_interface
                
                	Name of the Anycast mode source interface
                	**type**\: str
                
                .. attribute:: sync_group
                
                	MCast group for syncing between Anycast gateways
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'tunnel-nve-cfg'
                _revision = '2016-08-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Nve.Anycast, self).__init__()

                    self.yang_name = "anycast"
                    self.yang_parent_name = "nve"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('source_interface', (YLeaf(YType.str, 'source-interface'), ['str'])),
                        ('sync_group', (YLeaf(YType.str, 'sync-group'), ['str'])),
                    ])
                    self.source_interface = None
                    self.sync_group = None
                    self._segment_path = lambda: "anycast"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Nve.Anycast, ['source_interface', 'sync_group'], name, value)



            class Redundancy(Entity):
                """
                Redundancy configuration for this NVE
                
                .. attribute:: backbone_vx_lan
                
                	VXLAN backbone
                	**type**\:  :py:class:`BackboneVxLan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneVxLan>`
                
                .. attribute:: backbone_mpls
                
                	MPLS backbone
                	**type**\:  :py:class:`BackboneMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneMpls>`
                
                .. attribute:: enable
                
                	Enable Redundancy
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'tunnel-nve-cfg'
                _revision = '2016-08-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy, self).__init__()

                    self.yang_name = "redundancy"
                    self.yang_parent_name = "nve"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("backbone-vx-lan", ("backbone_vx_lan", InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneVxLan)), ("backbone-mpls", ("backbone_mpls", InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneMpls))])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                    ])
                    self.enable = None

                    self.backbone_vx_lan = InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneVxLan()
                    self.backbone_vx_lan.parent = self
                    self._children_name_map["backbone_vx_lan"] = "backbone-vx-lan"

                    self.backbone_mpls = InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneMpls()
                    self.backbone_mpls.parent = self
                    self._children_name_map["backbone_mpls"] = "backbone-mpls"
                    self._segment_path = lambda: "redundancy"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy, ['enable'], name, value)


                class BackboneVxLan(Entity):
                    """
                    VXLAN backbone
                    
                    .. attribute:: enable
                    
                    	Enable Backbone VxLAN
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: backbone_vx_laniccp
                    
                    	VxLAN backbone ICCP group
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'tunnel-nve-cfg'
                    _revision = '2016-08-30'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneVxLan, self).__init__()

                        self.yang_name = "backbone-vx-lan"
                        self.yang_parent_name = "redundancy"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ('backbone_vx_laniccp', (YLeaf(YType.uint32, 'backbone-vx-laniccp'), ['int'])),
                        ])
                        self.enable = None
                        self.backbone_vx_laniccp = None
                        self._segment_path = lambda: "backbone-vx-lan"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneVxLan, ['enable', 'backbone_vx_laniccp'], name, value)



                class BackboneMpls(Entity):
                    """
                    MPLS backbone
                    
                    .. attribute:: backbone_mplsiccp
                    
                    	MPLS backbone ICCP group
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: enable
                    
                    	Enable Backbone MPLS
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'tunnel-nve-cfg'
                    _revision = '2016-08-30'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneMpls, self).__init__()

                        self.yang_name = "backbone-mpls"
                        self.yang_parent_name = "redundancy"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('backbone_mplsiccp', (YLeaf(YType.uint32, 'backbone-mplsiccp'), ['int'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ])
                        self.backbone_mplsiccp = None
                        self.enable = None
                        self._segment_path = lambda: "backbone-mpls"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Nve.Redundancy.BackboneMpls, ['backbone_mplsiccp', 'enable'], name, value)




            class MemberVnis(Entity):
                """
                VNI configuration Table for this NVE
                
                .. attribute:: member_vni
                
                	VNI member attributes
                	**type**\: list of  		 :py:class:`MemberVni <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis.MemberVni>`
                
                

                """

                _prefix = 'tunnel-nve-cfg'
                _revision = '2016-08-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis, self).__init__()

                    self.yang_name = "member-vnis"
                    self.yang_parent_name = "nve"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("member-vni", ("member_vni", InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis.MemberVni))])
                    self._leafs = OrderedDict()

                    self.member_vni = YList(self)
                    self._segment_path = lambda: "member-vnis"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis, [], name, value)


                class MemberVni(Entity):
                    """
                    VNI member attributes
                    
                    .. attribute:: vni_start  (key)
                    
                    	Single VNI or Range Start
                    	**type**\: int
                    
                    	**range:** 1..16777215
                    
                    .. attribute:: vni_end  (key)
                    
                    	Range End
                    	**type**\: int
                    
                    	**range:** 1..16777215
                    
                    .. attribute:: multicast
                    
                    	Mulitcast core group range associated with the VxLAN segment(s)
                    	**type**\:  :py:class:`Multicast <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis.MemberVni.Multicast>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: host_reachability
                    
                    	Control protocol for VxLAN tunnel endpoint reachability
                    	**type**\:  :py:class:`HostReachProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg.HostReachProtocol>`
                    
                    .. attribute:: vrf
                    
                    	VRF associated with the VxLAN segment
                    	**type**\: str
                    
                    .. attribute:: unknown_unicast_flooding
                    
                    	Suppression of unknown unicast flooding
                    	**type**\:  :py:class:`UnknownUnicastFloodingEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg.UnknownUnicastFloodingEnum>`
                    
                    .. attribute:: load_balance_per_evi
                    
                    	Per\-evi load balance mode
                    	**type**\:  :py:class:`LoadBalanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg.LoadBalanceEnum>`
                    
                    .. attribute:: enable
                    
                    	Enable VNI
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'tunnel-nve-cfg'
                    _revision = '2016-08-30'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis.MemberVni, self).__init__()

                        self.yang_name = "member-vni"
                        self.yang_parent_name = "member-vnis"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['vni_start','vni_end']
                        self._child_classes = OrderedDict([("multicast", ("multicast", InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis.MemberVni.Multicast))])
                        self._leafs = OrderedDict([
                            ('vni_start', (YLeaf(YType.uint32, 'vni-start'), ['int'])),
                            ('vni_end', (YLeaf(YType.uint32, 'vni-end'), ['int'])),
                            ('host_reachability', (YLeaf(YType.enumeration, 'host-reachability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg', 'HostReachProtocol', '')])),
                            ('vrf', (YLeaf(YType.str, 'vrf'), ['str'])),
                            ('unknown_unicast_flooding', (YLeaf(YType.enumeration, 'unknown-unicast-flooding'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg', 'UnknownUnicastFloodingEnum', '')])),
                            ('load_balance_per_evi', (YLeaf(YType.enumeration, 'load-balance-per-evi'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_nve_cfg', 'LoadBalanceEnum', '')])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ])
                        self.vni_start = None
                        self.vni_end = None
                        self.host_reachability = None
                        self.vrf = None
                        self.unknown_unicast_flooding = None
                        self.load_balance_per_evi = None
                        self.enable = None

                        self.multicast = None
                        self._children_name_map["multicast"] = "multicast"
                        self._segment_path = lambda: "member-vni" + "[vni-start='" + str(self.vni_start) + "']" + "[vni-end='" + str(self.vni_end) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis.MemberVni, ['vni_start', 'vni_end', 'host_reachability', 'vrf', 'unknown_unicast_flooding', 'load_balance_per_evi', 'enable'], name, value)


                    class Multicast(Entity):
                        """
                        Mulitcast core group range associated with
                        the VxLAN segment(s)
                        
                        .. attribute:: multicast_group_min
                        
                        	IPV4 group address of the tunnel source
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: multicast_group_max
                        
                        	IPV4 group address MAX
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'tunnel-nve-cfg'
                        _revision = '2016-08-30'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis.MemberVni.Multicast, self).__init__()

                            self.yang_name = "multicast"
                            self.yang_parent_name = "member-vni"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('multicast_group_min', (YLeaf(YType.str, 'multicast-group-min'), ['str'])),
                                ('multicast_group_max', (YLeaf(YType.str, 'multicast-group-max'), ['str'])),
                            ])
                            self.multicast_group_min = None
                            self.multicast_group_max = None
                            self._segment_path = lambda: "multicast"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Nve.MemberVnis.MemberVni.Multicast, ['multicast_group_min', 'multicast_group_max'], name, value)






        class PerformanceManagement(Entity):
            """
            Configure pm parameters
            
            .. attribute:: stm_hour24
            
            	set STM threshold
            	**type**\:  :py:class:`StmHour24 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24>`
            
            .. attribute:: minute15_gfp
            
            	set opr min threshold
            	**type**\:  :py:class:`Minute15Gfp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp>`
            
            .. attribute:: sonet_minute15
            
            	set Sonet threshold
            	**type**\:  :py:class:`SonetMinute15 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15>`
            
            .. attribute:: hour24_gfp
            
            	Configure pm parameters of gfp 24 hour interval
            	**type**\:  :py:class:`Hour24Gfp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp>`
            
            .. attribute:: ethernet_hour24
            
            	Configure pm parameters of 24 hour interval
            	**type**\:  :py:class:`EthernetHour24 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24>`
            
            .. attribute:: minute15otn_tcms
            
            	set opr min threshold
            	**type**\:  :py:class:`Minute15otnTcms <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms>`
            
            .. attribute:: oc_hour24
            
            	set Oc threshold
            	**type**\:  :py:class:`OcHour24 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24>`
            
            .. attribute:: ethernet_minute15
            
            	set opr min threshold
            	**type**\:  :py:class:`EthernetMinute15 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15>`
            
            .. attribute:: ho_vc_hour24
            
            	set HO\_VC threshold
            	**type**\:  :py:class:`HoVcHour24 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24>`
            
            .. attribute:: second30
            
            	Configure optics performance monitoring for 30 sec
            	**type**\:  :py:class:`Second30 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30>`
            
            .. attribute:: hour24otn_tcms
            
            	Configure pm parameters of tcm's 24 hour interval
            	**type**\:  :py:class:`Hour24otnTcms <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms>`
            
            .. attribute:: sts_minute15
            
            	set STS threshold
            	**type**\:  :py:class:`StsMinute15 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15>`
            
            .. attribute:: hour24
            
            	Configure pm parameters of 24 hour interval
            	**type**\:  :py:class:`Hour24 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24>`
            
            .. attribute:: ho_vc_minute15
            
            	set HO\_VC threshold
            	**type**\:  :py:class:`HoVcMinute15 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15>`
            
            .. attribute:: sts_hour24
            
            	set STS threshold
            	**type**\:  :py:class:`StsHour24 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24>`
            
            .. attribute:: stm_minute15
            
            	set STM threshold
            	**type**\:  :py:class:`StmMinute15 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15>`
            
            .. attribute:: sonet_hour24
            
            	set Sonet threshold
            	**type**\:  :py:class:`SonetHour24 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24>`
            
            .. attribute:: minute15_path
            
            	set opr min threshold
            	**type**\:  :py:class:`Minute15Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path>`
            
            .. attribute:: oc_minute15
            
            	set OC threshold
            	**type**\:  :py:class:`OcMinute15 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15>`
            
            .. attribute:: ethernet_second30
            
            	Configure ethernet performance monitoring for 30 sec
            	**type**\:  :py:class:`EthernetSecond30 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30>`
            
            .. attribute:: hour24_path
            
            	Configure pm parameters of pathmonitor 24 hour interval
            	**type**\:  :py:class:`Hour24Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path>`
            
            .. attribute:: minute15
            
            	set opr min threshold
            	**type**\:  :py:class:`Minute15 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15>`
            
            

            """

            _prefix = 'pmengine-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement, self).__init__()

                self.yang_name = "performance-management"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("stm-hour24", ("stm_hour24", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24)), ("minute15-gfp", ("minute15_gfp", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp)), ("sonet-minute15", ("sonet_minute15", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15)), ("hour24-gfp", ("hour24_gfp", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp)), ("ethernet-hour24", ("ethernet_hour24", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24)), ("minute15otn-tcms", ("minute15otn_tcms", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms)), ("oc-hour24", ("oc_hour24", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24)), ("ethernet-minute15", ("ethernet_minute15", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15)), ("ho-vc-hour24", ("ho_vc_hour24", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24)), ("second30", ("second30", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30)), ("hour24otn-tcms", ("hour24otn_tcms", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms)), ("sts-minute15", ("sts_minute15", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15)), ("hour24", ("hour24", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24)), ("ho-vc-minute15", ("ho_vc_minute15", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15)), ("sts-hour24", ("sts_hour24", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24)), ("stm-minute15", ("stm_minute15", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15)), ("sonet-hour24", ("sonet_hour24", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24)), ("minute15-path", ("minute15_path", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path)), ("oc-minute15", ("oc_minute15", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15)), ("ethernet-second30", ("ethernet_second30", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30)), ("hour24-path", ("hour24_path", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path)), ("minute15", ("minute15", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15))])
                self._leafs = OrderedDict()

                self.stm_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24()
                self.stm_hour24.parent = self
                self._children_name_map["stm_hour24"] = "stm-hour24"

                self.minute15_gfp = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp()
                self.minute15_gfp.parent = self
                self._children_name_map["minute15_gfp"] = "minute15-gfp"

                self.sonet_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15()
                self.sonet_minute15.parent = self
                self._children_name_map["sonet_minute15"] = "sonet-minute15"

                self.hour24_gfp = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp()
                self.hour24_gfp.parent = self
                self._children_name_map["hour24_gfp"] = "hour24-gfp"

                self.ethernet_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24()
                self.ethernet_hour24.parent = self
                self._children_name_map["ethernet_hour24"] = "ethernet-hour24"

                self.minute15otn_tcms = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms()
                self.minute15otn_tcms.parent = self
                self._children_name_map["minute15otn_tcms"] = "minute15otn-tcms"

                self.oc_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24()
                self.oc_hour24.parent = self
                self._children_name_map["oc_hour24"] = "oc-hour24"

                self.ethernet_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15()
                self.ethernet_minute15.parent = self
                self._children_name_map["ethernet_minute15"] = "ethernet-minute15"

                self.ho_vc_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24()
                self.ho_vc_hour24.parent = self
                self._children_name_map["ho_vc_hour24"] = "ho-vc-hour24"

                self.second30 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30()
                self.second30.parent = self
                self._children_name_map["second30"] = "second30"

                self.hour24otn_tcms = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms()
                self.hour24otn_tcms.parent = self
                self._children_name_map["hour24otn_tcms"] = "hour24otn-tcms"

                self.sts_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15()
                self.sts_minute15.parent = self
                self._children_name_map["sts_minute15"] = "sts-minute15"

                self.hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24()
                self.hour24.parent = self
                self._children_name_map["hour24"] = "hour24"

                self.ho_vc_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15()
                self.ho_vc_minute15.parent = self
                self._children_name_map["ho_vc_minute15"] = "ho-vc-minute15"

                self.sts_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24()
                self.sts_hour24.parent = self
                self._children_name_map["sts_hour24"] = "sts-hour24"

                self.stm_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15()
                self.stm_minute15.parent = self
                self._children_name_map["stm_minute15"] = "stm-minute15"

                self.sonet_hour24 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24()
                self.sonet_hour24.parent = self
                self._children_name_map["sonet_hour24"] = "sonet-hour24"

                self.minute15_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path()
                self.minute15_path.parent = self
                self._children_name_map["minute15_path"] = "minute15-path"

                self.oc_minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15()
                self.oc_minute15.parent = self
                self._children_name_map["oc_minute15"] = "oc-minute15"

                self.ethernet_second30 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30()
                self.ethernet_second30.parent = self
                self._children_name_map["ethernet_second30"] = "ethernet-second30"

                self.hour24_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path()
                self.hour24_path.parent = self
                self._children_name_map["hour24_path"] = "hour24-path"

                self.minute15 = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15()
                self.minute15.parent = self
                self._children_name_map["minute15"] = "minute15"
                self._segment_path = lambda: "Cisco-IOS-XR-pmengine-cfg:performance-management"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement, [], name, value)


            class StmHour24(Entity):
                """
                set STM threshold
                
                .. attribute:: stm_hour24_stm
                
                	Configure stm performance monitoring
                	**type**\:  :py:class:`StmHour24Stm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24, self).__init__()

                    self.yang_name = "stm-hour24"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("stm-hour24-stm", ("stm_hour24_stm", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm))])
                    self._leafs = OrderedDict()

                    self.stm_hour24_stm = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm()
                    self.stm_hour24_stm.parent = self
                    self._children_name_map["stm_hour24_stm"] = "stm-hour24-stm"
                    self._segment_path = lambda: "stm-hour24"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24, [], name, value)


                class StmHour24Stm(Entity):
                    """
                    Configure stm performance monitoring
                    
                    .. attribute:: stm_hour24_stm_reports
                    
                    	set stm TCA reporting status
                    	**type**\:  :py:class:`StmHour24StmReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports>`
                    
                    .. attribute:: stm_hour24_stm_thresholds
                    
                    	Configure threshold on stm parameters
                    	**type**\:  :py:class:`StmHour24StmThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm, self).__init__()

                        self.yang_name = "stm-hour24-stm"
                        self.yang_parent_name = "stm-hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("stm-hour24-stm-reports", ("stm_hour24_stm_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports)), ("stm-hour24-stm-thresholds", ("stm_hour24_stm_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds))])
                        self._leafs = OrderedDict()

                        self.stm_hour24_stm_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports()
                        self.stm_hour24_stm_reports.parent = self
                        self._children_name_map["stm_hour24_stm_reports"] = "stm-hour24-stm-reports"

                        self.stm_hour24_stm_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds()
                        self.stm_hour24_stm_thresholds.parent = self
                        self._children_name_map["stm_hour24_stm_thresholds"] = "stm-hour24-stm-thresholds"
                        self._segment_path = lambda: "stm-hour24-stm"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm, [], name, value)


                    class StmHour24StmReports(Entity):
                        """
                        set stm TCA reporting status
                        
                        .. attribute:: stm_hour24_stm_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`StmHour24StmReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports.StmHour24StmReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports, self).__init__()

                            self.yang_name = "stm-hour24-stm-reports"
                            self.yang_parent_name = "stm-hour24-stm"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("stm-hour24-stm-report", ("stm_hour24_stm_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports.StmHour24StmReport))])
                            self._leafs = OrderedDict()

                            self.stm_hour24_stm_report = YList(self)
                            self._segment_path = lambda: "stm-hour24-stm-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports, [], name, value)


                        class StmHour24StmReport(Entity):
                            """
                            none
                            
                            .. attribute:: stm_report  (key)
                            
                            	Stm Report Type
                            	**type**\:  :py:class:`StmReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.StmReport>`
                            
                            .. attribute:: enable
                            
                            	Stm Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports.StmHour24StmReport, self).__init__()

                                self.yang_name = "stm-hour24-stm-report"
                                self.yang_parent_name = "stm-hour24-stm-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['stm_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('stm_report', (YLeaf(YType.enumeration, 'stm-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'StmReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.stm_report = None
                                self.enable = None
                                self._segment_path = lambda: "stm-hour24-stm-report" + "[stm-report='" + str(self.stm_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmReports.StmHour24StmReport, ['stm_report', 'enable'], name, value)




                    class StmHour24StmThresholds(Entity):
                        """
                        Configure threshold on stm parameters
                        
                        .. attribute:: stm_hour24_stm_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`StmHour24StmThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds.StmHour24StmThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds, self).__init__()

                            self.yang_name = "stm-hour24-stm-thresholds"
                            self.yang_parent_name = "stm-hour24-stm"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("stm-hour24-stm-threshold", ("stm_hour24_stm_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds.StmHour24StmThreshold))])
                            self._leafs = OrderedDict()

                            self.stm_hour24_stm_threshold = YList(self)
                            self._segment_path = lambda: "stm-hour24-stm-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds, [], name, value)


                        class StmHour24StmThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: stm_threshold  (key)
                            
                            	Stm Threshold Type
                            	**type**\:  :py:class:`StmThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.StmThreshold>`
                            
                            .. attribute:: stm_threshold_value
                            
                            	Stm Thresh Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds.StmHour24StmThreshold, self).__init__()

                                self.yang_name = "stm-hour24-stm-threshold"
                                self.yang_parent_name = "stm-hour24-stm-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['stm_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('stm_threshold', (YLeaf(YType.enumeration, 'stm-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'StmThreshold', '')])),
                                    ('stm_threshold_value', (YLeaf(YType.uint32, 'stm-threshold-value'), ['int'])),
                                ])
                                self.stm_threshold = None
                                self.stm_threshold_value = None
                                self._segment_path = lambda: "stm-hour24-stm-threshold" + "[stm-threshold='" + str(self.stm_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmHour24.StmHour24Stm.StmHour24StmThresholds.StmHour24StmThreshold, ['stm_threshold', 'stm_threshold_value'], name, value)






            class Minute15Gfp(Entity):
                """
                set opr min threshold
                
                .. attribute:: minute15_gfp
                
                	Configure gfp performance monitoring
                	**type**\:  :py:class:`Minute15Gfp_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp, self).__init__()

                    self.yang_name = "minute15-gfp"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("minute15-gfp", ("minute15_gfp", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_))])
                    self._leafs = OrderedDict()

                    self.minute15_gfp = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_()
                    self.minute15_gfp.parent = self
                    self._children_name_map["minute15_gfp"] = "minute15-gfp"
                    self._segment_path = lambda: "minute15-gfp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp, [], name, value)


                class Minute15Gfp_(Entity):
                    """
                    Configure gfp performance monitoring
                    
                    .. attribute:: minute15_gfp_reports
                    
                    	set gfp TCA reporting status
                    	**type**\:  :py:class:`Minute15GfpReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports>`
                    
                    .. attribute:: minute15_gfp_thresholds
                    
                    	Configure threshold on gfp parameters
                    	**type**\:  :py:class:`Minute15GfpThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_, self).__init__()

                        self.yang_name = "minute15-gfp"
                        self.yang_parent_name = "minute15-gfp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15-gfp-reports", ("minute15_gfp_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports)), ("minute15-gfp-thresholds", ("minute15_gfp_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds))])
                        self._leafs = OrderedDict()

                        self.minute15_gfp_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports()
                        self.minute15_gfp_reports.parent = self
                        self._children_name_map["minute15_gfp_reports"] = "minute15-gfp-reports"

                        self.minute15_gfp_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds()
                        self.minute15_gfp_thresholds.parent = self
                        self._children_name_map["minute15_gfp_thresholds"] = "minute15-gfp-thresholds"
                        self._segment_path = lambda: "minute15-gfp"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_, [], name, value)


                    class Minute15GfpReports(Entity):
                        """
                        set gfp TCA reporting status
                        
                        .. attribute:: minute15_gfp_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15GfpReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports.Minute15GfpReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports, self).__init__()

                            self.yang_name = "minute15-gfp-reports"
                            self.yang_parent_name = "minute15-gfp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15-gfp-report", ("minute15_gfp_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports.Minute15GfpReport))])
                            self._leafs = OrderedDict()

                            self.minute15_gfp_report = YList(self)
                            self._segment_path = lambda: "minute15-gfp-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports, [], name, value)


                        class Minute15GfpReport(Entity):
                            """
                            none
                            
                            .. attribute:: gfp_report  (key)
                            
                            	Gfp Report Type
                            	**type**\:  :py:class:`GfpReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.GfpReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports.Minute15GfpReport, self).__init__()

                                self.yang_name = "minute15-gfp-report"
                                self.yang_parent_name = "minute15-gfp-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['gfp_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('gfp_report', (YLeaf(YType.enumeration, 'gfp-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'GfpReport', '')])),
                                ])
                                self.gfp_report = None
                                self._segment_path = lambda: "minute15-gfp-report" + "[gfp-report='" + str(self.gfp_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpReports.Minute15GfpReport, ['gfp_report'], name, value)




                    class Minute15GfpThresholds(Entity):
                        """
                        Configure threshold on gfp parameters
                        
                        .. attribute:: minute15_gfp_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15GfpThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds.Minute15GfpThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds, self).__init__()

                            self.yang_name = "minute15-gfp-thresholds"
                            self.yang_parent_name = "minute15-gfp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15-gfp-threshold", ("minute15_gfp_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds.Minute15GfpThreshold))])
                            self._leafs = OrderedDict()

                            self.minute15_gfp_threshold = YList(self)
                            self._segment_path = lambda: "minute15-gfp-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds, [], name, value)


                        class Minute15GfpThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: gfp_threshold  (key)
                            
                            	Gfp Threshold Type
                            	**type**\:  :py:class:`GfpThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.GfpThreshold>`
                            
                            .. attribute:: gfp_threshold_value
                            
                            	Gfp Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds.Minute15GfpThreshold, self).__init__()

                                self.yang_name = "minute15-gfp-threshold"
                                self.yang_parent_name = "minute15-gfp-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['gfp_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('gfp_threshold', (YLeaf(YType.enumeration, 'gfp-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'GfpThreshold', '')])),
                                    ('gfp_threshold_value', (YLeaf(YType.uint32, 'gfp-threshold-value'), ['int'])),
                                ])
                                self.gfp_threshold = None
                                self.gfp_threshold_value = None
                                self._segment_path = lambda: "minute15-gfp-threshold" + "[gfp-threshold='" + str(self.gfp_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Gfp.Minute15Gfp_.Minute15GfpThresholds.Minute15GfpThreshold, ['gfp_threshold', 'gfp_threshold_value'], name, value)






            class SonetMinute15(Entity):
                """
                set Sonet threshold
                
                .. attribute:: sonet_minute15_path
                
                	Configure Path performance monitoring
                	**type**\:  :py:class:`SonetMinute15Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path>`
                
                .. attribute:: sonet_minute15_ocn
                
                	Configure ocn performance monitoring
                	**type**\:  :py:class:`SonetMinute15Ocn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15, self).__init__()

                    self.yang_name = "sonet-minute15"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("sonet-minute15-path", ("sonet_minute15_path", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path)), ("sonet-minute15-ocn", ("sonet_minute15_ocn", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn))])
                    self._leafs = OrderedDict()

                    self.sonet_minute15_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path()
                    self.sonet_minute15_path.parent = self
                    self._children_name_map["sonet_minute15_path"] = "sonet-minute15-path"

                    self.sonet_minute15_ocn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn()
                    self.sonet_minute15_ocn.parent = self
                    self._children_name_map["sonet_minute15_ocn"] = "sonet-minute15-ocn"
                    self._segment_path = lambda: "sonet-minute15"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15, [], name, value)


                class SonetMinute15Path(Entity):
                    """
                    Configure Path performance monitoring
                    
                    .. attribute:: sonet_minute15_path_reports
                    
                    	set Path TCA reporting status
                    	**type**\:  :py:class:`SonetMinute15PathReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports>`
                    
                    .. attribute:: sonet_minute15_path_thresholds
                    
                    	Configure threshold on Path parameters
                    	**type**\:  :py:class:`SonetMinute15PathThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path, self).__init__()

                        self.yang_name = "sonet-minute15-path"
                        self.yang_parent_name = "sonet-minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sonet-minute15-path-reports", ("sonet_minute15_path_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports)), ("sonet-minute15-path-thresholds", ("sonet_minute15_path_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds))])
                        self._leafs = OrderedDict()

                        self.sonet_minute15_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports()
                        self.sonet_minute15_path_reports.parent = self
                        self._children_name_map["sonet_minute15_path_reports"] = "sonet-minute15-path-reports"

                        self.sonet_minute15_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds()
                        self.sonet_minute15_path_thresholds.parent = self
                        self._children_name_map["sonet_minute15_path_thresholds"] = "sonet-minute15-path-thresholds"
                        self._segment_path = lambda: "sonet-minute15-path"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path, [], name, value)


                    class SonetMinute15PathReports(Entity):
                        """
                        set Path TCA reporting status
                        
                        .. attribute:: sonet_minute15_path_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`SonetMinute15PathReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports.SonetMinute15PathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports, self).__init__()

                            self.yang_name = "sonet-minute15-path-reports"
                            self.yang_parent_name = "sonet-minute15-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sonet-minute15-path-report", ("sonet_minute15_path_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports.SonetMinute15PathReport))])
                            self._leafs = OrderedDict()

                            self.sonet_minute15_path_report = YList(self)
                            self._segment_path = lambda: "sonet-minute15-path-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports, [], name, value)


                        class SonetMinute15PathReport(Entity):
                            """
                            none
                            
                            .. attribute:: path_report  (key)
                            
                            	Path Report Type
                            	**type**\:  :py:class:`PathReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PathReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports.SonetMinute15PathReport, self).__init__()

                                self.yang_name = "sonet-minute15-path-report"
                                self.yang_parent_name = "sonet-minute15-path-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['path_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path_report', (YLeaf(YType.enumeration, 'path-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PathReport', '')])),
                                ])
                                self.path_report = None
                                self._segment_path = lambda: "sonet-minute15-path-report" + "[path-report='" + str(self.path_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathReports.SonetMinute15PathReport, ['path_report'], name, value)




                    class SonetMinute15PathThresholds(Entity):
                        """
                        Configure threshold on Path parameters
                        
                        .. attribute:: sonet_minute15_path_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`SonetMinute15PathThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds.SonetMinute15PathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds, self).__init__()

                            self.yang_name = "sonet-minute15-path-thresholds"
                            self.yang_parent_name = "sonet-minute15-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sonet-minute15-path-threshold", ("sonet_minute15_path_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds.SonetMinute15PathThreshold))])
                            self._leafs = OrderedDict()

                            self.sonet_minute15_path_threshold = YList(self)
                            self._segment_path = lambda: "sonet-minute15-path-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds, [], name, value)


                        class SonetMinute15PathThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: path_threshold  (key)
                            
                            	Path Threshold Type
                            	**type**\:  :py:class:`PathThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PathThreshold>`
                            
                            .. attribute:: path_threshold_value
                            
                            	Path Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds.SonetMinute15PathThreshold, self).__init__()

                                self.yang_name = "sonet-minute15-path-threshold"
                                self.yang_parent_name = "sonet-minute15-path-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['path_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path_threshold', (YLeaf(YType.enumeration, 'path-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PathThreshold', '')])),
                                    ('path_threshold_value', (YLeaf(YType.uint32, 'path-threshold-value'), ['int'])),
                                ])
                                self.path_threshold = None
                                self.path_threshold_value = None
                                self._segment_path = lambda: "sonet-minute15-path-threshold" + "[path-threshold='" + str(self.path_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Path.SonetMinute15PathThresholds.SonetMinute15PathThreshold, ['path_threshold', 'path_threshold_value'], name, value)





                class SonetMinute15Ocn(Entity):
                    """
                    Configure ocn performance monitoring
                    
                    .. attribute:: sonet_minute15_ocn_reports
                    
                    	set ocn TCA reporting status
                    	**type**\:  :py:class:`SonetMinute15OcnReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports>`
                    
                    .. attribute:: sonet_minute15_ocn_thresholds
                    
                    	Configure threshold on ocn parameters
                    	**type**\:  :py:class:`SonetMinute15OcnThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn, self).__init__()

                        self.yang_name = "sonet-minute15-ocn"
                        self.yang_parent_name = "sonet-minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sonet-minute15-ocn-reports", ("sonet_minute15_ocn_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports)), ("sonet-minute15-ocn-thresholds", ("sonet_minute15_ocn_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds))])
                        self._leafs = OrderedDict()

                        self.sonet_minute15_ocn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports()
                        self.sonet_minute15_ocn_reports.parent = self
                        self._children_name_map["sonet_minute15_ocn_reports"] = "sonet-minute15-ocn-reports"

                        self.sonet_minute15_ocn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds()
                        self.sonet_minute15_ocn_thresholds.parent = self
                        self._children_name_map["sonet_minute15_ocn_thresholds"] = "sonet-minute15-ocn-thresholds"
                        self._segment_path = lambda: "sonet-minute15-ocn"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn, [], name, value)


                    class SonetMinute15OcnReports(Entity):
                        """
                        set ocn TCA reporting status
                        
                        .. attribute:: sonet_minute15_ocn_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`SonetMinute15OcnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports.SonetMinute15OcnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports, self).__init__()

                            self.yang_name = "sonet-minute15-ocn-reports"
                            self.yang_parent_name = "sonet-minute15-ocn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sonet-minute15-ocn-report", ("sonet_minute15_ocn_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports.SonetMinute15OcnReport))])
                            self._leafs = OrderedDict()

                            self.sonet_minute15_ocn_report = YList(self)
                            self._segment_path = lambda: "sonet-minute15-ocn-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports, [], name, value)


                        class SonetMinute15OcnReport(Entity):
                            """
                            none
                            
                            .. attribute:: ocn_report  (key)
                            
                            	Ocn Report Type
                            	**type**\:  :py:class:`OcnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OcnReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports.SonetMinute15OcnReport, self).__init__()

                                self.yang_name = "sonet-minute15-ocn-report"
                                self.yang_parent_name = "sonet-minute15-ocn-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ocn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ocn_report', (YLeaf(YType.enumeration, 'ocn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OcnReport', '')])),
                                ])
                                self.ocn_report = None
                                self._segment_path = lambda: "sonet-minute15-ocn-report" + "[ocn-report='" + str(self.ocn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnReports.SonetMinute15OcnReport, ['ocn_report'], name, value)




                    class SonetMinute15OcnThresholds(Entity):
                        """
                        Configure threshold on ocn parameters
                        
                        .. attribute:: sonet_minute15_ocn_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`SonetMinute15OcnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds.SonetMinute15OcnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds, self).__init__()

                            self.yang_name = "sonet-minute15-ocn-thresholds"
                            self.yang_parent_name = "sonet-minute15-ocn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sonet-minute15-ocn-threshold", ("sonet_minute15_ocn_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds.SonetMinute15OcnThreshold))])
                            self._leafs = OrderedDict()

                            self.sonet_minute15_ocn_threshold = YList(self)
                            self._segment_path = lambda: "sonet-minute15-ocn-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds, [], name, value)


                        class SonetMinute15OcnThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ocn_threshold  (key)
                            
                            	Ocn Threshold Type
                            	**type**\:  :py:class:`OcnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OcnThreshold>`
                            
                            .. attribute:: ocn_threshold_value
                            
                            	Ocn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds.SonetMinute15OcnThreshold, self).__init__()

                                self.yang_name = "sonet-minute15-ocn-threshold"
                                self.yang_parent_name = "sonet-minute15-ocn-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ocn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ocn_threshold', (YLeaf(YType.enumeration, 'ocn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OcnThreshold', '')])),
                                    ('ocn_threshold_value', (YLeaf(YType.uint32, 'ocn-threshold-value'), ['int'])),
                                ])
                                self.ocn_threshold = None
                                self.ocn_threshold_value = None
                                self._segment_path = lambda: "sonet-minute15-ocn-threshold" + "[ocn-threshold='" + str(self.ocn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetMinute15.SonetMinute15Ocn.SonetMinute15OcnThresholds.SonetMinute15OcnThreshold, ['ocn_threshold', 'ocn_threshold_value'], name, value)






            class Hour24Gfp(Entity):
                """
                Configure pm parameters of gfp 24 hour interval
                
                .. attribute:: hour24_gfp
                
                	Configure gfp performance monitoring
                	**type**\:  :py:class:`Hour24Gfp_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp, self).__init__()

                    self.yang_name = "hour24-gfp"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("hour24-gfp", ("hour24_gfp", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_))])
                    self._leafs = OrderedDict()

                    self.hour24_gfp = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_()
                    self.hour24_gfp.parent = self
                    self._children_name_map["hour24_gfp"] = "hour24-gfp"
                    self._segment_path = lambda: "hour24-gfp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp, [], name, value)


                class Hour24Gfp_(Entity):
                    """
                    Configure gfp performance monitoring
                    
                    .. attribute:: hour24_gfp_reports
                    
                    	set gfp TCA reporting status
                    	**type**\:  :py:class:`Hour24GfpReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports>`
                    
                    .. attribute:: hour24_gfp_thresholds
                    
                    	Configure threshold on gfp parameters
                    	**type**\:  :py:class:`Hour24GfpThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_, self).__init__()

                        self.yang_name = "hour24-gfp"
                        self.yang_parent_name = "hour24-gfp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24-gfp-reports", ("hour24_gfp_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports)), ("hour24-gfp-thresholds", ("hour24_gfp_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds))])
                        self._leafs = OrderedDict()

                        self.hour24_gfp_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports()
                        self.hour24_gfp_reports.parent = self
                        self._children_name_map["hour24_gfp_reports"] = "hour24-gfp-reports"

                        self.hour24_gfp_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds()
                        self.hour24_gfp_thresholds.parent = self
                        self._children_name_map["hour24_gfp_thresholds"] = "hour24-gfp-thresholds"
                        self._segment_path = lambda: "hour24-gfp"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_, [], name, value)


                    class Hour24GfpReports(Entity):
                        """
                        set gfp TCA reporting status
                        
                        .. attribute:: hour24_gfp_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24GfpReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports.Hour24GfpReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports, self).__init__()

                            self.yang_name = "hour24-gfp-reports"
                            self.yang_parent_name = "hour24-gfp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24-gfp-report", ("hour24_gfp_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports.Hour24GfpReport))])
                            self._leafs = OrderedDict()

                            self.hour24_gfp_report = YList(self)
                            self._segment_path = lambda: "hour24-gfp-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports, [], name, value)


                        class Hour24GfpReport(Entity):
                            """
                            none
                            
                            .. attribute:: gfp_report  (key)
                            
                            	Gfp Report Type
                            	**type**\:  :py:class:`GfpReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.GfpReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports.Hour24GfpReport, self).__init__()

                                self.yang_name = "hour24-gfp-report"
                                self.yang_parent_name = "hour24-gfp-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['gfp_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('gfp_report', (YLeaf(YType.enumeration, 'gfp-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'GfpReport', '')])),
                                ])
                                self.gfp_report = None
                                self._segment_path = lambda: "hour24-gfp-report" + "[gfp-report='" + str(self.gfp_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpReports.Hour24GfpReport, ['gfp_report'], name, value)




                    class Hour24GfpThresholds(Entity):
                        """
                        Configure threshold on gfp parameters
                        
                        .. attribute:: hour24_gfp_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24GfpThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds.Hour24GfpThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds, self).__init__()

                            self.yang_name = "hour24-gfp-thresholds"
                            self.yang_parent_name = "hour24-gfp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24-gfp-threshold", ("hour24_gfp_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds.Hour24GfpThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24_gfp_threshold = YList(self)
                            self._segment_path = lambda: "hour24-gfp-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds, [], name, value)


                        class Hour24GfpThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: gfp_threshold  (key)
                            
                            	Gfp Threshold Type
                            	**type**\:  :py:class:`GfpThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.GfpThreshold>`
                            
                            .. attribute:: gfp_threshold_value
                            
                            	Gfp Thresh Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds.Hour24GfpThreshold, self).__init__()

                                self.yang_name = "hour24-gfp-threshold"
                                self.yang_parent_name = "hour24-gfp-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['gfp_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('gfp_threshold', (YLeaf(YType.enumeration, 'gfp-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'GfpThreshold', '')])),
                                    ('gfp_threshold_value', (YLeaf(YType.uint32, 'gfp-threshold-value'), ['int'])),
                                ])
                                self.gfp_threshold = None
                                self.gfp_threshold_value = None
                                self._segment_path = lambda: "hour24-gfp-threshold" + "[gfp-threshold='" + str(self.gfp_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Gfp.Hour24Gfp_.Hour24GfpThresholds.Hour24GfpThreshold, ['gfp_threshold', 'gfp_threshold_value'], name, value)






            class EthernetHour24(Entity):
                """
                Configure pm parameters of 24 hour interval
                
                .. attribute:: hour24_ether
                
                	Configure ether performance monitoring
                	**type**\:  :py:class:`Hour24Ether <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24, self).__init__()

                    self.yang_name = "ethernet-hour24"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("hour24-ether", ("hour24_ether", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether))])
                    self._leafs = OrderedDict()

                    self.hour24_ether = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether()
                    self.hour24_ether.parent = self
                    self._children_name_map["hour24_ether"] = "hour24-ether"
                    self._segment_path = lambda: "ethernet-hour24"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24, [], name, value)


                class Hour24Ether(Entity):
                    """
                    Configure ether performance monitoring
                    
                    .. attribute:: hour24_ether_thresholds
                    
                    	Configure threshold on ether parameters
                    	**type**\:  :py:class:`Hour24EtherThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds>`
                    
                    .. attribute:: hour24_ether_reports
                    
                    	set ether TCA reporting status
                    	**type**\:  :py:class:`Hour24EtherReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether, self).__init__()

                        self.yang_name = "hour24-ether"
                        self.yang_parent_name = "ethernet-hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24-ether-thresholds", ("hour24_ether_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds)), ("hour24-ether-reports", ("hour24_ether_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports))])
                        self._leafs = OrderedDict()

                        self.hour24_ether_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds()
                        self.hour24_ether_thresholds.parent = self
                        self._children_name_map["hour24_ether_thresholds"] = "hour24-ether-thresholds"

                        self.hour24_ether_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports()
                        self.hour24_ether_reports.parent = self
                        self._children_name_map["hour24_ether_reports"] = "hour24-ether-reports"
                        self._segment_path = lambda: "hour24-ether"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether, [], name, value)


                    class Hour24EtherThresholds(Entity):
                        """
                        Configure threshold on ether parameters
                        
                        .. attribute:: hour24_ether_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24EtherThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds.Hour24EtherThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds, self).__init__()

                            self.yang_name = "hour24-ether-thresholds"
                            self.yang_parent_name = "hour24-ether"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24-ether-threshold", ("hour24_ether_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds.Hour24EtherThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24_ether_threshold = YList(self)
                            self._segment_path = lambda: "hour24-ether-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds, [], name, value)


                        class Hour24EtherThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ether_threshold  (key)
                            
                            	Ether Threshold Type
                            	**type**\:  :py:class:`EtherThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.EtherThreshold>`
                            
                            .. attribute:: ether_threshold_value
                            
                            	Ether Thresh Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds.Hour24EtherThreshold, self).__init__()

                                self.yang_name = "hour24-ether-threshold"
                                self.yang_parent_name = "hour24-ether-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ether_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ether_threshold', (YLeaf(YType.enumeration, 'ether-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'EtherThreshold', '')])),
                                    ('ether_threshold_value', (YLeaf(YType.uint32, 'ether-threshold-value'), ['int'])),
                                ])
                                self.ether_threshold = None
                                self.ether_threshold_value = None
                                self._segment_path = lambda: "hour24-ether-threshold" + "[ether-threshold='" + str(self.ether_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherThresholds.Hour24EtherThreshold, ['ether_threshold', 'ether_threshold_value'], name, value)




                    class Hour24EtherReports(Entity):
                        """
                        set ether TCA reporting status
                        
                        .. attribute:: hour24_ether_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24EtherReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports.Hour24EtherReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports, self).__init__()

                            self.yang_name = "hour24-ether-reports"
                            self.yang_parent_name = "hour24-ether"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24-ether-report", ("hour24_ether_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports.Hour24EtherReport))])
                            self._leafs = OrderedDict()

                            self.hour24_ether_report = YList(self)
                            self._segment_path = lambda: "hour24-ether-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports, [], name, value)


                        class Hour24EtherReport(Entity):
                            """
                            none
                            
                            .. attribute:: ether_report  (key)
                            
                            	Ether Report Type
                            	**type**\:  :py:class:`EtherReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.EtherReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports.Hour24EtherReport, self).__init__()

                                self.yang_name = "hour24-ether-report"
                                self.yang_parent_name = "hour24-ether-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ether_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ether_report', (YLeaf(YType.enumeration, 'ether-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'EtherReport', '')])),
                                ])
                                self.ether_report = None
                                self._segment_path = lambda: "hour24-ether-report" + "[ether-report='" + str(self.ether_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetHour24.Hour24Ether.Hour24EtherReports.Hour24EtherReport, ['ether_report'], name, value)






            class Minute15otnTcms(Entity):
                """
                set opr min threshold
                
                .. attribute:: minute15otn_tcm
                
                	configure otn g709 tcm's performance monitoring
                	**type**\: list of  		 :py:class:`Minute15otnTcm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms, self).__init__()

                    self.yang_name = "minute15otn-tcms"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("minute15otn-tcm", ("minute15otn_tcm", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm))])
                    self._leafs = OrderedDict()

                    self.minute15otn_tcm = YList(self)
                    self._segment_path = lambda: "minute15otn-tcms"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms, [], name, value)


                class Minute15otnTcm(Entity):
                    """
                    configure otn g709 tcm's performance
                    monitoring
                    
                    .. attribute:: tcm_number  (key)
                    
                    	TCM number
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: min15_otn_tcm_threshes
                    
                    	Configure threshold on otn parameters
                    	**type**\:  :py:class:`Min15OtnTcmThreshes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes>`
                    
                    .. attribute:: minute15otn_tcm_reports
                    
                    	set otn TCA reporting status
                    	**type**\:  :py:class:`Minute15otnTcmReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm, self).__init__()

                        self.yang_name = "minute15otn-tcm"
                        self.yang_parent_name = "minute15otn-tcms"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['tcm_number']
                        self._child_classes = OrderedDict([("min15-otn-tcm-threshes", ("min15_otn_tcm_threshes", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes)), ("minute15otn-tcm-reports", ("minute15otn_tcm_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports))])
                        self._leafs = OrderedDict([
                            ('tcm_number', (YLeaf(YType.uint32, 'tcm-number'), ['int'])),
                        ])
                        self.tcm_number = None

                        self.min15_otn_tcm_threshes = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes()
                        self.min15_otn_tcm_threshes.parent = self
                        self._children_name_map["min15_otn_tcm_threshes"] = "min15-otn-tcm-threshes"

                        self.minute15otn_tcm_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports()
                        self.minute15otn_tcm_reports.parent = self
                        self._children_name_map["minute15otn_tcm_reports"] = "minute15otn-tcm-reports"
                        self._segment_path = lambda: "minute15otn-tcm" + "[tcm-number='" + str(self.tcm_number) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm, ['tcm_number'], name, value)


                    class Min15OtnTcmThreshes(Entity):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: min15_otn_tcm_thresh
                        
                        	none
                        	**type**\: list of  		 :py:class:`Min15OtnTcmThresh <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes.Min15OtnTcmThresh>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes, self).__init__()

                            self.yang_name = "min15-otn-tcm-threshes"
                            self.yang_parent_name = "minute15otn-tcm"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("min15-otn-tcm-thresh", ("min15_otn_tcm_thresh", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes.Min15OtnTcmThresh))])
                            self._leafs = OrderedDict()

                            self.min15_otn_tcm_thresh = YList(self)
                            self._segment_path = lambda: "min15-otn-tcm-threshes"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes, [], name, value)


                        class Min15OtnTcmThresh(Entity):
                            """
                            none
                            
                            .. attribute:: otn_threshold  (key)
                            
                            	Otn Threshold Type
                            	**type**\:  :py:class:`OtnTcmThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnTcmThreshold>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes.Min15OtnTcmThresh, self).__init__()

                                self.yang_name = "min15-otn-tcm-thresh"
                                self.yang_parent_name = "min15-otn-tcm-threshes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_threshold', (YLeaf(YType.enumeration, 'otn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnTcmThreshold', '')])),
                                    ('otn_threshold_value', (YLeaf(YType.uint32, 'otn-threshold-value'), ['int'])),
                                ])
                                self.otn_threshold = None
                                self.otn_threshold_value = None
                                self._segment_path = lambda: "min15-otn-tcm-thresh" + "[otn-threshold='" + str(self.otn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Min15OtnTcmThreshes.Min15OtnTcmThresh, ['otn_threshold', 'otn_threshold_value'], name, value)




                    class Minute15otnTcmReports(Entity):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: minute15otn_tcm_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15otnTcmReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports.Minute15otnTcmReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports, self).__init__()

                            self.yang_name = "minute15otn-tcm-reports"
                            self.yang_parent_name = "minute15otn-tcm"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15otn-tcm-report", ("minute15otn_tcm_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports.Minute15otnTcmReport))])
                            self._leafs = OrderedDict()

                            self.minute15otn_tcm_report = YList(self)
                            self._segment_path = lambda: "minute15otn-tcm-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports, [], name, value)


                        class Minute15otnTcmReport(Entity):
                            """
                            none
                            
                            .. attribute:: otn_report  (key)
                            
                            	Otn Report Type
                            	**type**\:  :py:class:`OtnTcmReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnTcmReport>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports.Minute15otnTcmReport, self).__init__()

                                self.yang_name = "minute15otn-tcm-report"
                                self.yang_parent_name = "minute15otn-tcm-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_report', (YLeaf(YType.enumeration, 'otn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnTcmReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.otn_report = None
                                self.enable = None
                                self._segment_path = lambda: "minute15otn-tcm-report" + "[otn-report='" + str(self.otn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15otnTcms.Minute15otnTcm.Minute15otnTcmReports.Minute15otnTcmReport, ['otn_report', 'enable'], name, value)






            class OcHour24(Entity):
                """
                set Oc threshold
                
                .. attribute:: oc_hour24_ocn
                
                	Configure ocn performance monitoring
                	**type**\:  :py:class:`OcHour24Ocn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24, self).__init__()

                    self.yang_name = "oc-hour24"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("oc-hour24-ocn", ("oc_hour24_ocn", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn))])
                    self._leafs = OrderedDict()

                    self.oc_hour24_ocn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn()
                    self.oc_hour24_ocn.parent = self
                    self._children_name_map["oc_hour24_ocn"] = "oc-hour24-ocn"
                    self._segment_path = lambda: "oc-hour24"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24, [], name, value)


                class OcHour24Ocn(Entity):
                    """
                    Configure ocn performance monitoring
                    
                    .. attribute:: oc_hour24_ocn_reports
                    
                    	set ocn TCA reporting status
                    	**type**\:  :py:class:`OcHour24OcnReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports>`
                    
                    .. attribute:: oc_hour24_ocn_thresholds
                    
                    	Configure threshold on ocn parameters
                    	**type**\:  :py:class:`OcHour24OcnThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn, self).__init__()

                        self.yang_name = "oc-hour24-ocn"
                        self.yang_parent_name = "oc-hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("oc-hour24-ocn-reports", ("oc_hour24_ocn_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports)), ("oc-hour24-ocn-thresholds", ("oc_hour24_ocn_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds))])
                        self._leafs = OrderedDict()

                        self.oc_hour24_ocn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports()
                        self.oc_hour24_ocn_reports.parent = self
                        self._children_name_map["oc_hour24_ocn_reports"] = "oc-hour24-ocn-reports"

                        self.oc_hour24_ocn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds()
                        self.oc_hour24_ocn_thresholds.parent = self
                        self._children_name_map["oc_hour24_ocn_thresholds"] = "oc-hour24-ocn-thresholds"
                        self._segment_path = lambda: "oc-hour24-ocn"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn, [], name, value)


                    class OcHour24OcnReports(Entity):
                        """
                        set ocn TCA reporting status
                        
                        .. attribute:: oc_hour24_ocn_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`OcHour24OcnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports.OcHour24OcnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports, self).__init__()

                            self.yang_name = "oc-hour24-ocn-reports"
                            self.yang_parent_name = "oc-hour24-ocn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("oc-hour24-ocn-report", ("oc_hour24_ocn_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports.OcHour24OcnReport))])
                            self._leafs = OrderedDict()

                            self.oc_hour24_ocn_report = YList(self)
                            self._segment_path = lambda: "oc-hour24-ocn-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports, [], name, value)


                        class OcHour24OcnReport(Entity):
                            """
                            none
                            
                            .. attribute:: ocn_report  (key)
                            
                            	Ocn Report Type
                            	**type**\:  :py:class:`OcnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OcnReport>`
                            
                            .. attribute:: enable
                            
                            	Ocn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports.OcHour24OcnReport, self).__init__()

                                self.yang_name = "oc-hour24-ocn-report"
                                self.yang_parent_name = "oc-hour24-ocn-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ocn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ocn_report', (YLeaf(YType.enumeration, 'ocn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OcnReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.ocn_report = None
                                self.enable = None
                                self._segment_path = lambda: "oc-hour24-ocn-report" + "[ocn-report='" + str(self.ocn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnReports.OcHour24OcnReport, ['ocn_report', 'enable'], name, value)




                    class OcHour24OcnThresholds(Entity):
                        """
                        Configure threshold on ocn parameters
                        
                        .. attribute:: oc_hour24_ocn_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`OcHour24OcnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds.OcHour24OcnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds, self).__init__()

                            self.yang_name = "oc-hour24-ocn-thresholds"
                            self.yang_parent_name = "oc-hour24-ocn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("oc-hour24-ocn-threshold", ("oc_hour24_ocn_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds.OcHour24OcnThreshold))])
                            self._leafs = OrderedDict()

                            self.oc_hour24_ocn_threshold = YList(self)
                            self._segment_path = lambda: "oc-hour24-ocn-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds, [], name, value)


                        class OcHour24OcnThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ocn_threshold  (key)
                            
                            	Ocn Threshold Type
                            	**type**\:  :py:class:`OcnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OcnThreshold>`
                            
                            .. attribute:: ocn_threshold_value
                            
                            	Ocn Thresh Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds.OcHour24OcnThreshold, self).__init__()

                                self.yang_name = "oc-hour24-ocn-threshold"
                                self.yang_parent_name = "oc-hour24-ocn-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ocn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ocn_threshold', (YLeaf(YType.enumeration, 'ocn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OcnThreshold', '')])),
                                    ('ocn_threshold_value', (YLeaf(YType.uint32, 'ocn-threshold-value'), ['int'])),
                                ])
                                self.ocn_threshold = None
                                self.ocn_threshold_value = None
                                self._segment_path = lambda: "oc-hour24-ocn-threshold" + "[ocn-threshold='" + str(self.ocn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcHour24.OcHour24Ocn.OcHour24OcnThresholds.OcHour24OcnThreshold, ['ocn_threshold', 'ocn_threshold_value'], name, value)






            class EthernetMinute15(Entity):
                """
                set opr min threshold
                
                .. attribute:: minute15_ether
                
                	Configure ether performance monitoring
                	**type**\:  :py:class:`Minute15Ether <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15, self).__init__()

                    self.yang_name = "ethernet-minute15"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("minute15-ether", ("minute15_ether", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether))])
                    self._leafs = OrderedDict()

                    self.minute15_ether = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether()
                    self.minute15_ether.parent = self
                    self._children_name_map["minute15_ether"] = "minute15-ether"
                    self._segment_path = lambda: "ethernet-minute15"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15, [], name, value)


                class Minute15Ether(Entity):
                    """
                    Configure ether performance monitoring
                    
                    .. attribute:: minute15_ether_thresholds
                    
                    	Configure threshold on ether parameters
                    	**type**\:  :py:class:`Minute15EtherThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds>`
                    
                    .. attribute:: minute15_ether_reports
                    
                    	set ether TCA reporting status
                    	**type**\:  :py:class:`Minute15EtherReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether, self).__init__()

                        self.yang_name = "minute15-ether"
                        self.yang_parent_name = "ethernet-minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15-ether-thresholds", ("minute15_ether_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds)), ("minute15-ether-reports", ("minute15_ether_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports))])
                        self._leafs = OrderedDict()

                        self.minute15_ether_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds()
                        self.minute15_ether_thresholds.parent = self
                        self._children_name_map["minute15_ether_thresholds"] = "minute15-ether-thresholds"

                        self.minute15_ether_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports()
                        self.minute15_ether_reports.parent = self
                        self._children_name_map["minute15_ether_reports"] = "minute15-ether-reports"
                        self._segment_path = lambda: "minute15-ether"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether, [], name, value)


                    class Minute15EtherThresholds(Entity):
                        """
                        Configure threshold on ether parameters
                        
                        .. attribute:: minute15_ether_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15EtherThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds.Minute15EtherThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds, self).__init__()

                            self.yang_name = "minute15-ether-thresholds"
                            self.yang_parent_name = "minute15-ether"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15-ether-threshold", ("minute15_ether_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds.Minute15EtherThreshold))])
                            self._leafs = OrderedDict()

                            self.minute15_ether_threshold = YList(self)
                            self._segment_path = lambda: "minute15-ether-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds, [], name, value)


                        class Minute15EtherThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ether_threshold  (key)
                            
                            	Ether Threshold Type
                            	**type**\:  :py:class:`EtherThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.EtherThreshold>`
                            
                            .. attribute:: ether_threshold_value
                            
                            	Ether Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds.Minute15EtherThreshold, self).__init__()

                                self.yang_name = "minute15-ether-threshold"
                                self.yang_parent_name = "minute15-ether-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ether_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ether_threshold', (YLeaf(YType.enumeration, 'ether-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'EtherThreshold', '')])),
                                    ('ether_threshold_value', (YLeaf(YType.uint32, 'ether-threshold-value'), ['int'])),
                                ])
                                self.ether_threshold = None
                                self.ether_threshold_value = None
                                self._segment_path = lambda: "minute15-ether-threshold" + "[ether-threshold='" + str(self.ether_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherThresholds.Minute15EtherThreshold, ['ether_threshold', 'ether_threshold_value'], name, value)




                    class Minute15EtherReports(Entity):
                        """
                        set ether TCA reporting status
                        
                        .. attribute:: minute15_ether_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15EtherReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports.Minute15EtherReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports, self).__init__()

                            self.yang_name = "minute15-ether-reports"
                            self.yang_parent_name = "minute15-ether"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15-ether-report", ("minute15_ether_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports.Minute15EtherReport))])
                            self._leafs = OrderedDict()

                            self.minute15_ether_report = YList(self)
                            self._segment_path = lambda: "minute15-ether-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports, [], name, value)


                        class Minute15EtherReport(Entity):
                            """
                            none
                            
                            .. attribute:: ether_report  (key)
                            
                            	Ether Report Type
                            	**type**\:  :py:class:`EtherReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.EtherReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports.Minute15EtherReport, self).__init__()

                                self.yang_name = "minute15-ether-report"
                                self.yang_parent_name = "minute15-ether-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ether_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ether_report', (YLeaf(YType.enumeration, 'ether-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'EtherReport', '')])),
                                ])
                                self.ether_report = None
                                self._segment_path = lambda: "minute15-ether-report" + "[ether-report='" + str(self.ether_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetMinute15.Minute15Ether.Minute15EtherReports.Minute15EtherReport, ['ether_report'], name, value)






            class HoVcHour24(Entity):
                """
                set HO\_VC threshold
                
                .. attribute:: ho_vc_hour24ho_vc
                
                	Configure ho\_vc performance monitoring
                	**type**\:  :py:class:`HoVcHour24hoVc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24, self).__init__()

                    self.yang_name = "ho-vc-hour24"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ho-vc-hour24ho-vc", ("ho_vc_hour24ho_vc", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc))])
                    self._leafs = OrderedDict()

                    self.ho_vc_hour24ho_vc = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc()
                    self.ho_vc_hour24ho_vc.parent = self
                    self._children_name_map["ho_vc_hour24ho_vc"] = "ho-vc-hour24ho-vc"
                    self._segment_path = lambda: "ho-vc-hour24"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24, [], name, value)


                class HoVcHour24hoVc(Entity):
                    """
                    Configure ho\_vc performance monitoring
                    
                    .. attribute:: ho_vc_hour24ho_vc_reports
                    
                    	set ho\_vc TCA reporting status
                    	**type**\:  :py:class:`HoVcHour24hoVcReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports>`
                    
                    .. attribute:: ho_vc_hour24ho_vc_thresholds
                    
                    	Configure threshold on ho\_vc parameters
                    	**type**\:  :py:class:`HoVcHour24hoVcThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc, self).__init__()

                        self.yang_name = "ho-vc-hour24ho-vc"
                        self.yang_parent_name = "ho-vc-hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ho-vc-hour24ho-vc-reports", ("ho_vc_hour24ho_vc_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports)), ("ho-vc-hour24ho-vc-thresholds", ("ho_vc_hour24ho_vc_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds))])
                        self._leafs = OrderedDict()

                        self.ho_vc_hour24ho_vc_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports()
                        self.ho_vc_hour24ho_vc_reports.parent = self
                        self._children_name_map["ho_vc_hour24ho_vc_reports"] = "ho-vc-hour24ho-vc-reports"

                        self.ho_vc_hour24ho_vc_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds()
                        self.ho_vc_hour24ho_vc_thresholds.parent = self
                        self._children_name_map["ho_vc_hour24ho_vc_thresholds"] = "ho-vc-hour24ho-vc-thresholds"
                        self._segment_path = lambda: "ho-vc-hour24ho-vc"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc, [], name, value)


                    class HoVcHour24hoVcReports(Entity):
                        """
                        set ho\_vc TCA reporting status
                        
                        .. attribute:: ho_vc_hour24ho_vc_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`HoVcHour24hoVcReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports.HoVcHour24hoVcReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports, self).__init__()

                            self.yang_name = "ho-vc-hour24ho-vc-reports"
                            self.yang_parent_name = "ho-vc-hour24ho-vc"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("ho-vc-hour24ho-vc-report", ("ho_vc_hour24ho_vc_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports.HoVcHour24hoVcReport))])
                            self._leafs = OrderedDict()

                            self.ho_vc_hour24ho_vc_report = YList(self)
                            self._segment_path = lambda: "ho-vc-hour24ho-vc-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports, [], name, value)


                        class HoVcHour24hoVcReport(Entity):
                            """
                            none
                            
                            .. attribute:: ho_vc_report  (key)
                            
                            	ho\_vc Report Type
                            	**type**\:  :py:class:`HoVcReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.HoVcReport>`
                            
                            .. attribute:: enable
                            
                            	ho\_vc Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports.HoVcHour24hoVcReport, self).__init__()

                                self.yang_name = "ho-vc-hour24ho-vc-report"
                                self.yang_parent_name = "ho-vc-hour24ho-vc-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ho_vc_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ho_vc_report', (YLeaf(YType.enumeration, 'ho-vc-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'HoVcReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.ho_vc_report = None
                                self.enable = None
                                self._segment_path = lambda: "ho-vc-hour24ho-vc-report" + "[ho-vc-report='" + str(self.ho_vc_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcReports.HoVcHour24hoVcReport, ['ho_vc_report', 'enable'], name, value)




                    class HoVcHour24hoVcThresholds(Entity):
                        """
                        Configure threshold on ho\_vc parameters
                        
                        .. attribute:: ho_vc_hour24ho_vc_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`HoVcHour24hoVcThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds.HoVcHour24hoVcThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds, self).__init__()

                            self.yang_name = "ho-vc-hour24ho-vc-thresholds"
                            self.yang_parent_name = "ho-vc-hour24ho-vc"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("ho-vc-hour24ho-vc-threshold", ("ho_vc_hour24ho_vc_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds.HoVcHour24hoVcThreshold))])
                            self._leafs = OrderedDict()

                            self.ho_vc_hour24ho_vc_threshold = YList(self)
                            self._segment_path = lambda: "ho-vc-hour24ho-vc-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds, [], name, value)


                        class HoVcHour24hoVcThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ho_vc_threshold  (key)
                            
                            	ho\_vc Threshold Type
                            	**type**\:  :py:class:`HoVcThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.HoVcThreshold>`
                            
                            .. attribute:: ho_vc_threshold_value
                            
                            	ho\_vc Thresh Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds.HoVcHour24hoVcThreshold, self).__init__()

                                self.yang_name = "ho-vc-hour24ho-vc-threshold"
                                self.yang_parent_name = "ho-vc-hour24ho-vc-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ho_vc_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ho_vc_threshold', (YLeaf(YType.enumeration, 'ho-vc-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'HoVcThreshold', '')])),
                                    ('ho_vc_threshold_value', (YLeaf(YType.uint32, 'ho-vc-threshold-value'), ['int'])),
                                ])
                                self.ho_vc_threshold = None
                                self.ho_vc_threshold_value = None
                                self._segment_path = lambda: "ho-vc-hour24ho-vc-threshold" + "[ho-vc-threshold='" + str(self.ho_vc_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcHour24.HoVcHour24hoVc.HoVcHour24hoVcThresholds.HoVcHour24hoVcThreshold, ['ho_vc_threshold', 'ho_vc_threshold_value'], name, value)






            class Second30(Entity):
                """
                Configure optics performance monitoring for 30
                sec
                
                .. attribute:: second30pcs
                
                	Configure pcs performance monitoring
                	**type**\:  :py:class:`Second30pcs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs>`
                
                .. attribute:: second30fec
                
                	Configure fec g709 performance monitoring
                	**type**\:  :py:class:`Second30fec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec>`
                
                .. attribute:: second30_optics
                
                	Configure optics performance monitoring
                	**type**\:  :py:class:`Second30Optics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics>`
                
                .. attribute:: second30secyif
                
                	Configure secy\-if performance monitoring
                	**type**\:  :py:class:`Second30secyif <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif>`
                
                .. attribute:: second30secyrx
                
                	Configure secy\-rx performance monitoring
                	**type**\:  :py:class:`Second30secyrx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx>`
                
                .. attribute:: second30otn
                
                	configure otn g709 performance monitoring
                	**type**\:  :py:class:`Second30otn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn>`
                
                .. attribute:: second30secytx
                
                	Configure secy\-tx performance monitoring
                	**type**\:  :py:class:`Second30secytx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30, self).__init__()

                    self.yang_name = "second30"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("second30pcs", ("second30pcs", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs)), ("second30fec", ("second30fec", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec)), ("second30-optics", ("second30_optics", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics)), ("second30secyif", ("second30secyif", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif)), ("second30secyrx", ("second30secyrx", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx)), ("second30otn", ("second30otn", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn)), ("second30secytx", ("second30secytx", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx))])
                    self._leafs = OrderedDict()

                    self.second30pcs = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs()
                    self.second30pcs.parent = self
                    self._children_name_map["second30pcs"] = "second30pcs"

                    self.second30fec = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec()
                    self.second30fec.parent = self
                    self._children_name_map["second30fec"] = "second30fec"

                    self.second30_optics = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics()
                    self.second30_optics.parent = self
                    self._children_name_map["second30_optics"] = "second30-optics"

                    self.second30secyif = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif()
                    self.second30secyif.parent = self
                    self._children_name_map["second30secyif"] = "second30secyif"

                    self.second30secyrx = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx()
                    self.second30secyrx.parent = self
                    self._children_name_map["second30secyrx"] = "second30secyrx"

                    self.second30otn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn()
                    self.second30otn.parent = self
                    self._children_name_map["second30otn"] = "second30otn"

                    self.second30secytx = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx()
                    self.second30secytx.parent = self
                    self._children_name_map["second30secytx"] = "second30secytx"
                    self._segment_path = lambda: "second30"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30, [], name, value)


                class Second30pcs(Entity):
                    """
                    Configure pcs performance monitoring
                    
                    .. attribute:: second30pcs_thresholds
                    
                    	Configure pcs threshold
                    	**type**\:  :py:class:`Second30pcsThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds>`
                    
                    .. attribute:: second30pcs_reports
                    
                    	set pcs TCA reporting status
                    	**type**\:  :py:class:`Second30pcsReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs, self).__init__()

                        self.yang_name = "second30pcs"
                        self.yang_parent_name = "second30"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("second30pcs-thresholds", ("second30pcs_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds)), ("second30pcs-reports", ("second30pcs_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports))])
                        self._leafs = OrderedDict()

                        self.second30pcs_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds()
                        self.second30pcs_thresholds.parent = self
                        self._children_name_map["second30pcs_thresholds"] = "second30pcs-thresholds"

                        self.second30pcs_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports()
                        self.second30pcs_reports.parent = self
                        self._children_name_map["second30pcs_reports"] = "second30pcs-reports"
                        self._segment_path = lambda: "second30pcs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs, [], name, value)


                    class Second30pcsThresholds(Entity):
                        """
                        Configure pcs threshold
                        
                        .. attribute:: second30pcs_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30pcsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds.Second30pcsThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds, self).__init__()

                            self.yang_name = "second30pcs-thresholds"
                            self.yang_parent_name = "second30pcs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30pcs-threshold", ("second30pcs_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds.Second30pcsThreshold))])
                            self._leafs = OrderedDict()

                            self.second30pcs_threshold = YList(self)
                            self._segment_path = lambda: "second30pcs-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds, [], name, value)


                        class Second30pcsThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: pcs_threshold  (key)
                            
                            	Pcs Threshold Type
                            	**type**\:  :py:class:`PcsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PcsThreshold>`
                            
                            .. attribute:: pcs_threshold_value
                            
                            	Pcs Threshold Value
                            	**type**\: str
                            
                            	**length:** 1..20
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds.Second30pcsThreshold, self).__init__()

                                self.yang_name = "second30pcs-threshold"
                                self.yang_parent_name = "second30pcs-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['pcs_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pcs_threshold', (YLeaf(YType.enumeration, 'pcs-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PcsThreshold', '')])),
                                    ('pcs_threshold_value', (YLeaf(YType.str, 'pcs-threshold-value'), ['str'])),
                                ])
                                self.pcs_threshold = None
                                self.pcs_threshold_value = None
                                self._segment_path = lambda: "second30pcs-threshold" + "[pcs-threshold='" + str(self.pcs_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsThresholds.Second30pcsThreshold, ['pcs_threshold', 'pcs_threshold_value'], name, value)




                    class Second30pcsReports(Entity):
                        """
                        set pcs TCA reporting status
                        
                        .. attribute:: second30pcs_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30pcsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports.Second30pcsReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports, self).__init__()

                            self.yang_name = "second30pcs-reports"
                            self.yang_parent_name = "second30pcs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30pcs-report", ("second30pcs_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports.Second30pcsReport))])
                            self._leafs = OrderedDict()

                            self.second30pcs_report = YList(self)
                            self._segment_path = lambda: "second30pcs-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports, [], name, value)


                        class Second30pcsReport(Entity):
                            """
                            none
                            
                            .. attribute:: pcs_report  (key)
                            
                            	Pcs Report Type
                            	**type**\:  :py:class:`PcsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PcsReport>`
                            
                            .. attribute:: enable
                            
                            	PCS Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports.Second30pcsReport, self).__init__()

                                self.yang_name = "second30pcs-report"
                                self.yang_parent_name = "second30pcs-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['pcs_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pcs_report', (YLeaf(YType.enumeration, 'pcs-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PcsReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.pcs_report = None
                                self.enable = None
                                self._segment_path = lambda: "second30pcs-report" + "[pcs-report='" + str(self.pcs_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30pcs.Second30pcsReports.Second30pcsReport, ['pcs_report', 'enable'], name, value)





                class Second30fec(Entity):
                    """
                    Configure fec g709 performance monitoring
                    
                    .. attribute:: second30fec_thresholds
                    
                    	Configure fec threshold
                    	**type**\:  :py:class:`Second30fecThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds>`
                    
                    .. attribute:: second30fec_reports
                    
                    	set fec TCA reporting status
                    	**type**\:  :py:class:`Second30fecReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec, self).__init__()

                        self.yang_name = "second30fec"
                        self.yang_parent_name = "second30"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("second30fec-thresholds", ("second30fec_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds)), ("second30fec-reports", ("second30fec_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports))])
                        self._leafs = OrderedDict()

                        self.second30fec_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds()
                        self.second30fec_thresholds.parent = self
                        self._children_name_map["second30fec_thresholds"] = "second30fec-thresholds"

                        self.second30fec_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports()
                        self.second30fec_reports.parent = self
                        self._children_name_map["second30fec_reports"] = "second30fec-reports"
                        self._segment_path = lambda: "second30fec"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec, [], name, value)


                    class Second30fecThresholds(Entity):
                        """
                        Configure fec threshold
                        
                        .. attribute:: second30fec_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30fecThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds.Second30fecThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds, self).__init__()

                            self.yang_name = "second30fec-thresholds"
                            self.yang_parent_name = "second30fec"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30fec-threshold", ("second30fec_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds.Second30fecThreshold))])
                            self._leafs = OrderedDict()

                            self.second30fec_threshold = YList(self)
                            self._segment_path = lambda: "second30fec-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds, [], name, value)


                        class Second30fecThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: fec_threshold  (key)
                            
                            	Fec Threshold Type
                            	**type**\:  :py:class:`FecThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.FecThreshold>`
                            
                            .. attribute:: fec_threshold_value
                            
                            	Fec Threshold Value
                            	**type**\: str
                            
                            	**length:** 1..20
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds.Second30fecThreshold, self).__init__()

                                self.yang_name = "second30fec-threshold"
                                self.yang_parent_name = "second30fec-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['fec_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fec_threshold', (YLeaf(YType.enumeration, 'fec-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'FecThreshold', '')])),
                                    ('fec_threshold_value', (YLeaf(YType.str, 'fec-threshold-value'), ['str'])),
                                ])
                                self.fec_threshold = None
                                self.fec_threshold_value = None
                                self._segment_path = lambda: "second30fec-threshold" + "[fec-threshold='" + str(self.fec_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecThresholds.Second30fecThreshold, ['fec_threshold', 'fec_threshold_value'], name, value)




                    class Second30fecReports(Entity):
                        """
                        set fec TCA reporting status
                        
                        .. attribute:: second30fec_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30fecReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports.Second30fecReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports, self).__init__()

                            self.yang_name = "second30fec-reports"
                            self.yang_parent_name = "second30fec"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30fec-report", ("second30fec_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports.Second30fecReport))])
                            self._leafs = OrderedDict()

                            self.second30fec_report = YList(self)
                            self._segment_path = lambda: "second30fec-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports, [], name, value)


                        class Second30fecReport(Entity):
                            """
                            none
                            
                            .. attribute:: fec_report  (key)
                            
                            	Fec Report Type
                            	**type**\:  :py:class:`FecReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.FecReport>`
                            
                            .. attribute:: enable
                            
                            	Fec Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports.Second30fecReport, self).__init__()

                                self.yang_name = "second30fec-report"
                                self.yang_parent_name = "second30fec-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['fec_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fec_report', (YLeaf(YType.enumeration, 'fec-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'FecReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.fec_report = None
                                self.enable = None
                                self._segment_path = lambda: "second30fec-report" + "[fec-report='" + str(self.fec_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30fec.Second30fecReports.Second30fecReport, ['fec_report', 'enable'], name, value)





                class Second30Optics(Entity):
                    """
                    Configure optics performance monitoring
                    
                    .. attribute:: second30_optics_reports
                    
                    	set optics TCA reporting status
                    	**type**\:  :py:class:`Second30OpticsReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports>`
                    
                    .. attribute:: second30_optics_thresholds
                    
                    	Configure threshold on optics parameters
                    	**type**\:  :py:class:`Second30OpticsThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics, self).__init__()

                        self.yang_name = "second30-optics"
                        self.yang_parent_name = "second30"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("second30-optics-reports", ("second30_optics_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports)), ("second30-optics-thresholds", ("second30_optics_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds))])
                        self._leafs = OrderedDict()

                        self.second30_optics_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports()
                        self.second30_optics_reports.parent = self
                        self._children_name_map["second30_optics_reports"] = "second30-optics-reports"

                        self.second30_optics_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds()
                        self.second30_optics_thresholds.parent = self
                        self._children_name_map["second30_optics_thresholds"] = "second30-optics-thresholds"
                        self._segment_path = lambda: "second30-optics"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics, [], name, value)


                    class Second30OpticsReports(Entity):
                        """
                        set optics TCA reporting status
                        
                        .. attribute:: second30_optics_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30OpticsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports.Second30OpticsReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports, self).__init__()

                            self.yang_name = "second30-optics-reports"
                            self.yang_parent_name = "second30-optics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30-optics-report", ("second30_optics_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports.Second30OpticsReport))])
                            self._leafs = OrderedDict()

                            self.second30_optics_report = YList(self)
                            self._segment_path = lambda: "second30-optics-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports, [], name, value)


                        class Second30OpticsReport(Entity):
                            """
                            none
                            
                            .. attribute:: optics_report  (key)
                            
                            	Optics Report Type
                            	**type**\:  :py:class:`OpticsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OpticsReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports.Second30OpticsReport, self).__init__()

                                self.yang_name = "second30-optics-report"
                                self.yang_parent_name = "second30-optics-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['optics_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('optics_report', (YLeaf(YType.enumeration, 'optics-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OpticsReport', '')])),
                                ])
                                self.optics_report = None
                                self._segment_path = lambda: "second30-optics-report" + "[optics-report='" + str(self.optics_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsReports.Second30OpticsReport, ['optics_report'], name, value)




                    class Second30OpticsThresholds(Entity):
                        """
                        Configure threshold on optics parameters
                        
                        .. attribute:: second30_optics_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30OpticsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds.Second30OpticsThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds, self).__init__()

                            self.yang_name = "second30-optics-thresholds"
                            self.yang_parent_name = "second30-optics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30-optics-threshold", ("second30_optics_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds.Second30OpticsThreshold))])
                            self._leafs = OrderedDict()

                            self.second30_optics_threshold = YList(self)
                            self._segment_path = lambda: "second30-optics-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds, [], name, value)


                        class Second30OpticsThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: optics_threshold  (key)
                            
                            	Optics Threshold Type
                            	**type**\:  :py:class:`OpticsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OpticsThreshold>`
                            
                            .. attribute:: optics_threshold_value
                            
                            	Optics Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: dbm
                            
                            	Used only for Opt and Opr,To Enter Threshold in dbm use 1
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**default value**\: 0
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds.Second30OpticsThreshold, self).__init__()

                                self.yang_name = "second30-optics-threshold"
                                self.yang_parent_name = "second30-optics-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['optics_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('optics_threshold', (YLeaf(YType.enumeration, 'optics-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OpticsThreshold', '')])),
                                    ('optics_threshold_value', (YLeaf(YType.int32, 'optics-threshold-value'), ['int'])),
                                    ('dbm', (YLeaf(YType.uint32, 'dbm'), ['int'])),
                                ])
                                self.optics_threshold = None
                                self.optics_threshold_value = None
                                self.dbm = None
                                self._segment_path = lambda: "second30-optics-threshold" + "[optics-threshold='" + str(self.optics_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30Optics.Second30OpticsThresholds.Second30OpticsThreshold, ['optics_threshold', 'optics_threshold_value', 'dbm'], name, value)





                class Second30secyif(Entity):
                    """
                    Configure secy\-if performance monitoring
                    
                    .. attribute:: second30secyif_thresholds
                    
                    	Configure threshold on secyif parameters
                    	**type**\:  :py:class:`Second30secyifThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds>`
                    
                    .. attribute:: second30secyif_reports
                    
                    	set secyif TCA reporting status
                    	**type**\:  :py:class:`Second30secyifReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif, self).__init__()

                        self.yang_name = "second30secyif"
                        self.yang_parent_name = "second30"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("second30secyif-thresholds", ("second30secyif_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds)), ("second30secyif-reports", ("second30secyif_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports))])
                        self._leafs = OrderedDict()

                        self.second30secyif_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds()
                        self.second30secyif_thresholds.parent = self
                        self._children_name_map["second30secyif_thresholds"] = "second30secyif-thresholds"

                        self.second30secyif_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports()
                        self.second30secyif_reports.parent = self
                        self._children_name_map["second30secyif_reports"] = "second30secyif-reports"
                        self._segment_path = lambda: "second30secyif"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif, [], name, value)


                    class Second30secyifThresholds(Entity):
                        """
                        Configure threshold on secyif parameters
                        
                        .. attribute:: second30secyif_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30secyifThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds.Second30secyifThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds, self).__init__()

                            self.yang_name = "second30secyif-thresholds"
                            self.yang_parent_name = "second30secyif"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30secyif-threshold", ("second30secyif_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds.Second30secyifThreshold))])
                            self._leafs = OrderedDict()

                            self.second30secyif_threshold = YList(self)
                            self._segment_path = lambda: "second30secyif-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds, [], name, value)


                        class Second30secyifThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secyif_threshold  (key)
                            
                            	Secyif Threshold Type
                            	**type**\:  :py:class:`SecyifThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyifThreshold>`
                            
                            .. attribute:: secyif_threshold_value
                            
                            	Secyif Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds.Second30secyifThreshold, self).__init__()

                                self.yang_name = "second30secyif-threshold"
                                self.yang_parent_name = "second30secyif-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyif_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyif_threshold', (YLeaf(YType.enumeration, 'secyif-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyifThreshold', '')])),
                                    ('secyif_threshold_value', (YLeaf(YType.uint32, 'secyif-threshold-value'), ['int'])),
                                ])
                                self.secyif_threshold = None
                                self.secyif_threshold_value = None
                                self._segment_path = lambda: "second30secyif-threshold" + "[secyif-threshold='" + str(self.secyif_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifThresholds.Second30secyifThreshold, ['secyif_threshold', 'secyif_threshold_value'], name, value)




                    class Second30secyifReports(Entity):
                        """
                        set secyif TCA reporting status
                        
                        .. attribute:: second30secyif_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30secyifReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports.Second30secyifReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports, self).__init__()

                            self.yang_name = "second30secyif-reports"
                            self.yang_parent_name = "second30secyif"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30secyif-report", ("second30secyif_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports.Second30secyifReport))])
                            self._leafs = OrderedDict()

                            self.second30secyif_report = YList(self)
                            self._segment_path = lambda: "second30secyif-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports, [], name, value)


                        class Second30secyifReport(Entity):
                            """
                            none
                            
                            .. attribute:: secyif_report  (key)
                            
                            	Secyif Report Type
                            	**type**\:  :py:class:`SecyifReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyifReport>`
                            
                            .. attribute:: enable
                            
                            	Enabled Secyif Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports.Second30secyifReport, self).__init__()

                                self.yang_name = "second30secyif-report"
                                self.yang_parent_name = "second30secyif-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyif_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyif_report', (YLeaf(YType.enumeration, 'secyif-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyifReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secyif_report = None
                                self.enable = None
                                self._segment_path = lambda: "second30secyif-report" + "[secyif-report='" + str(self.secyif_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyif.Second30secyifReports.Second30secyifReport, ['secyif_report', 'enable'], name, value)





                class Second30secyrx(Entity):
                    """
                    Configure secy\-rx performance monitoring
                    
                    .. attribute:: second30secyrx_thresholds
                    
                    	Configure threshold on secyrx parameters
                    	**type**\:  :py:class:`Second30secyrxThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds>`
                    
                    .. attribute:: second30secyrx_reports
                    
                    	set secyrx TCA reporting status
                    	**type**\:  :py:class:`Second30secyrxReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx, self).__init__()

                        self.yang_name = "second30secyrx"
                        self.yang_parent_name = "second30"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("second30secyrx-thresholds", ("second30secyrx_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds)), ("second30secyrx-reports", ("second30secyrx_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports))])
                        self._leafs = OrderedDict()

                        self.second30secyrx_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds()
                        self.second30secyrx_thresholds.parent = self
                        self._children_name_map["second30secyrx_thresholds"] = "second30secyrx-thresholds"

                        self.second30secyrx_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports()
                        self.second30secyrx_reports.parent = self
                        self._children_name_map["second30secyrx_reports"] = "second30secyrx-reports"
                        self._segment_path = lambda: "second30secyrx"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx, [], name, value)


                    class Second30secyrxThresholds(Entity):
                        """
                        Configure threshold on secyrx parameters
                        
                        .. attribute:: second30secyrx_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30secyrxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds.Second30secyrxThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds, self).__init__()

                            self.yang_name = "second30secyrx-thresholds"
                            self.yang_parent_name = "second30secyrx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30secyrx-threshold", ("second30secyrx_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds.Second30secyrxThreshold))])
                            self._leafs = OrderedDict()

                            self.second30secyrx_threshold = YList(self)
                            self._segment_path = lambda: "second30secyrx-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds, [], name, value)


                        class Second30secyrxThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secyrx_threshold  (key)
                            
                            	Secyrx Threshold Type
                            	**type**\:  :py:class:`SecyrxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyrxThreshold>`
                            
                            .. attribute:: secyrx_threshold_value
                            
                            	Secyrx Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds.Second30secyrxThreshold, self).__init__()

                                self.yang_name = "second30secyrx-threshold"
                                self.yang_parent_name = "second30secyrx-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyrx_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyrx_threshold', (YLeaf(YType.enumeration, 'secyrx-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyrxThreshold', '')])),
                                    ('secyrx_threshold_value', (YLeaf(YType.uint32, 'secyrx-threshold-value'), ['int'])),
                                ])
                                self.secyrx_threshold = None
                                self.secyrx_threshold_value = None
                                self._segment_path = lambda: "second30secyrx-threshold" + "[secyrx-threshold='" + str(self.secyrx_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxThresholds.Second30secyrxThreshold, ['secyrx_threshold', 'secyrx_threshold_value'], name, value)




                    class Second30secyrxReports(Entity):
                        """
                        set secyrx TCA reporting status
                        
                        .. attribute:: second30secyrx_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30secyrxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports.Second30secyrxReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports, self).__init__()

                            self.yang_name = "second30secyrx-reports"
                            self.yang_parent_name = "second30secyrx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30secyrx-report", ("second30secyrx_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports.Second30secyrxReport))])
                            self._leafs = OrderedDict()

                            self.second30secyrx_report = YList(self)
                            self._segment_path = lambda: "second30secyrx-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports, [], name, value)


                        class Second30secyrxReport(Entity):
                            """
                            none
                            
                            .. attribute:: secyrx_report  (key)
                            
                            	Secyrx Report Type
                            	**type**\:  :py:class:`SecyrxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyrxReport>`
                            
                            .. attribute:: enable
                            
                            	Enabled Secyrx Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports.Second30secyrxReport, self).__init__()

                                self.yang_name = "second30secyrx-report"
                                self.yang_parent_name = "second30secyrx-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyrx_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyrx_report', (YLeaf(YType.enumeration, 'secyrx-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyrxReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secyrx_report = None
                                self.enable = None
                                self._segment_path = lambda: "second30secyrx-report" + "[secyrx-report='" + str(self.secyrx_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secyrx.Second30secyrxReports.Second30secyrxReport, ['secyrx_report', 'enable'], name, value)





                class Second30otn(Entity):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: second30_otn_threshes
                    
                    	Configure threshold on otn parameters
                    	**type**\:  :py:class:`Second30OtnThreshes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes>`
                    
                    .. attribute:: second30otn_reports
                    
                    	set otn TCA reporting status
                    	**type**\:  :py:class:`Second30otnReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn, self).__init__()

                        self.yang_name = "second30otn"
                        self.yang_parent_name = "second30"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("second30-otn-threshes", ("second30_otn_threshes", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes)), ("second30otn-reports", ("second30otn_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports))])
                        self._leafs = OrderedDict()

                        self.second30_otn_threshes = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes()
                        self.second30_otn_threshes.parent = self
                        self._children_name_map["second30_otn_threshes"] = "second30-otn-threshes"

                        self.second30otn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports()
                        self.second30otn_reports.parent = self
                        self._children_name_map["second30otn_reports"] = "second30otn-reports"
                        self._segment_path = lambda: "second30otn"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn, [], name, value)


                    class Second30OtnThreshes(Entity):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: second30_otn_thresh
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30OtnThresh <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes.Second30OtnThresh>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes, self).__init__()

                            self.yang_name = "second30-otn-threshes"
                            self.yang_parent_name = "second30otn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30-otn-thresh", ("second30_otn_thresh", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes.Second30OtnThresh))])
                            self._leafs = OrderedDict()

                            self.second30_otn_thresh = YList(self)
                            self._segment_path = lambda: "second30-otn-threshes"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes, [], name, value)


                        class Second30OtnThresh(Entity):
                            """
                            none
                            
                            .. attribute:: otn_threshold  (key)
                            
                            	Otn Threshold Type
                            	**type**\:  :py:class:`OtnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnThreshold>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes.Second30OtnThresh, self).__init__()

                                self.yang_name = "second30-otn-thresh"
                                self.yang_parent_name = "second30-otn-threshes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_threshold', (YLeaf(YType.enumeration, 'otn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnThreshold', '')])),
                                    ('otn_threshold_value', (YLeaf(YType.uint32, 'otn-threshold-value'), ['int'])),
                                ])
                                self.otn_threshold = None
                                self.otn_threshold_value = None
                                self._segment_path = lambda: "second30-otn-thresh" + "[otn-threshold='" + str(self.otn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30OtnThreshes.Second30OtnThresh, ['otn_threshold', 'otn_threshold_value'], name, value)




                    class Second30otnReports(Entity):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: second30otn_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30otnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports.Second30otnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports, self).__init__()

                            self.yang_name = "second30otn-reports"
                            self.yang_parent_name = "second30otn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30otn-report", ("second30otn_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports.Second30otnReport))])
                            self._leafs = OrderedDict()

                            self.second30otn_report = YList(self)
                            self._segment_path = lambda: "second30otn-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports, [], name, value)


                        class Second30otnReport(Entity):
                            """
                            none
                            
                            .. attribute:: otn_report  (key)
                            
                            	Otn Report Type
                            	**type**\:  :py:class:`OtnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnReport>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports.Second30otnReport, self).__init__()

                                self.yang_name = "second30otn-report"
                                self.yang_parent_name = "second30otn-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_report', (YLeaf(YType.enumeration, 'otn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.otn_report = None
                                self.enable = None
                                self._segment_path = lambda: "second30otn-report" + "[otn-report='" + str(self.otn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30otn.Second30otnReports.Second30otnReport, ['otn_report', 'enable'], name, value)





                class Second30secytx(Entity):
                    """
                    Configure secy\-tx performance monitoring
                    
                    .. attribute:: second30secytx_thresholds
                    
                    	Configure threshold on secytx parameters
                    	**type**\:  :py:class:`Second30secytxThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds>`
                    
                    .. attribute:: second30secytx_reports
                    
                    	set secytx TCA reporting status
                    	**type**\:  :py:class:`Second30secytxReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx, self).__init__()

                        self.yang_name = "second30secytx"
                        self.yang_parent_name = "second30"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("second30secytx-thresholds", ("second30secytx_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds)), ("second30secytx-reports", ("second30secytx_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports))])
                        self._leafs = OrderedDict()

                        self.second30secytx_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds()
                        self.second30secytx_thresholds.parent = self
                        self._children_name_map["second30secytx_thresholds"] = "second30secytx-thresholds"

                        self.second30secytx_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports()
                        self.second30secytx_reports.parent = self
                        self._children_name_map["second30secytx_reports"] = "second30secytx-reports"
                        self._segment_path = lambda: "second30secytx"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx, [], name, value)


                    class Second30secytxThresholds(Entity):
                        """
                        Configure threshold on secytx parameters
                        
                        .. attribute:: second30secytx_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30secytxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds.Second30secytxThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds, self).__init__()

                            self.yang_name = "second30secytx-thresholds"
                            self.yang_parent_name = "second30secytx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30secytx-threshold", ("second30secytx_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds.Second30secytxThreshold))])
                            self._leafs = OrderedDict()

                            self.second30secytx_threshold = YList(self)
                            self._segment_path = lambda: "second30secytx-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds, [], name, value)


                        class Second30secytxThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secytx_threshold  (key)
                            
                            	Secytx Threshold Type
                            	**type**\:  :py:class:`SecytxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecytxThreshold>`
                            
                            .. attribute:: secytx_threshold_value
                            
                            	Secytx Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds.Second30secytxThreshold, self).__init__()

                                self.yang_name = "second30secytx-threshold"
                                self.yang_parent_name = "second30secytx-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secytx_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secytx_threshold', (YLeaf(YType.enumeration, 'secytx-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecytxThreshold', '')])),
                                    ('secytx_threshold_value', (YLeaf(YType.uint32, 'secytx-threshold-value'), ['int'])),
                                ])
                                self.secytx_threshold = None
                                self.secytx_threshold_value = None
                                self._segment_path = lambda: "second30secytx-threshold" + "[secytx-threshold='" + str(self.secytx_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxThresholds.Second30secytxThreshold, ['secytx_threshold', 'secytx_threshold_value'], name, value)




                    class Second30secytxReports(Entity):
                        """
                        set secytx TCA reporting status
                        
                        .. attribute:: second30secytx_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30secytxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports.Second30secytxReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports, self).__init__()

                            self.yang_name = "second30secytx-reports"
                            self.yang_parent_name = "second30secytx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30secytx-report", ("second30secytx_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports.Second30secytxReport))])
                            self._leafs = OrderedDict()

                            self.second30secytx_report = YList(self)
                            self._segment_path = lambda: "second30secytx-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports, [], name, value)


                        class Second30secytxReport(Entity):
                            """
                            none
                            
                            .. attribute:: secytx_report  (key)
                            
                            	Secytx Report Type
                            	**type**\:  :py:class:`SecytxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecytxReport>`
                            
                            .. attribute:: enable
                            
                            	Enabled Secytx Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports.Second30secytxReport, self).__init__()

                                self.yang_name = "second30secytx-report"
                                self.yang_parent_name = "second30secytx-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secytx_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secytx_report', (YLeaf(YType.enumeration, 'secytx-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecytxReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secytx_report = None
                                self.enable = None
                                self._segment_path = lambda: "second30secytx-report" + "[secytx-report='" + str(self.secytx_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Second30.Second30secytx.Second30secytxReports.Second30secytxReport, ['secytx_report', 'enable'], name, value)






            class Hour24otnTcms(Entity):
                """
                Configure pm parameters of tcm's 24 hour
                interval
                
                .. attribute:: hour24otn_tcm
                
                	configure otn g709 tcm's performance monitoring
                	**type**\: list of  		 :py:class:`Hour24otnTcm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms, self).__init__()

                    self.yang_name = "hour24otn-tcms"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("hour24otn-tcm", ("hour24otn_tcm", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm))])
                    self._leafs = OrderedDict()

                    self.hour24otn_tcm = YList(self)
                    self._segment_path = lambda: "hour24otn-tcms"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms, [], name, value)


                class Hour24otnTcm(Entity):
                    """
                    configure otn g709 tcm's performance
                    monitoring
                    
                    .. attribute:: tcm_number  (key)
                    
                    	TCM number
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hour24otn_tcm_thresholds
                    
                    	Configure threshold on otn parameters
                    	**type**\:  :py:class:`Hour24otnTcmThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds>`
                    
                    .. attribute:: hour24otn_tcm_reports
                    
                    	set otn TCA reporting status
                    	**type**\:  :py:class:`Hour24otnTcmReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm, self).__init__()

                        self.yang_name = "hour24otn-tcm"
                        self.yang_parent_name = "hour24otn-tcms"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['tcm_number']
                        self._child_classes = OrderedDict([("hour24otn-tcm-thresholds", ("hour24otn_tcm_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds)), ("hour24otn-tcm-reports", ("hour24otn_tcm_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports))])
                        self._leafs = OrderedDict([
                            ('tcm_number', (YLeaf(YType.uint32, 'tcm-number'), ['int'])),
                        ])
                        self.tcm_number = None

                        self.hour24otn_tcm_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds()
                        self.hour24otn_tcm_thresholds.parent = self
                        self._children_name_map["hour24otn_tcm_thresholds"] = "hour24otn-tcm-thresholds"

                        self.hour24otn_tcm_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports()
                        self.hour24otn_tcm_reports.parent = self
                        self._children_name_map["hour24otn_tcm_reports"] = "hour24otn-tcm-reports"
                        self._segment_path = lambda: "hour24otn-tcm" + "[tcm-number='" + str(self.tcm_number) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm, ['tcm_number'], name, value)


                    class Hour24otnTcmThresholds(Entity):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: hour24otn_tcm_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24otnTcmThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds.Hour24otnTcmThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds, self).__init__()

                            self.yang_name = "hour24otn-tcm-thresholds"
                            self.yang_parent_name = "hour24otn-tcm"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24otn-tcm-threshold", ("hour24otn_tcm_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds.Hour24otnTcmThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24otn_tcm_threshold = YList(self)
                            self._segment_path = lambda: "hour24otn-tcm-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds, [], name, value)


                        class Hour24otnTcmThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: otn_threshold  (key)
                            
                            	Otn Threshold Type
                            	**type**\:  :py:class:`OtnTcmThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnTcmThreshold>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds.Hour24otnTcmThreshold, self).__init__()

                                self.yang_name = "hour24otn-tcm-threshold"
                                self.yang_parent_name = "hour24otn-tcm-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_threshold', (YLeaf(YType.enumeration, 'otn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnTcmThreshold', '')])),
                                    ('otn_threshold_value', (YLeaf(YType.uint32, 'otn-threshold-value'), ['int'])),
                                ])
                                self.otn_threshold = None
                                self.otn_threshold_value = None
                                self._segment_path = lambda: "hour24otn-tcm-threshold" + "[otn-threshold='" + str(self.otn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmThresholds.Hour24otnTcmThreshold, ['otn_threshold', 'otn_threshold_value'], name, value)




                    class Hour24otnTcmReports(Entity):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: hour24otn_tcm_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24otnTcmReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports.Hour24otnTcmReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports, self).__init__()

                            self.yang_name = "hour24otn-tcm-reports"
                            self.yang_parent_name = "hour24otn-tcm"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24otn-tcm-report", ("hour24otn_tcm_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports.Hour24otnTcmReport))])
                            self._leafs = OrderedDict()

                            self.hour24otn_tcm_report = YList(self)
                            self._segment_path = lambda: "hour24otn-tcm-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports, [], name, value)


                        class Hour24otnTcmReport(Entity):
                            """
                            none
                            
                            .. attribute:: otn_report  (key)
                            
                            	Otn Report Type
                            	**type**\:  :py:class:`OtnTcmReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnTcmReport>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports.Hour24otnTcmReport, self).__init__()

                                self.yang_name = "hour24otn-tcm-report"
                                self.yang_parent_name = "hour24otn-tcm-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_report', (YLeaf(YType.enumeration, 'otn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnTcmReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.otn_report = None
                                self.enable = None
                                self._segment_path = lambda: "hour24otn-tcm-report" + "[otn-report='" + str(self.otn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24otnTcms.Hour24otnTcm.Hour24otnTcmReports.Hour24otnTcmReport, ['otn_report', 'enable'], name, value)






            class StsMinute15(Entity):
                """
                set STS threshold
                
                .. attribute:: sts_minute15_path
                
                	Configure Path performance monitoring
                	**type**\:  :py:class:`StsMinute15Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15, self).__init__()

                    self.yang_name = "sts-minute15"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("sts-minute15-path", ("sts_minute15_path", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path))])
                    self._leafs = OrderedDict()

                    self.sts_minute15_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path()
                    self.sts_minute15_path.parent = self
                    self._children_name_map["sts_minute15_path"] = "sts-minute15-path"
                    self._segment_path = lambda: "sts-minute15"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15, [], name, value)


                class StsMinute15Path(Entity):
                    """
                    Configure Path performance monitoring
                    
                    .. attribute:: sts_minute15_path_reports
                    
                    	set Path TCA reporting status
                    	**type**\:  :py:class:`StsMinute15PathReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports>`
                    
                    .. attribute:: sts_minute15_path_thresholds
                    
                    	Configure threshold on Path parameters
                    	**type**\:  :py:class:`StsMinute15PathThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path, self).__init__()

                        self.yang_name = "sts-minute15-path"
                        self.yang_parent_name = "sts-minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sts-minute15-path-reports", ("sts_minute15_path_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports)), ("sts-minute15-path-thresholds", ("sts_minute15_path_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds))])
                        self._leafs = OrderedDict()

                        self.sts_minute15_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports()
                        self.sts_minute15_path_reports.parent = self
                        self._children_name_map["sts_minute15_path_reports"] = "sts-minute15-path-reports"

                        self.sts_minute15_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds()
                        self.sts_minute15_path_thresholds.parent = self
                        self._children_name_map["sts_minute15_path_thresholds"] = "sts-minute15-path-thresholds"
                        self._segment_path = lambda: "sts-minute15-path"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path, [], name, value)


                    class StsMinute15PathReports(Entity):
                        """
                        set Path TCA reporting status
                        
                        .. attribute:: sts_minute15_path_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`StsMinute15PathReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports.StsMinute15PathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports, self).__init__()

                            self.yang_name = "sts-minute15-path-reports"
                            self.yang_parent_name = "sts-minute15-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sts-minute15-path-report", ("sts_minute15_path_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports.StsMinute15PathReport))])
                            self._leafs = OrderedDict()

                            self.sts_minute15_path_report = YList(self)
                            self._segment_path = lambda: "sts-minute15-path-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports, [], name, value)


                        class StsMinute15PathReport(Entity):
                            """
                            none
                            
                            .. attribute:: path_report  (key)
                            
                            	Path Report Type
                            	**type**\:  :py:class:`StsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.StsReport>`
                            
                            .. attribute:: enable
                            
                            	Path Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports.StsMinute15PathReport, self).__init__()

                                self.yang_name = "sts-minute15-path-report"
                                self.yang_parent_name = "sts-minute15-path-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['path_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path_report', (YLeaf(YType.enumeration, 'path-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'StsReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.path_report = None
                                self.enable = None
                                self._segment_path = lambda: "sts-minute15-path-report" + "[path-report='" + str(self.path_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathReports.StsMinute15PathReport, ['path_report', 'enable'], name, value)




                    class StsMinute15PathThresholds(Entity):
                        """
                        Configure threshold on Path parameters
                        
                        .. attribute:: sts_minute15_path_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`StsMinute15PathThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds.StsMinute15PathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds, self).__init__()

                            self.yang_name = "sts-minute15-path-thresholds"
                            self.yang_parent_name = "sts-minute15-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sts-minute15-path-threshold", ("sts_minute15_path_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds.StsMinute15PathThreshold))])
                            self._leafs = OrderedDict()

                            self.sts_minute15_path_threshold = YList(self)
                            self._segment_path = lambda: "sts-minute15-path-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds, [], name, value)


                        class StsMinute15PathThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: path_threshold  (key)
                            
                            	Path Threshold Type
                            	**type**\:  :py:class:`StsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.StsThreshold>`
                            
                            .. attribute:: path_threshold_value
                            
                            	Path Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds.StsMinute15PathThreshold, self).__init__()

                                self.yang_name = "sts-minute15-path-threshold"
                                self.yang_parent_name = "sts-minute15-path-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['path_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path_threshold', (YLeaf(YType.enumeration, 'path-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'StsThreshold', '')])),
                                    ('path_threshold_value', (YLeaf(YType.uint32, 'path-threshold-value'), ['int'])),
                                ])
                                self.path_threshold = None
                                self.path_threshold_value = None
                                self._segment_path = lambda: "sts-minute15-path-threshold" + "[path-threshold='" + str(self.path_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsMinute15.StsMinute15Path.StsMinute15PathThresholds.StsMinute15PathThreshold, ['path_threshold', 'path_threshold_value'], name, value)






            class Hour24(Entity):
                """
                Configure pm parameters of 24 hour interval
                
                .. attribute:: hour24otn
                
                	configure otn g709 performance monitoring
                	**type**\:  :py:class:`Hour24otn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn>`
                
                .. attribute:: hour24_optics
                
                	Configure optics performance monitoring
                	**type**\:  :py:class:`Hour24Optics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics>`
                
                .. attribute:: hour24pcs
                
                	Configure pcs performance monitoring
                	**type**\:  :py:class:`Hour24pcs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs>`
                
                .. attribute:: hour24fec
                
                	Configure fec g709 performance monitoring
                	**type**\:  :py:class:`Hour24fec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec>`
                
                .. attribute:: hour24secyif
                
                	Configure secy\-if performance monitoring
                	**type**\:  :py:class:`Hour24secyif <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif>`
                
                .. attribute:: hour24secyrx
                
                	Configure secy\-rx performance monitoring
                	**type**\:  :py:class:`Hour24secyrx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx>`
                
                .. attribute:: hour24secytx
                
                	Configure secy\-tx performance monitoring
                	**type**\:  :py:class:`Hour24secytx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24, self).__init__()

                    self.yang_name = "hour24"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("hour24otn", ("hour24otn", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn)), ("hour24-optics", ("hour24_optics", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics)), ("hour24pcs", ("hour24pcs", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs)), ("hour24fec", ("hour24fec", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec)), ("hour24secyif", ("hour24secyif", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif)), ("hour24secyrx", ("hour24secyrx", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx)), ("hour24secytx", ("hour24secytx", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx))])
                    self._leafs = OrderedDict()

                    self.hour24otn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn()
                    self.hour24otn.parent = self
                    self._children_name_map["hour24otn"] = "hour24otn"

                    self.hour24_optics = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics()
                    self.hour24_optics.parent = self
                    self._children_name_map["hour24_optics"] = "hour24-optics"

                    self.hour24pcs = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs()
                    self.hour24pcs.parent = self
                    self._children_name_map["hour24pcs"] = "hour24pcs"

                    self.hour24fec = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec()
                    self.hour24fec.parent = self
                    self._children_name_map["hour24fec"] = "hour24fec"

                    self.hour24secyif = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif()
                    self.hour24secyif.parent = self
                    self._children_name_map["hour24secyif"] = "hour24secyif"

                    self.hour24secyrx = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx()
                    self.hour24secyrx.parent = self
                    self._children_name_map["hour24secyrx"] = "hour24secyrx"

                    self.hour24secytx = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx()
                    self.hour24secytx.parent = self
                    self._children_name_map["hour24secytx"] = "hour24secytx"
                    self._segment_path = lambda: "hour24"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24, [], name, value)


                class Hour24otn(Entity):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: hour24otn_thresholds
                    
                    	Configure threshold on otn parameters
                    	**type**\:  :py:class:`Hour24otnThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds>`
                    
                    .. attribute:: hour24otn_reports
                    
                    	set otn TCA reporting status
                    	**type**\:  :py:class:`Hour24otnReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn, self).__init__()

                        self.yang_name = "hour24otn"
                        self.yang_parent_name = "hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24otn-thresholds", ("hour24otn_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds)), ("hour24otn-reports", ("hour24otn_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports))])
                        self._leafs = OrderedDict()

                        self.hour24otn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds()
                        self.hour24otn_thresholds.parent = self
                        self._children_name_map["hour24otn_thresholds"] = "hour24otn-thresholds"

                        self.hour24otn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports()
                        self.hour24otn_reports.parent = self
                        self._children_name_map["hour24otn_reports"] = "hour24otn-reports"
                        self._segment_path = lambda: "hour24otn"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn, [], name, value)


                    class Hour24otnThresholds(Entity):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: hour24otn_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24otnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds.Hour24otnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds, self).__init__()

                            self.yang_name = "hour24otn-thresholds"
                            self.yang_parent_name = "hour24otn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24otn-threshold", ("hour24otn_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds.Hour24otnThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24otn_threshold = YList(self)
                            self._segment_path = lambda: "hour24otn-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds, [], name, value)


                        class Hour24otnThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: otn_threshold  (key)
                            
                            	Otn Threshold Type
                            	**type**\:  :py:class:`OtnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnThreshold>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds.Hour24otnThreshold, self).__init__()

                                self.yang_name = "hour24otn-threshold"
                                self.yang_parent_name = "hour24otn-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_threshold', (YLeaf(YType.enumeration, 'otn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnThreshold', '')])),
                                    ('otn_threshold_value', (YLeaf(YType.uint32, 'otn-threshold-value'), ['int'])),
                                ])
                                self.otn_threshold = None
                                self.otn_threshold_value = None
                                self._segment_path = lambda: "hour24otn-threshold" + "[otn-threshold='" + str(self.otn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnThresholds.Hour24otnThreshold, ['otn_threshold', 'otn_threshold_value'], name, value)




                    class Hour24otnReports(Entity):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: hour24otn_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24otnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports.Hour24otnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports, self).__init__()

                            self.yang_name = "hour24otn-reports"
                            self.yang_parent_name = "hour24otn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24otn-report", ("hour24otn_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports.Hour24otnReport))])
                            self._leafs = OrderedDict()

                            self.hour24otn_report = YList(self)
                            self._segment_path = lambda: "hour24otn-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports, [], name, value)


                        class Hour24otnReport(Entity):
                            """
                            none
                            
                            .. attribute:: otn_report  (key)
                            
                            	Otn Report Type
                            	**type**\:  :py:class:`OtnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnReport>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports.Hour24otnReport, self).__init__()

                                self.yang_name = "hour24otn-report"
                                self.yang_parent_name = "hour24otn-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_report', (YLeaf(YType.enumeration, 'otn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.otn_report = None
                                self.enable = None
                                self._segment_path = lambda: "hour24otn-report" + "[otn-report='" + str(self.otn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24otn.Hour24otnReports.Hour24otnReport, ['otn_report', 'enable'], name, value)





                class Hour24Optics(Entity):
                    """
                    Configure optics performance monitoring
                    
                    .. attribute:: hour24_optics_thresholds
                    
                    	Configure threshold on optics parameters
                    	**type**\:  :py:class:`Hour24OpticsThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds>`
                    
                    .. attribute:: hour24_optics_reports
                    
                    	set optics TCA reporting status
                    	**type**\:  :py:class:`Hour24OpticsReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics, self).__init__()

                        self.yang_name = "hour24-optics"
                        self.yang_parent_name = "hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24-optics-thresholds", ("hour24_optics_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds)), ("hour24-optics-reports", ("hour24_optics_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports))])
                        self._leafs = OrderedDict()

                        self.hour24_optics_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds()
                        self.hour24_optics_thresholds.parent = self
                        self._children_name_map["hour24_optics_thresholds"] = "hour24-optics-thresholds"

                        self.hour24_optics_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports()
                        self.hour24_optics_reports.parent = self
                        self._children_name_map["hour24_optics_reports"] = "hour24-optics-reports"
                        self._segment_path = lambda: "hour24-optics"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics, [], name, value)


                    class Hour24OpticsThresholds(Entity):
                        """
                        Configure threshold on optics parameters
                        
                        .. attribute:: hour24_optics_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24OpticsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds.Hour24OpticsThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds, self).__init__()

                            self.yang_name = "hour24-optics-thresholds"
                            self.yang_parent_name = "hour24-optics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24-optics-threshold", ("hour24_optics_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds.Hour24OpticsThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24_optics_threshold = YList(self)
                            self._segment_path = lambda: "hour24-optics-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds, [], name, value)


                        class Hour24OpticsThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: optics_threshold  (key)
                            
                            	Optics Threshold Type
                            	**type**\:  :py:class:`OpticsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OpticsThreshold>`
                            
                            .. attribute:: optics_threshold_value
                            
                            	Optics Thresh Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: dbm
                            
                            	Used only for Opt and Opr,To Enter Threshold in dbm use 1
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**default value**\: 0
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds.Hour24OpticsThreshold, self).__init__()

                                self.yang_name = "hour24-optics-threshold"
                                self.yang_parent_name = "hour24-optics-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['optics_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('optics_threshold', (YLeaf(YType.enumeration, 'optics-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OpticsThreshold', '')])),
                                    ('optics_threshold_value', (YLeaf(YType.int32, 'optics-threshold-value'), ['int'])),
                                    ('dbm', (YLeaf(YType.uint32, 'dbm'), ['int'])),
                                ])
                                self.optics_threshold = None
                                self.optics_threshold_value = None
                                self.dbm = None
                                self._segment_path = lambda: "hour24-optics-threshold" + "[optics-threshold='" + str(self.optics_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsThresholds.Hour24OpticsThreshold, ['optics_threshold', 'optics_threshold_value', 'dbm'], name, value)




                    class Hour24OpticsReports(Entity):
                        """
                        set optics TCA reporting status
                        
                        .. attribute:: hour24_optics_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24OpticsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports.Hour24OpticsReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports, self).__init__()

                            self.yang_name = "hour24-optics-reports"
                            self.yang_parent_name = "hour24-optics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24-optics-report", ("hour24_optics_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports.Hour24OpticsReport))])
                            self._leafs = OrderedDict()

                            self.hour24_optics_report = YList(self)
                            self._segment_path = lambda: "hour24-optics-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports, [], name, value)


                        class Hour24OpticsReport(Entity):
                            """
                            none
                            
                            .. attribute:: optics_report  (key)
                            
                            	Optics Report Type
                            	**type**\:  :py:class:`OpticsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OpticsReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports.Hour24OpticsReport, self).__init__()

                                self.yang_name = "hour24-optics-report"
                                self.yang_parent_name = "hour24-optics-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['optics_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('optics_report', (YLeaf(YType.enumeration, 'optics-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OpticsReport', '')])),
                                ])
                                self.optics_report = None
                                self._segment_path = lambda: "hour24-optics-report" + "[optics-report='" + str(self.optics_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24Optics.Hour24OpticsReports.Hour24OpticsReport, ['optics_report'], name, value)





                class Hour24pcs(Entity):
                    """
                    Configure pcs performance monitoring
                    
                    .. attribute:: hour24pcs_thresholds
                    
                    	Configure pcs threshold
                    	**type**\:  :py:class:`Hour24pcsThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds>`
                    
                    .. attribute:: hour24pcs_reports
                    
                    	set pcs TCA reporting status
                    	**type**\:  :py:class:`Hour24pcsReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs, self).__init__()

                        self.yang_name = "hour24pcs"
                        self.yang_parent_name = "hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24pcs-thresholds", ("hour24pcs_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds)), ("hour24pcs-reports", ("hour24pcs_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports))])
                        self._leafs = OrderedDict()

                        self.hour24pcs_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds()
                        self.hour24pcs_thresholds.parent = self
                        self._children_name_map["hour24pcs_thresholds"] = "hour24pcs-thresholds"

                        self.hour24pcs_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports()
                        self.hour24pcs_reports.parent = self
                        self._children_name_map["hour24pcs_reports"] = "hour24pcs-reports"
                        self._segment_path = lambda: "hour24pcs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs, [], name, value)


                    class Hour24pcsThresholds(Entity):
                        """
                        Configure pcs threshold
                        
                        .. attribute:: hour24pcs_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24pcsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds.Hour24pcsThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds, self).__init__()

                            self.yang_name = "hour24pcs-thresholds"
                            self.yang_parent_name = "hour24pcs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24pcs-threshold", ("hour24pcs_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds.Hour24pcsThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24pcs_threshold = YList(self)
                            self._segment_path = lambda: "hour24pcs-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds, [], name, value)


                        class Hour24pcsThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: pcs_threshold  (key)
                            
                            	Pcs Threshold Type
                            	**type**\:  :py:class:`PcsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PcsThreshold>`
                            
                            .. attribute:: pcs_threshold_value
                            
                            	Pcs Threshold Value
                            	**type**\: str
                            
                            	**length:** 1..20
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds.Hour24pcsThreshold, self).__init__()

                                self.yang_name = "hour24pcs-threshold"
                                self.yang_parent_name = "hour24pcs-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['pcs_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pcs_threshold', (YLeaf(YType.enumeration, 'pcs-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PcsThreshold', '')])),
                                    ('pcs_threshold_value', (YLeaf(YType.str, 'pcs-threshold-value'), ['str'])),
                                ])
                                self.pcs_threshold = None
                                self.pcs_threshold_value = None
                                self._segment_path = lambda: "hour24pcs-threshold" + "[pcs-threshold='" + str(self.pcs_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsThresholds.Hour24pcsThreshold, ['pcs_threshold', 'pcs_threshold_value'], name, value)




                    class Hour24pcsReports(Entity):
                        """
                        set pcs TCA reporting status
                        
                        .. attribute:: hour24pcs_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24pcsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports.Hour24pcsReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports, self).__init__()

                            self.yang_name = "hour24pcs-reports"
                            self.yang_parent_name = "hour24pcs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24pcs-report", ("hour24pcs_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports.Hour24pcsReport))])
                            self._leafs = OrderedDict()

                            self.hour24pcs_report = YList(self)
                            self._segment_path = lambda: "hour24pcs-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports, [], name, value)


                        class Hour24pcsReport(Entity):
                            """
                            none
                            
                            .. attribute:: pcs_report  (key)
                            
                            	Pcs Report Type
                            	**type**\:  :py:class:`PcsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PcsReport>`
                            
                            .. attribute:: enable
                            
                            	PCS Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports.Hour24pcsReport, self).__init__()

                                self.yang_name = "hour24pcs-report"
                                self.yang_parent_name = "hour24pcs-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['pcs_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pcs_report', (YLeaf(YType.enumeration, 'pcs-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PcsReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.pcs_report = None
                                self.enable = None
                                self._segment_path = lambda: "hour24pcs-report" + "[pcs-report='" + str(self.pcs_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24pcs.Hour24pcsReports.Hour24pcsReport, ['pcs_report', 'enable'], name, value)





                class Hour24fec(Entity):
                    """
                    Configure fec g709 performance monitoring
                    
                    .. attribute:: hour24fec_thresholds
                    
                    	Configure fec threshold
                    	**type**\:  :py:class:`Hour24fecThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds>`
                    
                    .. attribute:: hour24fec_reports
                    
                    	set fec TCA reporting status
                    	**type**\:  :py:class:`Hour24fecReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec, self).__init__()

                        self.yang_name = "hour24fec"
                        self.yang_parent_name = "hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24fec-thresholds", ("hour24fec_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds)), ("hour24fec-reports", ("hour24fec_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports))])
                        self._leafs = OrderedDict()

                        self.hour24fec_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds()
                        self.hour24fec_thresholds.parent = self
                        self._children_name_map["hour24fec_thresholds"] = "hour24fec-thresholds"

                        self.hour24fec_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports()
                        self.hour24fec_reports.parent = self
                        self._children_name_map["hour24fec_reports"] = "hour24fec-reports"
                        self._segment_path = lambda: "hour24fec"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec, [], name, value)


                    class Hour24fecThresholds(Entity):
                        """
                        Configure fec threshold
                        
                        .. attribute:: hour24fec_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24fecThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds.Hour24fecThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds, self).__init__()

                            self.yang_name = "hour24fec-thresholds"
                            self.yang_parent_name = "hour24fec"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24fec-threshold", ("hour24fec_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds.Hour24fecThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24fec_threshold = YList(self)
                            self._segment_path = lambda: "hour24fec-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds, [], name, value)


                        class Hour24fecThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: fec_threshold  (key)
                            
                            	Fec Threshold Type
                            	**type**\:  :py:class:`FecThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.FecThreshold>`
                            
                            .. attribute:: fec_threshold_value
                            
                            	Fec threshold value
                            	**type**\: str
                            
                            	**length:** 1..20
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds.Hour24fecThreshold, self).__init__()

                                self.yang_name = "hour24fec-threshold"
                                self.yang_parent_name = "hour24fec-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['fec_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fec_threshold', (YLeaf(YType.enumeration, 'fec-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'FecThreshold', '')])),
                                    ('fec_threshold_value', (YLeaf(YType.str, 'fec-threshold-value'), ['str'])),
                                ])
                                self.fec_threshold = None
                                self.fec_threshold_value = None
                                self._segment_path = lambda: "hour24fec-threshold" + "[fec-threshold='" + str(self.fec_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecThresholds.Hour24fecThreshold, ['fec_threshold', 'fec_threshold_value'], name, value)




                    class Hour24fecReports(Entity):
                        """
                        set fec TCA reporting status
                        
                        .. attribute:: hour24fec_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24fecReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports.Hour24fecReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports, self).__init__()

                            self.yang_name = "hour24fec-reports"
                            self.yang_parent_name = "hour24fec"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24fec-report", ("hour24fec_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports.Hour24fecReport))])
                            self._leafs = OrderedDict()

                            self.hour24fec_report = YList(self)
                            self._segment_path = lambda: "hour24fec-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports, [], name, value)


                        class Hour24fecReport(Entity):
                            """
                            none
                            
                            .. attribute:: fec_report  (key)
                            
                            	Fec Report type
                            	**type**\:  :py:class:`FecReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.FecReport>`
                            
                            .. attribute:: enable
                            
                            	Fec Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports.Hour24fecReport, self).__init__()

                                self.yang_name = "hour24fec-report"
                                self.yang_parent_name = "hour24fec-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['fec_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fec_report', (YLeaf(YType.enumeration, 'fec-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'FecReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.fec_report = None
                                self.enable = None
                                self._segment_path = lambda: "hour24fec-report" + "[fec-report='" + str(self.fec_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24fec.Hour24fecReports.Hour24fecReport, ['fec_report', 'enable'], name, value)





                class Hour24secyif(Entity):
                    """
                    Configure secy\-if performance monitoring
                    
                    .. attribute:: hour24secyif_reports
                    
                    	set secyif TCA reporting status
                    	**type**\:  :py:class:`Hour24secyifReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports>`
                    
                    .. attribute:: hour24secyif_thresholds
                    
                    	Configure secyif threshold
                    	**type**\:  :py:class:`Hour24secyifThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif, self).__init__()

                        self.yang_name = "hour24secyif"
                        self.yang_parent_name = "hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24secyif-reports", ("hour24secyif_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports)), ("hour24secyif-thresholds", ("hour24secyif_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds))])
                        self._leafs = OrderedDict()

                        self.hour24secyif_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports()
                        self.hour24secyif_reports.parent = self
                        self._children_name_map["hour24secyif_reports"] = "hour24secyif-reports"

                        self.hour24secyif_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds()
                        self.hour24secyif_thresholds.parent = self
                        self._children_name_map["hour24secyif_thresholds"] = "hour24secyif-thresholds"
                        self._segment_path = lambda: "hour24secyif"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif, [], name, value)


                    class Hour24secyifReports(Entity):
                        """
                        set secyif TCA reporting status
                        
                        .. attribute:: hour24secyif_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24secyifReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports.Hour24secyifReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports, self).__init__()

                            self.yang_name = "hour24secyif-reports"
                            self.yang_parent_name = "hour24secyif"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24secyif-report", ("hour24secyif_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports.Hour24secyifReport))])
                            self._leafs = OrderedDict()

                            self.hour24secyif_report = YList(self)
                            self._segment_path = lambda: "hour24secyif-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports, [], name, value)


                        class Hour24secyifReport(Entity):
                            """
                            none
                            
                            .. attribute:: secyif_report  (key)
                            
                            	Secyif Report type
                            	**type**\:  :py:class:`SecyifReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyifReport>`
                            
                            .. attribute:: enable
                            
                            	Secyif Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports.Hour24secyifReport, self).__init__()

                                self.yang_name = "hour24secyif-report"
                                self.yang_parent_name = "hour24secyif-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyif_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyif_report', (YLeaf(YType.enumeration, 'secyif-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyifReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secyif_report = None
                                self.enable = None
                                self._segment_path = lambda: "hour24secyif-report" + "[secyif-report='" + str(self.secyif_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifReports.Hour24secyifReport, ['secyif_report', 'enable'], name, value)




                    class Hour24secyifThresholds(Entity):
                        """
                        Configure secyif threshold
                        
                        .. attribute:: hour24secyif_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24secyifThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds.Hour24secyifThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds, self).__init__()

                            self.yang_name = "hour24secyif-thresholds"
                            self.yang_parent_name = "hour24secyif"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24secyif-threshold", ("hour24secyif_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds.Hour24secyifThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24secyif_threshold = YList(self)
                            self._segment_path = lambda: "hour24secyif-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds, [], name, value)


                        class Hour24secyifThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secyif_threshold  (key)
                            
                            	Secyif Threshold Type
                            	**type**\:  :py:class:`SecyifThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyifThreshold>`
                            
                            .. attribute:: secyif_threshold_value
                            
                            	Secyif threshold value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds.Hour24secyifThreshold, self).__init__()

                                self.yang_name = "hour24secyif-threshold"
                                self.yang_parent_name = "hour24secyif-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyif_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyif_threshold', (YLeaf(YType.enumeration, 'secyif-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyifThreshold', '')])),
                                    ('secyif_threshold_value', (YLeaf(YType.uint32, 'secyif-threshold-value'), ['int'])),
                                ])
                                self.secyif_threshold = None
                                self.secyif_threshold_value = None
                                self._segment_path = lambda: "hour24secyif-threshold" + "[secyif-threshold='" + str(self.secyif_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyif.Hour24secyifThresholds.Hour24secyifThreshold, ['secyif_threshold', 'secyif_threshold_value'], name, value)





                class Hour24secyrx(Entity):
                    """
                    Configure secy\-rx performance monitoring
                    
                    .. attribute:: hour24secyrx_reports
                    
                    	set secyrx TCA reporting status
                    	**type**\:  :py:class:`Hour24secyrxReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports>`
                    
                    .. attribute:: hour24secyrx_thresholds
                    
                    	Configure secyrx threshold
                    	**type**\:  :py:class:`Hour24secyrxThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx, self).__init__()

                        self.yang_name = "hour24secyrx"
                        self.yang_parent_name = "hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24secyrx-reports", ("hour24secyrx_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports)), ("hour24secyrx-thresholds", ("hour24secyrx_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds))])
                        self._leafs = OrderedDict()

                        self.hour24secyrx_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports()
                        self.hour24secyrx_reports.parent = self
                        self._children_name_map["hour24secyrx_reports"] = "hour24secyrx-reports"

                        self.hour24secyrx_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds()
                        self.hour24secyrx_thresholds.parent = self
                        self._children_name_map["hour24secyrx_thresholds"] = "hour24secyrx-thresholds"
                        self._segment_path = lambda: "hour24secyrx"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx, [], name, value)


                    class Hour24secyrxReports(Entity):
                        """
                        set secyrx TCA reporting status
                        
                        .. attribute:: hour24secyrx_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24secyrxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports.Hour24secyrxReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports, self).__init__()

                            self.yang_name = "hour24secyrx-reports"
                            self.yang_parent_name = "hour24secyrx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24secyrx-report", ("hour24secyrx_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports.Hour24secyrxReport))])
                            self._leafs = OrderedDict()

                            self.hour24secyrx_report = YList(self)
                            self._segment_path = lambda: "hour24secyrx-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports, [], name, value)


                        class Hour24secyrxReport(Entity):
                            """
                            none
                            
                            .. attribute:: secyrx_report  (key)
                            
                            	Secyrx Report type
                            	**type**\:  :py:class:`SecyrxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyrxReport>`
                            
                            .. attribute:: enable
                            
                            	Secyrx Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports.Hour24secyrxReport, self).__init__()

                                self.yang_name = "hour24secyrx-report"
                                self.yang_parent_name = "hour24secyrx-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyrx_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyrx_report', (YLeaf(YType.enumeration, 'secyrx-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyrxReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secyrx_report = None
                                self.enable = None
                                self._segment_path = lambda: "hour24secyrx-report" + "[secyrx-report='" + str(self.secyrx_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxReports.Hour24secyrxReport, ['secyrx_report', 'enable'], name, value)




                    class Hour24secyrxThresholds(Entity):
                        """
                        Configure secyrx threshold
                        
                        .. attribute:: hour24secyrx_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24secyrxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds.Hour24secyrxThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds, self).__init__()

                            self.yang_name = "hour24secyrx-thresholds"
                            self.yang_parent_name = "hour24secyrx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24secyrx-threshold", ("hour24secyrx_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds.Hour24secyrxThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24secyrx_threshold = YList(self)
                            self._segment_path = lambda: "hour24secyrx-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds, [], name, value)


                        class Hour24secyrxThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secyrx_threshold  (key)
                            
                            	Secyrx Threshold Type
                            	**type**\:  :py:class:`SecyrxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyrxThreshold>`
                            
                            .. attribute:: secyrx_threshold_value
                            
                            	Secyrx threshold value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds.Hour24secyrxThreshold, self).__init__()

                                self.yang_name = "hour24secyrx-threshold"
                                self.yang_parent_name = "hour24secyrx-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyrx_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyrx_threshold', (YLeaf(YType.enumeration, 'secyrx-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyrxThreshold', '')])),
                                    ('secyrx_threshold_value', (YLeaf(YType.uint32, 'secyrx-threshold-value'), ['int'])),
                                ])
                                self.secyrx_threshold = None
                                self.secyrx_threshold_value = None
                                self._segment_path = lambda: "hour24secyrx-threshold" + "[secyrx-threshold='" + str(self.secyrx_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secyrx.Hour24secyrxThresholds.Hour24secyrxThreshold, ['secyrx_threshold', 'secyrx_threshold_value'], name, value)





                class Hour24secytx(Entity):
                    """
                    Configure secy\-tx performance monitoring
                    
                    .. attribute:: hour24secytx_thresholds
                    
                    	Configure secytx threshold
                    	**type**\:  :py:class:`Hour24secytxThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds>`
                    
                    .. attribute:: hour24secytx_reports
                    
                    	set secytx TCA reporting status
                    	**type**\:  :py:class:`Hour24secytxReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx, self).__init__()

                        self.yang_name = "hour24secytx"
                        self.yang_parent_name = "hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24secytx-thresholds", ("hour24secytx_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds)), ("hour24secytx-reports", ("hour24secytx_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports))])
                        self._leafs = OrderedDict()

                        self.hour24secytx_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds()
                        self.hour24secytx_thresholds.parent = self
                        self._children_name_map["hour24secytx_thresholds"] = "hour24secytx-thresholds"

                        self.hour24secytx_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports()
                        self.hour24secytx_reports.parent = self
                        self._children_name_map["hour24secytx_reports"] = "hour24secytx-reports"
                        self._segment_path = lambda: "hour24secytx"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx, [], name, value)


                    class Hour24secytxThresholds(Entity):
                        """
                        Configure secytx threshold
                        
                        .. attribute:: hour24secytx_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24secytxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds.Hour24secytxThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds, self).__init__()

                            self.yang_name = "hour24secytx-thresholds"
                            self.yang_parent_name = "hour24secytx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24secytx-threshold", ("hour24secytx_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds.Hour24secytxThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24secytx_threshold = YList(self)
                            self._segment_path = lambda: "hour24secytx-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds, [], name, value)


                        class Hour24secytxThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secytx_threshold  (key)
                            
                            	Secytx Threshold Type
                            	**type**\:  :py:class:`SecytxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecytxThreshold>`
                            
                            .. attribute:: secytx_threshold_value
                            
                            	Secytx threshold value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds.Hour24secytxThreshold, self).__init__()

                                self.yang_name = "hour24secytx-threshold"
                                self.yang_parent_name = "hour24secytx-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secytx_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secytx_threshold', (YLeaf(YType.enumeration, 'secytx-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecytxThreshold', '')])),
                                    ('secytx_threshold_value', (YLeaf(YType.uint32, 'secytx-threshold-value'), ['int'])),
                                ])
                                self.secytx_threshold = None
                                self.secytx_threshold_value = None
                                self._segment_path = lambda: "hour24secytx-threshold" + "[secytx-threshold='" + str(self.secytx_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxThresholds.Hour24secytxThreshold, ['secytx_threshold', 'secytx_threshold_value'], name, value)




                    class Hour24secytxReports(Entity):
                        """
                        set secytx TCA reporting status
                        
                        .. attribute:: hour24secytx_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24secytxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports.Hour24secytxReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports, self).__init__()

                            self.yang_name = "hour24secytx-reports"
                            self.yang_parent_name = "hour24secytx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24secytx-report", ("hour24secytx_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports.Hour24secytxReport))])
                            self._leafs = OrderedDict()

                            self.hour24secytx_report = YList(self)
                            self._segment_path = lambda: "hour24secytx-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports, [], name, value)


                        class Hour24secytxReport(Entity):
                            """
                            none
                            
                            .. attribute:: secytx_report  (key)
                            
                            	Secytx Report type
                            	**type**\:  :py:class:`SecytxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecytxReport>`
                            
                            .. attribute:: enable
                            
                            	Secytx Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports.Hour24secytxReport, self).__init__()

                                self.yang_name = "hour24secytx-report"
                                self.yang_parent_name = "hour24secytx-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secytx_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secytx_report', (YLeaf(YType.enumeration, 'secytx-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecytxReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secytx_report = None
                                self.enable = None
                                self._segment_path = lambda: "hour24secytx-report" + "[secytx-report='" + str(self.secytx_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24.Hour24secytx.Hour24secytxReports.Hour24secytxReport, ['secytx_report', 'enable'], name, value)






            class HoVcMinute15(Entity):
                """
                set HO\_VC threshold
                
                .. attribute:: ho_vc_minute15ho_vc
                
                	Configure ho\_vc performance monitoring
                	**type**\:  :py:class:`HoVcMinute15hoVc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15, self).__init__()

                    self.yang_name = "ho-vc-minute15"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ho-vc-minute15ho-vc", ("ho_vc_minute15ho_vc", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc))])
                    self._leafs = OrderedDict()

                    self.ho_vc_minute15ho_vc = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc()
                    self.ho_vc_minute15ho_vc.parent = self
                    self._children_name_map["ho_vc_minute15ho_vc"] = "ho-vc-minute15ho-vc"
                    self._segment_path = lambda: "ho-vc-minute15"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15, [], name, value)


                class HoVcMinute15hoVc(Entity):
                    """
                    Configure ho\_vc performance monitoring
                    
                    .. attribute:: ho_vc_minute15ho_vc_reports
                    
                    	set ho\_vc TCA reporting status
                    	**type**\:  :py:class:`HoVcMinute15hoVcReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports>`
                    
                    .. attribute:: ho_vc_minute15ho_vc_thresholds
                    
                    	Configure threshold on ho\_vc parameters
                    	**type**\:  :py:class:`HoVcMinute15hoVcThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc, self).__init__()

                        self.yang_name = "ho-vc-minute15ho-vc"
                        self.yang_parent_name = "ho-vc-minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ho-vc-minute15ho-vc-reports", ("ho_vc_minute15ho_vc_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports)), ("ho-vc-minute15ho-vc-thresholds", ("ho_vc_minute15ho_vc_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds))])
                        self._leafs = OrderedDict()

                        self.ho_vc_minute15ho_vc_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports()
                        self.ho_vc_minute15ho_vc_reports.parent = self
                        self._children_name_map["ho_vc_minute15ho_vc_reports"] = "ho-vc-minute15ho-vc-reports"

                        self.ho_vc_minute15ho_vc_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds()
                        self.ho_vc_minute15ho_vc_thresholds.parent = self
                        self._children_name_map["ho_vc_minute15ho_vc_thresholds"] = "ho-vc-minute15ho-vc-thresholds"
                        self._segment_path = lambda: "ho-vc-minute15ho-vc"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc, [], name, value)


                    class HoVcMinute15hoVcReports(Entity):
                        """
                        set ho\_vc TCA reporting status
                        
                        .. attribute:: ho_vc_minute15ho_vc_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`HoVcMinute15hoVcReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports.HoVcMinute15hoVcReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports, self).__init__()

                            self.yang_name = "ho-vc-minute15ho-vc-reports"
                            self.yang_parent_name = "ho-vc-minute15ho-vc"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("ho-vc-minute15ho-vc-report", ("ho_vc_minute15ho_vc_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports.HoVcMinute15hoVcReport))])
                            self._leafs = OrderedDict()

                            self.ho_vc_minute15ho_vc_report = YList(self)
                            self._segment_path = lambda: "ho-vc-minute15ho-vc-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports, [], name, value)


                        class HoVcMinute15hoVcReport(Entity):
                            """
                            none
                            
                            .. attribute:: ho_vc_report  (key)
                            
                            	ho\_vc Report Type
                            	**type**\:  :py:class:`HoVcReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.HoVcReport>`
                            
                            .. attribute:: enable
                            
                            	ho\_vc Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports.HoVcMinute15hoVcReport, self).__init__()

                                self.yang_name = "ho-vc-minute15ho-vc-report"
                                self.yang_parent_name = "ho-vc-minute15ho-vc-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ho_vc_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ho_vc_report', (YLeaf(YType.enumeration, 'ho-vc-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'HoVcReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.ho_vc_report = None
                                self.enable = None
                                self._segment_path = lambda: "ho-vc-minute15ho-vc-report" + "[ho-vc-report='" + str(self.ho_vc_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcReports.HoVcMinute15hoVcReport, ['ho_vc_report', 'enable'], name, value)




                    class HoVcMinute15hoVcThresholds(Entity):
                        """
                        Configure threshold on ho\_vc parameters
                        
                        .. attribute:: ho_vc_minute15ho_vc_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`HoVcMinute15hoVcThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds.HoVcMinute15hoVcThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds, self).__init__()

                            self.yang_name = "ho-vc-minute15ho-vc-thresholds"
                            self.yang_parent_name = "ho-vc-minute15ho-vc"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("ho-vc-minute15ho-vc-threshold", ("ho_vc_minute15ho_vc_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds.HoVcMinute15hoVcThreshold))])
                            self._leafs = OrderedDict()

                            self.ho_vc_minute15ho_vc_threshold = YList(self)
                            self._segment_path = lambda: "ho-vc-minute15ho-vc-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds, [], name, value)


                        class HoVcMinute15hoVcThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ho_vc_threshold  (key)
                            
                            	ho\_vc Threshold Type
                            	**type**\:  :py:class:`HoVcThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.HoVcThreshold>`
                            
                            .. attribute:: ho_vc_threshold_value
                            
                            	ho\_vc Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds.HoVcMinute15hoVcThreshold, self).__init__()

                                self.yang_name = "ho-vc-minute15ho-vc-threshold"
                                self.yang_parent_name = "ho-vc-minute15ho-vc-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ho_vc_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ho_vc_threshold', (YLeaf(YType.enumeration, 'ho-vc-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'HoVcThreshold', '')])),
                                    ('ho_vc_threshold_value', (YLeaf(YType.uint32, 'ho-vc-threshold-value'), ['int'])),
                                ])
                                self.ho_vc_threshold = None
                                self.ho_vc_threshold_value = None
                                self._segment_path = lambda: "ho-vc-minute15ho-vc-threshold" + "[ho-vc-threshold='" + str(self.ho_vc_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.HoVcMinute15.HoVcMinute15hoVc.HoVcMinute15hoVcThresholds.HoVcMinute15hoVcThreshold, ['ho_vc_threshold', 'ho_vc_threshold_value'], name, value)






            class StsHour24(Entity):
                """
                set STS threshold
                
                .. attribute:: sts_hour24_path
                
                	Configure Path performance monitoring
                	**type**\:  :py:class:`StsHour24Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24, self).__init__()

                    self.yang_name = "sts-hour24"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("sts-hour24-path", ("sts_hour24_path", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path))])
                    self._leafs = OrderedDict()

                    self.sts_hour24_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path()
                    self.sts_hour24_path.parent = self
                    self._children_name_map["sts_hour24_path"] = "sts-hour24-path"
                    self._segment_path = lambda: "sts-hour24"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24, [], name, value)


                class StsHour24Path(Entity):
                    """
                    Configure Path performance monitoring
                    
                    .. attribute:: sts_hour24_path_thresholds
                    
                    	Configure threshold on Path parameters
                    	**type**\:  :py:class:`StsHour24PathThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds>`
                    
                    .. attribute:: sts_hour24_path_reports
                    
                    	set Path TCA reporting status
                    	**type**\:  :py:class:`StsHour24PathReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path, self).__init__()

                        self.yang_name = "sts-hour24-path"
                        self.yang_parent_name = "sts-hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sts-hour24-path-thresholds", ("sts_hour24_path_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds)), ("sts-hour24-path-reports", ("sts_hour24_path_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports))])
                        self._leafs = OrderedDict()

                        self.sts_hour24_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds()
                        self.sts_hour24_path_thresholds.parent = self
                        self._children_name_map["sts_hour24_path_thresholds"] = "sts-hour24-path-thresholds"

                        self.sts_hour24_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports()
                        self.sts_hour24_path_reports.parent = self
                        self._children_name_map["sts_hour24_path_reports"] = "sts-hour24-path-reports"
                        self._segment_path = lambda: "sts-hour24-path"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path, [], name, value)


                    class StsHour24PathThresholds(Entity):
                        """
                        Configure threshold on Path parameters
                        
                        .. attribute:: sts_hour24_path_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`StsHour24PathThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds.StsHour24PathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds, self).__init__()

                            self.yang_name = "sts-hour24-path-thresholds"
                            self.yang_parent_name = "sts-hour24-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sts-hour24-path-threshold", ("sts_hour24_path_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds.StsHour24PathThreshold))])
                            self._leafs = OrderedDict()

                            self.sts_hour24_path_threshold = YList(self)
                            self._segment_path = lambda: "sts-hour24-path-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds, [], name, value)


                        class StsHour24PathThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: path_threshold  (key)
                            
                            	Path Threshold Type
                            	**type**\:  :py:class:`StsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.StsThreshold>`
                            
                            .. attribute:: path_threshold_value
                            
                            	Path Thresh Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds.StsHour24PathThreshold, self).__init__()

                                self.yang_name = "sts-hour24-path-threshold"
                                self.yang_parent_name = "sts-hour24-path-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['path_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path_threshold', (YLeaf(YType.enumeration, 'path-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'StsThreshold', '')])),
                                    ('path_threshold_value', (YLeaf(YType.uint32, 'path-threshold-value'), ['int'])),
                                ])
                                self.path_threshold = None
                                self.path_threshold_value = None
                                self._segment_path = lambda: "sts-hour24-path-threshold" + "[path-threshold='" + str(self.path_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathThresholds.StsHour24PathThreshold, ['path_threshold', 'path_threshold_value'], name, value)




                    class StsHour24PathReports(Entity):
                        """
                        set Path TCA reporting status
                        
                        .. attribute:: sts_hour24_path_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`StsHour24PathReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports.StsHour24PathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports, self).__init__()

                            self.yang_name = "sts-hour24-path-reports"
                            self.yang_parent_name = "sts-hour24-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sts-hour24-path-report", ("sts_hour24_path_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports.StsHour24PathReport))])
                            self._leafs = OrderedDict()

                            self.sts_hour24_path_report = YList(self)
                            self._segment_path = lambda: "sts-hour24-path-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports, [], name, value)


                        class StsHour24PathReport(Entity):
                            """
                            none
                            
                            .. attribute:: path_report  (key)
                            
                            	Path Report Type
                            	**type**\:  :py:class:`StsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.StsReport>`
                            
                            .. attribute:: enable
                            
                            	Path Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports.StsHour24PathReport, self).__init__()

                                self.yang_name = "sts-hour24-path-report"
                                self.yang_parent_name = "sts-hour24-path-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['path_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path_report', (YLeaf(YType.enumeration, 'path-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'StsReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.path_report = None
                                self.enable = None
                                self._segment_path = lambda: "sts-hour24-path-report" + "[path-report='" + str(self.path_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StsHour24.StsHour24Path.StsHour24PathReports.StsHour24PathReport, ['path_report', 'enable'], name, value)






            class StmMinute15(Entity):
                """
                set STM threshold
                
                .. attribute:: stm_minute15_stm
                
                	Configure stm performance monitoring
                	**type**\:  :py:class:`StmMinute15Stm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15, self).__init__()

                    self.yang_name = "stm-minute15"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("stm-minute15-stm", ("stm_minute15_stm", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm))])
                    self._leafs = OrderedDict()

                    self.stm_minute15_stm = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm()
                    self.stm_minute15_stm.parent = self
                    self._children_name_map["stm_minute15_stm"] = "stm-minute15-stm"
                    self._segment_path = lambda: "stm-minute15"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15, [], name, value)


                class StmMinute15Stm(Entity):
                    """
                    Configure stm performance monitoring
                    
                    .. attribute:: stm_minute15_stm_reports
                    
                    	set stm TCA reporting status
                    	**type**\:  :py:class:`StmMinute15StmReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports>`
                    
                    .. attribute:: stm_minute15_stm_thresholds
                    
                    	Configure threshold on stm parameters
                    	**type**\:  :py:class:`StmMinute15StmThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm, self).__init__()

                        self.yang_name = "stm-minute15-stm"
                        self.yang_parent_name = "stm-minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("stm-minute15-stm-reports", ("stm_minute15_stm_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports)), ("stm-minute15-stm-thresholds", ("stm_minute15_stm_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds))])
                        self._leafs = OrderedDict()

                        self.stm_minute15_stm_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports()
                        self.stm_minute15_stm_reports.parent = self
                        self._children_name_map["stm_minute15_stm_reports"] = "stm-minute15-stm-reports"

                        self.stm_minute15_stm_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds()
                        self.stm_minute15_stm_thresholds.parent = self
                        self._children_name_map["stm_minute15_stm_thresholds"] = "stm-minute15-stm-thresholds"
                        self._segment_path = lambda: "stm-minute15-stm"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm, [], name, value)


                    class StmMinute15StmReports(Entity):
                        """
                        set stm TCA reporting status
                        
                        .. attribute:: stm_minute15_stm_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`StmMinute15StmReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports.StmMinute15StmReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports, self).__init__()

                            self.yang_name = "stm-minute15-stm-reports"
                            self.yang_parent_name = "stm-minute15-stm"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("stm-minute15-stm-report", ("stm_minute15_stm_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports.StmMinute15StmReport))])
                            self._leafs = OrderedDict()

                            self.stm_minute15_stm_report = YList(self)
                            self._segment_path = lambda: "stm-minute15-stm-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports, [], name, value)


                        class StmMinute15StmReport(Entity):
                            """
                            none
                            
                            .. attribute:: stm_report  (key)
                            
                            	Stm Report Type
                            	**type**\:  :py:class:`StmReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.StmReport>`
                            
                            .. attribute:: enable
                            
                            	Stm Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports.StmMinute15StmReport, self).__init__()

                                self.yang_name = "stm-minute15-stm-report"
                                self.yang_parent_name = "stm-minute15-stm-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['stm_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('stm_report', (YLeaf(YType.enumeration, 'stm-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'StmReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.stm_report = None
                                self.enable = None
                                self._segment_path = lambda: "stm-minute15-stm-report" + "[stm-report='" + str(self.stm_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmReports.StmMinute15StmReport, ['stm_report', 'enable'], name, value)




                    class StmMinute15StmThresholds(Entity):
                        """
                        Configure threshold on stm parameters
                        
                        .. attribute:: stm_minute15_stm_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`StmMinute15StmThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds.StmMinute15StmThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds, self).__init__()

                            self.yang_name = "stm-minute15-stm-thresholds"
                            self.yang_parent_name = "stm-minute15-stm"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("stm-minute15-stm-threshold", ("stm_minute15_stm_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds.StmMinute15StmThreshold))])
                            self._leafs = OrderedDict()

                            self.stm_minute15_stm_threshold = YList(self)
                            self._segment_path = lambda: "stm-minute15-stm-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds, [], name, value)


                        class StmMinute15StmThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: stm_threshold  (key)
                            
                            	Stm Threshold Type
                            	**type**\:  :py:class:`StmThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.StmThreshold>`
                            
                            .. attribute:: stm_threshold_value
                            
                            	Stm Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds.StmMinute15StmThreshold, self).__init__()

                                self.yang_name = "stm-minute15-stm-threshold"
                                self.yang_parent_name = "stm-minute15-stm-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['stm_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('stm_threshold', (YLeaf(YType.enumeration, 'stm-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'StmThreshold', '')])),
                                    ('stm_threshold_value', (YLeaf(YType.uint32, 'stm-threshold-value'), ['int'])),
                                ])
                                self.stm_threshold = None
                                self.stm_threshold_value = None
                                self._segment_path = lambda: "stm-minute15-stm-threshold" + "[stm-threshold='" + str(self.stm_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.StmMinute15.StmMinute15Stm.StmMinute15StmThresholds.StmMinute15StmThreshold, ['stm_threshold', 'stm_threshold_value'], name, value)






            class SonetHour24(Entity):
                """
                set Sonet threshold
                
                .. attribute:: sonet_hour24_path
                
                	Configure Path performance monitoring
                	**type**\:  :py:class:`SonetHour24Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path>`
                
                .. attribute:: sonet_hour24_ocn
                
                	Configure ocn performance monitoring
                	**type**\:  :py:class:`SonetHour24Ocn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24, self).__init__()

                    self.yang_name = "sonet-hour24"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("sonet-hour24-path", ("sonet_hour24_path", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path)), ("sonet-hour24-ocn", ("sonet_hour24_ocn", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn))])
                    self._leafs = OrderedDict()

                    self.sonet_hour24_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path()
                    self.sonet_hour24_path.parent = self
                    self._children_name_map["sonet_hour24_path"] = "sonet-hour24-path"

                    self.sonet_hour24_ocn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn()
                    self.sonet_hour24_ocn.parent = self
                    self._children_name_map["sonet_hour24_ocn"] = "sonet-hour24-ocn"
                    self._segment_path = lambda: "sonet-hour24"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24, [], name, value)


                class SonetHour24Path(Entity):
                    """
                    Configure Path performance monitoring
                    
                    .. attribute:: sonet_hour24_path_thresholds
                    
                    	Configure threshold on Path parameters
                    	**type**\:  :py:class:`SonetHour24PathThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds>`
                    
                    .. attribute:: sonet_hour24_path_reports
                    
                    	set Path TCA reporting status
                    	**type**\:  :py:class:`SonetHour24PathReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path, self).__init__()

                        self.yang_name = "sonet-hour24-path"
                        self.yang_parent_name = "sonet-hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sonet-hour24-path-thresholds", ("sonet_hour24_path_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds)), ("sonet-hour24-path-reports", ("sonet_hour24_path_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports))])
                        self._leafs = OrderedDict()

                        self.sonet_hour24_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds()
                        self.sonet_hour24_path_thresholds.parent = self
                        self._children_name_map["sonet_hour24_path_thresholds"] = "sonet-hour24-path-thresholds"

                        self.sonet_hour24_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports()
                        self.sonet_hour24_path_reports.parent = self
                        self._children_name_map["sonet_hour24_path_reports"] = "sonet-hour24-path-reports"
                        self._segment_path = lambda: "sonet-hour24-path"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path, [], name, value)


                    class SonetHour24PathThresholds(Entity):
                        """
                        Configure threshold on Path parameters
                        
                        .. attribute:: sonet_hour24_path_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`SonetHour24PathThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds.SonetHour24PathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds, self).__init__()

                            self.yang_name = "sonet-hour24-path-thresholds"
                            self.yang_parent_name = "sonet-hour24-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sonet-hour24-path-threshold", ("sonet_hour24_path_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds.SonetHour24PathThreshold))])
                            self._leafs = OrderedDict()

                            self.sonet_hour24_path_threshold = YList(self)
                            self._segment_path = lambda: "sonet-hour24-path-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds, [], name, value)


                        class SonetHour24PathThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: path_threshold  (key)
                            
                            	Path Threshold Type
                            	**type**\:  :py:class:`PathThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PathThreshold>`
                            
                            .. attribute:: path_threshold_value
                            
                            	Path Thresh Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds.SonetHour24PathThreshold, self).__init__()

                                self.yang_name = "sonet-hour24-path-threshold"
                                self.yang_parent_name = "sonet-hour24-path-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['path_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path_threshold', (YLeaf(YType.enumeration, 'path-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PathThreshold', '')])),
                                    ('path_threshold_value', (YLeaf(YType.uint32, 'path-threshold-value'), ['int'])),
                                ])
                                self.path_threshold = None
                                self.path_threshold_value = None
                                self._segment_path = lambda: "sonet-hour24-path-threshold" + "[path-threshold='" + str(self.path_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathThresholds.SonetHour24PathThreshold, ['path_threshold', 'path_threshold_value'], name, value)




                    class SonetHour24PathReports(Entity):
                        """
                        set Path TCA reporting status
                        
                        .. attribute:: sonet_hour24_path_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`SonetHour24PathReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports.SonetHour24PathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports, self).__init__()

                            self.yang_name = "sonet-hour24-path-reports"
                            self.yang_parent_name = "sonet-hour24-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sonet-hour24-path-report", ("sonet_hour24_path_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports.SonetHour24PathReport))])
                            self._leafs = OrderedDict()

                            self.sonet_hour24_path_report = YList(self)
                            self._segment_path = lambda: "sonet-hour24-path-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports, [], name, value)


                        class SonetHour24PathReport(Entity):
                            """
                            none
                            
                            .. attribute:: path_report  (key)
                            
                            	Path Report Type
                            	**type**\:  :py:class:`PathReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PathReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports.SonetHour24PathReport, self).__init__()

                                self.yang_name = "sonet-hour24-path-report"
                                self.yang_parent_name = "sonet-hour24-path-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['path_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path_report', (YLeaf(YType.enumeration, 'path-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PathReport', '')])),
                                ])
                                self.path_report = None
                                self._segment_path = lambda: "sonet-hour24-path-report" + "[path-report='" + str(self.path_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Path.SonetHour24PathReports.SonetHour24PathReport, ['path_report'], name, value)





                class SonetHour24Ocn(Entity):
                    """
                    Configure ocn performance monitoring
                    
                    .. attribute:: sonet_hour24_ocn_thresholds
                    
                    	Configure threshold on ocn parameters
                    	**type**\:  :py:class:`SonetHour24OcnThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds>`
                    
                    .. attribute:: sonet_hour24_ocn_reports
                    
                    	set ocn TCA reporting status
                    	**type**\:  :py:class:`SonetHour24OcnReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn, self).__init__()

                        self.yang_name = "sonet-hour24-ocn"
                        self.yang_parent_name = "sonet-hour24"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("sonet-hour24-ocn-thresholds", ("sonet_hour24_ocn_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds)), ("sonet-hour24-ocn-reports", ("sonet_hour24_ocn_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports))])
                        self._leafs = OrderedDict()

                        self.sonet_hour24_ocn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds()
                        self.sonet_hour24_ocn_thresholds.parent = self
                        self._children_name_map["sonet_hour24_ocn_thresholds"] = "sonet-hour24-ocn-thresholds"

                        self.sonet_hour24_ocn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports()
                        self.sonet_hour24_ocn_reports.parent = self
                        self._children_name_map["sonet_hour24_ocn_reports"] = "sonet-hour24-ocn-reports"
                        self._segment_path = lambda: "sonet-hour24-ocn"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn, [], name, value)


                    class SonetHour24OcnThresholds(Entity):
                        """
                        Configure threshold on ocn parameters
                        
                        .. attribute:: sonet_hour24_ocn_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`SonetHour24OcnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds.SonetHour24OcnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds, self).__init__()

                            self.yang_name = "sonet-hour24-ocn-thresholds"
                            self.yang_parent_name = "sonet-hour24-ocn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sonet-hour24-ocn-threshold", ("sonet_hour24_ocn_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds.SonetHour24OcnThreshold))])
                            self._leafs = OrderedDict()

                            self.sonet_hour24_ocn_threshold = YList(self)
                            self._segment_path = lambda: "sonet-hour24-ocn-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds, [], name, value)


                        class SonetHour24OcnThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ocn_threshold  (key)
                            
                            	Ocn Threshold Type
                            	**type**\:  :py:class:`OcnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OcnThreshold>`
                            
                            .. attribute:: ocn_threshold_value
                            
                            	Ocn Thresh Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds.SonetHour24OcnThreshold, self).__init__()

                                self.yang_name = "sonet-hour24-ocn-threshold"
                                self.yang_parent_name = "sonet-hour24-ocn-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ocn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ocn_threshold', (YLeaf(YType.enumeration, 'ocn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OcnThreshold', '')])),
                                    ('ocn_threshold_value', (YLeaf(YType.uint32, 'ocn-threshold-value'), ['int'])),
                                ])
                                self.ocn_threshold = None
                                self.ocn_threshold_value = None
                                self._segment_path = lambda: "sonet-hour24-ocn-threshold" + "[ocn-threshold='" + str(self.ocn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnThresholds.SonetHour24OcnThreshold, ['ocn_threshold', 'ocn_threshold_value'], name, value)




                    class SonetHour24OcnReports(Entity):
                        """
                        set ocn TCA reporting status
                        
                        .. attribute:: sonet_hour24_ocn_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`SonetHour24OcnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports.SonetHour24OcnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports, self).__init__()

                            self.yang_name = "sonet-hour24-ocn-reports"
                            self.yang_parent_name = "sonet-hour24-ocn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("sonet-hour24-ocn-report", ("sonet_hour24_ocn_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports.SonetHour24OcnReport))])
                            self._leafs = OrderedDict()

                            self.sonet_hour24_ocn_report = YList(self)
                            self._segment_path = lambda: "sonet-hour24-ocn-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports, [], name, value)


                        class SonetHour24OcnReport(Entity):
                            """
                            none
                            
                            .. attribute:: ocn_report  (key)
                            
                            	Ocn Report Type
                            	**type**\:  :py:class:`OcnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OcnReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports.SonetHour24OcnReport, self).__init__()

                                self.yang_name = "sonet-hour24-ocn-report"
                                self.yang_parent_name = "sonet-hour24-ocn-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ocn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ocn_report', (YLeaf(YType.enumeration, 'ocn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OcnReport', '')])),
                                ])
                                self.ocn_report = None
                                self._segment_path = lambda: "sonet-hour24-ocn-report" + "[ocn-report='" + str(self.ocn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.SonetHour24.SonetHour24Ocn.SonetHour24OcnReports.SonetHour24OcnReport, ['ocn_report'], name, value)






            class Minute15Path(Entity):
                """
                set opr min threshold
                
                .. attribute:: minute15otn_path
                
                	configure otn g709 performance monitoring
                	**type**\:  :py:class:`Minute15otnPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path, self).__init__()

                    self.yang_name = "minute15-path"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("minute15otn-path", ("minute15otn_path", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath))])
                    self._leafs = OrderedDict()

                    self.minute15otn_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath()
                    self.minute15otn_path.parent = self
                    self._children_name_map["minute15otn_path"] = "minute15otn-path"
                    self._segment_path = lambda: "minute15-path"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path, [], name, value)


                class Minute15otnPath(Entity):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: minute15otn_path_reports
                    
                    	set otn TCA reporting status
                    	**type**\:  :py:class:`Minute15otnPathReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports>`
                    
                    .. attribute:: min15_otn_path_threshes
                    
                    	Configure threshold on otn parameters
                    	**type**\:  :py:class:`Min15OtnPathThreshes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath, self).__init__()

                        self.yang_name = "minute15otn-path"
                        self.yang_parent_name = "minute15-path"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15otn-path-reports", ("minute15otn_path_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports)), ("min15-otn-path-threshes", ("min15_otn_path_threshes", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes))])
                        self._leafs = OrderedDict()

                        self.minute15otn_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports()
                        self.minute15otn_path_reports.parent = self
                        self._children_name_map["minute15otn_path_reports"] = "minute15otn-path-reports"

                        self.min15_otn_path_threshes = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes()
                        self.min15_otn_path_threshes.parent = self
                        self._children_name_map["min15_otn_path_threshes"] = "min15-otn-path-threshes"
                        self._segment_path = lambda: "minute15otn-path"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath, [], name, value)


                    class Minute15otnPathReports(Entity):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: minute15otn_path_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15otnPathReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports.Minute15otnPathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports, self).__init__()

                            self.yang_name = "minute15otn-path-reports"
                            self.yang_parent_name = "minute15otn-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15otn-path-report", ("minute15otn_path_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports.Minute15otnPathReport))])
                            self._leafs = OrderedDict()

                            self.minute15otn_path_report = YList(self)
                            self._segment_path = lambda: "minute15otn-path-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports, [], name, value)


                        class Minute15otnPathReport(Entity):
                            """
                            none
                            
                            .. attribute:: otn_report  (key)
                            
                            	Otn Report Type
                            	**type**\:  :py:class:`OtnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnReport>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports.Minute15otnPathReport, self).__init__()

                                self.yang_name = "minute15otn-path-report"
                                self.yang_parent_name = "minute15otn-path-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_report', (YLeaf(YType.enumeration, 'otn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.otn_report = None
                                self.enable = None
                                self._segment_path = lambda: "minute15otn-path-report" + "[otn-report='" + str(self.otn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Minute15otnPathReports.Minute15otnPathReport, ['otn_report', 'enable'], name, value)




                    class Min15OtnPathThreshes(Entity):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: min15_otn_path_thresh
                        
                        	none
                        	**type**\: list of  		 :py:class:`Min15OtnPathThresh <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes.Min15OtnPathThresh>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes, self).__init__()

                            self.yang_name = "min15-otn-path-threshes"
                            self.yang_parent_name = "minute15otn-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("min15-otn-path-thresh", ("min15_otn_path_thresh", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes.Min15OtnPathThresh))])
                            self._leafs = OrderedDict()

                            self.min15_otn_path_thresh = YList(self)
                            self._segment_path = lambda: "min15-otn-path-threshes"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes, [], name, value)


                        class Min15OtnPathThresh(Entity):
                            """
                            none
                            
                            .. attribute:: otn_threshold  (key)
                            
                            	Otn Threshold Type
                            	**type**\:  :py:class:`OtnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnThreshold>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes.Min15OtnPathThresh, self).__init__()

                                self.yang_name = "min15-otn-path-thresh"
                                self.yang_parent_name = "min15-otn-path-threshes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_threshold', (YLeaf(YType.enumeration, 'otn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnThreshold', '')])),
                                    ('otn_threshold_value', (YLeaf(YType.uint32, 'otn-threshold-value'), ['int'])),
                                ])
                                self.otn_threshold = None
                                self.otn_threshold_value = None
                                self._segment_path = lambda: "min15-otn-path-thresh" + "[otn-threshold='" + str(self.otn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15Path.Minute15otnPath.Min15OtnPathThreshes.Min15OtnPathThresh, ['otn_threshold', 'otn_threshold_value'], name, value)






            class OcMinute15(Entity):
                """
                set OC threshold
                
                .. attribute:: oc_minute15_ocn
                
                	Configure ocn performance monitoring
                	**type**\:  :py:class:`OcMinute15Ocn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15, self).__init__()

                    self.yang_name = "oc-minute15"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("oc-minute15-ocn", ("oc_minute15_ocn", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn))])
                    self._leafs = OrderedDict()

                    self.oc_minute15_ocn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn()
                    self.oc_minute15_ocn.parent = self
                    self._children_name_map["oc_minute15_ocn"] = "oc-minute15-ocn"
                    self._segment_path = lambda: "oc-minute15"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15, [], name, value)


                class OcMinute15Ocn(Entity):
                    """
                    Configure ocn performance monitoring
                    
                    .. attribute:: oc_minute15_ocn_reports
                    
                    	set ocn TCA reporting status
                    	**type**\:  :py:class:`OcMinute15OcnReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports>`
                    
                    .. attribute:: oc_minute15_ocn_thresholds
                    
                    	Configure threshold on ocn parameters
                    	**type**\:  :py:class:`OcMinute15OcnThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn, self).__init__()

                        self.yang_name = "oc-minute15-ocn"
                        self.yang_parent_name = "oc-minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("oc-minute15-ocn-reports", ("oc_minute15_ocn_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports)), ("oc-minute15-ocn-thresholds", ("oc_minute15_ocn_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds))])
                        self._leafs = OrderedDict()

                        self.oc_minute15_ocn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports()
                        self.oc_minute15_ocn_reports.parent = self
                        self._children_name_map["oc_minute15_ocn_reports"] = "oc-minute15-ocn-reports"

                        self.oc_minute15_ocn_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds()
                        self.oc_minute15_ocn_thresholds.parent = self
                        self._children_name_map["oc_minute15_ocn_thresholds"] = "oc-minute15-ocn-thresholds"
                        self._segment_path = lambda: "oc-minute15-ocn"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn, [], name, value)


                    class OcMinute15OcnReports(Entity):
                        """
                        set ocn TCA reporting status
                        
                        .. attribute:: oc_minute15_ocn_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`OcMinute15OcnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports.OcMinute15OcnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports, self).__init__()

                            self.yang_name = "oc-minute15-ocn-reports"
                            self.yang_parent_name = "oc-minute15-ocn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("oc-minute15-ocn-report", ("oc_minute15_ocn_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports.OcMinute15OcnReport))])
                            self._leafs = OrderedDict()

                            self.oc_minute15_ocn_report = YList(self)
                            self._segment_path = lambda: "oc-minute15-ocn-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports, [], name, value)


                        class OcMinute15OcnReport(Entity):
                            """
                            none
                            
                            .. attribute:: ocn_report  (key)
                            
                            	Ocn Report Type
                            	**type**\:  :py:class:`OcnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OcnReport>`
                            
                            .. attribute:: enable
                            
                            	Ocn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports.OcMinute15OcnReport, self).__init__()

                                self.yang_name = "oc-minute15-ocn-report"
                                self.yang_parent_name = "oc-minute15-ocn-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ocn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ocn_report', (YLeaf(YType.enumeration, 'ocn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OcnReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.ocn_report = None
                                self.enable = None
                                self._segment_path = lambda: "oc-minute15-ocn-report" + "[ocn-report='" + str(self.ocn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnReports.OcMinute15OcnReport, ['ocn_report', 'enable'], name, value)




                    class OcMinute15OcnThresholds(Entity):
                        """
                        Configure threshold on ocn parameters
                        
                        .. attribute:: oc_minute15_ocn_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`OcMinute15OcnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds.OcMinute15OcnThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds, self).__init__()

                            self.yang_name = "oc-minute15-ocn-thresholds"
                            self.yang_parent_name = "oc-minute15-ocn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("oc-minute15-ocn-threshold", ("oc_minute15_ocn_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds.OcMinute15OcnThreshold))])
                            self._leafs = OrderedDict()

                            self.oc_minute15_ocn_threshold = YList(self)
                            self._segment_path = lambda: "oc-minute15-ocn-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds, [], name, value)


                        class OcMinute15OcnThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ocn_threshold  (key)
                            
                            	Ocn Threshold Type
                            	**type**\:  :py:class:`OcnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OcnThreshold>`
                            
                            .. attribute:: ocn_threshold_value
                            
                            	Ocn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds.OcMinute15OcnThreshold, self).__init__()

                                self.yang_name = "oc-minute15-ocn-threshold"
                                self.yang_parent_name = "oc-minute15-ocn-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ocn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ocn_threshold', (YLeaf(YType.enumeration, 'ocn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OcnThreshold', '')])),
                                    ('ocn_threshold_value', (YLeaf(YType.uint32, 'ocn-threshold-value'), ['int'])),
                                ])
                                self.ocn_threshold = None
                                self.ocn_threshold_value = None
                                self._segment_path = lambda: "oc-minute15-ocn-threshold" + "[ocn-threshold='" + str(self.ocn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.OcMinute15.OcMinute15Ocn.OcMinute15OcnThresholds.OcMinute15OcnThreshold, ['ocn_threshold', 'ocn_threshold_value'], name, value)






            class EthernetSecond30(Entity):
                """
                Configure ethernet performance monitoring for
                30 sec
                
                .. attribute:: second30_ether
                
                	Configure ether performance monitoring
                	**type**\:  :py:class:`Second30Ether <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30, self).__init__()

                    self.yang_name = "ethernet-second30"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("second30-ether", ("second30_ether", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether))])
                    self._leafs = OrderedDict()

                    self.second30_ether = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether()
                    self.second30_ether.parent = self
                    self._children_name_map["second30_ether"] = "second30-ether"
                    self._segment_path = lambda: "ethernet-second30"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30, [], name, value)


                class Second30Ether(Entity):
                    """
                    Configure ether performance monitoring
                    
                    .. attribute:: second30_ether_thresholds
                    
                    	Configure threshold on ether parameters
                    	**type**\:  :py:class:`Second30EtherThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds>`
                    
                    .. attribute:: second30_ether_reports
                    
                    	set ether TCA reporting status
                    	**type**\:  :py:class:`Second30EtherReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether, self).__init__()

                        self.yang_name = "second30-ether"
                        self.yang_parent_name = "ethernet-second30"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("second30-ether-thresholds", ("second30_ether_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds)), ("second30-ether-reports", ("second30_ether_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports))])
                        self._leafs = OrderedDict()

                        self.second30_ether_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds()
                        self.second30_ether_thresholds.parent = self
                        self._children_name_map["second30_ether_thresholds"] = "second30-ether-thresholds"

                        self.second30_ether_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports()
                        self.second30_ether_reports.parent = self
                        self._children_name_map["second30_ether_reports"] = "second30-ether-reports"
                        self._segment_path = lambda: "second30-ether"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether, [], name, value)


                    class Second30EtherThresholds(Entity):
                        """
                        Configure threshold on ether parameters
                        
                        .. attribute:: second30_ether_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30EtherThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds.Second30EtherThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds, self).__init__()

                            self.yang_name = "second30-ether-thresholds"
                            self.yang_parent_name = "second30-ether"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30-ether-threshold", ("second30_ether_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds.Second30EtherThreshold))])
                            self._leafs = OrderedDict()

                            self.second30_ether_threshold = YList(self)
                            self._segment_path = lambda: "second30-ether-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds, [], name, value)


                        class Second30EtherThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: ether_threshold  (key)
                            
                            	Ether Threshold Type
                            	**type**\:  :py:class:`EtherThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.EtherThreshold>`
                            
                            .. attribute:: ether_threshold_value
                            
                            	Ether Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds.Second30EtherThreshold, self).__init__()

                                self.yang_name = "second30-ether-threshold"
                                self.yang_parent_name = "second30-ether-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ether_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ether_threshold', (YLeaf(YType.enumeration, 'ether-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'EtherThreshold', '')])),
                                    ('ether_threshold_value', (YLeaf(YType.uint32, 'ether-threshold-value'), ['int'])),
                                ])
                                self.ether_threshold = None
                                self.ether_threshold_value = None
                                self._segment_path = lambda: "second30-ether-threshold" + "[ether-threshold='" + str(self.ether_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherThresholds.Second30EtherThreshold, ['ether_threshold', 'ether_threshold_value'], name, value)




                    class Second30EtherReports(Entity):
                        """
                        set ether TCA reporting status
                        
                        .. attribute:: second30_ether_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Second30EtherReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports.Second30EtherReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports, self).__init__()

                            self.yang_name = "second30-ether-reports"
                            self.yang_parent_name = "second30-ether"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("second30-ether-report", ("second30_ether_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports.Second30EtherReport))])
                            self._leafs = OrderedDict()

                            self.second30_ether_report = YList(self)
                            self._segment_path = lambda: "second30-ether-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports, [], name, value)


                        class Second30EtherReport(Entity):
                            """
                            none
                            
                            .. attribute:: ether_report  (key)
                            
                            	Ether Report Type
                            	**type**\:  :py:class:`EtherReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.EtherReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports.Second30EtherReport, self).__init__()

                                self.yang_name = "second30-ether-report"
                                self.yang_parent_name = "second30-ether-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['ether_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ether_report', (YLeaf(YType.enumeration, 'ether-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'EtherReport', '')])),
                                ])
                                self.ether_report = None
                                self._segment_path = lambda: "second30-ether-report" + "[ether-report='" + str(self.ether_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.EthernetSecond30.Second30Ether.Second30EtherReports.Second30EtherReport, ['ether_report'], name, value)






            class Hour24Path(Entity):
                """
                Configure pm parameters of pathmonitor 24 hour
                interval
                
                .. attribute:: hour24otn_path
                
                	configure otn g709 performance monitoring
                	**type**\:  :py:class:`Hour24otnPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path, self).__init__()

                    self.yang_name = "hour24-path"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("hour24otn-path", ("hour24otn_path", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath))])
                    self._leafs = OrderedDict()

                    self.hour24otn_path = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath()
                    self.hour24otn_path.parent = self
                    self._children_name_map["hour24otn_path"] = "hour24otn-path"
                    self._segment_path = lambda: "hour24-path"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path, [], name, value)


                class Hour24otnPath(Entity):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: hour24otn_path_reports
                    
                    	set otn TCA reporting status
                    	**type**\:  :py:class:`Hour24otnPathReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports>`
                    
                    .. attribute:: hour24otn_path_thresholds
                    
                    	Configure threshold on otn parameters
                    	**type**\:  :py:class:`Hour24otnPathThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath, self).__init__()

                        self.yang_name = "hour24otn-path"
                        self.yang_parent_name = "hour24-path"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("hour24otn-path-reports", ("hour24otn_path_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports)), ("hour24otn-path-thresholds", ("hour24otn_path_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds))])
                        self._leafs = OrderedDict()

                        self.hour24otn_path_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports()
                        self.hour24otn_path_reports.parent = self
                        self._children_name_map["hour24otn_path_reports"] = "hour24otn-path-reports"

                        self.hour24otn_path_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds()
                        self.hour24otn_path_thresholds.parent = self
                        self._children_name_map["hour24otn_path_thresholds"] = "hour24otn-path-thresholds"
                        self._segment_path = lambda: "hour24otn-path"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath, [], name, value)


                    class Hour24otnPathReports(Entity):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: hour24otn_path_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24otnPathReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports.Hour24otnPathReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports, self).__init__()

                            self.yang_name = "hour24otn-path-reports"
                            self.yang_parent_name = "hour24otn-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24otn-path-report", ("hour24otn_path_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports.Hour24otnPathReport))])
                            self._leafs = OrderedDict()

                            self.hour24otn_path_report = YList(self)
                            self._segment_path = lambda: "hour24otn-path-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports, [], name, value)


                        class Hour24otnPathReport(Entity):
                            """
                            none
                            
                            .. attribute:: otn_report  (key)
                            
                            	Otn Report Type
                            	**type**\:  :py:class:`OtnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnReport>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports.Hour24otnPathReport, self).__init__()

                                self.yang_name = "hour24otn-path-report"
                                self.yang_parent_name = "hour24otn-path-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_report', (YLeaf(YType.enumeration, 'otn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.otn_report = None
                                self.enable = None
                                self._segment_path = lambda: "hour24otn-path-report" + "[otn-report='" + str(self.otn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathReports.Hour24otnPathReport, ['otn_report', 'enable'], name, value)




                    class Hour24otnPathThresholds(Entity):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: hour24otn_path_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Hour24otnPathThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds.Hour24otnPathThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds, self).__init__()

                            self.yang_name = "hour24otn-path-thresholds"
                            self.yang_parent_name = "hour24otn-path"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("hour24otn-path-threshold", ("hour24otn_path_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds.Hour24otnPathThreshold))])
                            self._leafs = OrderedDict()

                            self.hour24otn_path_threshold = YList(self)
                            self._segment_path = lambda: "hour24otn-path-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds, [], name, value)


                        class Hour24otnPathThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: otn_threshold  (key)
                            
                            	Otn Threshold Type
                            	**type**\:  :py:class:`OtnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnThreshold>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds.Hour24otnPathThreshold, self).__init__()

                                self.yang_name = "hour24otn-path-threshold"
                                self.yang_parent_name = "hour24otn-path-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_threshold', (YLeaf(YType.enumeration, 'otn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnThreshold', '')])),
                                    ('otn_threshold_value', (YLeaf(YType.uint32, 'otn-threshold-value'), ['int'])),
                                ])
                                self.otn_threshold = None
                                self.otn_threshold_value = None
                                self._segment_path = lambda: "hour24otn-path-threshold" + "[otn-threshold='" + str(self.otn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Hour24Path.Hour24otnPath.Hour24otnPathThresholds.Hour24otnPathThreshold, ['otn_threshold', 'otn_threshold_value'], name, value)






            class Minute15(Entity):
                """
                set opr min threshold
                
                .. attribute:: minute15_optics
                
                	Configure optics performance monitoring
                	**type**\:  :py:class:`Minute15Optics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics>`
                
                .. attribute:: minute15secyif
                
                	Configure secy\-if performance monitoring
                	**type**\:  :py:class:`Minute15secyif <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif>`
                
                .. attribute:: minute15secyrx
                
                	Configure secy\-rx performance monitoring
                	**type**\:  :py:class:`Minute15secyrx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx>`
                
                .. attribute:: minute15pcs
                
                	Configure pcs performance monitoring
                	**type**\:  :py:class:`Minute15pcs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs>`
                
                .. attribute:: minute15fec
                
                	Configure fec g709 performance monitoring
                	**type**\:  :py:class:`Minute15fec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec>`
                
                .. attribute:: minute15secytx
                
                	Configure secy\-tx performance monitoring
                	**type**\:  :py:class:`Minute15secytx <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx>`
                
                .. attribute:: minute15otn
                
                	configure otn g709 performance monitoring
                	**type**\:  :py:class:`Minute15otn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn>`
                
                

                """

                _prefix = 'pmengine-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15, self).__init__()

                    self.yang_name = "minute15"
                    self.yang_parent_name = "performance-management"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("minute15-optics", ("minute15_optics", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics)), ("minute15secyif", ("minute15secyif", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif)), ("minute15secyrx", ("minute15secyrx", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx)), ("minute15pcs", ("minute15pcs", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs)), ("minute15fec", ("minute15fec", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec)), ("minute15secytx", ("minute15secytx", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx)), ("minute15otn", ("minute15otn", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn))])
                    self._leafs = OrderedDict()

                    self.minute15_optics = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics()
                    self.minute15_optics.parent = self
                    self._children_name_map["minute15_optics"] = "minute15-optics"

                    self.minute15secyif = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif()
                    self.minute15secyif.parent = self
                    self._children_name_map["minute15secyif"] = "minute15secyif"

                    self.minute15secyrx = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx()
                    self.minute15secyrx.parent = self
                    self._children_name_map["minute15secyrx"] = "minute15secyrx"

                    self.minute15pcs = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs()
                    self.minute15pcs.parent = self
                    self._children_name_map["minute15pcs"] = "minute15pcs"

                    self.minute15fec = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec()
                    self.minute15fec.parent = self
                    self._children_name_map["minute15fec"] = "minute15fec"

                    self.minute15secytx = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx()
                    self.minute15secytx.parent = self
                    self._children_name_map["minute15secytx"] = "minute15secytx"

                    self.minute15otn = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn()
                    self.minute15otn.parent = self
                    self._children_name_map["minute15otn"] = "minute15otn"
                    self._segment_path = lambda: "minute15"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15, [], name, value)


                class Minute15Optics(Entity):
                    """
                    Configure optics performance monitoring
                    
                    .. attribute:: minute15_optics_thresholds
                    
                    	Configure threshold on optics parameters
                    	**type**\:  :py:class:`Minute15OpticsThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds>`
                    
                    .. attribute:: minute15_optics_reports
                    
                    	set optics TCA reporting status
                    	**type**\:  :py:class:`Minute15OpticsReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics, self).__init__()

                        self.yang_name = "minute15-optics"
                        self.yang_parent_name = "minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15-optics-thresholds", ("minute15_optics_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds)), ("minute15-optics-reports", ("minute15_optics_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports))])
                        self._leafs = OrderedDict()

                        self.minute15_optics_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds()
                        self.minute15_optics_thresholds.parent = self
                        self._children_name_map["minute15_optics_thresholds"] = "minute15-optics-thresholds"

                        self.minute15_optics_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports()
                        self.minute15_optics_reports.parent = self
                        self._children_name_map["minute15_optics_reports"] = "minute15-optics-reports"
                        self._segment_path = lambda: "minute15-optics"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics, [], name, value)


                    class Minute15OpticsThresholds(Entity):
                        """
                        Configure threshold on optics parameters
                        
                        .. attribute:: minute15_optics_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15OpticsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds.Minute15OpticsThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds, self).__init__()

                            self.yang_name = "minute15-optics-thresholds"
                            self.yang_parent_name = "minute15-optics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15-optics-threshold", ("minute15_optics_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds.Minute15OpticsThreshold))])
                            self._leafs = OrderedDict()

                            self.minute15_optics_threshold = YList(self)
                            self._segment_path = lambda: "minute15-optics-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds, [], name, value)


                        class Minute15OpticsThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: optics_threshold  (key)
                            
                            	Optics Threshold Type
                            	**type**\:  :py:class:`OpticsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OpticsThreshold>`
                            
                            .. attribute:: optics_threshold_value
                            
                            	Optics Threshold Value
                            	**type**\: int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: dbm
                            
                            	Used only for Opt and Opr,To Enter Threshold in dbm use 1
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**default value**\: 0
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds.Minute15OpticsThreshold, self).__init__()

                                self.yang_name = "minute15-optics-threshold"
                                self.yang_parent_name = "minute15-optics-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['optics_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('optics_threshold', (YLeaf(YType.enumeration, 'optics-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OpticsThreshold', '')])),
                                    ('optics_threshold_value', (YLeaf(YType.int32, 'optics-threshold-value'), ['int'])),
                                    ('dbm', (YLeaf(YType.uint32, 'dbm'), ['int'])),
                                ])
                                self.optics_threshold = None
                                self.optics_threshold_value = None
                                self.dbm = None
                                self._segment_path = lambda: "minute15-optics-threshold" + "[optics-threshold='" + str(self.optics_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsThresholds.Minute15OpticsThreshold, ['optics_threshold', 'optics_threshold_value', 'dbm'], name, value)




                    class Minute15OpticsReports(Entity):
                        """
                        set optics TCA reporting status
                        
                        .. attribute:: minute15_optics_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15OpticsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports.Minute15OpticsReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports, self).__init__()

                            self.yang_name = "minute15-optics-reports"
                            self.yang_parent_name = "minute15-optics"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15-optics-report", ("minute15_optics_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports.Minute15OpticsReport))])
                            self._leafs = OrderedDict()

                            self.minute15_optics_report = YList(self)
                            self._segment_path = lambda: "minute15-optics-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports, [], name, value)


                        class Minute15OpticsReport(Entity):
                            """
                            none
                            
                            .. attribute:: optics_report  (key)
                            
                            	Optics Report Type
                            	**type**\:  :py:class:`OpticsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OpticsReport>`
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports.Minute15OpticsReport, self).__init__()

                                self.yang_name = "minute15-optics-report"
                                self.yang_parent_name = "minute15-optics-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['optics_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('optics_report', (YLeaf(YType.enumeration, 'optics-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OpticsReport', '')])),
                                ])
                                self.optics_report = None
                                self._segment_path = lambda: "minute15-optics-report" + "[optics-report='" + str(self.optics_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15Optics.Minute15OpticsReports.Minute15OpticsReport, ['optics_report'], name, value)





                class Minute15secyif(Entity):
                    """
                    Configure secy\-if performance monitoring
                    
                    .. attribute:: minute15secyif_reports
                    
                    	set secyif TCA reporting status
                    	**type**\:  :py:class:`Minute15secyifReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports>`
                    
                    .. attribute:: minute15secyif_thresholds
                    
                    	Configure threshold on secyif parameters
                    	**type**\:  :py:class:`Minute15secyifThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif, self).__init__()

                        self.yang_name = "minute15secyif"
                        self.yang_parent_name = "minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15secyif-reports", ("minute15secyif_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports)), ("minute15secyif-thresholds", ("minute15secyif_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds))])
                        self._leafs = OrderedDict()

                        self.minute15secyif_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports()
                        self.minute15secyif_reports.parent = self
                        self._children_name_map["minute15secyif_reports"] = "minute15secyif-reports"

                        self.minute15secyif_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds()
                        self.minute15secyif_thresholds.parent = self
                        self._children_name_map["minute15secyif_thresholds"] = "minute15secyif-thresholds"
                        self._segment_path = lambda: "minute15secyif"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif, [], name, value)


                    class Minute15secyifReports(Entity):
                        """
                        set secyif TCA reporting status
                        
                        .. attribute:: minute15secyif_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15secyifReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports.Minute15secyifReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports, self).__init__()

                            self.yang_name = "minute15secyif-reports"
                            self.yang_parent_name = "minute15secyif"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15secyif-report", ("minute15secyif_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports.Minute15secyifReport))])
                            self._leafs = OrderedDict()

                            self.minute15secyif_report = YList(self)
                            self._segment_path = lambda: "minute15secyif-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports, [], name, value)


                        class Minute15secyifReport(Entity):
                            """
                            none
                            
                            .. attribute:: secyif_report  (key)
                            
                            	Secyif Report Type
                            	**type**\:  :py:class:`SecyifReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyifReport>`
                            
                            .. attribute:: enable
                            
                            	Enabled Secyif Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports.Minute15secyifReport, self).__init__()

                                self.yang_name = "minute15secyif-report"
                                self.yang_parent_name = "minute15secyif-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyif_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyif_report', (YLeaf(YType.enumeration, 'secyif-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyifReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secyif_report = None
                                self.enable = None
                                self._segment_path = lambda: "minute15secyif-report" + "[secyif-report='" + str(self.secyif_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifReports.Minute15secyifReport, ['secyif_report', 'enable'], name, value)




                    class Minute15secyifThresholds(Entity):
                        """
                        Configure threshold on secyif parameters
                        
                        .. attribute:: minute15secyif_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15secyifThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds.Minute15secyifThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds, self).__init__()

                            self.yang_name = "minute15secyif-thresholds"
                            self.yang_parent_name = "minute15secyif"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15secyif-threshold", ("minute15secyif_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds.Minute15secyifThreshold))])
                            self._leafs = OrderedDict()

                            self.minute15secyif_threshold = YList(self)
                            self._segment_path = lambda: "minute15secyif-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds, [], name, value)


                        class Minute15secyifThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secyif_threshold  (key)
                            
                            	Secyif Threshold Type
                            	**type**\:  :py:class:`SecyifThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyifThreshold>`
                            
                            .. attribute:: secyif_threshold_value
                            
                            	Secyif Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds.Minute15secyifThreshold, self).__init__()

                                self.yang_name = "minute15secyif-threshold"
                                self.yang_parent_name = "minute15secyif-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyif_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyif_threshold', (YLeaf(YType.enumeration, 'secyif-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyifThreshold', '')])),
                                    ('secyif_threshold_value', (YLeaf(YType.uint32, 'secyif-threshold-value'), ['int'])),
                                ])
                                self.secyif_threshold = None
                                self.secyif_threshold_value = None
                                self._segment_path = lambda: "minute15secyif-threshold" + "[secyif-threshold='" + str(self.secyif_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyif.Minute15secyifThresholds.Minute15secyifThreshold, ['secyif_threshold', 'secyif_threshold_value'], name, value)





                class Minute15secyrx(Entity):
                    """
                    Configure secy\-rx performance monitoring
                    
                    .. attribute:: minute15secyrx_reports
                    
                    	set secyrx TCA reporting status
                    	**type**\:  :py:class:`Minute15secyrxReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports>`
                    
                    .. attribute:: minute15secyrx_thresholds
                    
                    	Configure threshold on secyrx parameters
                    	**type**\:  :py:class:`Minute15secyrxThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx, self).__init__()

                        self.yang_name = "minute15secyrx"
                        self.yang_parent_name = "minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15secyrx-reports", ("minute15secyrx_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports)), ("minute15secyrx-thresholds", ("minute15secyrx_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds))])
                        self._leafs = OrderedDict()

                        self.minute15secyrx_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports()
                        self.minute15secyrx_reports.parent = self
                        self._children_name_map["minute15secyrx_reports"] = "minute15secyrx-reports"

                        self.minute15secyrx_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds()
                        self.minute15secyrx_thresholds.parent = self
                        self._children_name_map["minute15secyrx_thresholds"] = "minute15secyrx-thresholds"
                        self._segment_path = lambda: "minute15secyrx"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx, [], name, value)


                    class Minute15secyrxReports(Entity):
                        """
                        set secyrx TCA reporting status
                        
                        .. attribute:: minute15secyrx_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15secyrxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports.Minute15secyrxReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports, self).__init__()

                            self.yang_name = "minute15secyrx-reports"
                            self.yang_parent_name = "minute15secyrx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15secyrx-report", ("minute15secyrx_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports.Minute15secyrxReport))])
                            self._leafs = OrderedDict()

                            self.minute15secyrx_report = YList(self)
                            self._segment_path = lambda: "minute15secyrx-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports, [], name, value)


                        class Minute15secyrxReport(Entity):
                            """
                            none
                            
                            .. attribute:: secyrx_report  (key)
                            
                            	Secyrx Report Type
                            	**type**\:  :py:class:`SecyrxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyrxReport>`
                            
                            .. attribute:: enable
                            
                            	Enabled Secyrx Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports.Minute15secyrxReport, self).__init__()

                                self.yang_name = "minute15secyrx-report"
                                self.yang_parent_name = "minute15secyrx-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyrx_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyrx_report', (YLeaf(YType.enumeration, 'secyrx-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyrxReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secyrx_report = None
                                self.enable = None
                                self._segment_path = lambda: "minute15secyrx-report" + "[secyrx-report='" + str(self.secyrx_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxReports.Minute15secyrxReport, ['secyrx_report', 'enable'], name, value)




                    class Minute15secyrxThresholds(Entity):
                        """
                        Configure threshold on secyrx parameters
                        
                        .. attribute:: minute15secyrx_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15secyrxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds.Minute15secyrxThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds, self).__init__()

                            self.yang_name = "minute15secyrx-thresholds"
                            self.yang_parent_name = "minute15secyrx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15secyrx-threshold", ("minute15secyrx_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds.Minute15secyrxThreshold))])
                            self._leafs = OrderedDict()

                            self.minute15secyrx_threshold = YList(self)
                            self._segment_path = lambda: "minute15secyrx-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds, [], name, value)


                        class Minute15secyrxThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secyrx_threshold  (key)
                            
                            	Secyrx Threshold Type
                            	**type**\:  :py:class:`SecyrxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecyrxThreshold>`
                            
                            .. attribute:: secyrx_threshold_value
                            
                            	Secyrx Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds.Minute15secyrxThreshold, self).__init__()

                                self.yang_name = "minute15secyrx-threshold"
                                self.yang_parent_name = "minute15secyrx-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secyrx_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secyrx_threshold', (YLeaf(YType.enumeration, 'secyrx-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecyrxThreshold', '')])),
                                    ('secyrx_threshold_value', (YLeaf(YType.uint32, 'secyrx-threshold-value'), ['int'])),
                                ])
                                self.secyrx_threshold = None
                                self.secyrx_threshold_value = None
                                self._segment_path = lambda: "minute15secyrx-threshold" + "[secyrx-threshold='" + str(self.secyrx_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secyrx.Minute15secyrxThresholds.Minute15secyrxThreshold, ['secyrx_threshold', 'secyrx_threshold_value'], name, value)





                class Minute15pcs(Entity):
                    """
                    Configure pcs performance monitoring
                    
                    .. attribute:: minute15pcs_reports
                    
                    	set pcs TCA reporting status
                    	**type**\:  :py:class:`Minute15pcsReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports>`
                    
                    .. attribute:: minute15pcs_thresholds
                    
                    	Configure pcs threshold
                    	**type**\:  :py:class:`Minute15pcsThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs, self).__init__()

                        self.yang_name = "minute15pcs"
                        self.yang_parent_name = "minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15pcs-reports", ("minute15pcs_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports)), ("minute15pcs-thresholds", ("minute15pcs_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds))])
                        self._leafs = OrderedDict()

                        self.minute15pcs_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports()
                        self.minute15pcs_reports.parent = self
                        self._children_name_map["minute15pcs_reports"] = "minute15pcs-reports"

                        self.minute15pcs_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds()
                        self.minute15pcs_thresholds.parent = self
                        self._children_name_map["minute15pcs_thresholds"] = "minute15pcs-thresholds"
                        self._segment_path = lambda: "minute15pcs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs, [], name, value)


                    class Minute15pcsReports(Entity):
                        """
                        set pcs TCA reporting status
                        
                        .. attribute:: minute15pcs_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15pcsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports.Minute15pcsReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports, self).__init__()

                            self.yang_name = "minute15pcs-reports"
                            self.yang_parent_name = "minute15pcs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15pcs-report", ("minute15pcs_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports.Minute15pcsReport))])
                            self._leafs = OrderedDict()

                            self.minute15pcs_report = YList(self)
                            self._segment_path = lambda: "minute15pcs-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports, [], name, value)


                        class Minute15pcsReport(Entity):
                            """
                            none
                            
                            .. attribute:: pcs_report  (key)
                            
                            	Pcs Report Type
                            	**type**\:  :py:class:`PcsReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PcsReport>`
                            
                            .. attribute:: enable
                            
                            	PCS Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports.Minute15pcsReport, self).__init__()

                                self.yang_name = "minute15pcs-report"
                                self.yang_parent_name = "minute15pcs-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['pcs_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pcs_report', (YLeaf(YType.enumeration, 'pcs-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PcsReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.pcs_report = None
                                self.enable = None
                                self._segment_path = lambda: "minute15pcs-report" + "[pcs-report='" + str(self.pcs_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsReports.Minute15pcsReport, ['pcs_report', 'enable'], name, value)




                    class Minute15pcsThresholds(Entity):
                        """
                        Configure pcs threshold
                        
                        .. attribute:: minute15pcs_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15pcsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds.Minute15pcsThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds, self).__init__()

                            self.yang_name = "minute15pcs-thresholds"
                            self.yang_parent_name = "minute15pcs"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15pcs-threshold", ("minute15pcs_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds.Minute15pcsThreshold))])
                            self._leafs = OrderedDict()

                            self.minute15pcs_threshold = YList(self)
                            self._segment_path = lambda: "minute15pcs-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds, [], name, value)


                        class Minute15pcsThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: pcs_threshold  (key)
                            
                            	Pcs Threshold Type
                            	**type**\:  :py:class:`PcsThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.PcsThreshold>`
                            
                            .. attribute:: pcs_threshold_value
                            
                            	Pcs Threshold Value
                            	**type**\: str
                            
                            	**length:** 1..20
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds.Minute15pcsThreshold, self).__init__()

                                self.yang_name = "minute15pcs-threshold"
                                self.yang_parent_name = "minute15pcs-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['pcs_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('pcs_threshold', (YLeaf(YType.enumeration, 'pcs-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'PcsThreshold', '')])),
                                    ('pcs_threshold_value', (YLeaf(YType.str, 'pcs-threshold-value'), ['str'])),
                                ])
                                self.pcs_threshold = None
                                self.pcs_threshold_value = None
                                self._segment_path = lambda: "minute15pcs-threshold" + "[pcs-threshold='" + str(self.pcs_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15pcs.Minute15pcsThresholds.Minute15pcsThreshold, ['pcs_threshold', 'pcs_threshold_value'], name, value)





                class Minute15fec(Entity):
                    """
                    Configure fec g709 performance monitoring
                    
                    .. attribute:: minute15fec_thresholds
                    
                    	Configure fec threshold
                    	**type**\:  :py:class:`Minute15fecThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds>`
                    
                    .. attribute:: minute15fec_reports
                    
                    	set fec TCA reporting status
                    	**type**\:  :py:class:`Minute15fecReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec, self).__init__()

                        self.yang_name = "minute15fec"
                        self.yang_parent_name = "minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15fec-thresholds", ("minute15fec_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds)), ("minute15fec-reports", ("minute15fec_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports))])
                        self._leafs = OrderedDict()

                        self.minute15fec_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds()
                        self.minute15fec_thresholds.parent = self
                        self._children_name_map["minute15fec_thresholds"] = "minute15fec-thresholds"

                        self.minute15fec_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports()
                        self.minute15fec_reports.parent = self
                        self._children_name_map["minute15fec_reports"] = "minute15fec-reports"
                        self._segment_path = lambda: "minute15fec"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec, [], name, value)


                    class Minute15fecThresholds(Entity):
                        """
                        Configure fec threshold
                        
                        .. attribute:: minute15fec_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15fecThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds.Minute15fecThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds, self).__init__()

                            self.yang_name = "minute15fec-thresholds"
                            self.yang_parent_name = "minute15fec"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15fec-threshold", ("minute15fec_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds.Minute15fecThreshold))])
                            self._leafs = OrderedDict()

                            self.minute15fec_threshold = YList(self)
                            self._segment_path = lambda: "minute15fec-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds, [], name, value)


                        class Minute15fecThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: fec_threshold  (key)
                            
                            	Fec Threshold Type
                            	**type**\:  :py:class:`FecThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.FecThreshold>`
                            
                            .. attribute:: fec_threshold_value
                            
                            	Fec Threshold Value
                            	**type**\: str
                            
                            	**length:** 1..20
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds.Minute15fecThreshold, self).__init__()

                                self.yang_name = "minute15fec-threshold"
                                self.yang_parent_name = "minute15fec-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['fec_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fec_threshold', (YLeaf(YType.enumeration, 'fec-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'FecThreshold', '')])),
                                    ('fec_threshold_value', (YLeaf(YType.str, 'fec-threshold-value'), ['str'])),
                                ])
                                self.fec_threshold = None
                                self.fec_threshold_value = None
                                self._segment_path = lambda: "minute15fec-threshold" + "[fec-threshold='" + str(self.fec_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecThresholds.Minute15fecThreshold, ['fec_threshold', 'fec_threshold_value'], name, value)




                    class Minute15fecReports(Entity):
                        """
                        set fec TCA reporting status
                        
                        .. attribute:: minute15fec_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15fecReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports.Minute15fecReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports, self).__init__()

                            self.yang_name = "minute15fec-reports"
                            self.yang_parent_name = "minute15fec"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15fec-report", ("minute15fec_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports.Minute15fecReport))])
                            self._leafs = OrderedDict()

                            self.minute15fec_report = YList(self)
                            self._segment_path = lambda: "minute15fec-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports, [], name, value)


                        class Minute15fecReport(Entity):
                            """
                            none
                            
                            .. attribute:: fec_report  (key)
                            
                            	Fec Report Type
                            	**type**\:  :py:class:`FecReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.FecReport>`
                            
                            .. attribute:: enable
                            
                            	Fec Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports.Minute15fecReport, self).__init__()

                                self.yang_name = "minute15fec-report"
                                self.yang_parent_name = "minute15fec-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['fec_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('fec_report', (YLeaf(YType.enumeration, 'fec-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'FecReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.fec_report = None
                                self.enable = None
                                self._segment_path = lambda: "minute15fec-report" + "[fec-report='" + str(self.fec_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15fec.Minute15fecReports.Minute15fecReport, ['fec_report', 'enable'], name, value)





                class Minute15secytx(Entity):
                    """
                    Configure secy\-tx performance monitoring
                    
                    .. attribute:: minute15secytx_reports
                    
                    	set secytx TCA reporting status
                    	**type**\:  :py:class:`Minute15secytxReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports>`
                    
                    .. attribute:: minute15secytx_thresholds
                    
                    	Configure threshold on secytx parameters
                    	**type**\:  :py:class:`Minute15secytxThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx, self).__init__()

                        self.yang_name = "minute15secytx"
                        self.yang_parent_name = "minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("minute15secytx-reports", ("minute15secytx_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports)), ("minute15secytx-thresholds", ("minute15secytx_thresholds", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds))])
                        self._leafs = OrderedDict()

                        self.minute15secytx_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports()
                        self.minute15secytx_reports.parent = self
                        self._children_name_map["minute15secytx_reports"] = "minute15secytx-reports"

                        self.minute15secytx_thresholds = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds()
                        self.minute15secytx_thresholds.parent = self
                        self._children_name_map["minute15secytx_thresholds"] = "minute15secytx-thresholds"
                        self._segment_path = lambda: "minute15secytx"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx, [], name, value)


                    class Minute15secytxReports(Entity):
                        """
                        set secytx TCA reporting status
                        
                        .. attribute:: minute15secytx_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15secytxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports.Minute15secytxReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports, self).__init__()

                            self.yang_name = "minute15secytx-reports"
                            self.yang_parent_name = "minute15secytx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15secytx-report", ("minute15secytx_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports.Minute15secytxReport))])
                            self._leafs = OrderedDict()

                            self.minute15secytx_report = YList(self)
                            self._segment_path = lambda: "minute15secytx-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports, [], name, value)


                        class Minute15secytxReport(Entity):
                            """
                            none
                            
                            .. attribute:: secytx_report  (key)
                            
                            	Secytx Report Type
                            	**type**\:  :py:class:`SecytxReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecytxReport>`
                            
                            .. attribute:: enable
                            
                            	Enabled Secytx Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports.Minute15secytxReport, self).__init__()

                                self.yang_name = "minute15secytx-report"
                                self.yang_parent_name = "minute15secytx-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secytx_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secytx_report', (YLeaf(YType.enumeration, 'secytx-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecytxReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.secytx_report = None
                                self.enable = None
                                self._segment_path = lambda: "minute15secytx-report" + "[secytx-report='" + str(self.secytx_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxReports.Minute15secytxReport, ['secytx_report', 'enable'], name, value)




                    class Minute15secytxThresholds(Entity):
                        """
                        Configure threshold on secytx parameters
                        
                        .. attribute:: minute15secytx_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15secytxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds.Minute15secytxThreshold>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds, self).__init__()

                            self.yang_name = "minute15secytx-thresholds"
                            self.yang_parent_name = "minute15secytx"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15secytx-threshold", ("minute15secytx_threshold", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds.Minute15secytxThreshold))])
                            self._leafs = OrderedDict()

                            self.minute15secytx_threshold = YList(self)
                            self._segment_path = lambda: "minute15secytx-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds, [], name, value)


                        class Minute15secytxThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: secytx_threshold  (key)
                            
                            	Secytx Threshold Type
                            	**type**\:  :py:class:`SecytxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.SecytxThreshold>`
                            
                            .. attribute:: secytx_threshold_value
                            
                            	Secytx Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds.Minute15secytxThreshold, self).__init__()

                                self.yang_name = "minute15secytx-threshold"
                                self.yang_parent_name = "minute15secytx-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['secytx_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('secytx_threshold', (YLeaf(YType.enumeration, 'secytx-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'SecytxThreshold', '')])),
                                    ('secytx_threshold_value', (YLeaf(YType.uint32, 'secytx-threshold-value'), ['int'])),
                                ])
                                self.secytx_threshold = None
                                self.secytx_threshold_value = None
                                self._segment_path = lambda: "minute15secytx-threshold" + "[secytx-threshold='" + str(self.secytx_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15secytx.Minute15secytxThresholds.Minute15secytxThreshold, ['secytx_threshold', 'secytx_threshold_value'], name, value)





                class Minute15otn(Entity):
                    """
                    configure otn g709 performance monitoring
                    
                    .. attribute:: min15_otn_threshes
                    
                    	Configure threshold on otn parameters
                    	**type**\:  :py:class:`Min15OtnThreshes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes>`
                    
                    .. attribute:: minute15otn_reports
                    
                    	set otn TCA reporting status
                    	**type**\:  :py:class:`Minute15otnReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports>`
                    
                    

                    """

                    _prefix = 'pmengine-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn, self).__init__()

                        self.yang_name = "minute15otn"
                        self.yang_parent_name = "minute15"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("min15-otn-threshes", ("min15_otn_threshes", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes)), ("minute15otn-reports", ("minute15otn_reports", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports))])
                        self._leafs = OrderedDict()

                        self.min15_otn_threshes = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes()
                        self.min15_otn_threshes.parent = self
                        self._children_name_map["min15_otn_threshes"] = "min15-otn-threshes"

                        self.minute15otn_reports = InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports()
                        self.minute15otn_reports.parent = self
                        self._children_name_map["minute15otn_reports"] = "minute15otn-reports"
                        self._segment_path = lambda: "minute15otn"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn, [], name, value)


                    class Min15OtnThreshes(Entity):
                        """
                        Configure threshold on otn parameters
                        
                        .. attribute:: min15_otn_thresh
                        
                        	none
                        	**type**\: list of  		 :py:class:`Min15OtnThresh <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes.Min15OtnThresh>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes, self).__init__()

                            self.yang_name = "min15-otn-threshes"
                            self.yang_parent_name = "minute15otn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("min15-otn-thresh", ("min15_otn_thresh", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes.Min15OtnThresh))])
                            self._leafs = OrderedDict()

                            self.min15_otn_thresh = YList(self)
                            self._segment_path = lambda: "min15-otn-threshes"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes, [], name, value)


                        class Min15OtnThresh(Entity):
                            """
                            none
                            
                            .. attribute:: otn_threshold  (key)
                            
                            	Otn Threshold Type
                            	**type**\:  :py:class:`OtnThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnThreshold>`
                            
                            .. attribute:: otn_threshold_value
                            
                            	Otn Threshold Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes.Min15OtnThresh, self).__init__()

                                self.yang_name = "min15-otn-thresh"
                                self.yang_parent_name = "min15-otn-threshes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_threshold', (YLeaf(YType.enumeration, 'otn-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnThreshold', '')])),
                                    ('otn_threshold_value', (YLeaf(YType.uint32, 'otn-threshold-value'), ['int'])),
                                ])
                                self.otn_threshold = None
                                self.otn_threshold_value = None
                                self._segment_path = lambda: "min15-otn-thresh" + "[otn-threshold='" + str(self.otn_threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Min15OtnThreshes.Min15OtnThresh, ['otn_threshold', 'otn_threshold_value'], name, value)




                    class Minute15otnReports(Entity):
                        """
                        set otn TCA reporting status
                        
                        .. attribute:: minute15otn_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`Minute15otnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports.Minute15otnReport>`
                        
                        

                        """

                        _prefix = 'pmengine-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports, self).__init__()

                            self.yang_name = "minute15otn-reports"
                            self.yang_parent_name = "minute15otn"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("minute15otn-report", ("minute15otn_report", InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports.Minute15otnReport))])
                            self._leafs = OrderedDict()

                            self.minute15otn_report = YList(self)
                            self._segment_path = lambda: "minute15otn-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports, [], name, value)


                        class Minute15otnReport(Entity):
                            """
                            none
                            
                            .. attribute:: otn_report  (key)
                            
                            	Otn Report Type
                            	**type**\:  :py:class:`OtnReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.OtnReport>`
                            
                            .. attribute:: enable
                            
                            	Otn Report
                            	**type**\:  :py:class:`Report <ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg.Report>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'pmengine-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports.Minute15otnReport, self).__init__()

                                self.yang_name = "minute15otn-report"
                                self.yang_parent_name = "minute15otn-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['otn_report']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('otn_report', (YLeaf(YType.enumeration, 'otn-report'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'OtnReport', '')])),
                                    ('enable', (YLeaf(YType.enumeration, 'enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_pmengine_cfg', 'Report', '')])),
                                ])
                                self.otn_report = None
                                self.enable = None
                                self._segment_path = lambda: "minute15otn-report" + "[otn-report='" + str(self.otn_report) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.PerformanceManagement.Minute15.Minute15otn.Minute15otnReports.Minute15otnReport, ['otn_report', 'enable'], name, value)







        class Ptp(Entity):
            """
            Precision Time Protocol interface configuration
            
            .. attribute:: source_ipv6_address
            
            	Source IPv6 Address
            	**type**\:  :py:class:`SourceIpv6Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv6Address>`
            
            .. attribute:: announce_interval
            
            	Announce interval
            	**type**\:  :py:class:`AnnounceInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.AnnounceInterval>`
            
            .. attribute:: interop
            
            	Table for interop configuration
            	**type**\:  :py:class:`Interop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop>`
            
            .. attribute:: source_ipv4_address
            
            	Source IPv4 Address
            	**type**\:  :py:class:`SourceIpv4Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv4Address>`
            
            .. attribute:: slaves
            
            	Table for slave configuration
            	**type**\:  :py:class:`Slaves <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves>`
            
            .. attribute:: sync_interval
            
            	Sync interval
            	**type**\:  :py:class:`SyncInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.SyncInterval>`
            
            .. attribute:: masters
            
            	Table for master configuration
            	**type**\:  :py:class:`Masters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters>`
            
            .. attribute:: communication
            
            	Communication model
            	**type**\:  :py:class:`Communication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Communication>`
            
            .. attribute:: delay_request_minimum_interval
            
            	Minimum delay request interval
            	**type**\:  :py:class:`DelayRequestMinimumInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.DelayRequestMinimumInterval>`
            
            .. attribute:: sync_grant_duration
            
            	Sync unicast grant duration, in seconds
            	**type**\: int
            
            	**range:** 60..1000
            
            	**units**\: second
            
            	**default value**\: 300
            
            .. attribute:: general_cos
            
            	General COS
            	**type**\: int
            
            	**range:** 0..7
            
            	**default value**\: 6
            
            .. attribute:: enable
            
            	Enable the precision time protocol
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: sync_timeout
            
            	Sync timeout, in milliseconds
            	**type**\: int
            
            	**range:** 100..100000
            
            	**units**\: millisecond
            
            	**default value**\: 5000
            
            .. attribute:: transport
            
            	Transport
            	**type**\:  :py:class:`PtpEncap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpEncap>`
            
            	**default value**\: ipv4
            
            .. attribute:: profile
            
            	Precision Time Protocol configuration profile
            	**type**\: str
            
            .. attribute:: announce_timeout
            
            	Announce Timeout
            	**type**\: int
            
            	**range:** 2..10
            
            	**default value**\: 3
            
            .. attribute:: cos
            
            	COS
            	**type**\: int
            
            	**range:** 0..7
            
            	**default value**\: 6
            
            .. attribute:: ipv4ttl
            
            	IPv4 TTL
            	**type**\: int
            
            	**range:** 1..255
            
            	**default value**\: 255
            
            .. attribute:: port_state
            
            	Port state restriction
            	**type**\:  :py:class:`PtpPortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpPortState>`
            
            	**default value**\: any
            
            .. attribute:: delay_response_timeout
            
            	Delay\-Response timeout, in milliseconds
            	**type**\: int
            
            	**range:** 100..100000
            
            	**units**\: millisecond
            
            	**default value**\: 5000
            
            .. attribute:: local_priority
            
            	Local priority
            	**type**\: int
            
            	**range:** 1..255
            
            	**default value**\: 128
            
            .. attribute:: delay_response_grant_duration
            
            	Delay\-Response unicast grant duration, in seconds
            	**type**\: int
            
            	**range:** 60..1000
            
            	**units**\: second
            
            	**default value**\: 300
            
            .. attribute:: event_cos
            
            	Event COS
            	**type**\: int
            
            	**range:** 0..7
            
            	**default value**\: 6
            
            .. attribute:: dscp
            
            	DSCP
            	**type**\: int
            
            	**range:** 0..63
            
            	**default value**\: 46
            
            .. attribute:: ipv6_hop_limit
            
            	IPv6 Hop Limit
            	**type**\: int
            
            	**range:** 1..255
            
            	**default value**\: 255
            
            .. attribute:: general_dscp
            
            	General DSCP
            	**type**\: int
            
            	**range:** 0..63
            
            	**default value**\: 46
            
            .. attribute:: clock_operation
            
            	Clock Operation
            	**type**\:  :py:class:`PtpClockOperation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpClockOperation>`
            
            	**default value**\: two-step
            
            .. attribute:: announce_grant_duration
            
            	Announce unicast grant duration, in seconds
            	**type**\: int
            
            	**range:** 60..1000
            
            	**units**\: second
            
            	**default value**\: 300
            
            .. attribute:: unicast_grant_invalid_request
            
            	Invalid unicast grant request response
            	**type**\:  :py:class:`PtpInvalidUnicastGrantRequestResponse <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpInvalidUnicastGrantRequestResponse>`
            
            	**default value**\: reduce
            
            .. attribute:: event_dscp
            
            	Event DSCP
            	**type**\: int
            
            	**range:** 0..63
            
            	**default value**\: 46
            
            

            """

            _prefix = 'ptp-cfg'
            _revision = '2017-02-02'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ptp, self).__init__()

                self.yang_name = "ptp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("source-ipv6-address", ("source_ipv6_address", InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv6Address)), ("announce-interval", ("announce_interval", InterfaceConfigurations.InterfaceConfiguration.Ptp.AnnounceInterval)), ("interop", ("interop", InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop)), ("source-ipv4-address", ("source_ipv4_address", InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv4Address)), ("slaves", ("slaves", InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves)), ("sync-interval", ("sync_interval", InterfaceConfigurations.InterfaceConfiguration.Ptp.SyncInterval)), ("masters", ("masters", InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters)), ("communication", ("communication", InterfaceConfigurations.InterfaceConfiguration.Ptp.Communication)), ("delay-request-minimum-interval", ("delay_request_minimum_interval", InterfaceConfigurations.InterfaceConfiguration.Ptp.DelayRequestMinimumInterval))])
                self._leafs = OrderedDict([
                    ('sync_grant_duration', (YLeaf(YType.uint32, 'sync-grant-duration'), ['int'])),
                    ('general_cos', (YLeaf(YType.uint32, 'general-cos'), ['int'])),
                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                    ('sync_timeout', (YLeaf(YType.uint32, 'sync-timeout'), ['int'])),
                    ('transport', (YLeaf(YType.enumeration, 'transport'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpEncap', '')])),
                    ('profile', (YLeaf(YType.str, 'profile'), ['str'])),
                    ('announce_timeout', (YLeaf(YType.uint32, 'announce-timeout'), ['int'])),
                    ('cos', (YLeaf(YType.uint32, 'cos'), ['int'])),
                    ('ipv4ttl', (YLeaf(YType.uint32, 'ipv4ttl'), ['int'])),
                    ('port_state', (YLeaf(YType.enumeration, 'port-state'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpPortState', '')])),
                    ('delay_response_timeout', (YLeaf(YType.uint32, 'delay-response-timeout'), ['int'])),
                    ('local_priority', (YLeaf(YType.uint32, 'local-priority'), ['int'])),
                    ('delay_response_grant_duration', (YLeaf(YType.uint32, 'delay-response-grant-duration'), ['int'])),
                    ('event_cos', (YLeaf(YType.uint32, 'event-cos'), ['int'])),
                    ('dscp', (YLeaf(YType.uint32, 'dscp'), ['int'])),
                    ('ipv6_hop_limit', (YLeaf(YType.uint32, 'ipv6-hop-limit'), ['int'])),
                    ('general_dscp', (YLeaf(YType.uint32, 'general-dscp'), ['int'])),
                    ('clock_operation', (YLeaf(YType.enumeration, 'clock-operation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpClockOperation', '')])),
                    ('announce_grant_duration', (YLeaf(YType.uint32, 'announce-grant-duration'), ['int'])),
                    ('unicast_grant_invalid_request', (YLeaf(YType.enumeration, 'unicast-grant-invalid-request'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpInvalidUnicastGrantRequestResponse', '')])),
                    ('event_dscp', (YLeaf(YType.uint32, 'event-dscp'), ['int'])),
                ])
                self.sync_grant_duration = None
                self.general_cos = None
                self.enable = None
                self.sync_timeout = None
                self.transport = None
                self.profile = None
                self.announce_timeout = None
                self.cos = None
                self.ipv4ttl = None
                self.port_state = None
                self.delay_response_timeout = None
                self.local_priority = None
                self.delay_response_grant_duration = None
                self.event_cos = None
                self.dscp = None
                self.ipv6_hop_limit = None
                self.general_dscp = None
                self.clock_operation = None
                self.announce_grant_duration = None
                self.unicast_grant_invalid_request = None
                self.event_dscp = None

                self.source_ipv6_address = InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv6Address()
                self.source_ipv6_address.parent = self
                self._children_name_map["source_ipv6_address"] = "source-ipv6-address"

                self.announce_interval = InterfaceConfigurations.InterfaceConfiguration.Ptp.AnnounceInterval()
                self.announce_interval.parent = self
                self._children_name_map["announce_interval"] = "announce-interval"

                self.interop = InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop()
                self.interop.parent = self
                self._children_name_map["interop"] = "interop"

                self.source_ipv4_address = InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv4Address()
                self.source_ipv4_address.parent = self
                self._children_name_map["source_ipv4_address"] = "source-ipv4-address"

                self.slaves = InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves()
                self.slaves.parent = self
                self._children_name_map["slaves"] = "slaves"

                self.sync_interval = InterfaceConfigurations.InterfaceConfiguration.Ptp.SyncInterval()
                self.sync_interval.parent = self
                self._children_name_map["sync_interval"] = "sync-interval"

                self.masters = InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters()
                self.masters.parent = self
                self._children_name_map["masters"] = "masters"

                self.communication = InterfaceConfigurations.InterfaceConfiguration.Ptp.Communication()
                self.communication.parent = self
                self._children_name_map["communication"] = "communication"

                self.delay_request_minimum_interval = InterfaceConfigurations.InterfaceConfiguration.Ptp.DelayRequestMinimumInterval()
                self.delay_request_minimum_interval.parent = self
                self._children_name_map["delay_request_minimum_interval"] = "delay-request-minimum-interval"
                self._segment_path = lambda: "Cisco-IOS-XR-ptp-cfg:ptp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp, [u'sync_grant_duration', u'general_cos', u'enable', u'sync_timeout', u'transport', u'profile', u'announce_timeout', u'cos', u'ipv4ttl', u'port_state', u'delay_response_timeout', u'local_priority', u'delay_response_grant_duration', u'event_cos', u'dscp', u'ipv6_hop_limit', u'general_dscp', u'clock_operation', u'announce_grant_duration', u'unicast_grant_invalid_request', u'event_dscp'], name, value)


            class SourceIpv6Address(Entity):
                """
                Source IPv6 Address
                
                .. attribute:: enable
                
                	Enable source IPv6 address
                	**type**\: bool
                
                .. attribute:: source_ipv6
                
                	Source IPv6 address to use
                	**type**\: str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv6Address, self).__init__()

                    self.yang_name = "source-ipv6-address"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                        ('source_ipv6', (YLeaf(YType.str, 'source-ipv6'), ['str'])),
                    ])
                    self.enable = None
                    self.source_ipv6 = None
                    self._segment_path = lambda: "source-ipv6-address"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv6Address, [u'enable', u'source_ipv6'], name, value)



            class AnnounceInterval(Entity):
                """
                Announce interval
                
                .. attribute:: time_type
                
                	Interval or Frequency
                	**type**\:  :py:class:`PtpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTime>`
                
                	**default value**\: interval
                
                .. attribute:: time_period
                
                	Time Period
                	**type**\:  :py:class:`PtpTimePeriod <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTimePeriod>`
                
                	**default value**\: 2
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.AnnounceInterval, self).__init__()

                    self.yang_name = "announce-interval"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('time_type', (YLeaf(YType.enumeration, 'time-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTime', '')])),
                        ('time_period', (YLeaf(YType.enumeration, 'time-period'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTimePeriod', '')])),
                    ])
                    self.time_type = None
                    self.time_period = None
                    self._segment_path = lambda: "announce-interval"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.AnnounceInterval, [u'time_type', u'time_period'], name, value)



            class Interop(Entity):
                """
                Table for interop configuration
                
                .. attribute:: egress_conversion
                
                	Iteroperation configuration to be used on egress
                	**type**\:  :py:class:`EgressConversion <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion>`
                
                .. attribute:: ingress_conversion
                
                	Iteroperation configuration to be used on ingress
                	**type**\:  :py:class:`IngressConversion <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion>`
                
                .. attribute:: profile
                
                	Profile to interoperate with
                	**type**\:  :py:class:`PtpClockProfile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpClockProfile>`
                
                .. attribute:: domain
                
                	Domain number of the peer clock
                	**type**\: int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop, self).__init__()

                    self.yang_name = "interop"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("egress-conversion", ("egress_conversion", InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion)), ("ingress-conversion", ("ingress_conversion", InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion))])
                    self._leafs = OrderedDict([
                        ('profile', (YLeaf(YType.enumeration, 'profile'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpClockProfile', '')])),
                        ('domain', (YLeaf(YType.uint32, 'domain'), ['int'])),
                    ])
                    self.profile = None
                    self.domain = None

                    self.egress_conversion = InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion()
                    self.egress_conversion.parent = self
                    self._children_name_map["egress_conversion"] = "egress-conversion"

                    self.ingress_conversion = InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion()
                    self.ingress_conversion.parent = self
                    self._children_name_map["ingress_conversion"] = "ingress-conversion"
                    self._segment_path = lambda: "interop"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop, [u'profile', u'domain'], name, value)


                class EgressConversion(Entity):
                    """
                    Iteroperation configuration to be used on
                    egress
                    
                    .. attribute:: clock_class_mappings
                    
                    	Table for specific mappings for given clock class values
                    	**type**\:  :py:class:`ClockClassMappings <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings>`
                    
                    .. attribute:: clock_accuracy
                    
                    	Clock Accuracy value to use for the peer clock
                    	**type**\: int
                    
                    	**range:** 0..254
                    
                    .. attribute:: priority2
                    
                    	Priority2 value to use for the peer clock
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: clock_class_default
                    
                    	Default clock class to use when a more specific mapping is not available
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: offset_scaled_log_variance
                    
                    	OSLV value to use for the peer clock
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: priority1
                    
                    	Priority1 value to use for the peer clock
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ptp-cfg'
                    _revision = '2017-02-02'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion, self).__init__()

                        self.yang_name = "egress-conversion"
                        self.yang_parent_name = "interop"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("clock-class-mappings", ("clock_class_mappings", InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings))])
                        self._leafs = OrderedDict([
                            ('clock_accuracy', (YLeaf(YType.uint32, 'clock-accuracy'), ['int'])),
                            ('priority2', (YLeaf(YType.uint32, 'priority2'), ['int'])),
                            ('clock_class_default', (YLeaf(YType.uint32, 'clock-class-default'), ['int'])),
                            ('offset_scaled_log_variance', (YLeaf(YType.uint32, 'offset-scaled-log-variance'), ['int'])),
                            ('priority1', (YLeaf(YType.uint32, 'priority1'), ['int'])),
                        ])
                        self.clock_accuracy = None
                        self.priority2 = None
                        self.clock_class_default = None
                        self.offset_scaled_log_variance = None
                        self.priority1 = None

                        self.clock_class_mappings = InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings()
                        self.clock_class_mappings.parent = self
                        self._children_name_map["clock_class_mappings"] = "clock-class-mappings"
                        self._segment_path = lambda: "egress-conversion"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion, [u'clock_accuracy', u'priority2', u'clock_class_default', u'offset_scaled_log_variance', u'priority1'], name, value)


                    class ClockClassMappings(Entity):
                        """
                        Table for specific mappings for given clock
                        class values
                        
                        .. attribute:: clock_class_mapping
                        
                        	Mapping for a given clock class value
                        	**type**\: list of  		 :py:class:`ClockClassMapping <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings.ClockClassMapping>`
                        
                        

                        """

                        _prefix = 'ptp-cfg'
                        _revision = '2017-02-02'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings, self).__init__()

                            self.yang_name = "clock-class-mappings"
                            self.yang_parent_name = "egress-conversion"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("clock-class-mapping", ("clock_class_mapping", InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings.ClockClassMapping))])
                            self._leafs = OrderedDict()

                            self.clock_class_mapping = YList(self)
                            self._segment_path = lambda: "clock-class-mappings"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings, [], name, value)


                        class ClockClassMapping(Entity):
                            """
                            Mapping for a given clock class value
                            
                            .. attribute:: clock_class_from  (key)
                            
                            	Clock Class to map from
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: clock_class_to
                            
                            	Clock class to map to
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'ptp-cfg'
                            _revision = '2017-02-02'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings.ClockClassMapping, self).__init__()

                                self.yang_name = "clock-class-mapping"
                                self.yang_parent_name = "clock-class-mappings"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['clock_class_from']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('clock_class_from', (YLeaf(YType.uint32, 'clock-class-from'), ['int'])),
                                    ('clock_class_to', (YLeaf(YType.uint32, 'clock-class-to'), ['int'])),
                                ])
                                self.clock_class_from = None
                                self.clock_class_to = None
                                self._segment_path = lambda: "clock-class-mapping" + "[clock-class-from='" + str(self.clock_class_from) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.EgressConversion.ClockClassMappings.ClockClassMapping, [u'clock_class_from', u'clock_class_to'], name, value)





                class IngressConversion(Entity):
                    """
                    Iteroperation configuration to be used on
                    ingress
                    
                    .. attribute:: clock_class_mappings
                    
                    	Table for specific mappings for given clock class values
                    	**type**\:  :py:class:`ClockClassMappings <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings>`
                    
                    .. attribute:: clock_accuracy
                    
                    	Clock Accuracy value to use for the peer clock
                    	**type**\: int
                    
                    	**range:** 0..254
                    
                    .. attribute:: priority2
                    
                    	Priority2 value to use for the peer clock
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: clock_class_default
                    
                    	Default clock class to use when a more specific mapping is not available
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: offset_scaled_log_variance
                    
                    	OSLV value to use for the peer clock
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: priority1
                    
                    	Priority1 value to use for the peer clock
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ptp-cfg'
                    _revision = '2017-02-02'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion, self).__init__()

                        self.yang_name = "ingress-conversion"
                        self.yang_parent_name = "interop"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("clock-class-mappings", ("clock_class_mappings", InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings))])
                        self._leafs = OrderedDict([
                            ('clock_accuracy', (YLeaf(YType.uint32, 'clock-accuracy'), ['int'])),
                            ('priority2', (YLeaf(YType.uint32, 'priority2'), ['int'])),
                            ('clock_class_default', (YLeaf(YType.uint32, 'clock-class-default'), ['int'])),
                            ('offset_scaled_log_variance', (YLeaf(YType.uint32, 'offset-scaled-log-variance'), ['int'])),
                            ('priority1', (YLeaf(YType.uint32, 'priority1'), ['int'])),
                        ])
                        self.clock_accuracy = None
                        self.priority2 = None
                        self.clock_class_default = None
                        self.offset_scaled_log_variance = None
                        self.priority1 = None

                        self.clock_class_mappings = InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings()
                        self.clock_class_mappings.parent = self
                        self._children_name_map["clock_class_mappings"] = "clock-class-mappings"
                        self._segment_path = lambda: "ingress-conversion"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion, [u'clock_accuracy', u'priority2', u'clock_class_default', u'offset_scaled_log_variance', u'priority1'], name, value)


                    class ClockClassMappings(Entity):
                        """
                        Table for specific mappings for given clock
                        class values
                        
                        .. attribute:: clock_class_mapping
                        
                        	Mapping for a given clock class value
                        	**type**\: list of  		 :py:class:`ClockClassMapping <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings.ClockClassMapping>`
                        
                        

                        """

                        _prefix = 'ptp-cfg'
                        _revision = '2017-02-02'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings, self).__init__()

                            self.yang_name = "clock-class-mappings"
                            self.yang_parent_name = "ingress-conversion"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("clock-class-mapping", ("clock_class_mapping", InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings.ClockClassMapping))])
                            self._leafs = OrderedDict()

                            self.clock_class_mapping = YList(self)
                            self._segment_path = lambda: "clock-class-mappings"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings, [], name, value)


                        class ClockClassMapping(Entity):
                            """
                            Mapping for a given clock class value
                            
                            .. attribute:: clock_class_from  (key)
                            
                            	Clock Class to map from
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: clock_class_to
                            
                            	Clock class to map to
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'ptp-cfg'
                            _revision = '2017-02-02'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings.ClockClassMapping, self).__init__()

                                self.yang_name = "clock-class-mapping"
                                self.yang_parent_name = "clock-class-mappings"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['clock_class_from']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('clock_class_from', (YLeaf(YType.uint32, 'clock-class-from'), ['int'])),
                                    ('clock_class_to', (YLeaf(YType.uint32, 'clock-class-to'), ['int'])),
                                ])
                                self.clock_class_from = None
                                self.clock_class_to = None
                                self._segment_path = lambda: "clock-class-mapping" + "[clock-class-from='" + str(self.clock_class_from) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Interop.IngressConversion.ClockClassMappings.ClockClassMapping, [u'clock_class_from', u'clock_class_to'], name, value)






            class SourceIpv4Address(Entity):
                """
                Source IPv4 Address
                
                .. attribute:: enable
                
                	Enable source IP address
                	**type**\: bool
                
                .. attribute:: source_ip
                
                	Source IP address to use
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv4Address, self).__init__()

                    self.yang_name = "source-ipv4-address"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                        ('source_ip', (YLeaf(YType.str, 'source-ip'), ['str'])),
                    ])
                    self.enable = None
                    self.source_ip = None
                    self._segment_path = lambda: "source-ipv4-address"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.SourceIpv4Address, [u'enable', u'source_ip'], name, value)



            class Slaves(Entity):
                """
                Table for slave configuration
                
                .. attribute:: slave
                
                	Slave configuration
                	**type**\: list of  		 :py:class:`Slave <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave>`
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves, self).__init__()

                    self.yang_name = "slaves"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("slave", ("slave", InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave))])
                    self._leafs = OrderedDict()

                    self.slave = YList(self)
                    self._segment_path = lambda: "slaves"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves, [], name, value)


                class Slave(Entity):
                    """
                    Slave configuration
                    
                    .. attribute:: transport  (key)
                    
                    	Slave Transport Type
                    	**type**\:  :py:class:`PtpEncap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpEncap>`
                    
                    .. attribute:: ethernet
                    
                    	ethernet
                    	**type**\: list of  		 :py:class:`Ethernet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave.Ethernet>`
                    
                    .. attribute:: ipv4_or_ipv6
                    
                    	ipv4 or ipv6
                    	**type**\: list of  		 :py:class:`Ipv4OrIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave.Ipv4OrIpv6>`
                    
                    

                    """

                    _prefix = 'ptp-cfg'
                    _revision = '2017-02-02'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave, self).__init__()

                        self.yang_name = "slave"
                        self.yang_parent_name = "slaves"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['transport']
                        self._child_classes = OrderedDict([("ethernet", ("ethernet", InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave.Ethernet)), ("ipv4-or-ipv6", ("ipv4_or_ipv6", InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave.Ipv4OrIpv6))])
                        self._leafs = OrderedDict([
                            ('transport', (YLeaf(YType.enumeration, 'transport'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpEncap', '')])),
                        ])
                        self.transport = None

                        self.ethernet = YList(self)
                        self.ipv4_or_ipv6 = YList(self)
                        self._segment_path = lambda: "slave" + "[transport='" + str(self.transport) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave, [u'transport'], name, value)


                    class Ethernet(Entity):
                        """
                        ethernet
                        
                        .. attribute:: slave_mac_address  (key)
                        
                        	Slave MAC Address
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: non_negotiated
                        
                        	Enable non\-negotiated unicast on this interface
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'ptp-cfg'
                        _revision = '2017-02-02'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave.Ethernet, self).__init__()

                            self.yang_name = "ethernet"
                            self.yang_parent_name = "slave"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['slave_mac_address']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('slave_mac_address', (YLeaf(YType.str, 'slave-mac-address'), ['str'])),
                                ('non_negotiated', (YLeaf(YType.boolean, 'non-negotiated'), ['bool'])),
                            ])
                            self.slave_mac_address = None
                            self.non_negotiated = None
                            self._segment_path = lambda: "ethernet" + "[slave-mac-address='" + str(self.slave_mac_address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave.Ethernet, [u'slave_mac_address', u'non_negotiated'], name, value)



                    class Ipv4OrIpv6(Entity):
                        """
                        ipv4 or ipv6
                        
                        .. attribute:: slave_ip_address  (key)
                        
                        	Slave IP Address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: non_negotiated
                        
                        	Enable non\-negotiated unicast on this interface
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'ptp-cfg'
                        _revision = '2017-02-02'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave.Ipv4OrIpv6, self).__init__()

                            self.yang_name = "ipv4-or-ipv6"
                            self.yang_parent_name = "slave"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['slave_ip_address']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('slave_ip_address', (YLeaf(YType.str, 'slave-ip-address'), ['str','str'])),
                                ('non_negotiated', (YLeaf(YType.boolean, 'non-negotiated'), ['bool'])),
                            ])
                            self.slave_ip_address = None
                            self.non_negotiated = None
                            self._segment_path = lambda: "ipv4-or-ipv6" + "[slave-ip-address='" + str(self.slave_ip_address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Slaves.Slave.Ipv4OrIpv6, [u'slave_ip_address', u'non_negotiated'], name, value)





            class SyncInterval(Entity):
                """
                Sync interval
                
                .. attribute:: time_type
                
                	Interval or Frequency
                	**type**\:  :py:class:`PtpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTime>`
                
                	**default value**\: interval
                
                .. attribute:: time_period
                
                	Time Period
                	**type**\:  :py:class:`PtpTimePeriod <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTimePeriod>`
                
                	**default value**\: 1
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.SyncInterval, self).__init__()

                    self.yang_name = "sync-interval"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('time_type', (YLeaf(YType.enumeration, 'time-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTime', '')])),
                        ('time_period', (YLeaf(YType.enumeration, 'time-period'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTimePeriod', '')])),
                    ])
                    self.time_type = None
                    self.time_period = None
                    self._segment_path = lambda: "sync-interval"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.SyncInterval, [u'time_type', u'time_period'], name, value)



            class Masters(Entity):
                """
                Table for master configuration
                
                .. attribute:: master
                
                	Master configuration
                	**type**\: list of  		 :py:class:`Master <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master>`
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters, self).__init__()

                    self.yang_name = "masters"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("master", ("master", InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master))])
                    self._leafs = OrderedDict()

                    self.master = YList(self)
                    self._segment_path = lambda: "masters"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters, [], name, value)


                class Master(Entity):
                    """
                    Master configuration
                    
                    .. attribute:: transport  (key)
                    
                    	Master Transport Type
                    	**type**\:  :py:class:`PtpEncap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpEncap>`
                    
                    .. attribute:: ethernet
                    
                    	ethernet
                    	**type**\: list of  		 :py:class:`Ethernet <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ethernet>`
                    
                    .. attribute:: ipv4_or_ipv6
                    
                    	ipv4 or ipv6
                    	**type**\: list of  		 :py:class:`Ipv4OrIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ipv4OrIpv6>`
                    
                    

                    """

                    _prefix = 'ptp-cfg'
                    _revision = '2017-02-02'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master, self).__init__()

                        self.yang_name = "master"
                        self.yang_parent_name = "masters"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['transport']
                        self._child_classes = OrderedDict([("ethernet", ("ethernet", InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ethernet)), ("ipv4-or-ipv6", ("ipv4_or_ipv6", InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ipv4OrIpv6))])
                        self._leafs = OrderedDict([
                            ('transport', (YLeaf(YType.enumeration, 'transport'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpEncap', '')])),
                        ])
                        self.transport = None

                        self.ethernet = YList(self)
                        self.ipv4_or_ipv6 = YList(self)
                        self._segment_path = lambda: "master" + "[transport='" + str(self.transport) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master, [u'transport'], name, value)


                    class Ethernet(Entity):
                        """
                        ethernet
                        
                        .. attribute:: master_mac_address  (key)
                        
                        	Master MAC Address \- only used if Transport is Ethernet
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: delay_asymmetry
                        
                        	The delay asymmetry for this master
                        	**type**\:  :py:class:`DelayAsymmetry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ethernet.DelayAsymmetry>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: master_clock_class
                        
                        	Master clock class
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: non_negotiated
                        
                        	Enable non\-negotiated unicast on this interface
                        	**type**\: bool
                        
                        .. attribute:: priority
                        
                        	Master priority
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: communication
                        
                        	Communication Model
                        	**type**\:  :py:class:`PtpTransport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTransport>`
                        
                        	**default value**\: unicast
                        
                        

                        """

                        _prefix = 'ptp-cfg'
                        _revision = '2017-02-02'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ethernet, self).__init__()

                            self.yang_name = "ethernet"
                            self.yang_parent_name = "master"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['master_mac_address']
                            self._child_classes = OrderedDict([("delay-asymmetry", ("delay_asymmetry", InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ethernet.DelayAsymmetry))])
                            self._leafs = OrderedDict([
                                ('master_mac_address', (YLeaf(YType.str, 'master-mac-address'), ['str'])),
                                ('master_clock_class', (YLeaf(YType.uint32, 'master-clock-class'), ['int'])),
                                ('non_negotiated', (YLeaf(YType.boolean, 'non-negotiated'), ['bool'])),
                                ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                ('communication', (YLeaf(YType.enumeration, 'communication'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTransport', '')])),
                            ])
                            self.master_mac_address = None
                            self.master_clock_class = None
                            self.non_negotiated = None
                            self.priority = None
                            self.communication = None

                            self.delay_asymmetry = None
                            self._children_name_map["delay_asymmetry"] = "delay-asymmetry"
                            self._segment_path = lambda: "ethernet" + "[master-mac-address='" + str(self.master_mac_address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ethernet, [u'master_mac_address', u'master_clock_class', u'non_negotiated', u'priority', u'communication'], name, value)


                        class DelayAsymmetry(Entity):
                            """
                            The delay asymmetry for this master
                            
                            .. attribute:: magnitude
                            
                            	How much longer the master to slave path takes than the reverse
                            	**type**\: int
                            
                            	**range:** \-500000000..500000000
                            
                            	**mandatory**\: True
                            
                            .. attribute:: units
                            
                            	The units to use for the delay asymmetry
                            	**type**\:  :py:class:`PtpDelayAsymmetryUnits <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpDelayAsymmetryUnits>`
                            
                            	**mandatory**\: True
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ptp-cfg'
                            _revision = '2017-02-02'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ethernet.DelayAsymmetry, self).__init__()

                                self.yang_name = "delay-asymmetry"
                                self.yang_parent_name = "ethernet"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('magnitude', (YLeaf(YType.int32, 'magnitude'), ['int'])),
                                    ('units', (YLeaf(YType.enumeration, 'units'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpDelayAsymmetryUnits', '')])),
                                ])
                                self.magnitude = None
                                self.units = None
                                self._segment_path = lambda: "delay-asymmetry"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ethernet.DelayAsymmetry, [u'magnitude', u'units'], name, value)




                    class Ipv4OrIpv6(Entity):
                        """
                        ipv4 or ipv6
                        
                        .. attribute:: master_ip_address  (key)
                        
                        	Master IP Address \- used if Transport is not Ethernet
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: delay_asymmetry
                        
                        	The delay asymmetry for this master
                        	**type**\:  :py:class:`DelayAsymmetry <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ipv4OrIpv6.DelayAsymmetry>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: master_clock_class
                        
                        	Master clock class
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: non_negotiated
                        
                        	Enable non\-negotiated unicast on this interface
                        	**type**\: bool
                        
                        .. attribute:: priority
                        
                        	Master priority
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: communication
                        
                        	Communication Model
                        	**type**\:  :py:class:`PtpTransport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTransport>`
                        
                        	**default value**\: unicast
                        
                        

                        """

                        _prefix = 'ptp-cfg'
                        _revision = '2017-02-02'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ipv4OrIpv6, self).__init__()

                            self.yang_name = "ipv4-or-ipv6"
                            self.yang_parent_name = "master"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['master_ip_address']
                            self._child_classes = OrderedDict([("delay-asymmetry", ("delay_asymmetry", InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ipv4OrIpv6.DelayAsymmetry))])
                            self._leafs = OrderedDict([
                                ('master_ip_address', (YLeaf(YType.str, 'master-ip-address'), ['str','str'])),
                                ('master_clock_class', (YLeaf(YType.uint32, 'master-clock-class'), ['int'])),
                                ('non_negotiated', (YLeaf(YType.boolean, 'non-negotiated'), ['bool'])),
                                ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                ('communication', (YLeaf(YType.enumeration, 'communication'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTransport', '')])),
                            ])
                            self.master_ip_address = None
                            self.master_clock_class = None
                            self.non_negotiated = None
                            self.priority = None
                            self.communication = None

                            self.delay_asymmetry = None
                            self._children_name_map["delay_asymmetry"] = "delay-asymmetry"
                            self._segment_path = lambda: "ipv4-or-ipv6" + "[master-ip-address='" + str(self.master_ip_address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ipv4OrIpv6, [u'master_ip_address', u'master_clock_class', u'non_negotiated', u'priority', u'communication'], name, value)


                        class DelayAsymmetry(Entity):
                            """
                            The delay asymmetry for this master
                            
                            .. attribute:: magnitude
                            
                            	How much longer the master to slave path takes than the reverse
                            	**type**\: int
                            
                            	**range:** \-500000000..500000000
                            
                            	**mandatory**\: True
                            
                            .. attribute:: units
                            
                            	The units to use for the delay asymmetry
                            	**type**\:  :py:class:`PtpDelayAsymmetryUnits <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpDelayAsymmetryUnits>`
                            
                            	**mandatory**\: True
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ptp-cfg'
                            _revision = '2017-02-02'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ipv4OrIpv6.DelayAsymmetry, self).__init__()

                                self.yang_name = "delay-asymmetry"
                                self.yang_parent_name = "ipv4-or-ipv6"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('magnitude', (YLeaf(YType.int32, 'magnitude'), ['int'])),
                                    ('units', (YLeaf(YType.enumeration, 'units'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpDelayAsymmetryUnits', '')])),
                                ])
                                self.magnitude = None
                                self.units = None
                                self._segment_path = lambda: "delay-asymmetry"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Masters.Master.Ipv4OrIpv6.DelayAsymmetry, [u'magnitude', u'units'], name, value)






            class Communication(Entity):
                """
                Communication model
                
                .. attribute:: model
                
                	Communication Model
                	**type**\:  :py:class:`PtpTransport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTransport>`
                
                	**default value**\: unicast
                
                .. attribute:: target_address_set
                
                	Target address set
                	**type**\: bool
                
                	**default value**\: false
                
                .. attribute:: target_address
                
                	Target address
                	**type**\: str
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.Communication, self).__init__()

                    self.yang_name = "communication"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('model', (YLeaf(YType.enumeration, 'model'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTransport', '')])),
                        ('target_address_set', (YLeaf(YType.boolean, 'target-address-set'), ['bool'])),
                        ('target_address', (YLeaf(YType.str, 'target-address'), ['str'])),
                    ])
                    self.model = None
                    self.target_address_set = None
                    self.target_address = None
                    self._segment_path = lambda: "communication"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.Communication, [u'model', u'target_address_set', u'target_address'], name, value)



            class DelayRequestMinimumInterval(Entity):
                """
                Minimum delay request interval
                
                .. attribute:: time_type
                
                	Interval or Frequency
                	**type**\:  :py:class:`PtpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTime>`
                
                	**default value**\: interval
                
                .. attribute:: time_period
                
                	Time Period
                	**type**\:  :py:class:`PtpTimePeriod <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes.PtpTimePeriod>`
                
                	**default value**\: 1
                
                

                """

                _prefix = 'ptp-cfg'
                _revision = '2017-02-02'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ptp.DelayRequestMinimumInterval, self).__init__()

                    self.yang_name = "delay-request-minimum-interval"
                    self.yang_parent_name = "ptp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('time_type', (YLeaf(YType.enumeration, 'time-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTime', '')])),
                        ('time_period', (YLeaf(YType.enumeration, 'time-period'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ptp_datatypes', 'PtpTimePeriod', '')])),
                    ])
                    self.time_type = None
                    self.time_period = None
                    self._segment_path = lambda: "delay-request-minimum-interval"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ptp.DelayRequestMinimumInterval, [u'time_type', u'time_period'], name, value)




        class EthernetControl(Entity):
            """
            EthernetControl
            
            .. attribute:: transceiver
            
            	Transceiver
            	**type**\:  :py:class:`Transceiver <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver>`
            
            .. attribute:: transport_mode
            
            	Set the transport mode on an interface
            	**type**\:  :py:class:`EtherCtrlTransportMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_lc_ethctrl_cfg.EtherCtrlTransportMode>`
            
            .. attribute:: small_frame_padding
            
            	Enable small frame padding on an interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'asr9k-lc-ethctrl-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.EthernetControl, self).__init__()

                self.yang_name = "ethernet-control"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("transceiver", ("transceiver", InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver))])
                self._leafs = OrderedDict([
                    ('transport_mode', (YLeaf(YType.enumeration, 'transport-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_lc_ethctrl_cfg', 'EtherCtrlTransportMode', '')])),
                    ('small_frame_padding', (YLeaf(YType.empty, 'small-frame-padding'), ['Empty'])),
                ])
                self.transport_mode = None
                self.small_frame_padding = None

                self.transceiver = InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver()
                self.transceiver.parent = self
                self._children_name_map["transceiver"] = "transceiver"
                self._segment_path = lambda: "Cisco-IOS-XR-asr9k-lc-ethctrl-cfg:ethernet-control"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetControl, ['transport_mode', 'small_frame_padding'], name, value)


            class Transceiver(Entity):
                """
                Transceiver
                
                .. attribute:: permit
                
                	Permit
                	**type**\:  :py:class:`Permit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver.Permit>`
                
                

                """

                _prefix = 'asr9k-lc-ethctrl-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver, self).__init__()

                    self.yang_name = "transceiver"
                    self.yang_parent_name = "ethernet-control"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("permit", ("permit", InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver.Permit))])
                    self._leafs = OrderedDict()

                    self.permit = InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver.Permit()
                    self.permit.parent = self
                    self._children_name_map["permit"] = "permit"
                    self._segment_path = lambda: "transceiver"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver, [], name, value)


                class Permit(Entity):
                    """
                    Permit
                    
                    .. attribute:: type
                    
                    	Permit pluggable type all
                    	**type**\:  :py:class:`PermitPluggable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_lc_ethctrl_cfg.PermitPluggable>`
                    
                    .. attribute:: pid
                    
                    	Permit pluggable PID (Product ID) all
                    	**type**\:  :py:class:`PermitPluggablePid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_lc_ethctrl_cfg.PermitPluggablePid>`
                    
                    

                    """

                    _prefix = 'asr9k-lc-ethctrl-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver.Permit, self).__init__()

                        self.yang_name = "permit"
                        self.yang_parent_name = "transceiver"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_lc_ethctrl_cfg', 'PermitPluggable', '')])),
                            ('pid', (YLeaf(YType.enumeration, 'pid'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_asr9k_lc_ethctrl_cfg', 'PermitPluggablePid', '')])),
                        ])
                        self.type = None
                        self.pid = None
                        self._segment_path = lambda: "permit"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetControl.Transceiver.Permit, ['type', 'pid'], name, value)





        class Pbr(Entity):
            """
            Interface PBR configuration
            
            .. attribute:: service_policy
            
            	PBR service policy configuration
            	**type**\:  :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Pbr.ServicePolicy>`
            
            .. attribute:: service_policy_in
            
            	Class for subscriber ingress policy
            	**type**\: str
            
            

            """

            _prefix = 'pbr-cfg'
            _revision = '2016-03-08'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Pbr, self).__init__()

                self.yang_name = "pbr"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.Pbr.ServicePolicy))])
                self._leafs = OrderedDict([
                    ('service_policy_in', (YLeaf(YType.str, 'service-policy-in'), ['str'])),
                ])
                self.service_policy_in = None

                self.service_policy = InterfaceConfigurations.InterfaceConfiguration.Pbr.ServicePolicy()
                self.service_policy.parent = self
                self._children_name_map["service_policy"] = "service-policy"
                self._segment_path = lambda: "Cisco-IOS-XR-pbr-cfg:pbr"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Pbr, ['service_policy_in'], name, value)


            class ServicePolicy(Entity):
                """
                PBR service policy configuration
                
                .. attribute:: input
                
                	Ingress service policy
                	**type**\: str
                
                

                """

                _prefix = 'pbr-cfg'
                _revision = '2016-03-08'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Pbr.ServicePolicy, self).__init__()

                    self.yang_name = "service-policy"
                    self.yang_parent_name = "pbr"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('input', (YLeaf(YType.str, 'input'), ['str'])),
                    ])
                    self.input = None
                    self._segment_path = lambda: "service-policy"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Pbr.ServicePolicy, ['input'], name, value)




        class TunnelIp(Entity):
            """
            IP over GRE encapsulation
            
            .. attribute:: mode
            
            	Tunnel encapsulation method
            	**type**\:  :py:class:`Mode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Mode>`
            
            .. attribute:: source
            
            	Configure source of tunnel
            	**type**\:  :py:class:`Source <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Source>`
            
            .. attribute:: key
            
            	Configure the key value for packets sent over this tunnel
            	**type**\:  :py:class:`Key <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Key>`
            
            .. attribute:: keepalive
            
            	Enable keepalive packets on this tunnel
            	**type**\:  :py:class:`Keepalive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Keepalive>`
            
            .. attribute:: bfd
            
            	Configure BFD for tunnel
            	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd>`
            
            .. attribute:: destination
            
            	Configure destination of tunnel
            	**type**\:  :py:class:`Destination <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Destination>`
            
            .. attribute:: allow_key
            
            	Enable flag bit to allow packets with GRE key
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: ttl
            
            	Configure the time\-to\-live for packets sent over this tunnel
            	**type**\: int
            
            	**range:** 1..255
            
            .. attribute:: tunnel_vrf
            
            	Tunnel vrf label name
            	**type**\: str
            
            	**length:** 1..32
            
            .. attribute:: tos
            
            	Configure Type of Service bits for this tunnel
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: disable
            
            	Disable DF bit (i.e. allow fragmentation)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'tunnel-gre-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.TunnelIp, self).__init__()

                self.yang_name = "tunnel-ip"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("mode", ("mode", InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Mode)), ("source", ("source", InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Source)), ("key", ("key", InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Key)), ("keepalive", ("keepalive", InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Keepalive)), ("bfd", ("bfd", InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd)), ("destination", ("destination", InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Destination))])
                self._leafs = OrderedDict([
                    ('allow_key', (YLeaf(YType.empty, 'allow-key'), ['Empty'])),
                    ('ttl', (YLeaf(YType.uint32, 'ttl'), ['int'])),
                    ('tunnel_vrf', (YLeaf(YType.str, 'tunnel-vrf'), ['str'])),
                    ('tos', (YLeaf(YType.uint32, 'tos'), ['int'])),
                    ('disable', (YLeaf(YType.uint32, 'disable'), ['int'])),
                ])
                self.allow_key = None
                self.ttl = None
                self.tunnel_vrf = None
                self.tos = None
                self.disable = None

                self.mode = InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Mode()
                self.mode.parent = self
                self._children_name_map["mode"] = "mode"

                self.source = InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Source()
                self.source.parent = self
                self._children_name_map["source"] = "source"

                self.key = InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Key()
                self.key.parent = self
                self._children_name_map["key"] = "key"

                self.keepalive = InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Keepalive()
                self.keepalive.parent = self
                self._children_name_map["keepalive"] = "keepalive"

                self.bfd = InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd()
                self.bfd.parent = self
                self._children_name_map["bfd"] = "bfd"

                self.destination = InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Destination()
                self.destination.parent = self
                self._children_name_map["destination"] = "destination"
                self._segment_path = lambda: "Cisco-IOS-XR-tunnel-gre-cfg:tunnel-ip"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelIp, ['allow_key', 'ttl', 'tunnel_vrf', 'tos', 'disable'], name, value)


            class Mode(Entity):
                """
                Tunnel encapsulation method
                
                .. attribute:: value
                
                	GRE IPV4 \- 1, GRE IPV6 \- 2, MGRE IPV4 \- 3, MGRE IPV6 \-4. IPV4 \- 5, IPV6 \- 6
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: mode_direction
                
                	Tunnel Mode Direction
                	**type**\:  :py:class:`TunnelModeDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_gre_cfg.TunnelModeDirection>`
                
                

                """

                _prefix = 'tunnel-gre-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Mode, self).__init__()

                    self.yang_name = "mode"
                    self.yang_parent_name = "tunnel-ip"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('value', (YLeaf(YType.uint32, 'value'), ['int'])),
                        ('mode_direction', (YLeaf(YType.enumeration, 'mode-direction'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_tunnel_gre_cfg', 'TunnelModeDirection', '')])),
                    ])
                    self.value = None
                    self.mode_direction = None
                    self._segment_path = lambda: "mode"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Mode, ['value', 'mode_direction'], name, value)



            class Source(Entity):
                """
                Configure source of tunnel
                
                .. attribute:: type
                
                	1 for Interface Name, 2 for IPv4 Address, 3 for IPv6 Address
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: address
                
                	IPV4 address of the tunnel source
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: interface_name
                
                	Name of tunnel source interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                
                .. attribute:: ipv6_address
                
                	IPV6 address of the tunnel source
                	**type**\: str
                
                

                """

                _prefix = 'tunnel-gre-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Source, self).__init__()

                    self.yang_name = "source"
                    self.yang_parent_name = "tunnel-ip"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('type', (YLeaf(YType.uint32, 'type'), ['int'])),
                        ('address', (YLeaf(YType.str, 'address'), ['str'])),
                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                    ])
                    self.type = None
                    self.address = None
                    self.interface_name = None
                    self.ipv6_address = None
                    self._segment_path = lambda: "source"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Source, ['type', 'address', 'interface_name', 'ipv6_address'], name, value)



            class Key(Entity):
                """
                Configure the key value for packets sent over
                this tunnel
                
                .. attribute:: entropy
                
                	Always set to true
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: value
                
                	Enter the KEY value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'tunnel-gre-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Key, self).__init__()

                    self.yang_name = "key"
                    self.yang_parent_name = "tunnel-ip"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('entropy', (YLeaf(YType.empty, 'entropy'), ['Empty'])),
                        ('value', (YLeaf(YType.uint32, 'value'), ['int'])),
                    ])
                    self.entropy = None
                    self.value = None
                    self._segment_path = lambda: "key"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Key, ['entropy', 'value'], name, value)



            class Keepalive(Entity):
                """
                Enable keepalive packets on this tunnel
                
                .. attribute:: keep_alive_period
                
                	Keepalive period in seconds (default 10 seconds)
                	**type**\: int
                
                	**range:** 1..32767
                
                .. attribute:: keep_alive_retries
                
                	Number of retries (default 3)
                	**type**\: int
                
                	**range:** 1..255
                
                

                """

                _prefix = 'tunnel-gre-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Keepalive, self).__init__()

                    self.yang_name = "keepalive"
                    self.yang_parent_name = "tunnel-ip"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('keep_alive_period', (YLeaf(YType.uint32, 'keep-alive-period'), ['int'])),
                        ('keep_alive_retries', (YLeaf(YType.uint32, 'keep-alive-retries'), ['int'])),
                    ])
                    self.keep_alive_period = None
                    self.keep_alive_retries = None
                    self._segment_path = lambda: "keepalive"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Keepalive, ['keep_alive_period', 'keep_alive_retries'], name, value)



            class Bfd(Entity):
                """
                Configure BFD for tunnel
                
                .. attribute:: destination
                
                	Configure BFD destination for tunnel
                	**type**\:  :py:class:`Destination <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd.Destination>`
                
                .. attribute:: minimum_interval
                
                	Configure minimum interval for BFD
                	**type**\: int
                
                	**range:** 150..30000
                
                .. attribute:: keepalive_period
                
                	Keepalive period in seconds
                	**type**\: int
                
                	**range:** 1..32767
                
                .. attribute:: retry
                
                	Configure Number of retries for BFD Keepalive
                	**type**\: int
                
                	**range:** 1..255
                
                .. attribute:: multiplier
                
                	Configure BFD multiplier
                	**type**\: int
                
                	**range:** 3..50
                
                

                """

                _prefix = 'tunnel-gre-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd, self).__init__()

                    self.yang_name = "bfd"
                    self.yang_parent_name = "tunnel-ip"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("destination", ("destination", InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd.Destination))])
                    self._leafs = OrderedDict([
                        ('minimum_interval', (YLeaf(YType.uint32, 'minimum-interval'), ['int'])),
                        ('keepalive_period', (YLeaf(YType.uint32, 'keepalive-period'), ['int'])),
                        ('retry', (YLeaf(YType.uint32, 'retry'), ['int'])),
                        ('multiplier', (YLeaf(YType.uint32, 'multiplier'), ['int'])),
                    ])
                    self.minimum_interval = None
                    self.keepalive_period = None
                    self.retry = None
                    self.multiplier = None

                    self.destination = InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd.Destination()
                    self.destination.parent = self
                    self._children_name_map["destination"] = "destination"
                    self._segment_path = lambda: "bfd"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd, ['minimum_interval', 'keepalive_period', 'retry', 'multiplier'], name, value)


                class Destination(Entity):
                    """
                    Configure BFD destination for tunnel
                    
                    .. attribute:: type
                    
                    	1 for IPv4 Address, 2 for IPv6 Address
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: address
                    
                    	IPV4 address of the BFD destination
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ipv6_address
                    
                    	IPV6 address of the BFD destination
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'tunnel-gre-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd.Destination, self).__init__()

                        self.yang_name = "destination"
                        self.yang_parent_name = "bfd"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('type', (YLeaf(YType.uint32, 'type'), ['int'])),
                            ('address', (YLeaf(YType.str, 'address'), ['str'])),
                            ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                        ])
                        self.type = None
                        self.address = None
                        self.ipv6_address = None
                        self._segment_path = lambda: "destination"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Bfd.Destination, ['type', 'address', 'ipv6_address'], name, value)




            class Destination(Entity):
                """
                Configure destination of tunnel
                
                .. attribute:: type
                
                	1 for IPv4 Address, 2 for IPv6 Address
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: address
                
                	IPV4 address of the tunnel destination
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ipv6_address
                
                	IPV6 address of the tunnel destination
                	**type**\: str
                
                .. attribute:: address_mask
                
                	IPv4 prefix length of the tunnel destination
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: prefix_list_name
                
                	Prefix\-list to validate destination's resolving prefix
                	**type**\: str
                
                	**length:** 1..64
                
                

                """

                _prefix = 'tunnel-gre-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Destination, self).__init__()

                    self.yang_name = "destination"
                    self.yang_parent_name = "tunnel-ip"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('type', (YLeaf(YType.uint32, 'type'), ['int'])),
                        ('address', (YLeaf(YType.str, 'address'), ['str'])),
                        ('ipv6_address', (YLeaf(YType.str, 'ipv6-address'), ['str'])),
                        ('address_mask', (YLeaf(YType.str, 'address-mask'), ['str'])),
                        ('prefix_list_name', (YLeaf(YType.str, 'prefix-list-name'), ['str'])),
                    ])
                    self.type = None
                    self.address = None
                    self.ipv6_address = None
                    self.address_mask = None
                    self.prefix_list_name = None
                    self._segment_path = lambda: "destination"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelIp.Destination, ['type', 'address', 'ipv6_address', 'address_mask', 'prefix_list_name'], name, value)




        class Optics(Entity):
            """
            Optics controller configuration
            
            .. attribute:: rx_thresholds
            
            	Configure Rx threshold
            	**type**\:  :py:class:`RxThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds>`
            
            .. attribute:: optics_network_srlgs
            
            	Configure Network srlgs
            	**type**\:  :py:class:`OpticsNetworkSrlgs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs>`
            
            .. attribute:: optics_dwdm_carrier
            
            	Configure optics DWDM Carrier
            	**type**\:  :py:class:`OpticsDwdmCarrier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsDwdmCarrier>`
            
            	**presence node**\: True
            
            .. attribute:: optics_lanes
            
            	Optics lanes
            	**type**\:  :py:class:`OpticsLanes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes>`
            
            .. attribute:: tx_thresholds
            
            	Configure Tx threshold
            	**type**\:  :py:class:`TxThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds>`
            
            .. attribute:: optics_transmit_power
            
            	Select power level (in units of 0.1dBm)
            	**type**\: int
            
            	**range:** \-190..20
            
            .. attribute:: optics_ots_channel_power_max_delta
            
            	Configure max delta among all measured channel powers 
            	**type**\: int
            
            	**range:** \-500..300
            
            .. attribute:: optics_loopback
            
            	Configure optics loopback mode 
            	**type**\:  :py:class:`OpticsLoopback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.OpticsLoopback>`
            
            	**default value**\: none
            
            .. attribute:: optics_ots_osri
            
            	Configure Optical safety remote interlock (OSRI)
            	**type**\: bool
            
            .. attribute:: optics_ots_amplifier_gain_degrade_high_threshold
            
            	Select Amplifier Gain Degrade High Threshold(in units of 0.1dBm)
            	**type**\: int
            
            	**range:** 0..500
            
            .. attribute:: optics_ots_rx_voa_attenuation
            
            	Select RX Voa Attenuation Setpoint(in units of 0.1dBm)
            	**type**\: int
            
            	**range:** 0..200
            
            .. attribute:: optics_fec
            
            	Configure optics fec 
            	**type**\:  :py:class:`OpticsFec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.OpticsFec>`
            
            	**default value**\: fec-none
            
            .. attribute:: optics_dgd_high_threshold
            
            	Select DGD high threshold(in units of 0.1ps)
            	**type**\: int
            
            	**range:** 0..18000
            
            .. attribute:: optics_ots_amplifier_channel_power
            
            	Select Amplifier Channel Power(in units of 0 .1dBm)
            	**type**\: int
            
            	**range:** \-500..300
            
            .. attribute:: optics_ots_amplifier_control_mode
            
            	Configure amplifier working mode
            	**type**\:  :py:class:`OpticsOtsAmpliControlMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.OpticsOtsAmpliControlMode>`
            
            .. attribute:: optics_ots_amplifier_gain
            
            	Select Amplifier Gain value(in units of 0.1dBm)
            	**type**\: int
            
            	**range:** 0..500
            
            .. attribute:: optics_ots_amplifier_gain_range
            
            	Normal or extended Ampli Gain Range
            	**type**\:  :py:class:`OpticsOtsAmpliGainRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.OpticsOtsAmpliGainRange>`
            
            .. attribute:: optics_ots_safety_control_mode
            
            	Configure safety Control Mode
            	**type**\:  :py:class:`OpticsOtsSafetyControlMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.OpticsOtsSafetyControlMode>`
            
            .. attribute:: optics_cd_min
            
            	Select min chromatic dispersion (in units of ps/nm)
            	**type**\: int
            
            	**range:** \-280000..280000
            
            .. attribute:: optics_ots_tx_voa_attenuation
            
            	Select TX Voa Attenuation Setpoint(in units of 0.1dBm)
            	**type**\: int
            
            	**range:** 0..200
            
            .. attribute:: optics_ots_amplifier_tilt
            
            	Select Amplifier Tilt value(in units of 0.1dB)
            	**type**\: int
            
            	**range:** \-50..50
            
            .. attribute:: optics_transmit_shutdown
            
            	Configure optics transmit laser shutdown 
            	**type**\: bool
            
            .. attribute:: optics_baud_rate
            
            	BaudRate(Max Length 10)
            	**type**\: str
            
            	**length:** 1..20
            
            .. attribute:: optics_performance_monitoring
            
            	Select Performance Monitoring as Enable or Disable
            	**type**\: bool
            
            	**default value**\: true
            
            .. attribute:: optics_cd_max
            
            	Select max chromatic dispersion (in units of ps/nm)
            	**type**\: int
            
            	**range:** \-280000..280000
            
            .. attribute:: optics_bits_per_symbol
            
            	BitsPerSymbol(Max Length 9)
            	**type**\: str
            
            	**length:** 1..20
            
            .. attribute:: optics_lbc_high_threshold
            
            	Select power level (in units of percentage)
            	**type**\: int
            
            	**range:** 0..100
            
            .. attribute:: optics_cd_high_threshold
            
            	Select chromatic dispersion high threshold(in units of ps/nm)
            	**type**\: int
            
            	**range:** \-280000..280000
            
            .. attribute:: optics_osnr_low_threshold
            
            	Select OSNR low threshold(in units of 0.01db)
            	**type**\: int
            
            	**range:** 0..4000
            
            .. attribute:: optics_ots_amplifier_gain_degrade_low_threshold
            
            	Select Amplifier Gain Degrade Low Threshold(in units of 0.1dBm)
            	**type**\: int
            
            	**range:** 0..500
            
            .. attribute:: optics_cd_low_threshold
            
            	Select chromatic dispersion low threshold(in units of ps/nm)
            	**type**\: int
            
            	**range:** \-280000..280000
            
            .. attribute:: breakout
            
            	breakout mode configuration
            	**type**\: str
            
            	**pattern:** (4x10)\|(4x25)
            
            

            """

            _prefix = 'controller-optics-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Optics, self).__init__()

                self.yang_name = "optics"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("rx-thresholds", ("rx_thresholds", InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds)), ("optics-network-srlgs", ("optics_network_srlgs", InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs)), ("optics-dwdm-carrier", ("optics_dwdm_carrier", InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsDwdmCarrier)), ("optics-lanes", ("optics_lanes", InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes)), ("tx-thresholds", ("tx_thresholds", InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds))])
                self._leafs = OrderedDict([
                    ('optics_transmit_power', (YLeaf(YType.int32, 'optics-transmit-power'), ['int'])),
                    ('optics_ots_channel_power_max_delta', (YLeaf(YType.int32, 'optics-ots-channel-power-max-delta'), ['int'])),
                    ('optics_loopback', (YLeaf(YType.enumeration, 'optics-loopback'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'OpticsLoopback', '')])),
                    ('optics_ots_osri', (YLeaf(YType.boolean, 'optics-ots-osri'), ['bool'])),
                    ('optics_ots_amplifier_gain_degrade_high_threshold', (YLeaf(YType.uint32, 'optics-ots-amplifier-gain-degrade-high-threshold'), ['int'])),
                    ('optics_ots_rx_voa_attenuation', (YLeaf(YType.uint32, 'optics-ots-rx-voa-attenuation'), ['int'])),
                    ('optics_fec', (YLeaf(YType.enumeration, 'optics-fec'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'OpticsFec', '')])),
                    ('optics_dgd_high_threshold', (YLeaf(YType.uint32, 'optics-dgd-high-threshold'), ['int'])),
                    ('optics_ots_amplifier_channel_power', (YLeaf(YType.int32, 'optics-ots-amplifier-channel-power'), ['int'])),
                    ('optics_ots_amplifier_control_mode', (YLeaf(YType.enumeration, 'optics-ots-amplifier-control-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'OpticsOtsAmpliControlMode', '')])),
                    ('optics_ots_amplifier_gain', (YLeaf(YType.uint32, 'optics-ots-amplifier-gain'), ['int'])),
                    ('optics_ots_amplifier_gain_range', (YLeaf(YType.enumeration, 'optics-ots-amplifier-gain-range'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'OpticsOtsAmpliGainRange', '')])),
                    ('optics_ots_safety_control_mode', (YLeaf(YType.enumeration, 'optics-ots-safety-control-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'OpticsOtsSafetyControlMode', '')])),
                    ('optics_cd_min', (YLeaf(YType.int32, 'optics-cd-min'), ['int'])),
                    ('optics_ots_tx_voa_attenuation', (YLeaf(YType.uint32, 'optics-ots-tx-voa-attenuation'), ['int'])),
                    ('optics_ots_amplifier_tilt', (YLeaf(YType.int32, 'optics-ots-amplifier-tilt'), ['int'])),
                    ('optics_transmit_shutdown', (YLeaf(YType.boolean, 'optics-transmit-shutdown'), ['bool'])),
                    ('optics_baud_rate', (YLeaf(YType.str, 'optics-baud-rate'), ['str'])),
                    ('optics_performance_monitoring', (YLeaf(YType.boolean, 'optics-performance-monitoring'), ['bool'])),
                    ('optics_cd_max', (YLeaf(YType.int32, 'optics-cd-max'), ['int'])),
                    ('optics_bits_per_symbol', (YLeaf(YType.str, 'optics-bits-per-symbol'), ['str'])),
                    ('optics_lbc_high_threshold', (YLeaf(YType.uint32, 'optics-lbc-high-threshold'), ['int'])),
                    ('optics_cd_high_threshold', (YLeaf(YType.int32, 'optics-cd-high-threshold'), ['int'])),
                    ('optics_osnr_low_threshold', (YLeaf(YType.uint32, 'optics-osnr-low-threshold'), ['int'])),
                    ('optics_ots_amplifier_gain_degrade_low_threshold', (YLeaf(YType.uint32, 'optics-ots-amplifier-gain-degrade-low-threshold'), ['int'])),
                    ('optics_cd_low_threshold', (YLeaf(YType.int32, 'optics-cd-low-threshold'), ['int'])),
                    ('breakout', (YLeaf(YType.str, 'Cisco-IOS-XR-optics-driver-cfg:breakout'), ['str'])),
                ])
                self.optics_transmit_power = None
                self.optics_ots_channel_power_max_delta = None
                self.optics_loopback = None
                self.optics_ots_osri = None
                self.optics_ots_amplifier_gain_degrade_high_threshold = None
                self.optics_ots_rx_voa_attenuation = None
                self.optics_fec = None
                self.optics_dgd_high_threshold = None
                self.optics_ots_amplifier_channel_power = None
                self.optics_ots_amplifier_control_mode = None
                self.optics_ots_amplifier_gain = None
                self.optics_ots_amplifier_gain_range = None
                self.optics_ots_safety_control_mode = None
                self.optics_cd_min = None
                self.optics_ots_tx_voa_attenuation = None
                self.optics_ots_amplifier_tilt = None
                self.optics_transmit_shutdown = None
                self.optics_baud_rate = None
                self.optics_performance_monitoring = None
                self.optics_cd_max = None
                self.optics_bits_per_symbol = None
                self.optics_lbc_high_threshold = None
                self.optics_cd_high_threshold = None
                self.optics_osnr_low_threshold = None
                self.optics_ots_amplifier_gain_degrade_low_threshold = None
                self.optics_cd_low_threshold = None
                self.breakout = None

                self.rx_thresholds = InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds()
                self.rx_thresholds.parent = self
                self._children_name_map["rx_thresholds"] = "rx-thresholds"

                self.optics_network_srlgs = InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs()
                self.optics_network_srlgs.parent = self
                self._children_name_map["optics_network_srlgs"] = "optics-network-srlgs"

                self.optics_dwdm_carrier = None
                self._children_name_map["optics_dwdm_carrier"] = "optics-dwdm-carrier"

                self.optics_lanes = InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes()
                self.optics_lanes.parent = self
                self._children_name_map["optics_lanes"] = "optics-lanes"

                self.tx_thresholds = InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds()
                self.tx_thresholds.parent = self
                self._children_name_map["tx_thresholds"] = "tx-thresholds"
                self._segment_path = lambda: "Cisco-IOS-XR-controller-optics-cfg:optics"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics, ['optics_transmit_power', 'optics_ots_channel_power_max_delta', 'optics_loopback', 'optics_ots_osri', 'optics_ots_amplifier_gain_degrade_high_threshold', 'optics_ots_rx_voa_attenuation', 'optics_fec', 'optics_dgd_high_threshold', 'optics_ots_amplifier_channel_power', 'optics_ots_amplifier_control_mode', 'optics_ots_amplifier_gain', 'optics_ots_amplifier_gain_range', 'optics_ots_safety_control_mode', 'optics_cd_min', 'optics_ots_tx_voa_attenuation', 'optics_ots_amplifier_tilt', 'optics_transmit_shutdown', 'optics_baud_rate', 'optics_performance_monitoring', 'optics_cd_max', 'optics_bits_per_symbol', 'optics_lbc_high_threshold', 'optics_cd_high_threshold', 'optics_osnr_low_threshold', 'optics_ots_amplifier_gain_degrade_low_threshold', 'optics_cd_low_threshold', 'breakout'], name, value)


            class RxThresholds(Entity):
                """
                Configure Rx threshold
                
                .. attribute:: rx_threshold
                
                	Optics RX Low or high threshold configuration
                	**type**\: list of  		 :py:class:`RxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds.RxThreshold>`
                
                

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds, self).__init__()

                    self.yang_name = "rx-thresholds"
                    self.yang_parent_name = "optics"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("rx-threshold", ("rx_threshold", InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds.RxThreshold))])
                    self._leafs = OrderedDict()

                    self.rx_threshold = YList(self)
                    self._segment_path = lambda: "rx-thresholds"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds, [], name, value)


                class RxThreshold(Entity):
                    """
                    Optics RX Low or high threshold configuration
                    
                    .. attribute:: rx_threshold_type  (key)
                    
                    	Low or high rx threshold
                    	**type**\:  :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.Threshold>`
                    
                    .. attribute:: rx_threshold
                    
                    	Select power level (in units of 0.1dBm)
                    	**type**\: int
                    
                    	**range:** \-400..300
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'controller-optics-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds.RxThreshold, self).__init__()

                        self.yang_name = "rx-threshold"
                        self.yang_parent_name = "rx-thresholds"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['rx_threshold_type']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('rx_threshold_type', (YLeaf(YType.enumeration, 'rx-threshold-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'Threshold', '')])),
                            ('rx_threshold', (YLeaf(YType.int32, 'rx-threshold'), ['int'])),
                        ])
                        self.rx_threshold_type = None
                        self.rx_threshold = None
                        self._segment_path = lambda: "rx-threshold" + "[rx-threshold-type='" + str(self.rx_threshold_type) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.RxThresholds.RxThreshold, ['rx_threshold_type', 'rx_threshold'], name, value)




            class OpticsNetworkSrlgs(Entity):
                """
                Configure Network srlgs
                
                .. attribute:: optics_network_srlg
                
                	Configure network srlg sets
                	**type**\: list of  		 :py:class:`OpticsNetworkSrlg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs.OpticsNetworkSrlg>`
                
                

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs, self).__init__()

                    self.yang_name = "optics-network-srlgs"
                    self.yang_parent_name = "optics"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("optics-network-srlg", ("optics_network_srlg", InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs.OpticsNetworkSrlg))])
                    self._leafs = OrderedDict()

                    self.optics_network_srlg = YList(self)
                    self._segment_path = lambda: "optics-network-srlgs"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs, [], name, value)


                class OpticsNetworkSrlg(Entity):
                    """
                    Configure network srlg sets
                    
                    .. attribute:: set_id  (key)
                    
                    	Set index
                    	**type**\: int
                    
                    	**range:** 1..17
                    
                    .. attribute:: srlg1
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg2
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg3
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg4
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg5
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg6
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    

                    """

                    _prefix = 'controller-optics-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs.OpticsNetworkSrlg, self).__init__()

                        self.yang_name = "optics-network-srlg"
                        self.yang_parent_name = "optics-network-srlgs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['set_id']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('set_id', (YLeaf(YType.uint32, 'set-id'), ['int'])),
                            ('srlg1', (YLeaf(YType.uint32, 'srlg1'), ['int'])),
                            ('srlg2', (YLeaf(YType.uint32, 'srlg2'), ['int'])),
                            ('srlg3', (YLeaf(YType.uint32, 'srlg3'), ['int'])),
                            ('srlg4', (YLeaf(YType.uint32, 'srlg4'), ['int'])),
                            ('srlg5', (YLeaf(YType.uint32, 'srlg5'), ['int'])),
                            ('srlg6', (YLeaf(YType.uint32, 'srlg6'), ['int'])),
                        ])
                        self.set_id = None
                        self.srlg1 = None
                        self.srlg2 = None
                        self.srlg3 = None
                        self.srlg4 = None
                        self.srlg5 = None
                        self.srlg6 = None
                        self._segment_path = lambda: "optics-network-srlg" + "[set-id='" + str(self.set_id) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsNetworkSrlgs.OpticsNetworkSrlg, ['set_id', 'srlg1', 'srlg2', 'srlg3', 'srlg4', 'srlg5', 'srlg6'], name, value)




            class OpticsDwdmCarrier(Entity):
                """
                Configure optics DWDM Carrier
                
                .. attribute:: grid_type
                
                	DWDM Channel Grid Type
                	**type**\:  :py:class:`OpticsDwdmCarrierGrid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.OpticsDwdmCarrierGrid>`
                
                	**mandatory**\: True
                
                .. attribute:: param_type
                
                	DWDM Channel Parameter Type ITU\-Channel or Frequency or Wavelength
                	**type**\:  :py:class:`OpticsDwdmCarrierParam <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.OpticsDwdmCarrierParam>`
                
                	**mandatory**\: True
                
                .. attribute:: param_value
                
                	Type ITU\-Channel Range 1\-100, Frequency Range 19115\-19610, Wavelength Range 1528773\-1568362, 100MHz Frequency Range 1911500\-1961000
                	**type**\: int
                
                	**range:** 1..1961000
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsDwdmCarrier, self).__init__()

                    self.yang_name = "optics-dwdm-carrier"
                    self.yang_parent_name = "optics"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('grid_type', (YLeaf(YType.enumeration, 'grid-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'OpticsDwdmCarrierGrid', '')])),
                        ('param_type', (YLeaf(YType.enumeration, 'param-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'OpticsDwdmCarrierParam', '')])),
                        ('param_value', (YLeaf(YType.uint32, 'param-value'), ['int'])),
                    ])
                    self.grid_type = None
                    self.param_type = None
                    self.param_value = None
                    self._segment_path = lambda: "optics-dwdm-carrier"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsDwdmCarrier, ['grid_type', 'param_type', 'param_value'], name, value)



            class OpticsLanes(Entity):
                """
                Optics lanes
                
                .. attribute:: optics_lane
                
                	Lane
                	**type**\: list of  		 :py:class:`OpticsLane <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes.OpticsLane>`
                
                

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes, self).__init__()

                    self.yang_name = "optics-lanes"
                    self.yang_parent_name = "optics"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("optics-lane", ("optics_lane", InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes.OpticsLane))])
                    self._leafs = OrderedDict()

                    self.optics_lane = YList(self)
                    self._segment_path = lambda: "optics-lanes"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes, [], name, value)


                class OpticsLane(Entity):
                    """
                    Lane
                    
                    .. attribute:: index  (key)
                    
                    	Lane Number
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: description
                    
                    	Configure description for this Lane
                    	**type**\: str
                    
                    	**length:** 1..255
                    
                    

                    """

                    _prefix = 'controller-optics-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes.OpticsLane, self).__init__()

                        self.yang_name = "optics-lane"
                        self.yang_parent_name = "optics-lanes"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['index']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('index', (YLeaf(YType.uint32, 'index'), ['int'])),
                            ('description', (YLeaf(YType.str, 'description'), ['str'])),
                        ])
                        self.index = None
                        self.description = None
                        self._segment_path = lambda: "optics-lane" + "[index='" + str(self.index) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.OpticsLanes.OpticsLane, ['index', 'description'], name, value)




            class TxThresholds(Entity):
                """
                Configure Tx threshold
                
                .. attribute:: tx_threshold
                
                	Optics TX Low or high threshold configuration
                	**type**\: list of  		 :py:class:`TxThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds.TxThreshold>`
                
                

                """

                _prefix = 'controller-optics-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds, self).__init__()

                    self.yang_name = "tx-thresholds"
                    self.yang_parent_name = "optics"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("tx-threshold", ("tx_threshold", InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds.TxThreshold))])
                    self._leafs = OrderedDict()

                    self.tx_threshold = YList(self)
                    self._segment_path = lambda: "tx-thresholds"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds, [], name, value)


                class TxThreshold(Entity):
                    """
                    Optics TX Low or high threshold configuration
                    
                    .. attribute:: tx_threshold_type  (key)
                    
                    	Low or high tx threshold
                    	**type**\:  :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg.Threshold>`
                    
                    .. attribute:: tx_threshold
                    
                    	Select power level (in units of 0.1dBm)
                    	**type**\: int
                    
                    	**range:** \-400..300
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'controller-optics-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds.TxThreshold, self).__init__()

                        self.yang_name = "tx-threshold"
                        self.yang_parent_name = "tx-thresholds"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['tx_threshold_type']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('tx_threshold_type', (YLeaf(YType.enumeration, 'tx-threshold-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_optics_cfg', 'Threshold', '')])),
                            ('tx_threshold', (YLeaf(YType.int32, 'tx-threshold'), ['int'])),
                        ])
                        self.tx_threshold_type = None
                        self.tx_threshold = None
                        self._segment_path = lambda: "tx-threshold" + "[tx-threshold-type='" + str(self.tx_threshold_type) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Optics.TxThresholds.TxThreshold, ['tx_threshold_type', 'tx_threshold'], name, value)





        class Loopbacks(Entity):
            """
            Configure Extended loopback (diagnostics)
            
            .. attribute:: loopback
            
            	Configure extended loopback mode
            	**type**\: list of  		 :py:class:`Loopback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Loopbacks.Loopback>`
            
            

            """

            _prefix = 'drivers-icpe-ethernet-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Loopbacks, self).__init__()

                self.yang_name = "loopbacks"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("loopback", ("loopback", InterfaceConfigurations.InterfaceConfiguration.Loopbacks.Loopback))])
                self._leafs = OrderedDict()

                self.loopback = YList(self)
                self._segment_path = lambda: "Cisco-IOS-XR-drivers-icpe-ethernet-cfg:loopbacks"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Loopbacks, [], name, value)


            class Loopback(Entity):
                """
                Configure extended loopback mode
                
                .. attribute:: level  (key)
                
                	Level
                	**type**\: int
                
                	**range:** 1..3
                
                .. attribute:: loopback
                
                	Loopback
                	**type**\:  :py:class:`ExtendedEthernetLoopback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_icpe_ethernet_cfg.ExtendedEthernetLoopback>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'drivers-icpe-ethernet-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Loopbacks.Loopback, self).__init__()

                    self.yang_name = "loopback"
                    self.yang_parent_name = "loopbacks"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['level']
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('level', (YLeaf(YType.uint32, 'level'), ['int'])),
                        ('loopback', (YLeaf(YType.enumeration, 'loopback'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_drivers_icpe_ethernet_cfg', 'ExtendedEthernetLoopback', '')])),
                    ])
                    self.level = None
                    self.loopback = None
                    self._segment_path = lambda: "loopback" + "[level='" + str(self.level) + "']"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Loopbacks.Loopback, ['level', 'loopback'], name, value)




        class Subscriber(Entity):
            """
            Subscribers on interface
            
            .. attribute:: ip_subscriber
            
            	IP subscribers on interface
            	**type**\:  :py:class:`IpSubscriber <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber>`
            
            

            """

            _prefix = 'subscriber-ipsub-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Subscriber, self).__init__()

                self.yang_name = "subscriber"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("ip-subscriber", ("ip_subscriber", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber))])
                self._leafs = OrderedDict()

                self.ip_subscriber = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber()
                self.ip_subscriber.parent = self
                self._children_name_map["ip_subscriber"] = "ip-subscriber"
                self._segment_path = lambda: "Cisco-IOS-XR-subscriber-ipsub-cfg:subscriber"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber, [], name, value)


            class IpSubscriber(Entity):
                """
                IP subscribers on interface
                
                .. attribute:: ipv4
                
                	IPv4 subscriber
                	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4>`
                
                .. attribute:: session_limit
                
                	IP subscriber session limit
                	**type**\:  :py:class:`SessionLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit>`
                
                .. attribute:: ipv6
                
                	IPv6 subscriber
                	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6>`
                
                .. attribute:: subscriber_templates
                
                	Enable subscriber templates on this access interface
                	**type**\: int
                
                	**range:** 1..10
                
                	**default value**\: 10
                
                .. attribute:: interface
                
                	Enable IP Static subscriber
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'subscriber-ipsub-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber, self).__init__()

                    self.yang_name = "ip-subscriber"
                    self.yang_parent_name = "subscriber"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ipv4", ("ipv4", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4)), ("session-limit", ("session_limit", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit)), ("ipv6", ("ipv6", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6))])
                    self._leafs = OrderedDict([
                        ('subscriber_templates', (YLeaf(YType.uint32, 'subscriber-templates'), ['int'])),
                        ('interface', (YLeaf(YType.empty, 'interface'), ['Empty'])),
                    ])
                    self.subscriber_templates = None
                    self.interface = None

                    self.ipv4 = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4()
                    self.ipv4.parent = self
                    self._children_name_map["ipv4"] = "ipv4"

                    self.session_limit = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit()
                    self.session_limit.parent = self
                    self._children_name_map["session_limit"] = "session-limit"

                    self.ipv6 = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6()
                    self.ipv6.parent = self
                    self._children_name_map["ipv6"] = "ipv6"
                    self._segment_path = lambda: "ip-subscriber"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber, ['subscriber_templates', 'interface'], name, value)


                class Ipv4(Entity):
                    """
                    IPv4 subscriber
                    
                    .. attribute:: l2_connected
                    
                    	L2 connected IPv4 subscriber
                    	**type**\:  :py:class:`L2Connected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected>`
                    
                    .. attribute:: routed
                    
                    	Routed IPv4 subscriber
                    	**type**\:  :py:class:`Routed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed>`
                    
                    

                    """

                    _prefix = 'subscriber-ipsub-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4, self).__init__()

                        self.yang_name = "ipv4"
                        self.yang_parent_name = "ip-subscriber"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("l2-connected", ("l2_connected", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected)), ("routed", ("routed", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed))])
                        self._leafs = OrderedDict()

                        self.l2_connected = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected()
                        self.l2_connected.parent = self
                        self._children_name_map["l2_connected"] = "l2-connected"

                        self.routed = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed()
                        self.routed.parent = self
                        self._children_name_map["routed"] = "routed"
                        self._segment_path = lambda: "ipv4"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4, [], name, value)


                    class L2Connected(Entity):
                        """
                        L2 connected IPv4 subscriber
                        
                        .. attribute:: initiator
                        
                        	Configure IP subscriber initiator
                        	**type**\:  :py:class:`Initiator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator>`
                        
                        

                        """

                        _prefix = 'subscriber-ipsub-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected, self).__init__()

                            self.yang_name = "l2-connected"
                            self.yang_parent_name = "ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("initiator", ("initiator", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator))])
                            self._leafs = OrderedDict()

                            self.initiator = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator()
                            self.initiator.parent = self
                            self._children_name_map["initiator"] = "initiator"
                            self._segment_path = lambda: "l2-connected"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected, [], name, value)


                        class Initiator(Entity):
                            """
                            Configure IP subscriber initiator
                            
                            .. attribute:: unclassified_source_fsol
                            
                            	Configure IP subscriber unclassified source initiator
                            	**type**\:  :py:class:`UnclassifiedSourceFsol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator.UnclassifiedSourceFsol>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: dhcp
                            
                            	Configure IP subscriber DHCP initiator
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'subscriber-ipsub-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator, self).__init__()

                                self.yang_name = "initiator"
                                self.yang_parent_name = "l2-connected"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("unclassified-source-fsol", ("unclassified_source_fsol", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator.UnclassifiedSourceFsol))])
                                self._leafs = OrderedDict([
                                    ('dhcp', (YLeaf(YType.empty, 'dhcp'), ['Empty'])),
                                ])
                                self.dhcp = None

                                self.unclassified_source_fsol = None
                                self._children_name_map["unclassified_source_fsol"] = "unclassified-source-fsol"
                                self._segment_path = lambda: "initiator"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator, ['dhcp'], name, value)


                            class UnclassifiedSourceFsol(Entity):
                                """
                                Configure IP subscriber unclassified source
                                initiator
                                
                                .. attribute:: enable
                                
                                	Enable unclassified source
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                	**mandatory**\: True
                                
                                .. attribute:: address_unique
                                
                                	Check for subscriber IP uniqueness during first sign of life
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'subscriber-ipsub-cfg'
                                _revision = '2017-09-07'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator.UnclassifiedSourceFsol, self).__init__()

                                    self.yang_name = "unclassified-source-fsol"
                                    self.yang_parent_name = "initiator"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('address_unique', (YLeaf(YType.boolean, 'address-unique'), ['bool'])),
                                    ])
                                    self.enable = None
                                    self.address_unique = None
                                    self._segment_path = lambda: "unclassified-source-fsol"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.L2Connected.Initiator.UnclassifiedSourceFsol, ['enable', 'address_unique'], name, value)





                    class Routed(Entity):
                        """
                        Routed IPv4 subscriber
                        
                        .. attribute:: initiator
                        
                        	Configure IP subscriber initiator
                        	**type**\:  :py:class:`Initiator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed.Initiator>`
                        
                        

                        """

                        _prefix = 'subscriber-ipsub-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed, self).__init__()

                            self.yang_name = "routed"
                            self.yang_parent_name = "ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("initiator", ("initiator", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed.Initiator))])
                            self._leafs = OrderedDict()

                            self.initiator = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed.Initiator()
                            self.initiator.parent = self
                            self._children_name_map["initiator"] = "initiator"
                            self._segment_path = lambda: "routed"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed, [], name, value)


                        class Initiator(Entity):
                            """
                            Configure IP subscriber initiator
                            
                            .. attribute:: unclassified_ip
                            
                            	Configure IPv4 subscriber unclassified source initiator
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: dhcp
                            
                            	Configure IPv4 subscriber DHCP initiator
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: dhcp_snoop
                            
                            	Configure IPv4 subscriber DHCP Snoop initiator
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'subscriber-ipsub-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed.Initiator, self).__init__()

                                self.yang_name = "initiator"
                                self.yang_parent_name = "routed"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('unclassified_ip', (YLeaf(YType.empty, 'unclassified-ip'), ['Empty'])),
                                    ('dhcp', (YLeaf(YType.empty, 'dhcp'), ['Empty'])),
                                    ('dhcp_snoop', (YLeaf(YType.empty, 'dhcp-snoop'), ['Empty'])),
                                ])
                                self.unclassified_ip = None
                                self.dhcp = None
                                self.dhcp_snoop = None
                                self._segment_path = lambda: "initiator"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv4.Routed.Initiator, ['unclassified_ip', 'dhcp', 'dhcp_snoop'], name, value)





                class SessionLimit(Entity):
                    """
                    IP subscriber session limit
                    
                    .. attribute:: total
                    
                    	Session limit for all sources
                    	**type**\:  :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.Total>`
                    
                    .. attribute:: unclassified_source
                    
                    	Session limit for unclassified sources
                    	**type**\:  :py:class:`UnclassifiedSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.UnclassifiedSource>`
                    
                    

                    """

                    _prefix = 'subscriber-ipsub-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit, self).__init__()

                        self.yang_name = "session-limit"
                        self.yang_parent_name = "ip-subscriber"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("total", ("total", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.Total)), ("unclassified-source", ("unclassified_source", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.UnclassifiedSource))])
                        self._leafs = OrderedDict()

                        self.total = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.Total()
                        self.total.parent = self
                        self._children_name_map["total"] = "total"

                        self.unclassified_source = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.UnclassifiedSource()
                        self.unclassified_source.parent = self
                        self._children_name_map["unclassified_source"] = "unclassified-source"
                        self._segment_path = lambda: "session-limit"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit, [], name, value)


                    class Total(Entity):
                        """
                        Session limit for all sources
                        
                        .. attribute:: per_vlan
                        
                        	Configure per\-vlan session limit for all sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**default value**\: 0
                        
                        

                        """

                        _prefix = 'subscriber-ipsub-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.Total, self).__init__()

                            self.yang_name = "total"
                            self.yang_parent_name = "session-limit"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('per_vlan', (YLeaf(YType.uint32, 'per-vlan'), ['int'])),
                            ])
                            self.per_vlan = None
                            self._segment_path = lambda: "total"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.Total, ['per_vlan'], name, value)



                    class UnclassifiedSource(Entity):
                        """
                        Session limit for unclassified sources
                        
                        .. attribute:: per_vlan
                        
                        	Configure per\-vlan session limit for unclassified sources
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**default value**\: 0
                        
                        

                        """

                        _prefix = 'subscriber-ipsub-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.UnclassifiedSource, self).__init__()

                            self.yang_name = "unclassified-source"
                            self.yang_parent_name = "session-limit"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('per_vlan', (YLeaf(YType.uint32, 'per-vlan'), ['int'])),
                            ])
                            self.per_vlan = None
                            self._segment_path = lambda: "unclassified-source"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.SessionLimit.UnclassifiedSource, ['per_vlan'], name, value)




                class Ipv6(Entity):
                    """
                    IPv6 subscriber
                    
                    .. attribute:: l2_connected
                    
                    	L2 connected IPv6 subscriber
                    	**type**\:  :py:class:`L2Connected <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected>`
                    
                    .. attribute:: routed
                    
                    	Routed IPv6 subscriber
                    	**type**\:  :py:class:`Routed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed>`
                    
                    

                    """

                    _prefix = 'subscriber-ipsub-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6, self).__init__()

                        self.yang_name = "ipv6"
                        self.yang_parent_name = "ip-subscriber"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("l2-connected", ("l2_connected", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected)), ("routed", ("routed", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed))])
                        self._leafs = OrderedDict()

                        self.l2_connected = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected()
                        self.l2_connected.parent = self
                        self._children_name_map["l2_connected"] = "l2-connected"

                        self.routed = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed()
                        self.routed.parent = self
                        self._children_name_map["routed"] = "routed"
                        self._segment_path = lambda: "ipv6"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6, [], name, value)


                    class L2Connected(Entity):
                        """
                        L2 connected IPv6 subscriber
                        
                        .. attribute:: initiator
                        
                        	Configure IPv6 subscriber initiator
                        	**type**\:  :py:class:`Initiator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator>`
                        
                        

                        """

                        _prefix = 'subscriber-ipsub-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected, self).__init__()

                            self.yang_name = "l2-connected"
                            self.yang_parent_name = "ipv6"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("initiator", ("initiator", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator))])
                            self._leafs = OrderedDict()

                            self.initiator = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator()
                            self.initiator.parent = self
                            self._children_name_map["initiator"] = "initiator"
                            self._segment_path = lambda: "l2-connected"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected, [], name, value)


                        class Initiator(Entity):
                            """
                            Configure IPv6 subscriber initiator
                            
                            .. attribute:: unclassified_source_fsol
                            
                            	Configure IP subscriber unclassified source initiator
                            	**type**\:  :py:class:`UnclassifiedSourceFsol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator.UnclassifiedSourceFsol>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: dhcp
                            
                            	Configure IPv6 subscriber DHCP initiator
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'subscriber-ipsub-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator, self).__init__()

                                self.yang_name = "initiator"
                                self.yang_parent_name = "l2-connected"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("unclassified-source-fsol", ("unclassified_source_fsol", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator.UnclassifiedSourceFsol))])
                                self._leafs = OrderedDict([
                                    ('dhcp', (YLeaf(YType.empty, 'dhcp'), ['Empty'])),
                                ])
                                self.dhcp = None

                                self.unclassified_source_fsol = None
                                self._children_name_map["unclassified_source_fsol"] = "unclassified-source-fsol"
                                self._segment_path = lambda: "initiator"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator, ['dhcp'], name, value)


                            class UnclassifiedSourceFsol(Entity):
                                """
                                Configure IP subscriber unclassified source
                                initiator
                                
                                .. attribute:: enable
                                
                                	Enable unclassified source
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                	**mandatory**\: True
                                
                                .. attribute:: address_unique
                                
                                	Check for subscriber IP uniqueness during first sign of life
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'subscriber-ipsub-cfg'
                                _revision = '2017-09-07'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator.UnclassifiedSourceFsol, self).__init__()

                                    self.yang_name = "unclassified-source-fsol"
                                    self.yang_parent_name = "initiator"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('address_unique', (YLeaf(YType.boolean, 'address-unique'), ['bool'])),
                                    ])
                                    self.enable = None
                                    self.address_unique = None
                                    self._segment_path = lambda: "unclassified-source-fsol"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.L2Connected.Initiator.UnclassifiedSourceFsol, ['enable', 'address_unique'], name, value)





                    class Routed(Entity):
                        """
                        Routed IPv6 subscriber
                        
                        .. attribute:: initiator
                        
                        	Configure IP subscriber initiator
                        	**type**\:  :py:class:`Initiator <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed.Initiator>`
                        
                        

                        """

                        _prefix = 'subscriber-ipsub-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed, self).__init__()

                            self.yang_name = "routed"
                            self.yang_parent_name = "ipv6"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("initiator", ("initiator", InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed.Initiator))])
                            self._leafs = OrderedDict()

                            self.initiator = InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed.Initiator()
                            self.initiator.parent = self
                            self._children_name_map["initiator"] = "initiator"
                            self._segment_path = lambda: "routed"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed, [], name, value)


                        class Initiator(Entity):
                            """
                            Configure IP subscriber initiator
                            
                            .. attribute:: unclassified_ip
                            
                            	Configure unclassified packets as first\-sign\-of\-life for IPv6 subscriber
                            	**type**\: int
                            
                            	**range:** 1..128
                            
                            	**default value**\: 128
                            
                            .. attribute:: dhcp
                            
                            	Configure IPv6 subscriber DHCP initiator
                            	**type**\: int
                            
                            	**range:** 1..128
                            
                            	**default value**\: 128
                            
                            .. attribute:: dhcp_snoop
                            
                            	Configure IPv6 subscriber DHCP Snoop initiator
                            	**type**\: int
                            
                            	**range:** 1..128
                            
                            	**default value**\: 128
                            
                            

                            """

                            _prefix = 'subscriber-ipsub-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed.Initiator, self).__init__()

                                self.yang_name = "initiator"
                                self.yang_parent_name = "routed"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('unclassified_ip', (YLeaf(YType.uint32, 'unclassified-ip'), ['int'])),
                                    ('dhcp', (YLeaf(YType.uint32, 'dhcp'), ['int'])),
                                    ('dhcp_snoop', (YLeaf(YType.uint32, 'dhcp-snoop'), ['int'])),
                                ])
                                self.unclassified_ip = None
                                self.dhcp = None
                                self.dhcp_snoop = None
                                self._segment_path = lambda: "initiator"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Subscriber.IpSubscriber.Ipv6.Routed.Initiator, ['unclassified_ip', 'dhcp', 'dhcp_snoop'], name, value)







        class VlanSubConfiguration(Entity):
            """
            IEEE 802.1Q VLAN subinterface configuration
            
            .. attribute:: vlan_identifier
            
            	The VLAN tag stack associated with this sub\-interface
            	**type**\:  :py:class:`VlanIdentifier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration.VlanIdentifier>`
            
            	**presence node**\: True
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration, self).__init__()

                self.yang_name = "vlan-sub-configuration"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("vlan-identifier", ("vlan_identifier", InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration.VlanIdentifier))])
                self._leafs = OrderedDict()

                self.vlan_identifier = None
                self._children_name_map["vlan_identifier"] = "vlan-identifier"
                self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-sub-configuration"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration, [], name, value)


            class VlanIdentifier(Entity):
                """
                The VLAN tag stack associated with this
                sub\-interface.
                
                .. attribute:: vlan_type
                
                	Whether this sub\-interface is dot1ad or dot1Q
                	**type**\:  :py:class:`Vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Vlan>`
                
                	**mandatory**\: True
                
                .. attribute:: first_tag
                
                	First (outermost) VLAN tag value
                	**type**\: int
                
                	**range:** 1..4094
                
                	**mandatory**\: True
                
                .. attribute:: second_tag
                
                	Second VLAN tag value. The any value may only be used for Layer 2 subinterfaces
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrNull <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrNull>`
                
                		**type**\: int
                
                			**range:** 0..4094
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration.VlanIdentifier, self).__init__()

                    self.yang_name = "vlan-identifier"
                    self.yang_parent_name = "vlan-sub-configuration"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('vlan_type', (YLeaf(YType.enumeration, 'vlan-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Vlan', '')])),
                        ('first_tag', (YLeaf(YType.uint32, 'first-tag'), ['int'])),
                        ('second_tag', (YLeaf(YType.str, 'second-tag'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrNull', ''),'int'])),
                    ])
                    self.vlan_type = None
                    self.first_tag = None
                    self.second_tag = None
                    self._segment_path = lambda: "vlan-identifier"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.VlanSubConfiguration.VlanIdentifier, [u'vlan_type', u'first_tag', u'second_tag'], name, value)




        class EthernetService(Entity):
            """
            Ethernet service configuration
            
            .. attribute:: local_traffic_default_encapsulation
            
            	The default encapsulation to be used for locally\-sourced packets
            	**type**\:  :py:class:`LocalTrafficDefaultEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetService.LocalTrafficDefaultEncapsulation>`
            
            	**presence node**\: True
            
            .. attribute:: encapsulation
            
            	The encapsulation of this Ethernet service
            	**type**\:  :py:class:`Encapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetService.Encapsulation>`
            
            	**presence node**\: True
            
            .. attribute:: rewrite
            
            	The rewrite operation for the Ethernet service
            	**type**\:  :py:class:`Rewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetService.Rewrite>`
            
            	**presence node**\: True
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.EthernetService, self).__init__()

                self.yang_name = "ethernet-service"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("local-traffic-default-encapsulation", ("local_traffic_default_encapsulation", InterfaceConfigurations.InterfaceConfiguration.EthernetService.LocalTrafficDefaultEncapsulation)), ("encapsulation", ("encapsulation", InterfaceConfigurations.InterfaceConfiguration.EthernetService.Encapsulation)), ("rewrite", ("rewrite", InterfaceConfigurations.InterfaceConfiguration.EthernetService.Rewrite))])
                self._leafs = OrderedDict()

                self.local_traffic_default_encapsulation = None
                self._children_name_map["local_traffic_default_encapsulation"] = "local-traffic-default-encapsulation"

                self.encapsulation = None
                self._children_name_map["encapsulation"] = "encapsulation"

                self.rewrite = None
                self._children_name_map["rewrite"] = "rewrite"
                self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-service"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetService, [], name, value)


            class LocalTrafficDefaultEncapsulation(Entity):
                """
                The default encapsulation to be used for
                locally\-sourced packets
                
                .. attribute:: outer_tag_type
                
                	Type of outer tag
                	**type**\:  :py:class:`Vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Vlan>`
                
                	**mandatory**\: True
                
                .. attribute:: outer_vlan_id
                
                	VLAN id for outer tag
                	**type**\: int
                
                	**range:** 1..4094
                
                	**mandatory**\: True
                
                .. attribute:: inner_vlan_id
                
                	Optional VLAN Id for inner Dot1Q tag
                	**type**\: int
                
                	**range:** 1..4094
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetService.LocalTrafficDefaultEncapsulation, self).__init__()

                    self.yang_name = "local-traffic-default-encapsulation"
                    self.yang_parent_name = "ethernet-service"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('outer_tag_type', (YLeaf(YType.enumeration, 'outer-tag-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Vlan', '')])),
                        ('outer_vlan_id', (YLeaf(YType.uint32, 'outer-vlan-id'), ['int'])),
                        ('inner_vlan_id', (YLeaf(YType.uint32, 'inner-vlan-id'), ['int'])),
                    ])
                    self.outer_tag_type = None
                    self.outer_vlan_id = None
                    self.inner_vlan_id = None
                    self._segment_path = lambda: "local-traffic-default-encapsulation"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetService.LocalTrafficDefaultEncapsulation, [u'outer_tag_type', u'outer_vlan_id', u'inner_vlan_id'], name, value)



            class Encapsulation(Entity):
                """
                The encapsulation of this Ethernet service
                
                .. attribute:: outer_tag_type
                
                	Whether to match all unmatched packets, untagged packets or tagged packets, and if matching tagged packets, the outer tag type to match
                	**type**\:  :py:class:`Match <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Match>`
                
                	**mandatory**\: True
                
                .. attribute:: outer_range1_low
                
                	Low value of first range for outer tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrAny <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrAny>`
                
                		**type**\: int
                
                			**range:** 1..4096
                
                .. attribute:: outer_range1_high
                
                	High value of first range for outer tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrNative <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrNative>`
                
                		**type**\: int
                
                			**range:** 1..65535
                
                .. attribute:: inner_tag_type
                
                	Type of tag for inner match (if present)
                	**type**\:  :py:class:`Match <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Match>`
                
                .. attribute:: inner_range1_low
                
                	Low value of first range for inner tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrAny <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrAny>`
                
                		**type**\: int
                
                			**range:** 1..4096
                
                .. attribute:: inner_range1_high
                
                	High value of first range for inner tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range1_low
                
                	Low value of first additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range1_high
                
                	High value of first additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range2_low
                
                	Low value of second additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range2_high
                
                	High value of second additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range3_low
                
                	Low value of third additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range3_high
                
                	High value of third additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range4_low
                
                	Low value of forth additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range4_high
                
                	High value of forth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range5_low
                
                	Low value of fifth additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range5_high
                
                	High value of fifth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range6_low
                
                	Low value of sixth additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range6_high
                
                	High value of sixth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range7_low
                
                	Low value of seventh additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range7_high
                
                	High value of seventh additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range8_low
                
                	Low value of eighth additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range8_high
                
                	High value of eighth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: outer_class_of_service
                
                	Value to match against Class Of Service bits for outer tag
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: inner_class_of_service
                
                	Value to match against Class Of Service bits for inner tag
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: payload_ethertype_match
                
                	Which payload ethertype values to match
                	**type**\:  :py:class:`EthertypeMatch <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.EthertypeMatch>`
                
                .. attribute:: ingress_source_mac
                
                	Source MAC address to match on ingress
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: ingress_destination_mac
                
                	Destination MAC address to match on egress
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: exact
                
                	Only match packets with no more tags than explicitly matched
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetService.Encapsulation, self).__init__()

                    self.yang_name = "encapsulation"
                    self.yang_parent_name = "ethernet-service"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('outer_tag_type', (YLeaf(YType.enumeration, 'outer-tag-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Match', '')])),
                        ('outer_range1_low', (YLeaf(YType.str, 'outer-range1-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrAny', ''),'int'])),
                        ('outer_range1_high', (YLeaf(YType.str, 'outer-range1-high'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrNative', ''),'int'])),
                        ('inner_tag_type', (YLeaf(YType.enumeration, 'inner-tag-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Match', '')])),
                        ('inner_range1_low', (YLeaf(YType.str, 'inner-range1-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrAny', ''),'int'])),
                        ('inner_range1_high', (YLeaf(YType.uint32, 'inner-range1-high'), ['int'])),
                        ('additional_range1_low', (YLeaf(YType.str, 'additional-range1-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range1_high', (YLeaf(YType.uint32, 'additional-range1-high'), ['int'])),
                        ('additional_range2_low', (YLeaf(YType.str, 'additional-range2-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range2_high', (YLeaf(YType.uint32, 'additional-range2-high'), ['int'])),
                        ('additional_range3_low', (YLeaf(YType.str, 'additional-range3-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range3_high', (YLeaf(YType.uint32, 'additional-range3-high'), ['int'])),
                        ('additional_range4_low', (YLeaf(YType.str, 'additional-range4-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range4_high', (YLeaf(YType.uint32, 'additional-range4-high'), ['int'])),
                        ('additional_range5_low', (YLeaf(YType.str, 'additional-range5-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range5_high', (YLeaf(YType.uint32, 'additional-range5-high'), ['int'])),
                        ('additional_range6_low', (YLeaf(YType.str, 'additional-range6-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range6_high', (YLeaf(YType.uint32, 'additional-range6-high'), ['int'])),
                        ('additional_range7_low', (YLeaf(YType.str, 'additional-range7-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range7_high', (YLeaf(YType.uint32, 'additional-range7-high'), ['int'])),
                        ('additional_range8_low', (YLeaf(YType.str, 'additional-range8-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range8_high', (YLeaf(YType.uint32, 'additional-range8-high'), ['int'])),
                        ('outer_class_of_service', (YLeaf(YType.uint32, 'outer-class-of-service'), ['int'])),
                        ('inner_class_of_service', (YLeaf(YType.uint32, 'inner-class-of-service'), ['int'])),
                        ('payload_ethertype_match', (YLeaf(YType.enumeration, 'payload-ethertype-match'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'EthertypeMatch', '')])),
                        ('ingress_source_mac', (YLeaf(YType.str, 'ingress-source-mac'), ['str'])),
                        ('ingress_destination_mac', (YLeaf(YType.str, 'ingress-destination-mac'), ['str'])),
                        ('exact', (YLeaf(YType.empty, 'exact'), ['Empty'])),
                    ])
                    self.outer_tag_type = None
                    self.outer_range1_low = None
                    self.outer_range1_high = None
                    self.inner_tag_type = None
                    self.inner_range1_low = None
                    self.inner_range1_high = None
                    self.additional_range1_low = None
                    self.additional_range1_high = None
                    self.additional_range2_low = None
                    self.additional_range2_high = None
                    self.additional_range3_low = None
                    self.additional_range3_high = None
                    self.additional_range4_low = None
                    self.additional_range4_high = None
                    self.additional_range5_low = None
                    self.additional_range5_high = None
                    self.additional_range6_low = None
                    self.additional_range6_high = None
                    self.additional_range7_low = None
                    self.additional_range7_high = None
                    self.additional_range8_low = None
                    self.additional_range8_high = None
                    self.outer_class_of_service = None
                    self.inner_class_of_service = None
                    self.payload_ethertype_match = None
                    self.ingress_source_mac = None
                    self.ingress_destination_mac = None
                    self.exact = None
                    self._segment_path = lambda: "encapsulation"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetService.Encapsulation, [u'outer_tag_type', u'outer_range1_low', u'outer_range1_high', u'inner_tag_type', u'inner_range1_low', u'inner_range1_high', u'additional_range1_low', u'additional_range1_high', u'additional_range2_low', u'additional_range2_high', u'additional_range3_low', u'additional_range3_high', u'additional_range4_low', u'additional_range4_high', u'additional_range5_low', u'additional_range5_high', u'additional_range6_low', u'additional_range6_high', u'additional_range7_low', u'additional_range7_high', u'additional_range8_low', u'additional_range8_high', u'outer_class_of_service', u'inner_class_of_service', u'payload_ethertype_match', u'ingress_source_mac', u'ingress_destination_mac', u'exact'], name, value)



            class Rewrite(Entity):
                """
                The rewrite operation for the Ethernet service
                
                .. attribute:: rewrite_type
                
                	The type of rewrite to perform
                	**type**\:  :py:class:`Rewrite <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Rewrite>`
                
                	**mandatory**\: True
                
                .. attribute:: outer_tag_type
                
                	Type of outermost tag to be pushed
                	**type**\:  :py:class:`Match <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Match>`
                
                .. attribute:: outer_tag_value
                
                	VLAN Id of outermost tag to be pushed
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: inner_tag_type
                
                	Type of innermost tag to be pushed
                	**type**\:  :py:class:`Match <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Match>`
                
                .. attribute:: inner_tag_value
                
                	VLAN Id of innermost tag to be pushed
                	**type**\: int
                
                	**range:** 1..4094
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetService.Rewrite, self).__init__()

                    self.yang_name = "rewrite"
                    self.yang_parent_name = "ethernet-service"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('rewrite_type', (YLeaf(YType.enumeration, 'rewrite-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Rewrite', '')])),
                        ('outer_tag_type', (YLeaf(YType.enumeration, 'outer-tag-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Match', '')])),
                        ('outer_tag_value', (YLeaf(YType.uint32, 'outer-tag-value'), ['int'])),
                        ('inner_tag_type', (YLeaf(YType.enumeration, 'inner-tag-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Match', '')])),
                        ('inner_tag_value', (YLeaf(YType.uint32, 'inner-tag-value'), ['int'])),
                    ])
                    self.rewrite_type = None
                    self.outer_tag_type = None
                    self.outer_tag_value = None
                    self.inner_tag_type = None
                    self.inner_tag_value = None
                    self._segment_path = lambda: "rewrite"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetService.Rewrite, [u'rewrite_type', u'outer_tag_type', u'outer_tag_value', u'inner_tag_type', u'inner_tag_value'], name, value)




        class EthernetBng(Entity):
            """
            Ethernet Infra BNG specific configuration
            
            .. attribute:: ambiguous_encapsulation
            
            	L3 Ambiguous encapsulation
            	**type**\:  :py:class:`AmbiguousEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetBng.AmbiguousEncapsulation>`
            
            	**presence node**\: True
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.EthernetBng, self).__init__()

                self.yang_name = "ethernet-bng"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("ambiguous-encapsulation", ("ambiguous_encapsulation", InterfaceConfigurations.InterfaceConfiguration.EthernetBng.AmbiguousEncapsulation))])
                self._leafs = OrderedDict()

                self.ambiguous_encapsulation = None
                self._children_name_map["ambiguous_encapsulation"] = "ambiguous-encapsulation"
                self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-bng"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetBng, [], name, value)


            class AmbiguousEncapsulation(Entity):
                """
                L3 Ambiguous encapsulation
                
                .. attribute:: outer_tag_type
                
                	Whether to match all unmatched packets, untagged packets or tagged packets, and if matching tagged packets, the outer tag type to match
                	**type**\:  :py:class:`Match <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Match>`
                
                	**mandatory**\: True
                
                .. attribute:: outer_range1_low
                
                	Low value of first range for outer tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrAny <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrAny>`
                
                		**type**\: int
                
                			**range:** 1..4096
                
                .. attribute:: outer_range1_high
                
                	High value of first range for outer tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrNative <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrNative>`
                
                		**type**\: int
                
                			**range:** 1..65535
                
                .. attribute:: inner_tag_type
                
                	Type of tag for inner match (if present)
                	**type**\:  :py:class:`Match <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Match>`
                
                .. attribute:: inner_range1_low
                
                	Low value of first range for inner tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrAny <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrAny>`
                
                		**type**\: int
                
                			**range:** 1..4096
                
                .. attribute:: inner_range1_high
                
                	High value of first range for inner tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range1_low
                
                	Low value of first additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range1_high
                
                	High value of first additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range2_low
                
                	Low value of second additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range2_high
                
                	High value of second additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range3_low
                
                	Low value of third additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range3_high
                
                	High value of third additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range4_low
                
                	Low value of forth additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range4_high
                
                	High value of forth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range5_low
                
                	Low value of fifth additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range5_high
                
                	High value of fifth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range6_low
                
                	Low value of sixth additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range6_high
                
                	High value of sixth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range7_low
                
                	Low value of seventh additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range7_high
                
                	High value of seventh additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: additional_range8_low
                
                	Low value of eighth additional range for tag match
                	**type**\: union of the below types:
                
                		**type**\:  :py:class:`VlanTagOrCvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VlanTagOrCvp>`
                
                		**type**\: int
                
                			**range:** 1..65534
                
                .. attribute:: additional_range8_high
                
                	High value of eighth additional range for tag match
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: outer_class_of_service
                
                	Value to match against Class Of Service bits for outer tag
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: inner_class_of_service
                
                	Value to match against Class Of Service bits for inner tag
                	**type**\: int
                
                	**range:** 0..7
                
                .. attribute:: payload_ethertype_match
                
                	Which payload ethertype values to match
                	**type**\:  :py:class:`EthertypeMatch <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.EthertypeMatch>`
                
                .. attribute:: ingress_source_mac
                
                	Source MAC address to match on ingress
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: ingress_destination_mac
                
                	Destination MAC address to match on egress
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: exact
                
                	Only match packets with no more tags than explicitly matched
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetBng.AmbiguousEncapsulation, self).__init__()

                    self.yang_name = "ambiguous-encapsulation"
                    self.yang_parent_name = "ethernet-bng"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('outer_tag_type', (YLeaf(YType.enumeration, 'outer-tag-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Match', '')])),
                        ('outer_range1_low', (YLeaf(YType.str, 'outer-range1-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrAny', ''),'int'])),
                        ('outer_range1_high', (YLeaf(YType.str, 'outer-range1-high'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrNative', ''),'int'])),
                        ('inner_tag_type', (YLeaf(YType.enumeration, 'inner-tag-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Match', '')])),
                        ('inner_range1_low', (YLeaf(YType.str, 'inner-range1-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrAny', ''),'int'])),
                        ('inner_range1_high', (YLeaf(YType.uint32, 'inner-range1-high'), ['int'])),
                        ('additional_range1_low', (YLeaf(YType.str, 'additional-range1-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range1_high', (YLeaf(YType.uint32, 'additional-range1-high'), ['int'])),
                        ('additional_range2_low', (YLeaf(YType.str, 'additional-range2-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range2_high', (YLeaf(YType.uint32, 'additional-range2-high'), ['int'])),
                        ('additional_range3_low', (YLeaf(YType.str, 'additional-range3-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range3_high', (YLeaf(YType.uint32, 'additional-range3-high'), ['int'])),
                        ('additional_range4_low', (YLeaf(YType.str, 'additional-range4-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range4_high', (YLeaf(YType.uint32, 'additional-range4-high'), ['int'])),
                        ('additional_range5_low', (YLeaf(YType.str, 'additional-range5-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range5_high', (YLeaf(YType.uint32, 'additional-range5-high'), ['int'])),
                        ('additional_range6_low', (YLeaf(YType.str, 'additional-range6-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range6_high', (YLeaf(YType.uint32, 'additional-range6-high'), ['int'])),
                        ('additional_range7_low', (YLeaf(YType.str, 'additional-range7-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range7_high', (YLeaf(YType.uint32, 'additional-range7-high'), ['int'])),
                        ('additional_range8_low', (YLeaf(YType.str, 'additional-range8-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VlanTagOrCvp', ''),'int'])),
                        ('additional_range8_high', (YLeaf(YType.uint32, 'additional-range8-high'), ['int'])),
                        ('outer_class_of_service', (YLeaf(YType.uint32, 'outer-class-of-service'), ['int'])),
                        ('inner_class_of_service', (YLeaf(YType.uint32, 'inner-class-of-service'), ['int'])),
                        ('payload_ethertype_match', (YLeaf(YType.enumeration, 'payload-ethertype-match'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'EthertypeMatch', '')])),
                        ('ingress_source_mac', (YLeaf(YType.str, 'ingress-source-mac'), ['str'])),
                        ('ingress_destination_mac', (YLeaf(YType.str, 'ingress-destination-mac'), ['str'])),
                        ('exact', (YLeaf(YType.empty, 'exact'), ['Empty'])),
                    ])
                    self.outer_tag_type = None
                    self.outer_range1_low = None
                    self.outer_range1_high = None
                    self.inner_tag_type = None
                    self.inner_range1_low = None
                    self.inner_range1_high = None
                    self.additional_range1_low = None
                    self.additional_range1_high = None
                    self.additional_range2_low = None
                    self.additional_range2_high = None
                    self.additional_range3_low = None
                    self.additional_range3_high = None
                    self.additional_range4_low = None
                    self.additional_range4_high = None
                    self.additional_range5_low = None
                    self.additional_range5_high = None
                    self.additional_range6_low = None
                    self.additional_range6_high = None
                    self.additional_range7_low = None
                    self.additional_range7_high = None
                    self.additional_range8_low = None
                    self.additional_range8_high = None
                    self.outer_class_of_service = None
                    self.inner_class_of_service = None
                    self.payload_ethertype_match = None
                    self.ingress_source_mac = None
                    self.ingress_destination_mac = None
                    self.exact = None
                    self._segment_path = lambda: "ambiguous-encapsulation"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetBng.AmbiguousEncapsulation, [u'outer_tag_type', u'outer_range1_low', u'outer_range1_high', u'inner_tag_type', u'inner_range1_low', u'inner_range1_high', u'additional_range1_low', u'additional_range1_high', u'additional_range2_low', u'additional_range2_high', u'additional_range3_low', u'additional_range3_high', u'additional_range4_low', u'additional_range4_high', u'additional_range5_low', u'additional_range5_high', u'additional_range6_low', u'additional_range6_high', u'additional_range7_low', u'additional_range7_high', u'additional_range8_low', u'additional_range8_high', u'outer_class_of_service', u'inner_class_of_service', u'payload_ethertype_match', u'ingress_source_mac', u'ingress_destination_mac', u'exact'], name, value)




        class MacAccounting(Entity):
            """
            MAC Accounting Configuration
            
            .. attribute:: ingress
            
            	Per MAC address accounting statistics
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: egress
            
            	Per MAC address accounting statistics
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.MacAccounting, self).__init__()

                self.yang_name = "mac-accounting"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('ingress', (YLeaf(YType.empty, 'ingress'), ['Empty'])),
                    ('egress', (YLeaf(YType.empty, 'egress'), ['Empty'])),
                ])
                self.ingress = None
                self.egress = None
                self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:mac-accounting"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MacAccounting, [u'ingress', u'egress'], name, value)



        class EthernetFeatures(Entity):
            """
            Ethernet Features Configuration
            
            .. attribute:: filtering
            
            	Ingress Ethernet frame filtering
            	**type**\:  :py:class:`Filtering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_cfg.Filtering>`
            
            .. attribute:: cfm
            
            	CFM interface configuration
            	**type**\:  :py:class:`Cfm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm>`
            
            .. attribute:: ether_link_oam_enable
            
            	Enable Ethernet Link OAM on the interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: ether_link_oam
            
            	Ethernet Link OAM Interface Configuration
            	**type**\:  :py:class:`EtherLinkOam <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures, self).__init__()

                self.yang_name = "ethernet-features"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("Cisco-IOS-XR-ethernet-cfm-cfg:cfm", ("cfm", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm)), ("Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam", ("ether_link_oam", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam))])
                self._leafs = OrderedDict([
                    ('filtering', (YLeaf(YType.enumeration, 'filtering'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_cfg', 'Filtering', '')])),
                    ('ether_link_oam_enable', (YLeaf(YType.empty, 'Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam-enable'), ['Empty'])),
                ])
                self.filtering = None
                self.ether_link_oam_enable = None

                self.cfm = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm()
                self.cfm.parent = self
                self._children_name_map["cfm"] = "Cisco-IOS-XR-ethernet-cfm-cfg:cfm"

                self.ether_link_oam = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam()
                self.ether_link_oam.parent = self
                self._children_name_map["ether_link_oam"] = "Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam"
                self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:ethernet-features"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures, [u'filtering', 'ether_link_oam_enable'], name, value)


            class Cfm(Entity):
                """
                CFM interface configuration
                
                .. attribute:: domains
                
                	Domain\-specific interface configuration
                	**type**\:  :py:class:`Domains <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains>`
                
                .. attribute:: ais_up
                
                	Interface specific AIS configuration
                	**type**\:  :py:class:`AisUp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp>`
                
                

                """

                _prefix = 'ethernet-cfm-cfg'
                _revision = '2017-10-06'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm, self).__init__()

                    self.yang_name = "cfm"
                    self.yang_parent_name = "ethernet-features"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("domains", ("domains", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains)), ("ais-up", ("ais_up", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp))])
                    self._leafs = OrderedDict()

                    self.domains = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains()
                    self.domains.parent = self
                    self._children_name_map["domains"] = "domains"

                    self.ais_up = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp()
                    self.ais_up.parent = self
                    self._children_name_map["ais_up"] = "ais-up"
                    self._segment_path = lambda: "Cisco-IOS-XR-ethernet-cfm-cfg:cfm"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm, [], name, value)


                class Domains(Entity):
                    """
                    Domain\-specific interface configuration
                    
                    .. attribute:: domain
                    
                    	Configuration for a particular Maintenance Domain
                    	**type**\: list of  		 :py:class:`Domain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain>`
                    
                    

                    """

                    _prefix = 'ethernet-cfm-cfg'
                    _revision = '2017-10-06'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains, self).__init__()

                        self.yang_name = "domains"
                        self.yang_parent_name = "cfm"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("domain", ("domain", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain))])
                        self._leafs = OrderedDict()

                        self.domain = YList(self)
                        self._segment_path = lambda: "domains"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains, [], name, value)


                    class Domain(Entity):
                        """
                        Configuration for a particular Maintenance
                        Domain
                        
                        .. attribute:: domain  (key)
                        
                        	Maintenance Domain
                        	**type**\: str
                        
                        	**length:** 1..79
                        
                        .. attribute:: mep
                        
                        	MEP Configuration
                        	**type**\:  :py:class:`Mep <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep>`
                        
                        

                        """

                        _prefix = 'ethernet-cfm-cfg'
                        _revision = '2017-10-06'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain, self).__init__()

                            self.yang_name = "domain"
                            self.yang_parent_name = "domains"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['domain']
                            self._child_classes = OrderedDict([("mep", ("mep", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep))])
                            self._leafs = OrderedDict([
                                ('domain', (YLeaf(YType.str, 'domain'), ['str'])),
                            ])
                            self.domain = None

                            self.mep = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep()
                            self.mep.parent = self
                            self._children_name_map["mep"] = "mep"
                            self._segment_path = lambda: "domain" + "[domain='" + str(self.domain) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain, ['domain'], name, value)


                        class Mep(Entity):
                            """
                            MEP Configuration
                            
                            .. attribute:: sla_profile_target_mep_ids
                            
                            	SLA specific configuration
                            	**type**\:  :py:class:`SlaProfileTargetMepIds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds>`
                            
                            .. attribute:: mep_properties
                            
                            	Properties for this MEP
                            	**type**\:  :py:class:`MepProperties <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.MepProperties>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: loss_measurement_counters
                            
                            	Loss\-measurement specific configuration
                            	**type**\:  :py:class:`LossMeasurementCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.LossMeasurementCounters>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: cos
                            
                            	The Class of Service bits for this MEP
                            	**type**\: int
                            
                            	**range:** 0..7
                            
                            

                            """

                            _prefix = 'ethernet-cfm-cfg'
                            _revision = '2017-10-06'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep, self).__init__()

                                self.yang_name = "mep"
                                self.yang_parent_name = "domain"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("sla-profile-target-mep-ids", ("sla_profile_target_mep_ids", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds)), ("mep-properties", ("mep_properties", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.MepProperties)), ("loss-measurement-counters", ("loss_measurement_counters", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.LossMeasurementCounters))])
                                self._leafs = OrderedDict([
                                    ('cos', (YLeaf(YType.uint32, 'cos'), ['int'])),
                                ])
                                self.cos = None

                                self.sla_profile_target_mep_ids = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds()
                                self.sla_profile_target_mep_ids.parent = self
                                self._children_name_map["sla_profile_target_mep_ids"] = "sla-profile-target-mep-ids"

                                self.mep_properties = None
                                self._children_name_map["mep_properties"] = "mep-properties"

                                self.loss_measurement_counters = None
                                self._children_name_map["loss_measurement_counters"] = "loss-measurement-counters"
                                self._segment_path = lambda: "mep"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep, ['cos'], name, value)


                            class SlaProfileTargetMepIds(Entity):
                                """
                                SLA specific configuration
                                
                                .. attribute:: sla_profile_target_mep_id
                                
                                	Configuration for a particular SLA operation
                                	**type**\: list of  		 :py:class:`SlaProfileTargetMepId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMepId>`
                                
                                .. attribute:: sla_profile_target_mac_address
                                
                                	Configuration for a particular SLA operation
                                	**type**\: list of  		 :py:class:`SlaProfileTargetMacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMacAddress>`
                                
                                

                                """

                                _prefix = 'ethernet-cfm-cfg'
                                _revision = '2017-10-06'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds, self).__init__()

                                    self.yang_name = "sla-profile-target-mep-ids"
                                    self.yang_parent_name = "mep"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("sla-profile-target-mep-id", ("sla_profile_target_mep_id", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMepId)), ("sla-profile-target-mac-address", ("sla_profile_target_mac_address", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMacAddress))])
                                    self._leafs = OrderedDict()

                                    self.sla_profile_target_mep_id = YList(self)
                                    self.sla_profile_target_mac_address = YList(self)
                                    self._segment_path = lambda: "sla-profile-target-mep-ids"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds, [], name, value)


                                class SlaProfileTargetMepId(Entity):
                                    """
                                    Configuration for a particular SLA
                                    operation
                                    
                                    .. attribute:: profile  (key)
                                    
                                    	SLA profile name
                                    	**type**\: str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: target_mep_id  (key)
                                    
                                    	Target MEP\-ID
                                    	**type**\: int
                                    
                                    	**range:** 1..8191
                                    
                                    

                                    """

                                    _prefix = 'ethernet-cfm-cfg'
                                    _revision = '2017-10-06'

                                    def __init__(self):
                                        super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMepId, self).__init__()

                                        self.yang_name = "sla-profile-target-mep-id"
                                        self.yang_parent_name = "sla-profile-target-mep-ids"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['profile','target_mep_id']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('profile', (YLeaf(YType.str, 'profile'), ['str'])),
                                            ('target_mep_id', (YLeaf(YType.uint32, 'target-mep-id'), ['int'])),
                                        ])
                                        self.profile = None
                                        self.target_mep_id = None
                                        self._segment_path = lambda: "sla-profile-target-mep-id" + "[profile='" + str(self.profile) + "']" + "[target-mep-id='" + str(self.target_mep_id) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMepId, ['profile', 'target_mep_id'], name, value)



                                class SlaProfileTargetMacAddress(Entity):
                                    """
                                    Configuration for a particular SLA
                                    operation
                                    
                                    .. attribute:: profile  (key)
                                    
                                    	SLA profile name
                                    	**type**\: str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: target_mac_address  (key)
                                    
                                    	Target MAC address
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                    
                                    

                                    """

                                    _prefix = 'ethernet-cfm-cfg'
                                    _revision = '2017-10-06'

                                    def __init__(self):
                                        super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMacAddress, self).__init__()

                                        self.yang_name = "sla-profile-target-mac-address"
                                        self.yang_parent_name = "sla-profile-target-mep-ids"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['profile','target_mac_address']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('profile', (YLeaf(YType.str, 'profile'), ['str'])),
                                            ('target_mac_address', (YLeaf(YType.str, 'target-mac-address'), ['str'])),
                                        ])
                                        self.profile = None
                                        self.target_mac_address = None
                                        self._segment_path = lambda: "sla-profile-target-mac-address" + "[profile='" + str(self.profile) + "']" + "[target-mac-address='" + str(self.target_mac_address) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.SlaProfileTargetMepIds.SlaProfileTargetMacAddress, ['profile', 'target_mac_address'], name, value)




                            class MepProperties(Entity):
                                """
                                Properties for this MEP
                                
                                .. attribute:: service
                                
                                	Service (Maintenance Association)
                                	**type**\: str
                                
                                	**length:** 1..79
                                
                                	**mandatory**\: True
                                
                                .. attribute:: mep_id
                                
                                	MEP ID
                                	**type**\: int
                                
                                	**range:** 1..8191
                                
                                	**mandatory**\: True
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ethernet-cfm-cfg'
                                _revision = '2017-10-06'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.MepProperties, self).__init__()

                                    self.yang_name = "mep-properties"
                                    self.yang_parent_name = "mep"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('service', (YLeaf(YType.str, 'service'), ['str'])),
                                        ('mep_id', (YLeaf(YType.uint32, 'mep-id'), ['int'])),
                                    ])
                                    self.service = None
                                    self.mep_id = None
                                    self._segment_path = lambda: "mep-properties"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.MepProperties, ['service', 'mep_id'], name, value)



                            class LossMeasurementCounters(Entity):
                                """
                                Loss\-measurement specific configuration
                                
                                .. attribute:: cfg_type
                                
                                	Aggregate, List, or Range
                                	**type**\:  :py:class:`CfmLmCountersCfg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_cfm_cfg.CfmLmCountersCfg>`
                                
                                	**mandatory**\: True
                                
                                .. attribute:: cos0
                                
                                	CoS bits for per\-CoS counters \- start of range or list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: cos1
                                
                                	CoS bits for per\-CoS counters \- end of range or list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: cos2
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: cos3
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: cos4
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: cos5
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: cos6
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                .. attribute:: cos7
                                
                                	CoS bits for per\-CoS counters \- list item
                                	**type**\: int
                                
                                	**range:** 0..7
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ethernet-cfm-cfg'
                                _revision = '2017-10-06'

                                def __init__(self):
                                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.LossMeasurementCounters, self).__init__()

                                    self.yang_name = "loss-measurement-counters"
                                    self.yang_parent_name = "mep"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('cfg_type', (YLeaf(YType.enumeration, 'cfg-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_cfm_cfg', 'CfmLmCountersCfg', '')])),
                                        ('cos0', (YLeaf(YType.uint32, 'cos0'), ['int'])),
                                        ('cos1', (YLeaf(YType.uint32, 'cos1'), ['int'])),
                                        ('cos2', (YLeaf(YType.uint32, 'cos2'), ['int'])),
                                        ('cos3', (YLeaf(YType.uint32, 'cos3'), ['int'])),
                                        ('cos4', (YLeaf(YType.uint32, 'cos4'), ['int'])),
                                        ('cos5', (YLeaf(YType.uint32, 'cos5'), ['int'])),
                                        ('cos6', (YLeaf(YType.uint32, 'cos6'), ['int'])),
                                        ('cos7', (YLeaf(YType.uint32, 'cos7'), ['int'])),
                                    ])
                                    self.cfg_type = None
                                    self.cos0 = None
                                    self.cos1 = None
                                    self.cos2 = None
                                    self.cos3 = None
                                    self.cos4 = None
                                    self.cos5 = None
                                    self.cos6 = None
                                    self.cos7 = None
                                    self._segment_path = lambda: "loss-measurement-counters"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.Domains.Domain.Mep.LossMeasurementCounters, ['cfg_type', 'cos0', 'cos1', 'cos2', 'cos3', 'cos4', 'cos5', 'cos6', 'cos7'], name, value)






                class AisUp(Entity):
                    """
                    Interface specific AIS configuration
                    
                    .. attribute:: transmission
                    
                    	AIS transmission configuration
                    	**type**\:  :py:class:`Transmission <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp.Transmission>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'ethernet-cfm-cfg'
                    _revision = '2017-10-06'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp, self).__init__()

                        self.yang_name = "ais-up"
                        self.yang_parent_name = "cfm"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("transmission", ("transmission", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp.Transmission))])
                        self._leafs = OrderedDict()

                        self.transmission = None
                        self._children_name_map["transmission"] = "transmission"
                        self._segment_path = lambda: "ais-up"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp, [], name, value)


                    class Transmission(Entity):
                        """
                        AIS transmission configuration
                        
                        .. attribute:: ais_interval
                        
                        	AIS Interval
                        	**type**\:  :py:class:`CfmAisInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_cfm_datatypes.CfmAisInterval>`
                        
                        .. attribute:: cos
                        
                        	Class of Service bits
                        	**type**\: int
                        
                        	**range:** 0..7
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ethernet-cfm-cfg'
                        _revision = '2017-10-06'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp.Transmission, self).__init__()

                            self.yang_name = "transmission"
                            self.yang_parent_name = "ais-up"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('ais_interval', (YLeaf(YType.enumeration, 'ais-interval'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_cfm_datatypes', 'CfmAisInterval', '')])),
                                ('cos', (YLeaf(YType.uint32, 'cos'), ['int'])),
                            ])
                            self.ais_interval = None
                            self.cos = None
                            self._segment_path = lambda: "transmission"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.Cfm.AisUp.Transmission, ['ais_interval', 'cos'], name, value)





            class EtherLinkOam(Entity):
                """
                Ethernet Link OAM Interface Configuration
                
                .. attribute:: action
                
                	Configure action parameters
                	**type**\:  :py:class:`Action <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.Action>`
                
                .. attribute:: require_remote
                
                	Configure remote requirement parameters
                	**type**\:  :py:class:`RequireRemote <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.RequireRemote>`
                
                .. attribute:: timeout
                
                	Connection timeout period in number of lost heartbeats
                	**type**\: int
                
                	**range:** 2..30
                
                .. attribute:: mode
                
                	Possible Ethernet Link OAM modes
                	**type**\:  :py:class:`EtherLinkOamModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamModeEnum>`
                
                .. attribute:: mib_retrieval
                
                	Enable or disable MIB retrieval
                	**type**\: bool
                
                .. attribute:: profile_name
                
                	Set the profile to use on the interface
                	**type**\: str
                
                .. attribute:: remote_loopback
                
                	Enable or disable remote loopback
                	**type**\: bool
                
                .. attribute:: hello_interval
                
                	Possible Ethernet Link OAM hello intervals
                	**type**\:  :py:class:`EtherLinkOamHelloIntervalEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamHelloIntervalEnum>`
                
                .. attribute:: udlf
                
                	Enable or disable uni\-directional link\-fault detection
                	**type**\: bool
                
                .. attribute:: link_monitoring
                
                	Configure link monitor parameters
                	**type**\:  :py:class:`LinkMonitoring <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring>`
                
                

                """

                _prefix = 'ethernet-link-oam-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam, self).__init__()

                    self.yang_name = "ether-link-oam"
                    self.yang_parent_name = "ethernet-features"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("action", ("action", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.Action)), ("require-remote", ("require_remote", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.RequireRemote)), ("link-monitoring", ("link_monitoring", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring))])
                    self._leafs = OrderedDict([
                        ('timeout', (YLeaf(YType.uint32, 'timeout'), ['int'])),
                        ('mode', (YLeaf(YType.enumeration, 'mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamModeEnum', '')])),
                        ('mib_retrieval', (YLeaf(YType.boolean, 'mib-retrieval'), ['bool'])),
                        ('profile_name', (YLeaf(YType.str, 'profile-name'), ['str'])),
                        ('remote_loopback', (YLeaf(YType.boolean, 'remote-loopback'), ['bool'])),
                        ('hello_interval', (YLeaf(YType.enumeration, 'hello-interval'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamHelloIntervalEnum', '')])),
                        ('udlf', (YLeaf(YType.boolean, 'udlf'), ['bool'])),
                    ])
                    self.timeout = None
                    self.mode = None
                    self.mib_retrieval = None
                    self.profile_name = None
                    self.remote_loopback = None
                    self.hello_interval = None
                    self.udlf = None

                    self.action = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.Action()
                    self.action.parent = self
                    self._children_name_map["action"] = "action"

                    self.require_remote = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.RequireRemote()
                    self.require_remote.parent = self
                    self._children_name_map["require_remote"] = "require-remote"

                    self.link_monitoring = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring()
                    self.link_monitoring.parent = self
                    self._children_name_map["link_monitoring"] = "link-monitoring"
                    self._segment_path = lambda: "Cisco-IOS-XR-ethernet-link-oam-cfg:ether-link-oam"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam, ['timeout', 'mode', 'mib_retrieval', 'profile_name', 'remote_loopback', 'hello_interval', 'udlf'], name, value)


                class Action(Entity):
                    """
                    Configure action parameters
                    
                    .. attribute:: dying_gasp
                    
                    	Action to perform when a dying gasp occurs
                    	**type**\:  :py:class:`EtherLinkOamEventActionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnum>`
                    
                    .. attribute:: link_fault
                    
                    	Action to perform when a link fault occurs
                    	**type**\:  :py:class:`EtherLinkOamEventActionEnumEfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfd>`
                    
                    .. attribute:: capabilities_conflict
                    
                    	Action to perform when a capabilities conflict occurs
                    	**type**\:  :py:class:`EtherLinkOamEventActionEnumEfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfd>`
                    
                    .. attribute:: session_up
                    
                    	Action to perform when a session comes up
                    	**type**\:  :py:class:`EtherLinkOamEventActionPrimEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionPrimEnum>`
                    
                    .. attribute:: critical_event
                    
                    	Action to perform when a critical event occurs
                    	**type**\:  :py:class:`EtherLinkOamEventActionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnum>`
                    
                    .. attribute:: remote_loopback
                    
                    	Action to perform when remote loopback is entered or exited
                    	**type**\:  :py:class:`EtherLinkOamEventActionPrimEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionPrimEnum>`
                    
                    .. attribute:: wiring_conflict
                    
                    	Action to perform when a wiring conflict occurs
                    	**type**\:  :py:class:`EtherLinkOamEventActionEnumEfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfd>`
                    
                    .. attribute:: high_threshold
                    
                    	Action to perform when a high\-threshold event occurs
                    	**type**\:  :py:class:`EtherLinkOamEventActionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnum>`
                    
                    .. attribute:: discovery_timeout
                    
                    	Action to perform when discovery timeout occurs
                    	**type**\:  :py:class:`EtherLinkOamEventActionEnumEfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfd>`
                    
                    .. attribute:: session_down
                    
                    	Action to perform when a session comes down
                    	**type**\:  :py:class:`EtherLinkOamEventActionEnumEfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamEventActionEnumEfd>`
                    
                    

                    """

                    _prefix = 'ethernet-link-oam-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.Action, self).__init__()

                        self.yang_name = "action"
                        self.yang_parent_name = "ether-link-oam"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('dying_gasp', (YLeaf(YType.enumeration, 'dying-gasp'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionEnum', '')])),
                            ('link_fault', (YLeaf(YType.enumeration, 'link-fault'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionEnumEfd', '')])),
                            ('capabilities_conflict', (YLeaf(YType.enumeration, 'capabilities-conflict'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionEnumEfd', '')])),
                            ('session_up', (YLeaf(YType.enumeration, 'session-up'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionPrimEnum', '')])),
                            ('critical_event', (YLeaf(YType.enumeration, 'critical-event'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionEnum', '')])),
                            ('remote_loopback', (YLeaf(YType.enumeration, 'remote-loopback'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionPrimEnum', '')])),
                            ('wiring_conflict', (YLeaf(YType.enumeration, 'wiring-conflict'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionEnumEfd', '')])),
                            ('high_threshold', (YLeaf(YType.enumeration, 'high-threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionEnum', '')])),
                            ('discovery_timeout', (YLeaf(YType.enumeration, 'discovery-timeout'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionEnumEfd', '')])),
                            ('session_down', (YLeaf(YType.enumeration, 'session-down'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamEventActionEnumEfd', '')])),
                        ])
                        self.dying_gasp = None
                        self.link_fault = None
                        self.capabilities_conflict = None
                        self.session_up = None
                        self.critical_event = None
                        self.remote_loopback = None
                        self.wiring_conflict = None
                        self.high_threshold = None
                        self.discovery_timeout = None
                        self.session_down = None
                        self._segment_path = lambda: "action"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.Action, ['dying_gasp', 'link_fault', 'capabilities_conflict', 'session_up', 'critical_event', 'remote_loopback', 'wiring_conflict', 'high_threshold', 'discovery_timeout', 'session_down'], name, value)



                class RequireRemote(Entity):
                    """
                    Configure remote requirement parameters
                    
                    .. attribute:: mode
                    
                    	Possible required peer modes
                    	**type**\:  :py:class:`EtherLinkOamRequireModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamRequireModeEnum>`
                    
                    .. attribute:: mib_retrieval
                    
                    	Enable or disable MIB retrieval peer requirement
                    	**type**\: bool
                    
                    .. attribute:: remote_loopback
                    
                    	Enable or disable remote loopback peer requirement
                    	**type**\: bool
                    
                    .. attribute:: link_monitoring
                    
                    	Enable or disable link monitoring peer requirement
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ethernet-link-oam-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.RequireRemote, self).__init__()

                        self.yang_name = "require-remote"
                        self.yang_parent_name = "ether-link-oam"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('mode', (YLeaf(YType.enumeration, 'mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamRequireModeEnum', '')])),
                            ('mib_retrieval', (YLeaf(YType.boolean, 'mib-retrieval'), ['bool'])),
                            ('remote_loopback', (YLeaf(YType.boolean, 'remote-loopback'), ['bool'])),
                            ('link_monitoring', (YLeaf(YType.boolean, 'link-monitoring'), ['bool'])),
                        ])
                        self.mode = None
                        self.mib_retrieval = None
                        self.remote_loopback = None
                        self.link_monitoring = None
                        self._segment_path = lambda: "require-remote"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.RequireRemote, ['mode', 'mib_retrieval', 'remote_loopback', 'link_monitoring'], name, value)



                class LinkMonitoring(Entity):
                    """
                    Configure link monitor parameters
                    
                    .. attribute:: symbol_period
                    
                    	Symbol\-period event configuration
                    	**type**\:  :py:class:`SymbolPeriod <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod>`
                    
                    .. attribute:: frame_period
                    
                    	Frame\-period event configuration
                    	**type**\:  :py:class:`FramePeriod <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod>`
                    
                    .. attribute:: frame_seconds
                    
                    	Frame\-seconds event configuration
                    	**type**\:  :py:class:`FrameSeconds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds>`
                    
                    .. attribute:: frame
                    
                    	Frame event configuration
                    	**type**\:  :py:class:`Frame <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame>`
                    
                    .. attribute:: monitoring
                    
                    	Enable or disable monitoring
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ethernet-link-oam-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring, self).__init__()

                        self.yang_name = "link-monitoring"
                        self.yang_parent_name = "ether-link-oam"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("symbol-period", ("symbol_period", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod)), ("frame-period", ("frame_period", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod)), ("frame-seconds", ("frame_seconds", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds)), ("frame", ("frame", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame))])
                        self._leafs = OrderedDict([
                            ('monitoring', (YLeaf(YType.boolean, 'monitoring'), ['bool'])),
                        ])
                        self.monitoring = None

                        self.symbol_period = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod()
                        self.symbol_period.parent = self
                        self._children_name_map["symbol_period"] = "symbol-period"

                        self.frame_period = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod()
                        self.frame_period.parent = self
                        self._children_name_map["frame_period"] = "frame-period"

                        self.frame_seconds = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds()
                        self.frame_seconds.parent = self
                        self._children_name_map["frame_seconds"] = "frame-seconds"

                        self.frame = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame()
                        self.frame.parent = self
                        self._children_name_map["frame"] = "frame"
                        self._segment_path = lambda: "link-monitoring"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring, ['monitoring'], name, value)


                    class SymbolPeriod(Entity):
                        """
                        Symbol\-period event configuration
                        
                        .. attribute:: window
                        
                        	Window size configuration for symbol\-period events
                        	**type**\:  :py:class:`Window <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Window>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: threshold
                        
                        	Threshold configuration for symbol\-period events
                        	**type**\:  :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Threshold>`
                        
                        

                        """

                        _prefix = 'ethernet-link-oam-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod, self).__init__()

                            self.yang_name = "symbol-period"
                            self.yang_parent_name = "link-monitoring"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("window", ("window", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Window)), ("threshold", ("threshold", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Threshold))])
                            self._leafs = OrderedDict()

                            self.window = None
                            self._children_name_map["window"] = "window"

                            self.threshold = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Threshold()
                            self.threshold.parent = self
                            self._children_name_map["threshold"] = "threshold"
                            self._segment_path = lambda: "symbol-period"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod, [], name, value)


                        class Window(Entity):
                            """
                            Window size configuration for symbol\-period
                            events
                            
                            .. attribute:: window
                            
                            	Size of the symbol\-period window
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: units
                            
                            	Units to use for this window
                            	**type**\:  :py:class:`EtherLinkOamWindowUnitsSymbolsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamWindowUnitsSymbolsEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: multiplier
                            
                            	The multiplier to use for this window (only valid if 'Units' is Symbols and treated as 1 if unspecified)
                            	**type**\:  :py:class:`EtherLinkOamThresholdWindowMultiplierEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdWindowMultiplierEnum>`
                            
                            	**default value**\: none
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Window, self).__init__()

                                self.yang_name = "window"
                                self.yang_parent_name = "symbol-period"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('window', (YLeaf(YType.uint32, 'window'), ['int'])),
                                    ('units', (YLeaf(YType.enumeration, 'units'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamWindowUnitsSymbolsEnum', '')])),
                                    ('multiplier', (YLeaf(YType.enumeration, 'multiplier'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdWindowMultiplierEnum', '')])),
                                ])
                                self.window = None
                                self.units = None
                                self.multiplier = None
                                self._segment_path = lambda: "window"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Window, ['window', 'units', 'multiplier'], name, value)



                        class Threshold(Entity):
                            """
                            Threshold configuration for symbol\-period
                            events
                            
                            .. attribute:: threshold_low
                            
                            	The low threshold for symbol\-period
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            	**default value**\: 1
                            
                            .. attribute:: threshold_high
                            
                            	The high threshold for symbol\-period
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            .. attribute:: units
                            
                            	The units to use for these thresholds
                            	**type**\:  :py:class:`EtherLinkOamThresholdUnitsSymbolsEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdUnitsSymbolsEnum>`
                            
                            	**default value**\: symbols
                            
                            .. attribute:: multiplier_low
                            
                            	The multiplier to use for the low threshold (only valid if 'Units' is Symbols and treated as 1 if unspecified)
                            	**type**\:  :py:class:`EtherLinkOamThresholdWindowMultiplierEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdWindowMultiplierEnum>`
                            
                            	**default value**\: none
                            
                            .. attribute:: multiplier_high
                            
                            	The multiplier to use for the high threshold (only valid if 'Units' is Symbols and treated as 1 if unspecified)
                            	**type**\:  :py:class:`EtherLinkOamThresholdWindowMultiplierEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdWindowMultiplierEnum>`
                            
                            

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Threshold, self).__init__()

                                self.yang_name = "threshold"
                                self.yang_parent_name = "symbol-period"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('threshold_low', (YLeaf(YType.uint32, 'threshold-low'), ['int'])),
                                    ('threshold_high', (YLeaf(YType.uint32, 'threshold-high'), ['int'])),
                                    ('units', (YLeaf(YType.enumeration, 'units'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdUnitsSymbolsEnum', '')])),
                                    ('multiplier_low', (YLeaf(YType.enumeration, 'multiplier-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdWindowMultiplierEnum', '')])),
                                    ('multiplier_high', (YLeaf(YType.enumeration, 'multiplier-high'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdWindowMultiplierEnum', '')])),
                                ])
                                self.threshold_low = None
                                self.threshold_high = None
                                self.units = None
                                self.multiplier_low = None
                                self.multiplier_high = None
                                self._segment_path = lambda: "threshold"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.SymbolPeriod.Threshold, ['threshold_low', 'threshold_high', 'units', 'multiplier_low', 'multiplier_high'], name, value)




                    class FramePeriod(Entity):
                        """
                        Frame\-period event configuration
                        
                        .. attribute:: window
                        
                        	Window size configuration for frame\-period events
                        	**type**\:  :py:class:`Window <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Window>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: threshold
                        
                        	Threshold configuration for frame\-period events
                        	**type**\:  :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Threshold>`
                        
                        

                        """

                        _prefix = 'ethernet-link-oam-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod, self).__init__()

                            self.yang_name = "frame-period"
                            self.yang_parent_name = "link-monitoring"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("window", ("window", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Window)), ("threshold", ("threshold", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Threshold))])
                            self._leafs = OrderedDict()

                            self.window = None
                            self._children_name_map["window"] = "window"

                            self.threshold = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Threshold()
                            self.threshold.parent = self
                            self._children_name_map["threshold"] = "threshold"
                            self._segment_path = lambda: "frame-period"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod, [], name, value)


                        class Window(Entity):
                            """
                            Window size configuration for frame\-period
                            events
                            
                            .. attribute:: window
                            
                            	Size of the frame\-period window
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: units
                            
                            	The units to use for this window
                            	**type**\:  :py:class:`EtherLinkOamWindowUnitsFramesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamWindowUnitsFramesEnum>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: multiplier
                            
                            	The multiplier to use for this window (only valid if 'Units' is Frames and treated as 1 if unspecified)
                            	**type**\:  :py:class:`EtherLinkOamThresholdWindowMultiplierEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdWindowMultiplierEnum>`
                            
                            	**default value**\: none
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Window, self).__init__()

                                self.yang_name = "window"
                                self.yang_parent_name = "frame-period"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('window', (YLeaf(YType.uint32, 'window'), ['int'])),
                                    ('units', (YLeaf(YType.enumeration, 'units'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamWindowUnitsFramesEnum', '')])),
                                    ('multiplier', (YLeaf(YType.enumeration, 'multiplier'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdWindowMultiplierEnum', '')])),
                                ])
                                self.window = None
                                self.units = None
                                self.multiplier = None
                                self._segment_path = lambda: "window"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Window, ['window', 'units', 'multiplier'], name, value)



                        class Threshold(Entity):
                            """
                            Threshold configuration for frame\-period
                            events
                            
                            .. attribute:: threshold_low
                            
                            	The low threshold for frame\-period events
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            	**default value**\: 1
                            
                            .. attribute:: threshold_high
                            
                            	The high threshold for frame\-period events
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            .. attribute:: units
                            
                            	The units to use for these thresholds
                            	**type**\:  :py:class:`EtherLinkOamThresholdUnitsFramesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdUnitsFramesEnum>`
                            
                            	**default value**\: ppm
                            
                            .. attribute:: multiplier_low
                            
                            	The multiplier to use for the low threshold (only valid if 'Units' is Frames and treated as 1 if unspecified)
                            	**type**\:  :py:class:`EtherLinkOamThresholdWindowMultiplierEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdWindowMultiplierEnum>`
                            
                            	**default value**\: none
                            
                            .. attribute:: multiplier_high
                            
                            	The multiplier to use for the high threshold (only valid if 'Units' is Frames and treated as 1 if unspecified)
                            	**type**\:  :py:class:`EtherLinkOamThresholdWindowMultiplierEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdWindowMultiplierEnum>`
                            
                            

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Threshold, self).__init__()

                                self.yang_name = "threshold"
                                self.yang_parent_name = "frame-period"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('threshold_low', (YLeaf(YType.uint32, 'threshold-low'), ['int'])),
                                    ('threshold_high', (YLeaf(YType.uint32, 'threshold-high'), ['int'])),
                                    ('units', (YLeaf(YType.enumeration, 'units'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdUnitsFramesEnum', '')])),
                                    ('multiplier_low', (YLeaf(YType.enumeration, 'multiplier-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdWindowMultiplierEnum', '')])),
                                    ('multiplier_high', (YLeaf(YType.enumeration, 'multiplier-high'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdWindowMultiplierEnum', '')])),
                                ])
                                self.threshold_low = None
                                self.threshold_high = None
                                self.units = None
                                self.multiplier_low = None
                                self.multiplier_high = None
                                self._segment_path = lambda: "threshold"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FramePeriod.Threshold, ['threshold_low', 'threshold_high', 'units', 'multiplier_low', 'multiplier_high'], name, value)




                    class FrameSeconds(Entity):
                        """
                        Frame\-seconds event configuration
                        
                        .. attribute:: threshold
                        
                        	Threshold configuration for frame\-seconds events
                        	**type**\:  :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds.Threshold>`
                        
                        .. attribute:: window
                        
                        	Window size configuration for frame\-seconds events
                        	**type**\: int
                        
                        	**range:** 10000..900000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 60000
                        
                        

                        """

                        _prefix = 'ethernet-link-oam-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds, self).__init__()

                            self.yang_name = "frame-seconds"
                            self.yang_parent_name = "link-monitoring"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("threshold", ("threshold", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds.Threshold))])
                            self._leafs = OrderedDict([
                                ('window', (YLeaf(YType.uint32, 'window'), ['int'])),
                            ])
                            self.window = None

                            self.threshold = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds.Threshold()
                            self.threshold.parent = self
                            self._children_name_map["threshold"] = "threshold"
                            self._segment_path = lambda: "frame-seconds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds, ['window'], name, value)


                        class Threshold(Entity):
                            """
                            Threshold configuration for frame\-seconds
                            events
                            
                            .. attribute:: threshold_low
                            
                            	The low threshold for frame\-seconds events
                            	**type**\: int
                            
                            	**range:** 1..900
                            
                            	**units**\: second
                            
                            	**default value**\: 1
                            
                            .. attribute:: threshold_high
                            
                            	The high threshold for frame\-seconds events
                            	**type**\: int
                            
                            	**range:** 1..900
                            
                            	**units**\: second
                            
                            

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds.Threshold, self).__init__()

                                self.yang_name = "threshold"
                                self.yang_parent_name = "frame-seconds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('threshold_low', (YLeaf(YType.uint32, 'threshold-low'), ['int'])),
                                    ('threshold_high', (YLeaf(YType.uint32, 'threshold-high'), ['int'])),
                                ])
                                self.threshold_low = None
                                self.threshold_high = None
                                self._segment_path = lambda: "threshold"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.FrameSeconds.Threshold, ['threshold_low', 'threshold_high'], name, value)




                    class Frame(Entity):
                        """
                        Frame event configuration
                        
                        .. attribute:: threshold
                        
                        	Threshold configuration for frame events
                        	**type**\:  :py:class:`Threshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame.Threshold>`
                        
                        .. attribute:: window
                        
                        	Window size configuration for frame events
                        	**type**\: int
                        
                        	**range:** 1000..60000
                        
                        	**units**\: millisecond
                        
                        	**default value**\: 1000
                        
                        

                        """

                        _prefix = 'ethernet-link-oam-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame, self).__init__()

                            self.yang_name = "frame"
                            self.yang_parent_name = "link-monitoring"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("threshold", ("threshold", InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame.Threshold))])
                            self._leafs = OrderedDict([
                                ('window', (YLeaf(YType.uint32, 'window'), ['int'])),
                            ])
                            self.window = None

                            self.threshold = InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame.Threshold()
                            self.threshold.parent = self
                            self._children_name_map["threshold"] = "threshold"
                            self._segment_path = lambda: "frame"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame, ['window'], name, value)


                        class Threshold(Entity):
                            """
                            Threshold configuration for frame events
                            
                            .. attribute:: threshold_low
                            
                            	The low threshold for frame events
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            	**default value**\: 1
                            
                            .. attribute:: threshold_high
                            
                            	The high threshold for frame events
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            .. attribute:: multiplier_low
                            
                            	The multiplier to use for the low threshold (treated as 1 if unspecified)
                            	**type**\:  :py:class:`EtherLinkOamThresholdWindowMultiplierEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdWindowMultiplierEnum>`
                            
                            	**default value**\: none
                            
                            .. attribute:: multiplier_high
                            
                            	The multiplier to use for the high threshold (treated as 1 if unspecified)
                            	**type**\:  :py:class:`EtherLinkOamThresholdWindowMultiplierEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg.EtherLinkOamThresholdWindowMultiplierEnum>`
                            
                            

                            """

                            _prefix = 'ethernet-link-oam-cfg'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame.Threshold, self).__init__()

                                self.yang_name = "threshold"
                                self.yang_parent_name = "frame"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('threshold_low', (YLeaf(YType.uint32, 'threshold-low'), ['int'])),
                                    ('threshold_high', (YLeaf(YType.uint32, 'threshold-high'), ['int'])),
                                    ('multiplier_low', (YLeaf(YType.enumeration, 'multiplier-low'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdWindowMultiplierEnum', '')])),
                                    ('multiplier_high', (YLeaf(YType.enumeration, 'multiplier-high'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ethernet_link_oam_cfg', 'EtherLinkOamThresholdWindowMultiplierEnum', '')])),
                                ])
                                self.threshold_low = None
                                self.threshold_high = None
                                self.multiplier_low = None
                                self.multiplier_high = None
                                self._segment_path = lambda: "threshold"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EthernetFeatures.EtherLinkOam.LinkMonitoring.Frame.Threshold, ['threshold_low', 'threshold_high', 'multiplier_low', 'multiplier_high'], name, value)







        class CarrierDelay(Entity):
            """
            Set the carrier transition delay on an interface
            in msecs
            
            .. attribute:: carrier_delay_up
            
            	Carrier Delay (up) in msecs
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: carrier_delay_down
            
            	Carrier Delay down in msecs, must be set to 0
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.CarrierDelay, self).__init__()

                self.yang_name = "carrier-delay"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('carrier_delay_up', (YLeaf(YType.uint32, 'carrier-delay-up'), ['int'])),
                    ('carrier_delay_down', (YLeaf(YType.uint32, 'carrier-delay-down'), ['int'])),
                ])
                self.carrier_delay_up = None
                self.carrier_delay_down = None
                self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:carrier-delay"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CarrierDelay, [u'carrier_delay_up', u'carrier_delay_down'], name, value)



        class VlanTrunkConfiguration(Entity):
            """
            IEEE 802.1Q VLAN trunk interface configuration
            
            .. attribute:: native_vlan_identifier
            
            	The Native VLAN identifier associated with this trunk interface
            	**type**\:  :py:class:`NativeVlanIdentifier <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.NativeVlanIdentifier>`
            
            	**presence node**\: True
            
            .. attribute:: vlan_switched
            
            	VLAN Switch interface configuration
            	**type**\:  :py:class:`VlanSwitched <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.VlanSwitched>`
            
            .. attribute:: tunneling_ethertype
            
            	The outer ethertype used in Q\-in\-Q frames. The default value is 0x8100
            	**type**\:  :py:class:`TunnelingEthertype <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.TunnelingEthertype>`
            
            

            """

            _prefix = 'l2-eth-infra-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration, self).__init__()

                self.yang_name = "vlan-trunk-configuration"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("native-vlan-identifier", ("native_vlan_identifier", InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.NativeVlanIdentifier)), ("vlan-switched", ("vlan_switched", InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.VlanSwitched))])
                self._leafs = OrderedDict([
                    ('tunneling_ethertype', (YLeaf(YType.enumeration, 'tunneling-ethertype'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg', 'InterfaceConfigurations', 'InterfaceConfiguration.VlanTrunkConfiguration.TunnelingEthertype')])),
                ])
                self.tunneling_ethertype = None

                self.native_vlan_identifier = None
                self._children_name_map["native_vlan_identifier"] = "native-vlan-identifier"

                self.vlan_switched = InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.VlanSwitched()
                self.vlan_switched.parent = self
                self._children_name_map["vlan_switched"] = "vlan-switched"
                self._segment_path = lambda: "Cisco-IOS-XR-l2-eth-infra-cfg:vlan-trunk-configuration"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration, [u'tunneling_ethertype'], name, value)

            class TunnelingEthertype(Enum):
                """
                TunnelingEthertype (Enum Class)

                The outer ethertype used in Q\-in\-Q frames. The

                default value is 0x8100

                .. data:: Y_0x9100 = 37120

                	0x9100

                .. data:: Y_0x9200 = 37376

                	0x9200

                """

                Y_0x9100 = Enum.YLeaf(37120, "0x9100")

                Y_0x9200 = Enum.YLeaf(37376, "0x9200")



            class NativeVlanIdentifier(Entity):
                """
                The Native VLAN identifier associated with this
                trunk interface
                
                .. attribute:: vlan_type
                
                	Whether this interface is dot1ad or dot1Q
                	**type**\:  :py:class:`Vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Vlan>`
                
                	**mandatory**\: True
                
                .. attribute:: vlan_identifier
                
                	VLAN identifier
                	**type**\: int
                
                	**range:** 1..4094
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.NativeVlanIdentifier, self).__init__()

                    self.yang_name = "native-vlan-identifier"
                    self.yang_parent_name = "vlan-trunk-configuration"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('vlan_type', (YLeaf(YType.enumeration, 'vlan-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Vlan', '')])),
                        ('vlan_identifier', (YLeaf(YType.uint32, 'vlan-identifier'), ['int'])),
                    ])
                    self.vlan_type = None
                    self.vlan_identifier = None
                    self._segment_path = lambda: "native-vlan-identifier"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.NativeVlanIdentifier, [u'vlan_type', u'vlan_identifier'], name, value)



            class VlanSwitched(Entity):
                """
                VLAN Switch interface configuration
                
                .. attribute:: mode
                
                	VLAN Switch mode
                	**type**\:  :py:class:`VsMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.VsMode>`
                
                .. attribute:: access_vlan
                
                	Access VLAN Id
                	**type**\: int
                
                	**range:** 1..4094
                
                .. attribute:: trunk_tag_type
                
                	Whether to match dot1ad or dot1Q packets
                	**type**\:  :py:class:`Vlan <ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes.Vlan>`
                
                .. attribute:: trunk_vla_ns
                
                	Comma\-separated, increasing sequence of VLAN Ids or VLAN ranges
                	**type**\: str
                
                

                """

                _prefix = 'l2-eth-infra-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.VlanSwitched, self).__init__()

                    self.yang_name = "vlan-switched"
                    self.yang_parent_name = "vlan-trunk-configuration"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mode', (YLeaf(YType.enumeration, 'mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'VsMode', '')])),
                        ('access_vlan', (YLeaf(YType.uint32, 'access-vlan'), ['int'])),
                        ('trunk_tag_type', (YLeaf(YType.enumeration, 'trunk-tag-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_l2_eth_infra_datatypes', 'Vlan', '')])),
                        ('trunk_vla_ns', (YLeaf(YType.str, 'trunk-vla-ns'), ['str'])),
                    ])
                    self.mode = None
                    self.access_vlan = None
                    self.trunk_tag_type = None
                    self.trunk_vla_ns = None
                    self._segment_path = lambda: "vlan-switched"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.VlanTrunkConfiguration.VlanSwitched, [u'mode', u'access_vlan', u'trunk_tag_type', u'trunk_vla_ns'], name, value)




        class SsrpSession(Entity):
            """
            SSRP Config
            
            .. attribute:: group_id
            
            	This specifies the SSRP group and session\-id
            	**type**\:  :py:class:`GroupId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.SsrpSession.GroupId>`
            
            

            """

            _prefix = 'ppp-ma-ssrp-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.SsrpSession, self).__init__()

                self.yang_name = "ssrp-session"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("group-id", ("group_id", InterfaceConfigurations.InterfaceConfiguration.SsrpSession.GroupId))])
                self._leafs = OrderedDict()

                self.group_id = InterfaceConfigurations.InterfaceConfiguration.SsrpSession.GroupId()
                self.group_id.parent = self
                self._children_name_map["group_id"] = "group-id"
                self._segment_path = lambda: "Cisco-IOS-XR-ppp-ma-ssrp-cfg:ssrp-session"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.SsrpSession, [], name, value)


            class GroupId(Entity):
                """
                This specifies the SSRP group and session\-id
                
                .. attribute:: group
                
                	SSRP Group\-ID
                	**type**\: int
                
                	**range:** 1..65535
                
                .. attribute:: id
                
                	SSRP Session\-ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                

                """

                _prefix = 'ppp-ma-ssrp-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.SsrpSession.GroupId, self).__init__()

                    self.yang_name = "group-id"
                    self.yang_parent_name = "ssrp-session"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('group', (YLeaf(YType.uint32, 'group'), ['int'])),
                        ('id', (YLeaf(YType.uint32, 'id'), ['int'])),
                    ])
                    self.group = None
                    self.id = None
                    self._segment_path = lambda: "group-id"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.SsrpSession.GroupId, ['group', 'id'], name, value)




        class Cdp(Entity):
            """
            Interface specific CDP configuration
            
            .. attribute:: enable
            
            	Enable or disable CDP on an interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'cdp-cfg'
            _revision = '2017-08-16'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Cdp, self).__init__()

                self.yang_name = "cdp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                ])
                self.enable = None
                self._segment_path = lambda: "Cisco-IOS-XR-cdp-cfg:cdp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Cdp, ['enable'], name, value)



        class Dwdm(Entity):
            """
            DWDM port controller configuration
            
            .. attribute:: network_srlgs
            
            	Configure Network srlgs
            	**type**\:  :py:class:`NetworkSrlgs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs>`
            
            .. attribute:: g709
            
            	Configure G709 parameters
            	**type**\:  :py:class:`G709 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709>`
            
            .. attribute:: wavelength
            
            	Configure transponder wavelength
            	**type**\:  :py:class:`Wavelength <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.Wavelength>`
            
            	**presence node**\: True
            
            .. attribute:: enable_vtxp
            
            	Disable or Enable VTXP configuration
            	**type**\: bool
            
            .. attribute:: network_port_id
            
            	Configure network port id
            	**type**\: str
            
            	**length:** 1..64
            
            .. attribute:: transport_admin_state
            
            	Configure transport admin state
            	**type**\:  :py:class:`DwdmAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.DwdmAdminState>`
            
            	**default value**\: out-of-service
            
            .. attribute:: laser
            
            	Configure laser off/on
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: transmit_power
            
            	Select power level (in units of 0.1dBm)
            	**type**\: int
            
            	**range:** \-190..10
            
            .. attribute:: rx_threshold
            
            	Select power level (in units of 0.1dBm)
            	**type**\: int
            
            	**range:** \-350..50
            
            .. attribute:: network_connection_id
            
            	Configure network connection id
            	**type**\: str
            
            	**length:** 1..64
            
            .. attribute:: loopback
            
            	Configure loopback mode 
            	**type**\:  :py:class:`DwdmLoopback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.DwdmLoopback>`
            
            	**default value**\: none
            
            

            """

            _prefix = 'dwdm-ui-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm, self).__init__()

                self.yang_name = "dwdm"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("network-srlgs", ("network_srlgs", InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs)), ("g709", ("g709", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709)), ("wavelength", ("wavelength", InterfaceConfigurations.InterfaceConfiguration.Dwdm.Wavelength))])
                self._leafs = OrderedDict([
                    ('enable_vtxp', (YLeaf(YType.boolean, 'enable-vtxp'), ['bool'])),
                    ('network_port_id', (YLeaf(YType.str, 'network-port-id'), ['str'])),
                    ('transport_admin_state', (YLeaf(YType.enumeration, 'transport-admin-state'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'DwdmAdminState', '')])),
                    ('laser', (YLeaf(YType.empty, 'laser'), ['Empty'])),
                    ('transmit_power', (YLeaf(YType.int32, 'transmit-power'), ['int'])),
                    ('rx_threshold', (YLeaf(YType.int32, 'rx-threshold'), ['int'])),
                    ('network_connection_id', (YLeaf(YType.str, 'network-connection-id'), ['str'])),
                    ('loopback', (YLeaf(YType.enumeration, 'loopback'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'DwdmLoopback', '')])),
                ])
                self.enable_vtxp = None
                self.network_port_id = None
                self.transport_admin_state = None
                self.laser = None
                self.transmit_power = None
                self.rx_threshold = None
                self.network_connection_id = None
                self.loopback = None

                self.network_srlgs = InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs()
                self.network_srlgs.parent = self
                self._children_name_map["network_srlgs"] = "network-srlgs"

                self.g709 = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709()
                self.g709.parent = self
                self._children_name_map["g709"] = "g709"

                self.wavelength = None
                self._children_name_map["wavelength"] = "wavelength"
                self._segment_path = lambda: "Cisco-IOS-XR-dwdm-ui-cfg:dwdm"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm, ['enable_vtxp', 'network_port_id', 'transport_admin_state', 'laser', 'transmit_power', 'rx_threshold', 'network_connection_id', 'loopback'], name, value)


            class NetworkSrlgs(Entity):
                """
                Configure Network srlgs
                
                .. attribute:: network_srlg
                
                	Configure network srlg sets
                	**type**\: list of  		 :py:class:`NetworkSrlg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs.NetworkSrlg>`
                
                

                """

                _prefix = 'dwdm-ui-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs, self).__init__()

                    self.yang_name = "network-srlgs"
                    self.yang_parent_name = "dwdm"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("network-srlg", ("network_srlg", InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs.NetworkSrlg))])
                    self._leafs = OrderedDict()

                    self.network_srlg = YList(self)
                    self._segment_path = lambda: "network-srlgs"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs, [], name, value)


                class NetworkSrlg(Entity):
                    """
                    Configure network srlg sets
                    
                    .. attribute:: set_id  (key)
                    
                    	Set index
                    	**type**\: int
                    
                    	**range:** 1..17
                    
                    .. attribute:: srlg1
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg2
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg3
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg4
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg5
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg6
                    
                    	none
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    

                    """

                    _prefix = 'dwdm-ui-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs.NetworkSrlg, self).__init__()

                        self.yang_name = "network-srlg"
                        self.yang_parent_name = "network-srlgs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['set_id']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('set_id', (YLeaf(YType.uint32, 'set-id'), ['int'])),
                            ('srlg1', (YLeaf(YType.uint32, 'srlg1'), ['int'])),
                            ('srlg2', (YLeaf(YType.uint32, 'srlg2'), ['int'])),
                            ('srlg3', (YLeaf(YType.uint32, 'srlg3'), ['int'])),
                            ('srlg4', (YLeaf(YType.uint32, 'srlg4'), ['int'])),
                            ('srlg5', (YLeaf(YType.uint32, 'srlg5'), ['int'])),
                            ('srlg6', (YLeaf(YType.uint32, 'srlg6'), ['int'])),
                        ])
                        self.set_id = None
                        self.srlg1 = None
                        self.srlg2 = None
                        self.srlg3 = None
                        self.srlg4 = None
                        self.srlg5 = None
                        self.srlg6 = None
                        self._segment_path = lambda: "network-srlg" + "[set-id='" + str(self.set_id) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.NetworkSrlgs.NetworkSrlg, ['set_id', 'srlg1', 'srlg2', 'srlg3', 'srlg4', 'srlg5', 'srlg6'], name, value)




            class G709(Entity):
                """
                Configure G709 parameters
                
                .. attribute:: odu
                
                	Configure ODU parameters
                	**type**\:  :py:class:`Odu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu>`
                
                .. attribute:: otu
                
                	Configure OTU parameters
                	**type**\:  :py:class:`Otu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu>`
                
                .. attribute:: prbs
                
                	Configure PRBS mode and pattern
                	**type**\:  :py:class:`Prbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Prbs>`
                
                	**presence node**\: True
                
                .. attribute:: fec
                
                	Configure FEC mode
                	**type**\:  :py:class:`Fec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Fec>`
                
                	**presence node**\: True
                
                .. attribute:: proactive
                
                	Enable proactive protectioni Graceful or Default mode
                	**type**\:  :py:class:`Proactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.Proactive>`
                
                .. attribute:: bdi_to_gais
                
                	Enable GAIS insertion
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: tim_to_gais
                
                	Configure Trace Identifier Mismatch alarm consequence
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: proactive_logging_file
                
                	Configure proactive protection log file
                	**type**\: str
                
                	**length:** 1..128
                
                .. attribute:: tti_processing
                
                	Configure Trail Trace Identifier  processing
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: enable
                
                	Disable or Enable g709 framing
                	**type**\: bool
                
                .. attribute:: framing
                
                	Over clocking mode for client signal bw compatibility
                	**type**\:  :py:class:`Framing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.Framing>`
                
                

                """

                _prefix = 'dwdm-ui-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709, self).__init__()

                    self.yang_name = "g709"
                    self.yang_parent_name = "dwdm"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("odu", ("odu", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu)), ("otu", ("otu", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu)), ("prbs", ("prbs", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Prbs)), ("fec", ("fec", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Fec))])
                    self._leafs = OrderedDict([
                        ('proactive', (YLeaf(YType.enumeration, 'proactive'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'Proactive', '')])),
                        ('bdi_to_gais', (YLeaf(YType.empty, 'bdi-to-gais'), ['Empty'])),
                        ('tim_to_gais', (YLeaf(YType.empty, 'tim-to-gais'), ['Empty'])),
                        ('proactive_logging_file', (YLeaf(YType.str, 'proactive-logging-file'), ['str'])),
                        ('tti_processing', (YLeaf(YType.empty, 'tti-processing'), ['Empty'])),
                        ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                        ('framing', (YLeaf(YType.enumeration, 'framing'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'Framing', '')])),
                    ])
                    self.proactive = None
                    self.bdi_to_gais = None
                    self.tim_to_gais = None
                    self.proactive_logging_file = None
                    self.tti_processing = None
                    self.enable = None
                    self.framing = None

                    self.odu = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu()
                    self.odu.parent = self
                    self._children_name_map["odu"] = "odu"

                    self.otu = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu()
                    self.otu.parent = self
                    self._children_name_map["otu"] = "otu"

                    self.prbs = None
                    self._children_name_map["prbs"] = "prbs"

                    self.fec = None
                    self._children_name_map["fec"] = "fec"
                    self._segment_path = lambda: "g709"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709, ['proactive', 'bdi_to_gais', 'tim_to_gais', 'proactive_logging_file', 'tti_processing', 'enable', 'framing'], name, value)


                class Odu(Entity):
                    """
                    Configure ODU parameters
                    
                    .. attribute:: odu_reports
                    
                    	Configure ODU alarm reporting
                    	**type**\:  :py:class:`OduReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports>`
                    
                    .. attribute:: odu_thresholds
                    
                    	Configure ODU threshold value
                    	**type**\:  :py:class:`OduThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds>`
                    
                    .. attribute:: odu_expected_tti
                    
                    	Configure ODU Expected TTI value
                    	**type**\:  :py:class:`OduExpectedTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduExpectedTti>`
                    
                    .. attribute:: odu_tx_tti
                    
                    	Configure ODU TTI value
                    	**type**\:  :py:class:`OduTxTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduTxTti>`
                    
                    

                    """

                    _prefix = 'dwdm-ui-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu, self).__init__()

                        self.yang_name = "odu"
                        self.yang_parent_name = "g709"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("odu-reports", ("odu_reports", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports)), ("odu-thresholds", ("odu_thresholds", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds)), ("odu-expected-tti", ("odu_expected_tti", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduExpectedTti)), ("odu-tx-tti", ("odu_tx_tti", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduTxTti))])
                        self._leafs = OrderedDict()

                        self.odu_reports = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports()
                        self.odu_reports.parent = self
                        self._children_name_map["odu_reports"] = "odu-reports"

                        self.odu_thresholds = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds()
                        self.odu_thresholds.parent = self
                        self._children_name_map["odu_thresholds"] = "odu-thresholds"

                        self.odu_expected_tti = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduExpectedTti()
                        self.odu_expected_tti.parent = self
                        self._children_name_map["odu_expected_tti"] = "odu-expected-tti"

                        self.odu_tx_tti = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduTxTti()
                        self.odu_tx_tti.parent = self
                        self._children_name_map["odu_tx_tti"] = "odu-tx-tti"
                        self._segment_path = lambda: "odu"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu, [], name, value)


                    class OduReports(Entity):
                        """
                        Configure ODU alarm reporting
                        
                        .. attribute:: odu_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`OduReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports.OduReport>`
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports, self).__init__()

                            self.yang_name = "odu-reports"
                            self.yang_parent_name = "odu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("odu-report", ("odu_report", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports.OduReport))])
                            self._leafs = OrderedDict()

                            self.odu_report = YList(self)
                            self._segment_path = lambda: "odu-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports, [], name, value)


                        class OduReport(Entity):
                            """
                            none
                            
                            .. attribute:: alarm  (key)
                            
                            	ODU alarm type
                            	**type**\:  :py:class:`OduAlarm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.OduAlarm>`
                            
                            

                            """

                            _prefix = 'dwdm-ui-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports.OduReport, self).__init__()

                                self.yang_name = "odu-report"
                                self.yang_parent_name = "odu-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['alarm']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('alarm', (YLeaf(YType.enumeration, 'alarm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'OduAlarm', '')])),
                                ])
                                self.alarm = None
                                self._segment_path = lambda: "odu-report" + "[alarm='" + str(self.alarm) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduReports.OduReport, ['alarm'], name, value)




                    class OduThresholds(Entity):
                        """
                        Configure ODU threshold value
                        
                        .. attribute:: odu_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`OduThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds.OduThreshold>`
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds, self).__init__()

                            self.yang_name = "odu-thresholds"
                            self.yang_parent_name = "odu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("odu-threshold", ("odu_threshold", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds.OduThreshold))])
                            self._leafs = OrderedDict()

                            self.odu_threshold = YList(self)
                            self._segment_path = lambda: "odu-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds, [], name, value)


                        class OduThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: threshold  (key)
                            
                            	ODU Threshold type
                            	**type**\:  :py:class:`OduThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.OduThreshold>`
                            
                            .. attribute:: threshold_value
                            
                            	Bit error rate (10 to the minus n)
                            	**type**\: int
                            
                            	**range:** 1..9
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'dwdm-ui-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds.OduThreshold, self).__init__()

                                self.yang_name = "odu-threshold"
                                self.yang_parent_name = "odu-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('threshold', (YLeaf(YType.enumeration, 'threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'OduThreshold', '')])),
                                    ('threshold_value', (YLeaf(YType.uint32, 'threshold-value'), ['int'])),
                                ])
                                self.threshold = None
                                self.threshold_value = None
                                self._segment_path = lambda: "odu-threshold" + "[threshold='" + str(self.threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduThresholds.OduThreshold, ['threshold', 'threshold_value'], name, value)




                    class OduExpectedTti(Entity):
                        """
                        Configure ODU Expected TTI value
                        
                        .. attribute:: string_type
                        
                        	TTI string type (ascii or hex format)
                        	**type**\:  :py:class:`ExpectedTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.ExpectedTti>`
                        
                        .. attribute:: ascii_string
                        
                        	ASCII text (Max 64 characters)
                        	**type**\: str
                        
                        	**length:** 1..64
                        
                        .. attribute:: hex_string
                        
                        	Hex nibbles (Max 128\- The string length should be an even number)
                        	**type**\: str
                        
                        	**length:** 1..128
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduExpectedTti, self).__init__()

                            self.yang_name = "odu-expected-tti"
                            self.yang_parent_name = "odu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'ExpectedTti', '')])),
                                ('ascii_string', (YLeaf(YType.str, 'ascii-string'), ['str'])),
                                ('hex_string', (YLeaf(YType.str, 'hex-string'), ['str'])),
                            ])
                            self.string_type = None
                            self.ascii_string = None
                            self.hex_string = None
                            self._segment_path = lambda: "odu-expected-tti"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduExpectedTti, ['string_type', 'ascii_string', 'hex_string'], name, value)



                    class OduTxTti(Entity):
                        """
                        Configure ODU TTI value
                        
                        .. attribute:: string_type
                        
                        	TTI string type (ascii or hex format)
                        	**type**\:  :py:class:`TxTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.TxTti>`
                        
                        .. attribute:: ascii_string
                        
                        	ASCII text (Max 64 characters)
                        	**type**\: str
                        
                        	**length:** 1..64
                        
                        .. attribute:: hex_string
                        
                        	Hex nibbles (Max 128\- The string length should be an even number)
                        	**type**\: str
                        
                        	**length:** 1..128
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduTxTti, self).__init__()

                            self.yang_name = "odu-tx-tti"
                            self.yang_parent_name = "odu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'TxTti', '')])),
                                ('ascii_string', (YLeaf(YType.str, 'ascii-string'), ['str'])),
                                ('hex_string', (YLeaf(YType.str, 'hex-string'), ['str'])),
                            ])
                            self.string_type = None
                            self.ascii_string = None
                            self.hex_string = None
                            self._segment_path = lambda: "odu-tx-tti"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Odu.OduTxTti, ['string_type', 'ascii_string', 'hex_string'], name, value)




                class Otu(Entity):
                    """
                    Configure OTU parameters
                    
                    .. attribute:: otu_expected_tti
                    
                    	Configure OTU Expected TTI value
                    	**type**\:  :py:class:`OtuExpectedTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuExpectedTti>`
                    
                    .. attribute:: otu_thresholds
                    
                    	Configure OTU threshold value
                    	**type**\:  :py:class:`OtuThresholds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds>`
                    
                    .. attribute:: frr
                    
                    	Configure FRR thresholds and Window for trigger and revert
                    	**type**\:  :py:class:`Frr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr>`
                    
                    .. attribute:: otu_reports
                    
                    	Configure OTU alarm reporting
                    	**type**\:  :py:class:`OtuReports <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports>`
                    
                    .. attribute:: otu_tx_tti
                    
                    	Configure OTU TTI value
                    	**type**\:  :py:class:`OtuTxTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuTxTti>`
                    
                    

                    """

                    _prefix = 'dwdm-ui-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu, self).__init__()

                        self.yang_name = "otu"
                        self.yang_parent_name = "g709"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("otu-expected-tti", ("otu_expected_tti", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuExpectedTti)), ("otu-thresholds", ("otu_thresholds", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds)), ("frr", ("frr", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr)), ("otu-reports", ("otu_reports", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports)), ("otu-tx-tti", ("otu_tx_tti", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuTxTti))])
                        self._leafs = OrderedDict()

                        self.otu_expected_tti = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuExpectedTti()
                        self.otu_expected_tti.parent = self
                        self._children_name_map["otu_expected_tti"] = "otu-expected-tti"

                        self.otu_thresholds = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds()
                        self.otu_thresholds.parent = self
                        self._children_name_map["otu_thresholds"] = "otu-thresholds"

                        self.frr = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr()
                        self.frr.parent = self
                        self._children_name_map["frr"] = "frr"

                        self.otu_reports = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports()
                        self.otu_reports.parent = self
                        self._children_name_map["otu_reports"] = "otu-reports"

                        self.otu_tx_tti = InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuTxTti()
                        self.otu_tx_tti.parent = self
                        self._children_name_map["otu_tx_tti"] = "otu-tx-tti"
                        self._segment_path = lambda: "otu"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu, [], name, value)


                    class OtuExpectedTti(Entity):
                        """
                        Configure OTU Expected TTI value
                        
                        .. attribute:: string_type
                        
                        	TTI string type (ascii or hex format)
                        	**type**\:  :py:class:`ExpectedTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.ExpectedTti>`
                        
                        .. attribute:: ascii_string
                        
                        	ASCII text (Max 64 characters)
                        	**type**\: str
                        
                        	**length:** 1..64
                        
                        .. attribute:: hex_string
                        
                        	Hex nibbles (Max 128\- The string length should be an even number)
                        	**type**\: str
                        
                        	**length:** 1..128
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuExpectedTti, self).__init__()

                            self.yang_name = "otu-expected-tti"
                            self.yang_parent_name = "otu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'ExpectedTti', '')])),
                                ('ascii_string', (YLeaf(YType.str, 'ascii-string'), ['str'])),
                                ('hex_string', (YLeaf(YType.str, 'hex-string'), ['str'])),
                            ])
                            self.string_type = None
                            self.ascii_string = None
                            self.hex_string = None
                            self._segment_path = lambda: "otu-expected-tti"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuExpectedTti, ['string_type', 'ascii_string', 'hex_string'], name, value)



                    class OtuThresholds(Entity):
                        """
                        Configure OTU threshold value
                        
                        .. attribute:: otu_threshold
                        
                        	none
                        	**type**\: list of  		 :py:class:`OtuThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds.OtuThreshold>`
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds, self).__init__()

                            self.yang_name = "otu-thresholds"
                            self.yang_parent_name = "otu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("otu-threshold", ("otu_threshold", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds.OtuThreshold))])
                            self._leafs = OrderedDict()

                            self.otu_threshold = YList(self)
                            self._segment_path = lambda: "otu-thresholds"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds, [], name, value)


                        class OtuThreshold(Entity):
                            """
                            none
                            
                            .. attribute:: threshold  (key)
                            
                            	OTU Threshold type
                            	**type**\:  :py:class:`OtuThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.OtuThreshold>`
                            
                            .. attribute:: threshold_value
                            
                            	Bit error rate (10 to the minus n)
                            	**type**\: int
                            
                            	**range:** 1..9
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'dwdm-ui-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds.OtuThreshold, self).__init__()

                                self.yang_name = "otu-threshold"
                                self.yang_parent_name = "otu-thresholds"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['threshold']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('threshold', (YLeaf(YType.enumeration, 'threshold'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'OtuThreshold', '')])),
                                    ('threshold_value', (YLeaf(YType.uint32, 'threshold-value'), ['int'])),
                                ])
                                self.threshold = None
                                self.threshold_value = None
                                self._segment_path = lambda: "otu-threshold" + "[threshold='" + str(self.threshold) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuThresholds.OtuThreshold, ['threshold', 'threshold_value'], name, value)




                    class Frr(Entity):
                        """
                        Configure FRR thresholds and Window for
                        trigger and revert
                        
                        .. attribute:: trigger_window
                        
                        	Configure FRR trigger window
                        	**type**\:  :py:class:`TriggerWindow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.TriggerWindow>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: revert_threshold
                        
                        	Configure proactive protection revert threshold
                        	**type**\:  :py:class:`RevertThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.RevertThreshold>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: trigger_threshold
                        
                        	Configure proactive protection trigger threshold
                        	**type**\:  :py:class:`TriggerThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.TriggerThreshold>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: revert_window
                        
                        	Configure FRR revert window
                        	**type**\:  :py:class:`RevertWindow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.RevertWindow>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr, self).__init__()

                            self.yang_name = "frr"
                            self.yang_parent_name = "otu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("trigger-window", ("trigger_window", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.TriggerWindow)), ("revert-threshold", ("revert_threshold", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.RevertThreshold)), ("trigger-threshold", ("trigger_threshold", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.TriggerThreshold)), ("revert-window", ("revert_window", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.RevertWindow))])
                            self._leafs = OrderedDict()

                            self.trigger_window = None
                            self._children_name_map["trigger_window"] = "trigger-window"

                            self.revert_threshold = None
                            self._children_name_map["revert_threshold"] = "revert-threshold"

                            self.trigger_threshold = None
                            self._children_name_map["trigger_threshold"] = "trigger-threshold"

                            self.revert_window = None
                            self._children_name_map["revert_window"] = "revert-window"
                            self._segment_path = lambda: "frr"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr, [], name, value)


                        class TriggerWindow(Entity):
                            """
                            Configure FRR trigger window
                            
                            .. attribute:: window
                            
                            	Integration window for FRR trigger in MS
                            	**type**\: int
                            
                            	**range:** 10..10000
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dummy
                            
                            	Just a Dummy for window for FRR revert in MS
                            	**type**\: int
                            
                            	**range:** 0..2
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'dwdm-ui-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.TriggerWindow, self).__init__()

                                self.yang_name = "trigger-window"
                                self.yang_parent_name = "frr"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('window', (YLeaf(YType.uint32, 'window'), ['int'])),
                                    ('dummy', (YLeaf(YType.uint32, 'dummy'), ['int'])),
                                ])
                                self.window = None
                                self.dummy = None
                                self._segment_path = lambda: "trigger-window"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.TriggerWindow, ['window', 'dummy'], name, value)



                        class RevertThreshold(Entity):
                            """
                            Configure proactive protection revert
                            threshold
                            
                            .. attribute:: ber_base
                            
                            	Bit error rate base (x of xE\-y)
                            	**type**\: int
                            
                            	**range:** 1..9
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ber_power
                            
                            	Bit error rate power (y of xE\-y)
                            	**type**\: int
                            
                            	**range:** 3..10
                            
                            	**mandatory**\: True
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'dwdm-ui-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.RevertThreshold, self).__init__()

                                self.yang_name = "revert-threshold"
                                self.yang_parent_name = "frr"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('ber_base', (YLeaf(YType.uint32, 'ber-base'), ['int'])),
                                    ('ber_power', (YLeaf(YType.uint32, 'ber-power'), ['int'])),
                                ])
                                self.ber_base = None
                                self.ber_power = None
                                self._segment_path = lambda: "revert-threshold"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.RevertThreshold, ['ber_base', 'ber_power'], name, value)



                        class TriggerThreshold(Entity):
                            """
                            Configure proactive protection trigger
                            threshold
                            
                            .. attribute:: ber_base
                            
                            	Bit error rate base (x of xE\-y)
                            	**type**\: int
                            
                            	**range:** 1..9
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ber_power
                            
                            	Bit error rate power (y of xE\-y)
                            	**type**\: int
                            
                            	**range:** 2..9
                            
                            	**mandatory**\: True
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'dwdm-ui-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.TriggerThreshold, self).__init__()

                                self.yang_name = "trigger-threshold"
                                self.yang_parent_name = "frr"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('ber_base', (YLeaf(YType.uint32, 'ber-base'), ['int'])),
                                    ('ber_power', (YLeaf(YType.uint32, 'ber-power'), ['int'])),
                                ])
                                self.ber_base = None
                                self.ber_power = None
                                self._segment_path = lambda: "trigger-threshold"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.TriggerThreshold, ['ber_base', 'ber_power'], name, value)



                        class RevertWindow(Entity):
                            """
                            Configure FRR revert window
                            
                            .. attribute:: window
                            
                            	Integration window for FRR revert in MS
                            	**type**\: int
                            
                            	**range:** 500..100000
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dummy
                            
                            	Just a Dummy for window for FRR revert in MS
                            	**type**\: int
                            
                            	**range:** 0..2
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'dwdm-ui-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.RevertWindow, self).__init__()

                                self.yang_name = "revert-window"
                                self.yang_parent_name = "frr"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('window', (YLeaf(YType.uint32, 'window'), ['int'])),
                                    ('dummy', (YLeaf(YType.uint32, 'dummy'), ['int'])),
                                ])
                                self.window = None
                                self.dummy = None
                                self._segment_path = lambda: "revert-window"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.Frr.RevertWindow, ['window', 'dummy'], name, value)




                    class OtuReports(Entity):
                        """
                        Configure OTU alarm reporting
                        
                        .. attribute:: otu_report
                        
                        	none
                        	**type**\: list of  		 :py:class:`OtuReport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports.OtuReport>`
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports, self).__init__()

                            self.yang_name = "otu-reports"
                            self.yang_parent_name = "otu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("otu-report", ("otu_report", InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports.OtuReport))])
                            self._leafs = OrderedDict()

                            self.otu_report = YList(self)
                            self._segment_path = lambda: "otu-reports"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports, [], name, value)


                        class OtuReport(Entity):
                            """
                            none
                            
                            .. attribute:: alarm  (key)
                            
                            	OTU alarm type
                            	**type**\:  :py:class:`OtuAlarm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.OtuAlarm>`
                            
                            

                            """

                            _prefix = 'dwdm-ui-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports.OtuReport, self).__init__()

                                self.yang_name = "otu-report"
                                self.yang_parent_name = "otu-reports"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['alarm']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('alarm', (YLeaf(YType.enumeration, 'alarm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'OtuAlarm', '')])),
                                ])
                                self.alarm = None
                                self._segment_path = lambda: "otu-report" + "[alarm='" + str(self.alarm) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuReports.OtuReport, ['alarm'], name, value)




                    class OtuTxTti(Entity):
                        """
                        Configure OTU TTI value
                        
                        .. attribute:: string_type
                        
                        	TTI string type (ascii or hex format)
                        	**type**\:  :py:class:`TxTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.TxTti>`
                        
                        .. attribute:: ascii_string
                        
                        	ASCII text (Max 64 characters)
                        	**type**\: str
                        
                        	**length:** 1..64
                        
                        .. attribute:: hex_string
                        
                        	Hex nibbles (Max 128\- The string length should be an even number)
                        	**type**\: str
                        
                        	**length:** 1..128
                        
                        

                        """

                        _prefix = 'dwdm-ui-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuTxTti, self).__init__()

                            self.yang_name = "otu-tx-tti"
                            self.yang_parent_name = "otu"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'TxTti', '')])),
                                ('ascii_string', (YLeaf(YType.str, 'ascii-string'), ['str'])),
                                ('hex_string', (YLeaf(YType.str, 'hex-string'), ['str'])),
                            ])
                            self.string_type = None
                            self.ascii_string = None
                            self.hex_string = None
                            self._segment_path = lambda: "otu-tx-tti"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Otu.OtuTxTti, ['string_type', 'ascii_string', 'hex_string'], name, value)




                class Prbs(Entity):
                    """
                    Configure PRBS mode and pattern
                    
                    .. attribute:: prbs_mode
                    
                    	Enable PRBS with mode
                    	**type**\:  :py:class:`PrbsMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.PrbsMode>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: prbs_pattern
                    
                    	Enable prbs test with pattern
                    	**type**\:  :py:class:`PrbsPattern <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.PrbsPattern>`
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'dwdm-ui-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Prbs, self).__init__()

                        self.yang_name = "prbs"
                        self.yang_parent_name = "g709"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('prbs_mode', (YLeaf(YType.enumeration, 'prbs-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'PrbsMode', '')])),
                            ('prbs_pattern', (YLeaf(YType.enumeration, 'prbs-pattern'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'PrbsPattern', '')])),
                        ])
                        self.prbs_mode = None
                        self.prbs_pattern = None
                        self._segment_path = lambda: "prbs"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Prbs, ['prbs_mode', 'prbs_pattern'], name, value)



                class Fec(Entity):
                    """
                    Configure FEC mode
                    
                    .. attribute:: fec_mode
                    
                    	None, Standard, Enhanced, High\-Gain, Long\-Haul, Ci\-BCH, SD\-Everest, SD\-Denali
                    	**type**\:  :py:class:`Fec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.Fec>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: efec_mode
                    
                    	Enhanced FECMode to use i.4, i.7, Other FECMode to use None
                    	**type**\:  :py:class:`Efec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.Efec>`
                    
                    	**default value**\: none
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'dwdm-ui-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Fec, self).__init__()

                        self.yang_name = "fec"
                        self.yang_parent_name = "g709"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('fec_mode', (YLeaf(YType.enumeration, 'fec-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'Fec', '')])),
                            ('efec_mode', (YLeaf(YType.enumeration, 'efec-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'Efec', '')])),
                        ])
                        self.fec_mode = None
                        self.efec_mode = None
                        self._segment_path = lambda: "fec"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.G709.Fec, ['fec_mode', 'efec_mode'], name, value)




            class Wavelength(Entity):
                """
                Configure transponder wavelength
                
                .. attribute:: wave_channel
                
                	Select a ITU channel number,channel range for C\-band\: 1~82,L\-band\:106~185,spacing\:50GHZ or 100MHz
                	**type**\: int
                
                	**range:** 1..1568362
                
                	**mandatory**\: True
                
                .. attribute:: wave_channel_number
                
                	Wave Channel Number
                	**type**\:  :py:class:`WaveChannelNum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg.WaveChannelNum>`
                
                	**mandatory**\: True
                
                .. attribute:: prog_frequency
                
                	Enter Frequency Data in THz
                	**type**\: str
                
                	**length:** 1..128
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'dwdm-ui-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Dwdm.Wavelength, self).__init__()

                    self.yang_name = "wavelength"
                    self.yang_parent_name = "dwdm"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('wave_channel', (YLeaf(YType.uint32, 'wave-channel'), ['int'])),
                        ('wave_channel_number', (YLeaf(YType.enumeration, 'wave-channel-number'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_dwdm_ui_cfg', 'WaveChannelNum', '')])),
                        ('prog_frequency', (YLeaf(YType.str, 'prog-frequency'), ['str'])),
                    ])
                    self.wave_channel = None
                    self.wave_channel_number = None
                    self.prog_frequency = None
                    self._segment_path = lambda: "wavelength"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dwdm.Wavelength, ['wave_channel', 'wave_channel_number', 'prog_frequency'], name, value)




        class Qos(Entity):
            """
            Interface QOS configuration
            
            .. attribute:: output
            
            	Egress service policy
            	**type**\:  :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Output>`
            
            .. attribute:: input
            
            	Ingress service policy
            	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Input>`
            
            

            """

            _prefix = 'qos-ma-cfg'
            _revision = '2018-02-27'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Qos, self).__init__()

                self.yang_name = "qos"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("output", ("output", InterfaceConfigurations.InterfaceConfiguration.Qos.Output)), ("input", ("input", InterfaceConfigurations.InterfaceConfiguration.Qos.Input))])
                self._leafs = OrderedDict()

                self.output = InterfaceConfigurations.InterfaceConfiguration.Qos.Output()
                self.output.parent = self
                self._children_name_map["output"] = "output"

                self.input = InterfaceConfigurations.InterfaceConfiguration.Qos.Input()
                self.input.parent = self
                self._children_name_map["input"] = "input"
                self._segment_path = lambda: "Cisco-IOS-XR-qos-ma-cfg:qos"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos, [], name, value)


            class Output(Entity):
                """
                Egress service policy
                
                .. attribute:: service_policy
                
                	Service policy details
                	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicy>`
                
                .. attribute:: service_policy_qos
                
                	Service policy details
                	**type**\: list of  		 :py:class:`ServicePolicyQos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos>`
                
                

                """

                _prefix = 'qos-ma-cfg'
                _revision = '2018-02-27'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Qos.Output, self).__init__()

                    self.yang_name = "output"
                    self.yang_parent_name = "qos"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicy)), ("service-policy-qos", ("service_policy_qos", InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos))])
                    self._leafs = OrderedDict()

                    self.service_policy = YList(self)
                    self.service_policy_qos = YList(self)
                    self._segment_path = lambda: "output"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Output, [], name, value)


                class ServicePolicy(Entity):
                    """
                    Service policy details
                    
                    .. attribute:: service_policy_name  (key)
                    
                    	Name of policy\-map
                    	**type**\: str
                    
                    	**length:** 0..64
                    
                    .. attribute:: account_type
                    
                    	Turn off L2 or L3 accounting
                    	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                    
                    .. attribute:: l1_user_defined
                    
                    	User specified value
                    	**type**\: int
                    
                    	**range:** \-63..63
                    
                    .. attribute:: spi_name
                    
                    	Name of the SPI
                    	**type**\: str
                    
                    .. attribute:: subscriber_parent_policy
                    
                    	TRUE if service\-policy applied on svlan
                    	**type**\: bool
                    
                    .. attribute:: resource_id
                    
                    	Resource ID value
                    	**type**\: int
                    
                    	**range:** 0..3
                    
                    .. attribute:: service_fragment_parent_policy
                    
                    	service\-fragment\-parent\-policy
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'qos-ma-cfg'
                    _revision = '2018-02-27'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicy, self).__init__()

                        self.yang_name = "service-policy"
                        self.yang_parent_name = "output"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['service_policy_name']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                            ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                            ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                            ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                            ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                            ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                            ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                        ])
                        self.service_policy_name = None
                        self.account_type = None
                        self.l1_user_defined = None
                        self.spi_name = None
                        self.subscriber_parent_policy = None
                        self.resource_id = None
                        self.service_fragment_parent_policy = None
                        self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicy, ['service_policy_name', 'account_type', 'l1_user_defined', 'spi_name', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)



                class ServicePolicyQos(Entity):
                    """
                    Service policy details
                    
                    .. attribute:: service_policy_name  (key)
                    
                    	Name of policy\-map
                    	**type**\: str
                    
                    	**length:** 0..64
                    
                    .. attribute:: subscriber_group_names
                    
                    	Subscriber Group Name Details
                    	**type**\:  :py:class:`SubscriberGroupNames <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames>`
                    
                    .. attribute:: subscriber_parent
                    
                    	Subscriber Parent Details
                    	**type**\:  :py:class:`SubscriberParent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberParent>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'qos-ma-cfg'
                    _revision = '2018-02-27'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos, self).__init__()

                        self.yang_name = "service-policy-qos"
                        self.yang_parent_name = "output"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['service_policy_name']
                        self._child_classes = OrderedDict([("subscriber-group-names", ("subscriber_group_names", InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames)), ("subscriber-parent", ("subscriber_parent", InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberParent))])
                        self._leafs = OrderedDict([
                            ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                        ])
                        self.service_policy_name = None

                        self.subscriber_group_names = InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames()
                        self.subscriber_group_names.parent = self
                        self._children_name_map["subscriber_group_names"] = "subscriber-group-names"

                        self.subscriber_parent = None
                        self._children_name_map["subscriber_parent"] = "subscriber-parent"
                        self._segment_path = lambda: "service-policy-qos" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos, ['service_policy_name'], name, value)


                    class SubscriberGroupNames(Entity):
                        """
                        Subscriber Group Name Details
                        
                        .. attribute:: subscriber_group_name
                        
                        	Subscriber Group details
                        	**type**\: list of  		 :py:class:`SubscriberGroupName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName>`
                        
                        

                        """

                        _prefix = 'qos-ma-cfg'
                        _revision = '2018-02-27'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames, self).__init__()

                            self.yang_name = "subscriber-group-names"
                            self.yang_parent_name = "service-policy-qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("subscriber-group-name", ("subscriber_group_name", InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName))])
                            self._leafs = OrderedDict()

                            self.subscriber_group_name = YList(self)
                            self._segment_path = lambda: "subscriber-group-names"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames, [], name, value)


                        class SubscriberGroupName(Entity):
                            """
                            Subscriber Group details
                            
                            .. attribute:: subscriber_group_string  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: account_type
                            
                            	Turn off L2 or L3 accounting
                            	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                            
                            .. attribute:: l1_user_defined
                            
                            	User specified value
                            	**type**\: int
                            
                            	**range:** \-63..63
                            
                            .. attribute:: spi_name
                            
                            	Name of the SPI
                            	**type**\: str
                            
                            .. attribute:: policy_merge
                            
                            	Not supported (Leave unspecified)
                            	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                            
                            .. attribute:: subscriber_parent_policy
                            
                            	TRUE if service\-policy applied on svlan
                            	**type**\: bool
                            
                            .. attribute:: resource_id
                            
                            	Resource ID value
                            	**type**\: int
                            
                            	**range:** 0..3
                            
                            .. attribute:: service_fragment_parent_policy
                            
                            	TRUE if service\-policy applied is a service\-fragment policy)
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, self).__init__()

                                self.yang_name = "subscriber-group-name"
                                self.yang_parent_name = "subscriber-group-names"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['subscriber_group_string']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('subscriber_group_string', (YLeaf(YType.str, 'subscriber-group-string'), ['str'])),
                                    ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                    ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                    ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                    ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                    ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                    ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                    ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                ])
                                self.subscriber_group_string = None
                                self.account_type = None
                                self.l1_user_defined = None
                                self.spi_name = None
                                self.policy_merge = None
                                self.subscriber_parent_policy = None
                                self.resource_id = None
                                self.service_fragment_parent_policy = None
                                self._segment_path = lambda: "subscriber-group-name" + "[subscriber-group-string='" + str(self.subscriber_group_string) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, ['subscriber_group_string', 'account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)




                    class SubscriberParent(Entity):
                        """
                        Subscriber Parent Details
                        
                        .. attribute:: account_type
                        
                        	Turn off L2 or L3 accounting
                        	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                        
                        .. attribute:: l1_user_defined
                        
                        	User specified value
                        	**type**\: int
                        
                        	**range:** \-63..63
                        
                        .. attribute:: spi_name
                        
                        	Name of the SPI
                        	**type**\: str
                        
                        .. attribute:: policy_merge
                        
                        	Not supported (Leave unspecified)
                        	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                        
                        .. attribute:: subscriber_parent_policy
                        
                        	TRUE if service\-policy applied on svlan
                        	**type**\: bool
                        
                        .. attribute:: resource_id
                        
                        	Resource ID value
                        	**type**\: int
                        
                        	**range:** 0..3
                        
                        .. attribute:: service_fragment_parent_policy
                        
                        	TRUE if service\-policy applied is a service\-fragment policy)
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos-ma-cfg'
                        _revision = '2018-02-27'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberParent, self).__init__()

                            self.yang_name = "subscriber-parent"
                            self.yang_parent_name = "service-policy-qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                            ])
                            self.account_type = None
                            self.l1_user_defined = None
                            self.spi_name = None
                            self.policy_merge = None
                            self.subscriber_parent_policy = None
                            self.resource_id = None
                            self.service_fragment_parent_policy = None
                            self._segment_path = lambda: "subscriber-parent"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Output.ServicePolicyQos.SubscriberParent, ['account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)





            class Input(Entity):
                """
                Ingress service policy
                
                .. attribute:: service_policy
                
                	Service policy details
                	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicy>`
                
                .. attribute:: service_policy_qos
                
                	Service policy details
                	**type**\: list of  		 :py:class:`ServicePolicyQos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos>`
                
                

                """

                _prefix = 'qos-ma-cfg'
                _revision = '2018-02-27'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Qos.Input, self).__init__()

                    self.yang_name = "input"
                    self.yang_parent_name = "qos"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicy)), ("service-policy-qos", ("service_policy_qos", InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos))])
                    self._leafs = OrderedDict()

                    self.service_policy = YList(self)
                    self.service_policy_qos = YList(self)
                    self._segment_path = lambda: "input"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Input, [], name, value)


                class ServicePolicy(Entity):
                    """
                    Service policy details
                    
                    .. attribute:: service_policy_name  (key)
                    
                    	Name of policy\-map
                    	**type**\: str
                    
                    	**length:** 0..64
                    
                    .. attribute:: account_type
                    
                    	Turn off L2 or L3 accounting
                    	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                    
                    .. attribute:: l1_user_defined
                    
                    	User specified value
                    	**type**\: int
                    
                    	**range:** \-63..63
                    
                    .. attribute:: spi_name
                    
                    	Name of the SPI
                    	**type**\: str
                    
                    .. attribute:: subscriber_parent_policy
                    
                    	TRUE if service\-policy applied on svlan
                    	**type**\: bool
                    
                    .. attribute:: resource_id
                    
                    	Resource ID value
                    	**type**\: int
                    
                    	**range:** 0..3
                    
                    .. attribute:: service_fragment_parent_policy
                    
                    	service\-fragment\-parent\-policy
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'qos-ma-cfg'
                    _revision = '2018-02-27'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicy, self).__init__()

                        self.yang_name = "service-policy"
                        self.yang_parent_name = "input"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['service_policy_name']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                            ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                            ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                            ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                            ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                            ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                            ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                        ])
                        self.service_policy_name = None
                        self.account_type = None
                        self.l1_user_defined = None
                        self.spi_name = None
                        self.subscriber_parent_policy = None
                        self.resource_id = None
                        self.service_fragment_parent_policy = None
                        self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicy, ['service_policy_name', 'account_type', 'l1_user_defined', 'spi_name', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)



                class ServicePolicyQos(Entity):
                    """
                    Service policy details
                    
                    .. attribute:: service_policy_name  (key)
                    
                    	Name of policy\-map
                    	**type**\: str
                    
                    	**length:** 0..64
                    
                    .. attribute:: subscriber_group_names
                    
                    	Subscriber Group Name Details
                    	**type**\:  :py:class:`SubscriberGroupNames <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames>`
                    
                    .. attribute:: subscriber_parent
                    
                    	Subscriber Parent Details
                    	**type**\:  :py:class:`SubscriberParent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberParent>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'qos-ma-cfg'
                    _revision = '2018-02-27'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos, self).__init__()

                        self.yang_name = "service-policy-qos"
                        self.yang_parent_name = "input"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['service_policy_name']
                        self._child_classes = OrderedDict([("subscriber-group-names", ("subscriber_group_names", InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames)), ("subscriber-parent", ("subscriber_parent", InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberParent))])
                        self._leafs = OrderedDict([
                            ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                        ])
                        self.service_policy_name = None

                        self.subscriber_group_names = InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames()
                        self.subscriber_group_names.parent = self
                        self._children_name_map["subscriber_group_names"] = "subscriber-group-names"

                        self.subscriber_parent = None
                        self._children_name_map["subscriber_parent"] = "subscriber-parent"
                        self._segment_path = lambda: "service-policy-qos" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos, ['service_policy_name'], name, value)


                    class SubscriberGroupNames(Entity):
                        """
                        Subscriber Group Name Details
                        
                        .. attribute:: subscriber_group_name
                        
                        	Subscriber Group details
                        	**type**\: list of  		 :py:class:`SubscriberGroupName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName>`
                        
                        

                        """

                        _prefix = 'qos-ma-cfg'
                        _revision = '2018-02-27'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames, self).__init__()

                            self.yang_name = "subscriber-group-names"
                            self.yang_parent_name = "service-policy-qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("subscriber-group-name", ("subscriber_group_name", InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName))])
                            self._leafs = OrderedDict()

                            self.subscriber_group_name = YList(self)
                            self._segment_path = lambda: "subscriber-group-names"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames, [], name, value)


                        class SubscriberGroupName(Entity):
                            """
                            Subscriber Group details
                            
                            .. attribute:: subscriber_group_string  (key)
                            
                            	Name of policy\-map
                            	**type**\: str
                            
                            	**length:** 0..64
                            
                            .. attribute:: account_type
                            
                            	Turn off L2 or L3 accounting
                            	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                            
                            .. attribute:: l1_user_defined
                            
                            	User specified value
                            	**type**\: int
                            
                            	**range:** \-63..63
                            
                            .. attribute:: spi_name
                            
                            	Name of the SPI
                            	**type**\: str
                            
                            .. attribute:: policy_merge
                            
                            	Not supported (Leave unspecified)
                            	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                            
                            .. attribute:: subscriber_parent_policy
                            
                            	TRUE if service\-policy applied on svlan
                            	**type**\: bool
                            
                            .. attribute:: resource_id
                            
                            	Resource ID value
                            	**type**\: int
                            
                            	**range:** 0..3
                            
                            .. attribute:: service_fragment_parent_policy
                            
                            	TRUE if service\-policy applied is a service\-fragment policy)
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'qos-ma-cfg'
                            _revision = '2018-02-27'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, self).__init__()

                                self.yang_name = "subscriber-group-name"
                                self.yang_parent_name = "subscriber-group-names"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['subscriber_group_string']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('subscriber_group_string', (YLeaf(YType.str, 'subscriber-group-string'), ['str'])),
                                    ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                    ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                    ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                    ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                    ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                    ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                    ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                                ])
                                self.subscriber_group_string = None
                                self.account_type = None
                                self.l1_user_defined = None
                                self.spi_name = None
                                self.policy_merge = None
                                self.subscriber_parent_policy = None
                                self.resource_id = None
                                self.service_fragment_parent_policy = None
                                self._segment_path = lambda: "subscriber-group-name" + "[subscriber-group-string='" + str(self.subscriber_group_string) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberGroupNames.SubscriberGroupName, ['subscriber_group_string', 'account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)




                    class SubscriberParent(Entity):
                        """
                        Subscriber Parent Details
                        
                        .. attribute:: account_type
                        
                        	Turn off L2 or L3 accounting
                        	**type**\:  :py:class:`QosPolicyAccount <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosPolicyAccount>`
                        
                        .. attribute:: l1_user_defined
                        
                        	User specified value
                        	**type**\: int
                        
                        	**range:** \-63..63
                        
                        .. attribute:: spi_name
                        
                        	Name of the SPI
                        	**type**\: str
                        
                        .. attribute:: policy_merge
                        
                        	Not supported (Leave unspecified)
                        	**type**\:  :py:class:`QosFieldNotSupported <ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg.QosFieldNotSupported>`
                        
                        .. attribute:: subscriber_parent_policy
                        
                        	TRUE if service\-policy applied on svlan
                        	**type**\: bool
                        
                        .. attribute:: resource_id
                        
                        	Resource ID value
                        	**type**\: int
                        
                        	**range:** 0..3
                        
                        .. attribute:: service_fragment_parent_policy
                        
                        	TRUE if service\-policy applied is a service\-fragment policy)
                        	**type**\: bool
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'qos-ma-cfg'
                        _revision = '2018-02-27'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberParent, self).__init__()

                            self.yang_name = "subscriber-parent"
                            self.yang_parent_name = "service-policy-qos"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('account_type', (YLeaf(YType.enumeration, 'account-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosPolicyAccount', '')])),
                                ('l1_user_defined', (YLeaf(YType.int32, 'l1-user-defined'), ['int'])),
                                ('spi_name', (YLeaf(YType.str, 'spi-name'), ['str'])),
                                ('policy_merge', (YLeaf(YType.enumeration, 'policy-merge'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_qos_ma_cfg', 'QosFieldNotSupported', '')])),
                                ('subscriber_parent_policy', (YLeaf(YType.boolean, 'subscriber-parent-policy'), ['bool'])),
                                ('resource_id', (YLeaf(YType.uint32, 'resource-id'), ['int'])),
                                ('service_fragment_parent_policy', (YLeaf(YType.boolean, 'service-fragment-parent-policy'), ['bool'])),
                            ])
                            self.account_type = None
                            self.l1_user_defined = None
                            self.spi_name = None
                            self.policy_merge = None
                            self.subscriber_parent_policy = None
                            self.resource_id = None
                            self.service_fragment_parent_policy = None
                            self._segment_path = lambda: "subscriber-parent"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Qos.Input.ServicePolicyQos.SubscriberParent, ['account_type', 'l1_user_defined', 'spi_name', 'policy_merge', 'subscriber_parent_policy', 'resource_id', 'service_fragment_parent_policy'], name, value)






        class CiscoIOSXRPppMaCfgPpp(Entity):
            """
            Interface PPP configuration data
            
            

            """

            _prefix = 'ppp-ma-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaCfgPpp, self).__init__()

                self.yang_name = "ppp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict()
                self._segment_path = lambda: "Cisco-IOS-XR-ppp-ma-cfg:ppp"
                self._is_frozen = True



        class Lldp(Entity):
            """
            Disable LLDP TX or RX
            
            .. attribute:: transmit
            
            	Disable LLDP TX
            	**type**\:  :py:class:`Transmit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lldp.Transmit>`
            
            .. attribute:: receive
            
            	Disable LLDP RX
            	**type**\:  :py:class:`Receive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lldp.Receive>`
            
            .. attribute:: lldp_intf_enter
            
            	enter LLDP interface submode
            	**type**\: bool
            
            	**mandatory**\: True
            
            .. attribute:: enable
            
            	Enable both LLDP TX and RX
            	**type**\: bool
            
            	**default value**\: false
            
            

            This class is a :ref:`presence class<presence-class>`

            """

            _prefix = 'ethernet-lldp-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Lldp, self).__init__()

                self.yang_name = "lldp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("transmit", ("transmit", InterfaceConfigurations.InterfaceConfiguration.Lldp.Transmit)), ("receive", ("receive", InterfaceConfigurations.InterfaceConfiguration.Lldp.Receive))])
                self.is_presence_container = True
                self._leafs = OrderedDict([
                    ('lldp_intf_enter', (YLeaf(YType.boolean, 'lldp-intf-enter'), ['bool'])),
                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                ])
                self.lldp_intf_enter = None
                self.enable = None

                self.transmit = InterfaceConfigurations.InterfaceConfiguration.Lldp.Transmit()
                self.transmit.parent = self
                self._children_name_map["transmit"] = "transmit"

                self.receive = InterfaceConfigurations.InterfaceConfiguration.Lldp.Receive()
                self.receive.parent = self
                self._children_name_map["receive"] = "receive"
                self._segment_path = lambda: "Cisco-IOS-XR-ethernet-lldp-cfg:lldp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Lldp, ['lldp_intf_enter', 'enable'], name, value)


            class Transmit(Entity):
                """
                Disable LLDP TX
                
                .. attribute:: disable
                
                	disable LLDP TX
                	**type**\: bool
                
                	**default value**\: false
                
                

                """

                _prefix = 'ethernet-lldp-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Lldp.Transmit, self).__init__()

                    self.yang_name = "transmit"
                    self.yang_parent_name = "lldp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('disable', (YLeaf(YType.boolean, 'disable'), ['bool'])),
                    ])
                    self.disable = None
                    self._segment_path = lambda: "transmit"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Lldp.Transmit, ['disable'], name, value)



            class Receive(Entity):
                """
                Disable LLDP RX
                
                .. attribute:: disable
                
                	disable LLDP RX
                	**type**\: bool
                
                	**default value**\: false
                
                

                """

                _prefix = 'ethernet-lldp-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Lldp.Receive, self).__init__()

                    self.yang_name = "receive"
                    self.yang_parent_name = "lldp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('disable', (YLeaf(YType.boolean, 'disable'), ['bool'])),
                    ])
                    self.disable = None
                    self._segment_path = lambda: "receive"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Lldp.Receive, ['disable'], name, value)




        class Atm(Entity):
            """
            ATM Configuration
            
            .. attribute:: pvps
            
            	PVP Configuration
            	**type**\:  :py:class:`Pvps <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps>`
            
            .. attribute:: pvcs
            
            	PVC Configuration
            	**type**\:  :py:class:`Pvcs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs>`
            
            .. attribute:: maximum_cell_packing_timers
            
            	Configure maximum cell\-packing timers.  All parameters are mandatory
            	**type**\:  :py:class:`MaximumCellPackingTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.MaximumCellPackingTimers>`
            
            	**presence node**\: True
            
            .. attribute:: vp_tunnels
            
            	VP tunnel configuration
            	**type**\:  :py:class:`VpTunnels <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels>`
            
            .. attribute:: max_vpi_bits
            
            	Support 12\-bits VPI cell format
            	**type**\:  :py:class:`AtmVpiBitsMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_vcm_cfg.AtmVpiBitsMode>`
            
            .. attribute:: vc_class
            
            	Name of the VC class
            	**type**\: str
            
            	**length:** 1..30
            
            

            """

            _prefix = 'atm-vcm-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Atm, self).__init__()

                self.yang_name = "atm"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("pvps", ("pvps", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps)), ("pvcs", ("pvcs", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs)), ("maximum-cell-packing-timers", ("maximum_cell_packing_timers", InterfaceConfigurations.InterfaceConfiguration.Atm.MaximumCellPackingTimers)), ("vp-tunnels", ("vp_tunnels", InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels))])
                self._leafs = OrderedDict([
                    ('max_vpi_bits', (YLeaf(YType.enumeration, 'max-vpi-bits'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_vcm_cfg', 'AtmVpiBitsMode', '')])),
                    ('vc_class', (YLeaf(YType.str, 'vc-class'), ['str'])),
                ])
                self.max_vpi_bits = None
                self.vc_class = None

                self.pvps = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps()
                self.pvps.parent = self
                self._children_name_map["pvps"] = "pvps"

                self.pvcs = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs()
                self.pvcs.parent = self
                self._children_name_map["pvcs"] = "pvcs"

                self.maximum_cell_packing_timers = None
                self._children_name_map["maximum_cell_packing_timers"] = "maximum-cell-packing-timers"

                self.vp_tunnels = InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels()
                self.vp_tunnels.parent = self
                self._children_name_map["vp_tunnels"] = "vp-tunnels"
                self._segment_path = lambda: "Cisco-IOS-XR-atm-vcm-cfg:atm"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm, ['max_vpi_bits', 'vc_class'], name, value)


            class Pvps(Entity):
                """
                PVP Configuration
                
                .. attribute:: pvp
                
                	Configuration of particular PVP
                	**type**\: list of  		 :py:class:`Pvp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp>`
                
                

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps, self).__init__()

                    self.yang_name = "pvps"
                    self.yang_parent_name = "atm"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("pvp", ("pvp", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp))])
                    self._leafs = OrderedDict()

                    self.pvp = YList(self)
                    self._segment_path = lambda: "pvps"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps, [], name, value)


                class Pvp(Entity):
                    """
                    Configuration of particular PVP
                    
                    .. attribute:: vpi  (key)
                    
                    	VPI value
                    	**type**\: int
                    
                    	**range:** 0..4095
                    
                    .. attribute:: shape
                    
                    	Configure traffic shaping parameters
                    	**type**\:  :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.Shape>`
                    
                    .. attribute:: cell_packing
                    
                    	Configure cell\-packing parameters.  All parameters are mandatory
                    	**type**\:  :py:class:`CellPacking <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.CellPacking>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: enable
                    
                    	Create the PVP
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: test_mode
                    
                    	Configure the PVP test mode
                    	**type**\:  :py:class:`AtmPvpTestMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_vcm_cfg.AtmPvpTestMode>`
                    
                    .. attribute:: oam_segment_endpoint
                    
                    	Enable L2VPN PVP OAM segment endpoint
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'atm-vcm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp, self).__init__()

                        self.yang_name = "pvp"
                        self.yang_parent_name = "pvps"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['vpi']
                        self._child_classes = OrderedDict([("shape", ("shape", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.Shape)), ("cell-packing", ("cell_packing", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.CellPacking))])
                        self._leafs = OrderedDict([
                            ('vpi', (YLeaf(YType.uint32, 'vpi'), ['int'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ('test_mode', (YLeaf(YType.enumeration, 'test-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_vcm_cfg', 'AtmPvpTestMode', '')])),
                            ('oam_segment_endpoint', (YLeaf(YType.empty, 'oam-segment-endpoint'), ['Empty'])),
                        ])
                        self.vpi = None
                        self.enable = None
                        self.test_mode = None
                        self.oam_segment_endpoint = None

                        self.shape = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.Shape()
                        self.shape.parent = self
                        self._children_name_map["shape"] = "shape"

                        self.cell_packing = None
                        self._children_name_map["cell_packing"] = "cell-packing"
                        self._segment_path = lambda: "pvp" + "[vpi='" + str(self.vpi) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp, ['vpi', 'enable', 'test_mode', 'oam_segment_endpoint'], name, value)


                    class Shape(Entity):
                        """
                        Configure traffic shaping parameters
                        
                        .. attribute:: type
                        
                        	Traffic shaping type
                        	**type**\:  :py:class:`AtmPvcShaping <ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes.AtmPvcShaping>`
                        
                        .. attribute:: peak_cell_rate
                        
                        	Peak cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: sustained_cell_rate
                        
                        	Sustained cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: burst_size
                        
                        	Burst size in cells
                        	**type**\: int
                        
                        	**range:** 1..8192
                        
                        

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.Shape, self).__init__()

                            self.yang_name = "shape"
                            self.yang_parent_name = "pvp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes', 'AtmPvcShaping', '')])),
                                ('peak_cell_rate', (YLeaf(YType.uint32, 'peak-cell-rate'), ['int'])),
                                ('sustained_cell_rate', (YLeaf(YType.uint32, 'sustained-cell-rate'), ['int'])),
                                ('burst_size', (YLeaf(YType.uint32, 'burst-size'), ['int'])),
                            ])
                            self.type = None
                            self.peak_cell_rate = None
                            self.sustained_cell_rate = None
                            self.burst_size = None
                            self._segment_path = lambda: "shape"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.Shape, ['type', 'peak_cell_rate', 'sustained_cell_rate', 'burst_size'], name, value)



                    class CellPacking(Entity):
                        """
                        Configure cell\-packing parameters.  All
                        parameters are mandatory.
                        
                        .. attribute:: maximum_cells_packed
                        
                        	Maximum number of cells to be packed in a packet
                        	**type**\: int
                        
                        	**range:** 2..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: cell_packing_timer_id
                        
                        	Which cell packing timer to use
                        	**type**\: int
                        
                        	**range:** 1..3
                        
                        	**mandatory**\: True
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.CellPacking, self).__init__()

                            self.yang_name = "cell-packing"
                            self.yang_parent_name = "pvp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('maximum_cells_packed', (YLeaf(YType.uint32, 'maximum-cells-packed'), ['int'])),
                                ('cell_packing_timer_id', (YLeaf(YType.uint32, 'cell-packing-timer-id'), ['int'])),
                            ])
                            self.maximum_cells_packed = None
                            self.cell_packing_timer_id = None
                            self._segment_path = lambda: "cell-packing"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvps.Pvp.CellPacking, ['maximum_cells_packed', 'cell_packing_timer_id'], name, value)





            class Pvcs(Entity):
                """
                PVC Configuration
                
                .. attribute:: pvc
                
                	Configuration particular PVC
                	**type**\: list of  		 :py:class:`Pvc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc>`
                
                

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs, self).__init__()

                    self.yang_name = "pvcs"
                    self.yang_parent_name = "atm"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("pvc", ("pvc", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc))])
                    self._leafs = OrderedDict()

                    self.pvc = YList(self)
                    self._segment_path = lambda: "pvcs"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs, [], name, value)


                class Pvc(Entity):
                    """
                    Configuration particular PVC
                    
                    .. attribute:: vpi  (key)
                    
                    	VPI value
                    	**type**\: int
                    
                    	**range:** 0..4095
                    
                    .. attribute:: vci  (key)
                    
                    	VCI value
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    .. attribute:: pv_ctype  (key)
                    
                    	PVC type
                    	**type**\:  :py:class:`AtmPvcData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes.AtmPvcData>`
                    
                    .. attribute:: shape
                    
                    	Configure traffic shaping parameters
                    	**type**\:  :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.Shape>`
                    
                    .. attribute:: oam_emulation
                    
                    	L2VPN OAM emulation
                    	**type**\:  :py:class:`OamEmulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.OamEmulation>`
                    
                    .. attribute:: cell_packing
                    
                    	Configure cell\-packing parameters.  All parameters are mandatory
                    	**type**\:  :py:class:`CellPacking <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.CellPacking>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: vc_class
                    
                    	Name of the VC class
                    	**type**\: str
                    
                    	**length:** 1..30
                    
                    .. attribute:: encapsulation
                    
                    	Configure encapsulation
                    	**type**\:  :py:class:`AtmPvcEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes.AtmPvcEncapsulation>`
                    
                    .. attribute:: enable
                    
                    	Create the PVC
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: test_mode
                    
                    	Configure the PVC test mode
                    	**type**\:  :py:class:`AtmPvcTestMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_vcm_cfg.AtmPvcTestMode>`
                    
                    .. attribute:: oam_segment_endpoint
                    
                    	Enable L2VPN PVC OAM segment endpoint
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'atm-vcm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc, self).__init__()

                        self.yang_name = "pvc"
                        self.yang_parent_name = "pvcs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['vpi','vci','pv_ctype']
                        self._child_classes = OrderedDict([("shape", ("shape", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.Shape)), ("oam-emulation", ("oam_emulation", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.OamEmulation)), ("cell-packing", ("cell_packing", InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.CellPacking))])
                        self._leafs = OrderedDict([
                            ('vpi', (YLeaf(YType.uint32, 'vpi'), ['int'])),
                            ('vci', (YLeaf(YType.uint32, 'vci'), ['int'])),
                            ('pv_ctype', (YLeaf(YType.enumeration, 'pv-ctype'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes', 'AtmPvcData', '')])),
                            ('vc_class', (YLeaf(YType.str, 'vc-class'), ['str'])),
                            ('encapsulation', (YLeaf(YType.enumeration, 'encapsulation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes', 'AtmPvcEncapsulation', '')])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ('test_mode', (YLeaf(YType.enumeration, 'test-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_vcm_cfg', 'AtmPvcTestMode', '')])),
                            ('oam_segment_endpoint', (YLeaf(YType.empty, 'oam-segment-endpoint'), ['Empty'])),
                        ])
                        self.vpi = None
                        self.vci = None
                        self.pv_ctype = None
                        self.vc_class = None
                        self.encapsulation = None
                        self.enable = None
                        self.test_mode = None
                        self.oam_segment_endpoint = None

                        self.shape = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.Shape()
                        self.shape.parent = self
                        self._children_name_map["shape"] = "shape"

                        self.oam_emulation = InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.OamEmulation()
                        self.oam_emulation.parent = self
                        self._children_name_map["oam_emulation"] = "oam-emulation"

                        self.cell_packing = None
                        self._children_name_map["cell_packing"] = "cell-packing"
                        self._segment_path = lambda: "pvc" + "[vpi='" + str(self.vpi) + "']" + "[vci='" + str(self.vci) + "']" + "[pv-ctype='" + str(self.pv_ctype) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc, ['vpi', 'vci', 'pv_ctype', 'vc_class', 'encapsulation', 'enable', 'test_mode', 'oam_segment_endpoint'], name, value)


                    class Shape(Entity):
                        """
                        Configure traffic shaping parameters
                        
                        .. attribute:: type
                        
                        	Traffic shaping type
                        	**type**\:  :py:class:`AtmPvcShaping <ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes.AtmPvcShaping>`
                        
                        .. attribute:: peak_cell_rate
                        
                        	Peak cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: sustained_cell_rate
                        
                        	Sustained cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: burst_size
                        
                        	Burst size in cells
                        	**type**\: int
                        
                        	**range:** 1..8192
                        
                        

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.Shape, self).__init__()

                            self.yang_name = "shape"
                            self.yang_parent_name = "pvc"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes', 'AtmPvcShaping', '')])),
                                ('peak_cell_rate', (YLeaf(YType.uint32, 'peak-cell-rate'), ['int'])),
                                ('sustained_cell_rate', (YLeaf(YType.uint32, 'sustained-cell-rate'), ['int'])),
                                ('burst_size', (YLeaf(YType.uint32, 'burst-size'), ['int'])),
                            ])
                            self.type = None
                            self.peak_cell_rate = None
                            self.sustained_cell_rate = None
                            self.burst_size = None
                            self._segment_path = lambda: "shape"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.Shape, ['type', 'peak_cell_rate', 'sustained_cell_rate', 'burst_size'], name, value)



                    class OamEmulation(Entity):
                        """
                        L2VPN OAM emulation
                        
                        .. attribute:: enable
                        
                        	Enable OAM emulation
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: ais_transmit_rate
                        
                        	AIS cell transmit rate (1 per x seconds)
                        	**type**\: int
                        
                        	**range:** 0..60
                        
                        

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.OamEmulation, self).__init__()

                            self.yang_name = "oam-emulation"
                            self.yang_parent_name = "pvc"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                ('ais_transmit_rate', (YLeaf(YType.uint32, 'ais-transmit-rate'), ['int'])),
                            ])
                            self.enable = None
                            self.ais_transmit_rate = None
                            self._segment_path = lambda: "oam-emulation"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.OamEmulation, ['enable', 'ais_transmit_rate'], name, value)



                    class CellPacking(Entity):
                        """
                        Configure cell\-packing parameters.  All
                        parameters are mandatory.
                        
                        .. attribute:: maximum_cells_packed
                        
                        	Maximum number of cells to be packed in a packet
                        	**type**\: int
                        
                        	**range:** 2..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: cell_packing_timer_id
                        
                        	Which cell packing timer to use
                        	**type**\: int
                        
                        	**range:** 1..3
                        
                        	**mandatory**\: True
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.CellPacking, self).__init__()

                            self.yang_name = "cell-packing"
                            self.yang_parent_name = "pvc"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('maximum_cells_packed', (YLeaf(YType.uint32, 'maximum-cells-packed'), ['int'])),
                                ('cell_packing_timer_id', (YLeaf(YType.uint32, 'cell-packing-timer-id'), ['int'])),
                            ])
                            self.maximum_cells_packed = None
                            self.cell_packing_timer_id = None
                            self._segment_path = lambda: "cell-packing"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.Pvcs.Pvc.CellPacking, ['maximum_cells_packed', 'cell_packing_timer_id'], name, value)





            class MaximumCellPackingTimers(Entity):
                """
                Configure maximum cell\-packing timers.  All
                parameters are mandatory.
                
                .. attribute:: cell_packing_timer1
                
                	Cell\-packing timer1 (micro seconds)
                	**type**\: int
                
                	**range:** 50..4095
                
                	**mandatory**\: True
                
                .. attribute:: cell_packing_timer2
                
                	Cell\-packing timer2 (micro seconds)
                	**type**\: int
                
                	**range:** 50..4095
                
                	**mandatory**\: True
                
                .. attribute:: cell_packing_timer3
                
                	Cell\-packing timer3 (micro seconds)
                	**type**\: int
                
                	**range:** 50..4095
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Atm.MaximumCellPackingTimers, self).__init__()

                    self.yang_name = "maximum-cell-packing-timers"
                    self.yang_parent_name = "atm"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('cell_packing_timer1', (YLeaf(YType.uint32, 'cell-packing-timer1'), ['int'])),
                        ('cell_packing_timer2', (YLeaf(YType.uint32, 'cell-packing-timer2'), ['int'])),
                        ('cell_packing_timer3', (YLeaf(YType.uint32, 'cell-packing-timer3'), ['int'])),
                    ])
                    self.cell_packing_timer1 = None
                    self.cell_packing_timer2 = None
                    self.cell_packing_timer3 = None
                    self._segment_path = lambda: "maximum-cell-packing-timers"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.MaximumCellPackingTimers, ['cell_packing_timer1', 'cell_packing_timer2', 'cell_packing_timer3'], name, value)



            class VpTunnels(Entity):
                """
                VP tunnel configuration
                
                .. attribute:: vp_tunnel
                
                	Configure a VP tunnel on this interface
                	**type**\: list of  		 :py:class:`VpTunnel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel>`
                
                

                """

                _prefix = 'atm-vcm-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels, self).__init__()

                    self.yang_name = "vp-tunnels"
                    self.yang_parent_name = "atm"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("vp-tunnel", ("vp_tunnel", InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel))])
                    self._leafs = OrderedDict()

                    self.vp_tunnel = YList(self)
                    self._segment_path = lambda: "vp-tunnels"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels, [], name, value)


                class VpTunnel(Entity):
                    """
                    Configure a VP tunnel on this interface
                    
                    .. attribute:: vpi  (key)
                    
                    	VPI value
                    	**type**\: int
                    
                    	**range:** 0..4095
                    
                    .. attribute:: shape
                    
                    	Configure Traffic shaping parameters
                    	**type**\:  :py:class:`Shape <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel.Shape>`
                    
                    .. attribute:: enable_hierarchical_shaping
                    
                    	Enable Hierarchical Shaping configuration
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: enable
                    
                    	Create the VP Tunnel
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: disable_f4oam
                    
                    	Disable F4 OAM configuration
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'atm-vcm-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel, self).__init__()

                        self.yang_name = "vp-tunnel"
                        self.yang_parent_name = "vp-tunnels"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['vpi']
                        self._child_classes = OrderedDict([("shape", ("shape", InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel.Shape))])
                        self._leafs = OrderedDict([
                            ('vpi', (YLeaf(YType.uint32, 'vpi'), ['int'])),
                            ('enable_hierarchical_shaping', (YLeaf(YType.empty, 'enable-hierarchical-shaping'), ['Empty'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ('disable_f4oam', (YLeaf(YType.empty, 'disable-f4oam'), ['Empty'])),
                        ])
                        self.vpi = None
                        self.enable_hierarchical_shaping = None
                        self.enable = None
                        self.disable_f4oam = None

                        self.shape = InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel.Shape()
                        self.shape.parent = self
                        self._children_name_map["shape"] = "shape"
                        self._segment_path = lambda: "vp-tunnel" + "[vpi='" + str(self.vpi) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel, ['vpi', 'enable_hierarchical_shaping', 'enable', 'disable_f4oam'], name, value)


                    class Shape(Entity):
                        """
                        Configure Traffic shaping parameters
                        
                        .. attribute:: type
                        
                        	Traffic shaping type
                        	**type**\:  :py:class:`AtmVpShaping <ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes.AtmVpShaping>`
                        
                        .. attribute:: peak_cell_rate
                        
                        	Peak cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: sustained_cell_rate
                        
                        	Sustained cell rate (kbps)
                        	**type**\: int
                        
                        	**range:** 8..622080
                        
                        .. attribute:: burst_size
                        
                        	Burst size in cells
                        	**type**\: int
                        
                        	**range:** 1..8192
                        
                        

                        """

                        _prefix = 'atm-vcm-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel.Shape, self).__init__()

                            self.yang_name = "shape"
                            self.yang_parent_name = "vp-tunnel"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('type', (YLeaf(YType.enumeration, 'type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_atm_common_datatypes', 'AtmVpShaping', '')])),
                                ('peak_cell_rate', (YLeaf(YType.uint32, 'peak-cell-rate'), ['int'])),
                                ('sustained_cell_rate', (YLeaf(YType.uint32, 'sustained-cell-rate'), ['int'])),
                                ('burst_size', (YLeaf(YType.uint32, 'burst-size'), ['int'])),
                            ])
                            self.type = None
                            self.peak_cell_rate = None
                            self.sustained_cell_rate = None
                            self.burst_size = None
                            self._segment_path = lambda: "shape"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Atm.VpTunnels.VpTunnel.Shape, ['type', 'peak_cell_rate', 'sustained_cell_rate', 'burst_size'], name, value)






        class Dot1xInterface(Entity):
            """
            Interface Specific Dot1x Configuration
            
            .. attribute:: dot1x_profile
            
            	Name of Dot1x profile
            	**type**\: str
            
            	**length:** 1..63
            
            

            """

            _prefix = 'dot1x-if-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Dot1xInterface, self).__init__()

                self.yang_name = "dot1x-interface"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('dot1x_profile', (YLeaf(YType.str, 'dot1x-profile'), ['str'])),
                ])
                self.dot1x_profile = None
                self._segment_path = lambda: "Cisco-IOS-XR-dot1x-if-cfg:dot1x-interface"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dot1xInterface, ['dot1x_profile'], name, value)



        class Ipv4Network(Entity):
            """
            Interface IPv4 Network configuration data
            
            .. attribute:: bgp_pa
            
            	Interface ipv4 bgp configuration
            	**type**\:  :py:class:`BgpPa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa>`
            
            .. attribute:: verify
            
            	Enable Verify handling for this interface
            	**type**\:  :py:class:`Verify <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Verify>`
            
            .. attribute:: bgp
            
            	Interface ipv4 bgp configuration
            	**type**\:  :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp>`
            
            .. attribute:: addresses
            
            	Set the IP address of an interface
            	**type**\:  :py:class:`Addresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses>`
            
            .. attribute:: helper_addresses
            
            	The set of IP destination addresses for UDP broadcasts
            	**type**\:  :py:class:`HelperAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses>`
            
            .. attribute:: forwarding_enable
            
            	IPv4 forwarding to get enabled on an interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: icmp_mask_reply
            
            	The flag for enabling sending of ICMP mask reply messages
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: tcp_mss_adjust_enable
            
            	Enable TCP MSS Adjust on an interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: ttl_propagate_disable
            
            	Disable TTL propagate on an interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: point_to_point
            
            	Enable point\-to\-point handling for this interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: mtu
            
            	The IP Maximum Transmission Unit
            	**type**\: int
            
            	**range:** 68..65535
            
            

            """

            _prefix = 'ipv4-io-cfg'
            _revision = '2018-01-11'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network, self).__init__()

                self.yang_name = "ipv4-network"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("bgp-pa", ("bgp_pa", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa)), ("verify", ("verify", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Verify)), ("bgp", ("bgp", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp)), ("addresses", ("addresses", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses)), ("helper-addresses", ("helper_addresses", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses))])
                self._leafs = OrderedDict([
                    ('forwarding_enable', (YLeaf(YType.empty, 'forwarding-enable'), ['Empty'])),
                    ('icmp_mask_reply', (YLeaf(YType.empty, 'icmp-mask-reply'), ['Empty'])),
                    ('tcp_mss_adjust_enable', (YLeaf(YType.empty, 'tcp-mss-adjust-enable'), ['Empty'])),
                    ('ttl_propagate_disable', (YLeaf(YType.empty, 'ttl-propagate-disable'), ['Empty'])),
                    ('point_to_point', (YLeaf(YType.empty, 'point-to-point'), ['Empty'])),
                    ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                ])
                self.forwarding_enable = None
                self.icmp_mask_reply = None
                self.tcp_mss_adjust_enable = None
                self.ttl_propagate_disable = None
                self.point_to_point = None
                self.mtu = None

                self.bgp_pa = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa()
                self.bgp_pa.parent = self
                self._children_name_map["bgp_pa"] = "bgp-pa"

                self.verify = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Verify()
                self.verify.parent = self
                self._children_name_map["verify"] = "verify"

                self.bgp = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp()
                self.bgp.parent = self
                self._children_name_map["bgp"] = "bgp"

                self.addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses()
                self.addresses.parent = self
                self._children_name_map["addresses"] = "addresses"

                self.helper_addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses()
                self.helper_addresses.parent = self
                self._children_name_map["helper_addresses"] = "helper-addresses"
                self._segment_path = lambda: "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network, ['forwarding_enable', 'icmp_mask_reply', 'tcp_mss_adjust_enable', 'ttl_propagate_disable', 'point_to_point', 'mtu'], name, value)


            class BgpPa(Entity):
                """
                Interface ipv4 bgp configuration
                
                .. attribute:: input
                
                	Input
                	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Input>`
                
                .. attribute:: output
                
                	Output
                	**type**\:  :py:class:`Output <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Output>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2018-01-11'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa, self).__init__()

                    self.yang_name = "bgp-pa"
                    self.yang_parent_name = "ipv4-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("input", ("input", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Input)), ("output", ("output", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Output))])
                    self._leafs = OrderedDict()

                    self.input = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Input()
                    self.input.parent = self
                    self._children_name_map["input"] = "input"

                    self.output = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Output()
                    self.output.parent = self
                    self._children_name_map["output"] = "output"
                    self._segment_path = lambda: "bgp-pa"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa, [], name, value)


                class Input(Entity):
                    """
                    Input
                    
                    .. attribute:: source_accounting
                    
                    	BGP PA configuration on source
                    	**type**\: bool
                    
                    .. attribute:: destination_accounting
                    
                    	BGP PA configuration on destination
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2018-01-11'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Input, self).__init__()

                        self.yang_name = "input"
                        self.yang_parent_name = "bgp-pa"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('source_accounting', (YLeaf(YType.boolean, 'source-accounting'), ['bool'])),
                            ('destination_accounting', (YLeaf(YType.boolean, 'destination-accounting'), ['bool'])),
                        ])
                        self.source_accounting = None
                        self.destination_accounting = None
                        self._segment_path = lambda: "input"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Input, ['source_accounting', 'destination_accounting'], name, value)



                class Output(Entity):
                    """
                    Output
                    
                    .. attribute:: source_accounting
                    
                    	BGP PA configuration on source
                    	**type**\: bool
                    
                    .. attribute:: destination_accounting
                    
                    	BGP PA configuration on destination
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2018-01-11'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Output, self).__init__()

                        self.yang_name = "output"
                        self.yang_parent_name = "bgp-pa"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('source_accounting', (YLeaf(YType.boolean, 'source-accounting'), ['bool'])),
                            ('destination_accounting', (YLeaf(YType.boolean, 'destination-accounting'), ['bool'])),
                        ])
                        self.source_accounting = None
                        self.destination_accounting = None
                        self._segment_path = lambda: "output"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.BgpPa.Output, ['source_accounting', 'destination_accounting'], name, value)




            class Verify(Entity):
                """
                Enable Verify handling for this interface
                
                .. attribute:: reachable
                
                	Source is reachable via any interface or interface on which packet was received
                	**type**\:  :py:class:`Ipv4Reachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg.Ipv4Reachable>`
                
                .. attribute:: self_ping
                
                	Allow router to ping itself (opens vulnerability in verification)
                	**type**\:  :py:class:`Ipv4SelfPing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg.Ipv4SelfPing>`
                
                .. attribute:: default_ping
                
                	Allow default route to match when checking source address
                	**type**\:  :py:class:`Ipv4DefaultPing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg.Ipv4DefaultPing>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2018-01-11'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Verify, self).__init__()

                    self.yang_name = "verify"
                    self.yang_parent_name = "ipv4-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reachable', (YLeaf(YType.enumeration, 'reachable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg', 'Ipv4Reachable', '')])),
                        ('self_ping', (YLeaf(YType.enumeration, 'self-ping'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg', 'Ipv4SelfPing', '')])),
                        ('default_ping', (YLeaf(YType.enumeration, 'default-ping'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg', 'Ipv4DefaultPing', '')])),
                    ])
                    self.reachable = None
                    self.self_ping = None
                    self.default_ping = None
                    self._segment_path = lambda: "verify"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Verify, ['reachable', 'self_ping', 'default_ping'], name, value)



            class Bgp(Entity):
                """
                Interface ipv4 bgp configuration
                
                .. attribute:: qppb
                
                	Interface ipv4 bgp policy propagation configuration
                	**type**\:  :py:class:`Qppb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb>`
                
                .. attribute:: flow_tag
                
                	Interface ipv4 bgp policy propagation flow tag configuration
                	**type**\:  :py:class:`FlowTag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2018-01-11'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp, self).__init__()

                    self.yang_name = "bgp"
                    self.yang_parent_name = "ipv4-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("qppb", ("qppb", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb)), ("flow-tag", ("flow_tag", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag))])
                    self._leafs = OrderedDict()

                    self.qppb = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb()
                    self.qppb.parent = self
                    self._children_name_map["qppb"] = "qppb"

                    self.flow_tag = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag()
                    self.flow_tag.parent = self
                    self._children_name_map["flow_tag"] = "flow-tag"
                    self._segment_path = lambda: "bgp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp, [], name, value)


                class Qppb(Entity):
                    """
                    Interface ipv4 bgp policy propagation
                    configuration
                    
                    .. attribute:: input
                    
                    	Input
                    	**type**\:  :py:class:`Input <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb.Input>`
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2018-01-11'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb, self).__init__()

                        self.yang_name = "qppb"
                        self.yang_parent_name = "bgp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("input", ("input", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb.Input))])
                        self._leafs = OrderedDict()

                        self.input = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb.Input()
                        self.input.parent = self
                        self._children_name_map["input"] = "input"
                        self._segment_path = lambda: "qppb"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb, [], name, value)


                    class Input(Entity):
                        """
                        Input
                        
                        .. attribute:: source
                        
                        	QPPB configuration on source
                        	**type**\:  :py:class:`Ipv4InterfaceQppb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg.Ipv4InterfaceQppb>`
                        
                        .. attribute:: destination
                        
                        	QPPB configuration on destination
                        	**type**\:  :py:class:`Ipv4InterfaceQppb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg.Ipv4InterfaceQppb>`
                        
                        

                        """

                        _prefix = 'ipv4-io-cfg'
                        _revision = '2018-01-11'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb.Input, self).__init__()

                            self.yang_name = "input"
                            self.yang_parent_name = "qppb"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source', (YLeaf(YType.enumeration, 'source'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg', 'Ipv4InterfaceQppb', '')])),
                                ('destination', (YLeaf(YType.enumeration, 'destination'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_io_cfg', 'Ipv4InterfaceQppb', '')])),
                            ])
                            self.source = None
                            self.destination = None
                            self._segment_path = lambda: "input"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.Qppb.Input, ['source', 'destination'], name, value)




                class FlowTag(Entity):
                    """
                    Interface ipv4 bgp policy propagation flow tag
                    configuration
                    
                    .. attribute:: flow_tag_input
                    
                    	Input
                    	**type**\:  :py:class:`FlowTagInput <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag.FlowTagInput>`
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2018-01-11'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag, self).__init__()

                        self.yang_name = "flow-tag"
                        self.yang_parent_name = "bgp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("flow-tag-input", ("flow_tag_input", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag.FlowTagInput))])
                        self._leafs = OrderedDict()

                        self.flow_tag_input = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag.FlowTagInput()
                        self.flow_tag_input.parent = self
                        self._children_name_map["flow_tag_input"] = "flow-tag-input"
                        self._segment_path = lambda: "flow-tag"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag, [], name, value)


                    class FlowTagInput(Entity):
                        """
                        Input
                        
                        .. attribute:: source
                        
                        	FlowTag configuration on source
                        	**type**\: bool
                        
                        .. attribute:: destination
                        
                        	FlowTag configuration on destination
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'ipv4-io-cfg'
                        _revision = '2018-01-11'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag.FlowTagInput, self).__init__()

                            self.yang_name = "flow-tag-input"
                            self.yang_parent_name = "flow-tag"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source', (YLeaf(YType.boolean, 'source'), ['bool'])),
                                ('destination', (YLeaf(YType.boolean, 'destination'), ['bool'])),
                            ])
                            self.source = None
                            self.destination = None
                            self._segment_path = lambda: "flow-tag-input"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Bgp.FlowTag.FlowTagInput, ['source', 'destination'], name, value)





            class Addresses(Entity):
                """
                Set the IP address of an interface
                
                .. attribute:: secondaries
                
                	Specify a secondary address
                	**type**\:  :py:class:`Secondaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries>`
                
                .. attribute:: primary
                
                	IP address and Mask
                	**type**\:  :py:class:`Primary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Primary>`
                
                	**presence node**\: True
                
                .. attribute:: unnumbered
                
                	Enable IP processing without an explicit address
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                
                .. attribute:: dhcp
                
                	IPv4 address and Mask negotiated via DHCP
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2018-01-11'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses, self).__init__()

                    self.yang_name = "addresses"
                    self.yang_parent_name = "ipv4-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("secondaries", ("secondaries", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries)), ("primary", ("primary", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Primary))])
                    self._leafs = OrderedDict([
                        ('unnumbered', (YLeaf(YType.str, 'unnumbered'), ['str'])),
                        ('dhcp', (YLeaf(YType.empty, 'dhcp'), ['Empty'])),
                    ])
                    self.unnumbered = None
                    self.dhcp = None

                    self.secondaries = InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries()
                    self.secondaries.parent = self
                    self._children_name_map["secondaries"] = "secondaries"

                    self.primary = None
                    self._children_name_map["primary"] = "primary"
                    self._segment_path = lambda: "addresses"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses, ['unnumbered', 'dhcp'], name, value)


                class Secondaries(Entity):
                    """
                    Specify a secondary address
                    
                    .. attribute:: secondary
                    
                    	IP address and Mask
                    	**type**\: list of  		 :py:class:`Secondary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries.Secondary>`
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2018-01-11'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries, self).__init__()

                        self.yang_name = "secondaries"
                        self.yang_parent_name = "addresses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("secondary", ("secondary", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries.Secondary))])
                        self._leafs = OrderedDict()

                        self.secondary = YList(self)
                        self._segment_path = lambda: "secondaries"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries, [], name, value)


                    class Secondary(Entity):
                        """
                        IP address and Mask
                        
                        .. attribute:: address  (key)
                        
                        	Secondary IP address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: netmask
                        
                        	Netmask
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: route_tag
                        
                        	RouteTag
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        

                        """

                        _prefix = 'ipv4-io-cfg'
                        _revision = '2018-01-11'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries.Secondary, self).__init__()

                            self.yang_name = "secondary"
                            self.yang_parent_name = "secondaries"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['address']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', (YLeaf(YType.str, 'address'), ['str'])),
                                ('netmask', (YLeaf(YType.str, 'netmask'), ['str'])),
                                ('route_tag', (YLeaf(YType.uint32, 'route-tag'), ['int'])),
                            ])
                            self.address = None
                            self.netmask = None
                            self.route_tag = None
                            self._segment_path = lambda: "secondary" + "[address='" + str(self.address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Secondaries.Secondary, ['address', 'netmask', 'route_tag'], name, value)




                class Primary(Entity):
                    """
                    IP address and Mask
                    
                    .. attribute:: address
                    
                    	IP address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: netmask
                    
                    	Netmask
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: route_tag
                    
                    	RouteTag
                    	**type**\: int
                    
                    	**range:** 1..4294967295
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2018-01-11'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Primary, self).__init__()

                        self.yang_name = "primary"
                        self.yang_parent_name = "addresses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('address', (YLeaf(YType.str, 'address'), ['str'])),
                            ('netmask', (YLeaf(YType.str, 'netmask'), ['str'])),
                            ('route_tag', (YLeaf(YType.uint32, 'route-tag'), ['int'])),
                        ])
                        self.address = None
                        self.netmask = None
                        self.route_tag = None
                        self._segment_path = lambda: "primary"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.Addresses.Primary, ['address', 'netmask', 'route_tag'], name, value)




            class HelperAddresses(Entity):
                """
                The set of IP destination addresses for UDP
                broadcasts
                
                .. attribute:: helper_address
                
                	An IP destination addresses for UDP broadcasts
                	**type**\: list of  		 :py:class:`HelperAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses.HelperAddress>`
                
                

                """

                _prefix = 'ipv4-io-cfg'
                _revision = '2018-01-11'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses, self).__init__()

                    self.yang_name = "helper-addresses"
                    self.yang_parent_name = "ipv4-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("helper-address", ("helper_address", InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses.HelperAddress))])
                    self._leafs = OrderedDict()

                    self.helper_address = YList(self)
                    self._segment_path = lambda: "helper-addresses"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses, [], name, value)


                class HelperAddress(Entity):
                    """
                    An IP destination addresses for UDP broadcasts
                    
                    .. attribute:: address  (key)
                    
                    	IP destination address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: vrf_name  (key)
                    
                    	VRF name
                    	**type**\: str
                    
                    	**length:** 1..32
                    
                    

                    """

                    _prefix = 'ipv4-io-cfg'
                    _revision = '2018-01-11'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses.HelperAddress, self).__init__()

                        self.yang_name = "helper-address"
                        self.yang_parent_name = "helper-addresses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['address','vrf_name']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('address', (YLeaf(YType.str, 'address'), ['str'])),
                            ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                        ])
                        self.address = None
                        self.vrf_name = None
                        self._segment_path = lambda: "helper-address" + "[address='" + str(self.address) + "']" + "[vrf-name='" + str(self.vrf_name) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4Network.HelperAddresses.HelperAddress, ['address', 'vrf_name'], name, value)





        class Ipv4NetworkForwarding(Entity):
            """
            Interface IPv4 Network configuration data also
            used for forwarding
            
            .. attribute:: directed_broadcast
            
            	Enable forwarding of directed broadcast
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: unreachables
            
            	Disable sending ICMP unreachables
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: redirects
            
            	Enable sending ICMP Redirect messages
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'ipv4-io-cfg'
            _revision = '2018-01-11'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv4NetworkForwarding, self).__init__()

                self.yang_name = "ipv4-network-forwarding"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('directed_broadcast', (YLeaf(YType.empty, 'directed-broadcast'), ['Empty'])),
                    ('unreachables', (YLeaf(YType.empty, 'unreachables'), ['Empty'])),
                    ('redirects', (YLeaf(YType.empty, 'redirects'), ['Empty'])),
                ])
                self.directed_broadcast = None
                self.unreachables = None
                self.redirects = None
                self._segment_path = lambda: "Cisco-IOS-XR-ipv4-io-cfg:ipv4-network-forwarding"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4NetworkForwarding, ['directed_broadcast', 'unreachables', 'redirects'], name, value)



        class AaaTable(Entity):
            """
            AAA configuration
            
            .. attribute:: radius
            
            	AAA radius configuration
            	**type**\:  :py:class:`Radius <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius>`
            
            

            """

            _prefix = 'aaa-aaacore-cfg'
            _revision = '2018-09-04'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.AaaTable, self).__init__()

                self.yang_name = "aaa-table"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("radius", ("radius", InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius))])
                self._leafs = OrderedDict()

                self.radius = InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius()
                self.radius.parent = self
                self._children_name_map["radius"] = "radius"
                self._segment_path = lambda: "Cisco-IOS-XR-aaa-aaacore-cfg:aaa-table"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.AaaTable, [], name, value)


            class Radius(Entity):
                """
                AAA radius configuration
                
                .. attribute:: attribute
                
                	AAA radius attribute
                	**type**\:  :py:class:`Attribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius.Attribute>`
                
                

                """

                _prefix = 'aaa-aaacore-cfg'
                _revision = '2018-09-04'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius, self).__init__()

                    self.yang_name = "radius"
                    self.yang_parent_name = "aaa-table"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("attribute", ("attribute", InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius.Attribute))])
                    self._leafs = OrderedDict()

                    self.attribute = InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius.Attribute()
                    self.attribute.parent = self
                    self._children_name_map["attribute"] = "attribute"
                    self._segment_path = lambda: "radius"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius, [], name, value)


                class Attribute(Entity):
                    """
                    AAA radius attribute
                    
                    .. attribute:: nas_port_type
                    
                    	AAA nas\-port\-type attribute
                    	**type**\:  :py:class:`NasPortValue <ydk.models.cisco_ios_xr.Cisco_IOS_XR_aaa_aaacore_cfg.NasPortValue>`
                    
                    .. attribute:: nas_identifier
                    
                    	AAA nas\-identifier attribute
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'aaa-aaacore-cfg'
                    _revision = '2018-09-04'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius.Attribute, self).__init__()

                        self.yang_name = "attribute"
                        self.yang_parent_name = "radius"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('nas_port_type', (YLeaf(YType.enumeration, 'nas-port-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_aaa_aaacore_cfg', 'NasPortValue', '')])),
                            ('nas_identifier', (YLeaf(YType.str, 'nas-identifier'), ['str'])),
                        ])
                        self.nas_port_type = None
                        self.nas_identifier = None
                        self._segment_path = lambda: "attribute"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.AaaTable.Radius.Attribute, ['nas_port_type', 'nas_identifier'], name, value)





        class Ipv6PacketFilter(Entity):
            """
            IPv6 Packet Filtering configuration for the
            interface
            
            .. attribute:: inbound
            
            	IPv6 Packet filter to be applied to inbound packets
            	**type**\:  :py:class:`Inbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Inbound>`
            
            .. attribute:: outbound
            
            	IPv6 Packet filter to be applied to outbound packets
            	**type**\:  :py:class:`Outbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Outbound>`
            
            

            """

            _prefix = 'ip-pfilter-cfg'
            _revision = '2017-09-30'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter, self).__init__()

                self.yang_name = "ipv6-packet-filter"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("inbound", ("inbound", InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Inbound)), ("outbound", ("outbound", InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Outbound))])
                self._leafs = OrderedDict()

                self.inbound = InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Inbound()
                self.inbound.parent = self
                self._children_name_map["inbound"] = "inbound"

                self.outbound = InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Outbound()
                self.outbound.parent = self
                self._children_name_map["outbound"] = "outbound"
                self._segment_path = lambda: "Cisco-IOS-XR-ip-pfilter-cfg:ipv6-packet-filter"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter, [], name, value)


            class Inbound(Entity):
                """
                IPv6 Packet filter to be applied to inbound
                packets
                
                .. attribute:: common_acl_name
                
                	Reserved for backward compatibility. IPv6 Packet Filter Name to be applied to Inbound packets, ACL providing HW optimization when applied on multiple interfaces. NOTE\: This parameter is mandatory if 'Name' is not specified
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: name
                
                	Reserved for backward compatibility. IPv6 Packet Filter Name to be applied to Inbound NOTE\: This parameter is mandatory if 'CommonACLName' is not specified
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: interface_statistics
                
                	True if packets hitting the ACL should be counted in hardware per interface.The default is not to count them. NOTE\: InterfaceStatistics is allowed only if Name is specified
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: compression_level
                
                	The level of compression applied to the ACL on this interface. The range is 0 to 3 with default being no compression (0)
                	**type**\: int
                
                	**range:** 0..3
                
                .. attribute:: acl_name_array
                
                	Array of IPv6 Packet Filter Names to be applied to Inbound packets
                	**type**\: list of str
                
                	**length:** 1..64
                
                .. attribute:: is_common_array
                
                	Array of CommonACL flags for each ACL. TRUE indicates HW optimization on multiple interfaces is provided
                	**type**\: list of bool
                
                

                """

                _prefix = 'ip-pfilter-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Inbound, self).__init__()

                    self.yang_name = "inbound"
                    self.yang_parent_name = "ipv6-packet-filter"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('common_acl_name', (YLeaf(YType.str, 'common-acl-name'), ['str'])),
                        ('name', (YLeaf(YType.str, 'name'), ['str'])),
                        ('interface_statistics', (YLeaf(YType.empty, 'interface-statistics'), ['Empty'])),
                        ('compression_level', (YLeaf(YType.uint32, 'compression-level'), ['int'])),
                        ('acl_name_array', (YLeafList(YType.str, 'acl-name-array'), ['str'])),
                        ('is_common_array', (YLeafList(YType.boolean, 'is-common-array'), ['bool'])),
                    ])
                    self.common_acl_name = None
                    self.name = None
                    self.interface_statistics = None
                    self.compression_level = None
                    self.acl_name_array = []
                    self.is_common_array = []
                    self._segment_path = lambda: "inbound"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Inbound, ['common_acl_name', 'name', 'interface_statistics', 'compression_level', 'acl_name_array', 'is_common_array'], name, value)



            class Outbound(Entity):
                """
                IPv6 Packet filter to be applied to outbound
                packets
                
                .. attribute:: do_not_use
                
                	Reserved.  Error if specified
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: name
                
                	Reserved for backward compatibility. IPv6 Packet Filter Name to be applied to Outbound packets
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: interface_statistics
                
                	True if packets hitting the ACL should be counted in hardware per interface.The default is not to count them
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: compression_level
                
                	The level of compression applied to the ACL on this interface. The range is 0 to 3 with default being no compression (0)
                	**type**\: int
                
                	**range:** 0..3
                
                .. attribute:: acl_name_array
                
                	Array of IPv6 Packet Filter Names to be applied to Inbound packets
                	**type**\: list of str
                
                	**length:** 1..64
                
                .. attribute:: is_common_array
                
                	Array of CommonACL flags for each ACL. TRUE indicates HW optimization on multiple interfaces is provided
                	**type**\: list of bool
                
                

                """

                _prefix = 'ip-pfilter-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Outbound, self).__init__()

                    self.yang_name = "outbound"
                    self.yang_parent_name = "ipv6-packet-filter"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('do_not_use', (YLeaf(YType.str, 'do-not-use'), ['str'])),
                        ('name', (YLeaf(YType.str, 'name'), ['str'])),
                        ('interface_statistics', (YLeaf(YType.empty, 'interface-statistics'), ['Empty'])),
                        ('compression_level', (YLeaf(YType.uint32, 'compression-level'), ['int'])),
                        ('acl_name_array', (YLeafList(YType.str, 'acl-name-array'), ['str'])),
                        ('is_common_array', (YLeafList(YType.boolean, 'is-common-array'), ['bool'])),
                    ])
                    self.do_not_use = None
                    self.name = None
                    self.interface_statistics = None
                    self.compression_level = None
                    self.acl_name_array = []
                    self.is_common_array = []
                    self._segment_path = lambda: "outbound"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6PacketFilter.Outbound, ['do_not_use', 'name', 'interface_statistics', 'compression_level', 'acl_name_array', 'is_common_array'], name, value)




        class EsPacketFilter(Entity):
            """
            ES Packet Filtering configuration for the
            interface
            
            .. attribute:: outbound
            
            	Name of filter to be applied to outbound packets
            	**type**\: str
            
            	**length:** 1..64
            
            .. attribute:: inbound
            
            	Name of filter to be applied to inbound packets
            	**type**\: str
            
            	**length:** 1..64
            
            

            """

            _prefix = 'ip-pfilter-cfg'
            _revision = '2017-09-30'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.EsPacketFilter, self).__init__()

                self.yang_name = "es-packet-filter"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('outbound', (YLeaf(YType.str, 'outbound'), ['str'])),
                    ('inbound', (YLeaf(YType.str, 'inbound'), ['str'])),
                ])
                self.outbound = None
                self.inbound = None
                self._segment_path = lambda: "Cisco-IOS-XR-ip-pfilter-cfg:es-packet-filter"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.EsPacketFilter, ['outbound', 'inbound'], name, value)



        class Ipv4PacketFilter(Entity):
            """
            IPv4 Packet Filtering configuration for the
            interface
            
            .. attribute:: outbound
            
            	IPv4 Packet filter to be applied to outbound packets
            	**type**\:  :py:class:`Outbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Outbound>`
            
            .. attribute:: inbound
            
            	IPv4 Packet filter to be applied to inbound packets
            	**type**\:  :py:class:`Inbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Inbound>`
            
            

            """

            _prefix = 'ip-pfilter-cfg'
            _revision = '2017-09-30'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter, self).__init__()

                self.yang_name = "ipv4-packet-filter"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("outbound", ("outbound", InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Outbound)), ("inbound", ("inbound", InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Inbound))])
                self._leafs = OrderedDict()

                self.outbound = InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Outbound()
                self.outbound.parent = self
                self._children_name_map["outbound"] = "outbound"

                self.inbound = InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Inbound()
                self.inbound.parent = self
                self._children_name_map["inbound"] = "inbound"
                self._segment_path = lambda: "Cisco-IOS-XR-ip-pfilter-cfg:ipv4-packet-filter"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter, [], name, value)


            class Outbound(Entity):
                """
                IPv4 Packet filter to be applied to outbound
                packets
                
                .. attribute:: do_not_use
                
                	Reserved.  Error if specified
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: name
                
                	Reserved for backward compatibility. IPv4 Packet Filter Name to be applied to Outbound packets NOTE\: This parameter is mandatory if 'CommonACLName' is not specified
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: hardware_count
                
                	True if packets hitting the ACL should be counted in the hardware.  The default is not to count them
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: interface_statistics
                
                	True if packets hitting the ACL should be counted in hardware per interface.The default is not to count them
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: compression_level
                
                	The level of compression applied to the ACL on this interface. The range is 0 to 3 with default being no compression (0)
                	**type**\: int
                
                	**range:** 0..3
                
                .. attribute:: acl_name_array
                
                	Array of IPv4 Packet Filter Names to be applied to Outbound packets
                	**type**\: list of str
                
                	**length:** 1..64
                
                .. attribute:: is_common_array
                
                	Array of CommonACL flags for each ACL. TRUE indicates HW optimization on multiple interfaces is provided
                	**type**\: list of bool
                
                

                """

                _prefix = 'ip-pfilter-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Outbound, self).__init__()

                    self.yang_name = "outbound"
                    self.yang_parent_name = "ipv4-packet-filter"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('do_not_use', (YLeaf(YType.str, 'do-not-use'), ['str'])),
                        ('name', (YLeaf(YType.str, 'name'), ['str'])),
                        ('hardware_count', (YLeaf(YType.empty, 'hardware-count'), ['Empty'])),
                        ('interface_statistics', (YLeaf(YType.empty, 'interface-statistics'), ['Empty'])),
                        ('compression_level', (YLeaf(YType.uint32, 'compression-level'), ['int'])),
                        ('acl_name_array', (YLeafList(YType.str, 'acl-name-array'), ['str'])),
                        ('is_common_array', (YLeafList(YType.boolean, 'is-common-array'), ['bool'])),
                    ])
                    self.do_not_use = None
                    self.name = None
                    self.hardware_count = None
                    self.interface_statistics = None
                    self.compression_level = None
                    self.acl_name_array = []
                    self.is_common_array = []
                    self._segment_path = lambda: "outbound"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Outbound, ['do_not_use', 'name', 'hardware_count', 'interface_statistics', 'compression_level', 'acl_name_array', 'is_common_array'], name, value)



            class Inbound(Entity):
                """
                IPv4 Packet filter to be applied to inbound
                packets
                
                .. attribute:: common_acl_name
                
                	Reserved for backward compatibility. IPv4 Packet Filter Name to be applied to Inbound packets, ACL providing HW optimization when applied on multiple interfaces. NOTE\: This parameter is mandatory if 'Name' is not specified
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: name
                
                	Reserved for backward compatibility. IPv4 Packet Filter Name to be applied to Inbound packets NOTE\: This parameter is mandatory if 'CommonACLName' is not specified
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: hardware_count
                
                	True if packets hitting the ACL should be counted in the hardware.  The default is not to count them. NOTE\: HardwareCount is allowed only if Name is specified
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: interface_statistics
                
                	True if packets hitting the ACL should be counted in hardware per interface.The default is not to count them. NOTE\: InterfaceStatistics is allowed only if Name is specified
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: compression_level
                
                	The level of compression applied to the ACL on this interface. The range is 0 to 3 with default being no compression (0)
                	**type**\: int
                
                	**range:** 0..3
                
                .. attribute:: acl_name_array
                
                	Array of IPv4 Packet Filter Names to be applied to Inbound packets
                	**type**\: list of str
                
                	**length:** 1..64
                
                .. attribute:: is_common_array
                
                	Array of CommonACL flags for each ACL. TRUE indicates HW optimization on multiple interfaces is provided
                	**type**\: list of bool
                
                

                """

                _prefix = 'ip-pfilter-cfg'
                _revision = '2017-09-30'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Inbound, self).__init__()

                    self.yang_name = "inbound"
                    self.yang_parent_name = "ipv4-packet-filter"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('common_acl_name', (YLeaf(YType.str, 'common-acl-name'), ['str'])),
                        ('name', (YLeaf(YType.str, 'name'), ['str'])),
                        ('hardware_count', (YLeaf(YType.empty, 'hardware-count'), ['Empty'])),
                        ('interface_statistics', (YLeaf(YType.empty, 'interface-statistics'), ['Empty'])),
                        ('compression_level', (YLeaf(YType.uint32, 'compression-level'), ['int'])),
                        ('acl_name_array', (YLeafList(YType.str, 'acl-name-array'), ['str'])),
                        ('is_common_array', (YLeafList(YType.boolean, 'is-common-array'), ['bool'])),
                    ])
                    self.common_acl_name = None
                    self.name = None
                    self.hardware_count = None
                    self.interface_statistics = None
                    self.compression_level = None
                    self.acl_name_array = []
                    self.is_common_array = []
                    self._segment_path = lambda: "inbound"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4PacketFilter.Inbound, ['common_acl_name', 'name', 'hardware_count', 'interface_statistics', 'compression_level', 'acl_name_array', 'is_common_array'], name, value)




        class Ipv4FlowSpec(Entity):
            """
            Flowspec on IPv4 interface
            
            .. attribute:: enabled
            
            	Disable FlowSpec on this interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'flowspec-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv4FlowSpec, self).__init__()

                self.yang_name = "ipv4-flow-spec"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('enabled', (YLeaf(YType.empty, 'enabled'), ['Empty'])),
                ])
                self.enabled = None
                self._segment_path = lambda: "Cisco-IOS-XR-flowspec-cfg:ipv4-flow-spec"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4FlowSpec, ['enabled'], name, value)



        class Ipv6FlowSpec(Entity):
            """
            Flowspec on IPv6 interface
            
            .. attribute:: enabled
            
            	Disable flowspec on interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'flowspec-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv6FlowSpec, self).__init__()

                self.yang_name = "ipv6-flow-spec"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('enabled', (YLeaf(YType.empty, 'enabled'), ['Empty'])),
                ])
                self.enabled = None
                self._segment_path = lambda: "Cisco-IOS-XR-flowspec-cfg:ipv6-flow-spec"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6FlowSpec, ['enabled'], name, value)



        class Wanphy(Entity):
            """
            WANPHY port controller configuration
            
            .. attribute:: report_path_rdi
            
            	Configure Path Remote Defect Indicator reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_los
            
            	Configure Loss Of Signal reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_path_lcd
            
            	Configure Path Loss Of Code\-Group Delineation reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_path_fe_plm
            
            	Configure Path Far End Payload Label Mismatch reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: lan_mode
            
            	Configure LAN Mode
            	**type**\:  :py:class:`WanphyLanMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_wanphy_ui_cfg.WanphyLanMode>`
            
            .. attribute:: report_path_plm
            
            	Configure Path Payload Label Mismatch reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_path_fe_ais
            
            	Configure Path Far End Payload Label Mismatch reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_path_ais
            
            	Configure Path Alarm Indication Signal reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_line_ais
            
            	Configure Line Alarm Indication Signal reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_lof
            
            	Configure Loss Of Frame reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_lop
            
            	Configure Loss Of Pointer reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_rdi
            
            	Configure Remote Defect Indicator reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: report_sd_ber
            
            	Configure B2 BER in excess of SD threshold reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: threshold_sd_ber
            
            	Bit error rate is 10 to the minus n, where n is threshold value
            	**type**\: int
            
            	**range:** 3..9
            
            	**default value**\: 6
            
            .. attribute:: report_sf_ber
            
            	Configure B2 BER in excess of SF threshold reporting
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: threshold_sf_ber
            
            	Bit error rate is 10 to the minus n, where n is threshold value
            	**type**\: int
            
            	**range:** 3..9
            
            	**default value**\: 3
            
            .. attribute:: wan_mode
            
            	Configure WAN Mode
            	**type**\:  :py:class:`WanphyWanMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_wanphy_ui_cfg.WanphyWanMode>`
            
            

            """

            _prefix = 'wanphy-ui-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Wanphy, self).__init__()

                self.yang_name = "wanphy"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('report_path_rdi', (YLeaf(YType.empty, 'report-path-rdi'), ['Empty'])),
                    ('report_los', (YLeaf(YType.empty, 'report-los'), ['Empty'])),
                    ('report_path_lcd', (YLeaf(YType.empty, 'report-path-lcd'), ['Empty'])),
                    ('report_path_fe_plm', (YLeaf(YType.empty, 'report-path-fe-plm'), ['Empty'])),
                    ('lan_mode', (YLeaf(YType.enumeration, 'lan-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_wanphy_ui_cfg', 'WanphyLanMode', '')])),
                    ('report_path_plm', (YLeaf(YType.empty, 'report-path-plm'), ['Empty'])),
                    ('report_path_fe_ais', (YLeaf(YType.empty, 'report-path-fe-ais'), ['Empty'])),
                    ('report_path_ais', (YLeaf(YType.empty, 'report-path-ais'), ['Empty'])),
                    ('report_line_ais', (YLeaf(YType.empty, 'report-line-ais'), ['Empty'])),
                    ('report_lof', (YLeaf(YType.empty, 'report-lof'), ['Empty'])),
                    ('report_lop', (YLeaf(YType.empty, 'report-lop'), ['Empty'])),
                    ('report_rdi', (YLeaf(YType.empty, 'report-rdi'), ['Empty'])),
                    ('report_sd_ber', (YLeaf(YType.empty, 'report-sd-ber'), ['Empty'])),
                    ('threshold_sd_ber', (YLeaf(YType.uint32, 'threshold-sd-ber'), ['int'])),
                    ('report_sf_ber', (YLeaf(YType.empty, 'report-sf-ber'), ['Empty'])),
                    ('threshold_sf_ber', (YLeaf(YType.uint32, 'threshold-sf-ber'), ['int'])),
                    ('wan_mode', (YLeaf(YType.enumeration, 'wan-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_wanphy_ui_cfg', 'WanphyWanMode', '')])),
                ])
                self.report_path_rdi = None
                self.report_los = None
                self.report_path_lcd = None
                self.report_path_fe_plm = None
                self.lan_mode = None
                self.report_path_plm = None
                self.report_path_fe_ais = None
                self.report_path_ais = None
                self.report_line_ais = None
                self.report_lof = None
                self.report_lop = None
                self.report_rdi = None
                self.report_sd_ber = None
                self.threshold_sd_ber = None
                self.report_sf_ber = None
                self.threshold_sf_ber = None
                self.wan_mode = None
                self._segment_path = lambda: "Cisco-IOS-XR-wanphy-ui-cfg:wanphy"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Wanphy, ['report_path_rdi', 'report_los', 'report_path_lcd', 'report_path_fe_plm', 'lan_mode', 'report_path_plm', 'report_path_fe_ais', 'report_path_ais', 'report_line_ais', 'report_lof', 'report_lop', 'report_rdi', 'report_sd_ber', 'threshold_sd_ber', 'report_sf_ber', 'threshold_sf_ber', 'wan_mode'], name, value)



        class Ipv6Network(Entity):
            """
            Interface IPv6 Network configuration data
            
            .. attribute:: bgp_qos_policy_propagation
            
            	Configure BGP QoS policy propagation
            	**type**\:  :py:class:`BgpQosPolicyPropagation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpQosPolicyPropagation>`
            
            	**presence node**\: True
            
            .. attribute:: bgp_policy_accountings
            
            	IPv6 BGP Policy Accounting
            	**type**\:  :py:class:`BgpPolicyAccountings <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings>`
            
            .. attribute:: verify
            
            	IPv6 Verify Unicast Souce Reachable
            	**type**\:  :py:class:`Verify <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Verify>`
            
            	**presence node**\: True
            
            .. attribute:: addresses
            
            	Set the IPv6 address of an interface
            	**type**\:  :py:class:`Addresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses>`
            
            .. attribute:: bgp_flow_tag_policy_table
            
            	Interface ipv6 bgp policy propagation flowtag configuration
            	**type**\:  :py:class:`BgpFlowTagPolicyTable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable>`
            
            .. attribute:: mtu
            
            	MTU Setting of Interface
            	**type**\: int
            
            	**range:** 1280..65535
            
            .. attribute:: unnumbered
            
            	Enable IPv6 processing without an explicit address
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
            
            .. attribute:: ttl_propagate_disable
            
            	Disabled TTL propagate on an interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: tcp_mss_adjust_enable
            
            	Enable TCP MSS adjust on an interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: unreachables
            
            	Override Sending of ICMP Unreachable Messages
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'ipv6-ma-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network, self).__init__()

                self.yang_name = "ipv6-network"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("bgp-qos-policy-propagation", ("bgp_qos_policy_propagation", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpQosPolicyPropagation)), ("bgp-policy-accountings", ("bgp_policy_accountings", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings)), ("verify", ("verify", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Verify)), ("addresses", ("addresses", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses)), ("bgp-flow-tag-policy-table", ("bgp_flow_tag_policy_table", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable))])
                self._leafs = OrderedDict([
                    ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                    ('unnumbered', (YLeaf(YType.str, 'unnumbered'), ['str'])),
                    ('ttl_propagate_disable', (YLeaf(YType.empty, 'ttl-propagate-disable'), ['Empty'])),
                    ('tcp_mss_adjust_enable', (YLeaf(YType.empty, 'tcp-mss-adjust-enable'), ['Empty'])),
                    ('unreachables', (YLeaf(YType.empty, 'unreachables'), ['Empty'])),
                ])
                self.mtu = None
                self.unnumbered = None
                self.ttl_propagate_disable = None
                self.tcp_mss_adjust_enable = None
                self.unreachables = None

                self.bgp_qos_policy_propagation = None
                self._children_name_map["bgp_qos_policy_propagation"] = "bgp-qos-policy-propagation"

                self.bgp_policy_accountings = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings()
                self.bgp_policy_accountings.parent = self
                self._children_name_map["bgp_policy_accountings"] = "bgp-policy-accountings"

                self.verify = None
                self._children_name_map["verify"] = "verify"

                self.addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses()
                self.addresses.parent = self
                self._children_name_map["addresses"] = "addresses"

                self.bgp_flow_tag_policy_table = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable()
                self.bgp_flow_tag_policy_table.parent = self
                self._children_name_map["bgp_flow_tag_policy_table"] = "bgp-flow-tag-policy-table"
                self._segment_path = lambda: "Cisco-IOS-XR-ipv6-ma-cfg:ipv6-network"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network, ['mtu', 'unnumbered', 'ttl_propagate_disable', 'tcp_mss_adjust_enable', 'unreachables'], name, value)


            class BgpQosPolicyPropagation(Entity):
                """
                Configure BGP QoS policy propagation
                
                .. attribute:: source
                
                	QPPB configuration on source
                	**type**\:  :py:class:`Ipv6Qppb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6Qppb>`
                
                	**mandatory**\: True
                
                .. attribute:: destination
                
                	QPPB configuration on destination
                	**type**\:  :py:class:`Ipv6Qppb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6Qppb>`
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpQosPolicyPropagation, self).__init__()

                    self.yang_name = "bgp-qos-policy-propagation"
                    self.yang_parent_name = "ipv6-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('source', (YLeaf(YType.enumeration, 'source'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg', 'Ipv6Qppb', '')])),
                        ('destination', (YLeaf(YType.enumeration, 'destination'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg', 'Ipv6Qppb', '')])),
                    ])
                    self.source = None
                    self.destination = None
                    self._segment_path = lambda: "bgp-qos-policy-propagation"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpQosPolicyPropagation, ['source', 'destination'], name, value)



            class BgpPolicyAccountings(Entity):
                """
                IPv6 BGP Policy Accounting
                
                .. attribute:: bgp_policy_accounting
                
                	Accounting input or output
                	**type**\: list of  		 :py:class:`BgpPolicyAccounting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings.BgpPolicyAccounting>`
                
                

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings, self).__init__()

                    self.yang_name = "bgp-policy-accountings"
                    self.yang_parent_name = "ipv6-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("bgp-policy-accounting", ("bgp_policy_accounting", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings.BgpPolicyAccounting))])
                    self._leafs = OrderedDict()

                    self.bgp_policy_accounting = YList(self)
                    self._segment_path = lambda: "bgp-policy-accountings"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings, [], name, value)


                class BgpPolicyAccounting(Entity):
                    """
                    Accounting input or output
                    
                    .. attribute:: direction  (key)
                    
                    	Accouting on input or output
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: destination_accounting
                    
                    	Accounting on Destination IP Address
                    	**type**\: bool
                    
                    	**mandatory**\: True
                    
                    .. attribute:: source_accounting
                    
                    	Accounting on Source IP Address
                    	**type**\: bool
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings.BgpPolicyAccounting, self).__init__()

                        self.yang_name = "bgp-policy-accounting"
                        self.yang_parent_name = "bgp-policy-accountings"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['direction']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('direction', (YLeaf(YType.str, 'direction'), ['str'])),
                            ('destination_accounting', (YLeaf(YType.boolean, 'destination-accounting'), ['bool'])),
                            ('source_accounting', (YLeaf(YType.boolean, 'source-accounting'), ['bool'])),
                        ])
                        self.direction = None
                        self.destination_accounting = None
                        self.source_accounting = None
                        self._segment_path = lambda: "bgp-policy-accounting" + "[direction='" + str(self.direction) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpPolicyAccountings.BgpPolicyAccounting, ['direction', 'destination_accounting', 'source_accounting'], name, value)




            class Verify(Entity):
                """
                IPv6 Verify Unicast Souce Reachable
                
                .. attribute:: reachable
                
                	Source Reachable Interface
                	**type**\:  :py:class:`Ipv6Reachable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6Reachable>`
                
                	**mandatory**\: True
                
                .. attribute:: self_ping
                
                	Allow Self Ping
                	**type**\:  :py:class:`Ipv6SelfPing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6SelfPing>`
                
                	**mandatory**\: True
                
                .. attribute:: default_ping
                
                	Allow Default Route
                	**type**\:  :py:class:`Ipv6DefaultPing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg.Ipv6DefaultPing>`
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Verify, self).__init__()

                    self.yang_name = "verify"
                    self.yang_parent_name = "ipv6-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('reachable', (YLeaf(YType.enumeration, 'reachable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg', 'Ipv6Reachable', '')])),
                        ('self_ping', (YLeaf(YType.enumeration, 'self-ping'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg', 'Ipv6SelfPing', '')])),
                        ('default_ping', (YLeaf(YType.enumeration, 'default-ping'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ma_cfg', 'Ipv6DefaultPing', '')])),
                    ])
                    self.reachable = None
                    self.self_ping = None
                    self.default_ping = None
                    self._segment_path = lambda: "verify"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Verify, ['reachable', 'self_ping', 'default_ping'], name, value)



            class Addresses(Entity):
                """
                Set the IPv6 address of an interface
                
                .. attribute:: segment_routings
                
                	Segment Routing Table
                	**type**\:  :py:class:`SegmentRoutings <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings>`
                
                .. attribute:: link_local_address
                
                	Link local IPv6 address
                	**type**\:  :py:class:`LinkLocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.LinkLocalAddress>`
                
                	**presence node**\: True
                
                .. attribute:: eui64_addresses
                
                	EUI\-64 IPv6 address Table
                	**type**\:  :py:class:`Eui64Addresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses>`
                
                .. attribute:: regular_addresses
                
                	Regular IPv6 address Table
                	**type**\:  :py:class:`RegularAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses>`
                
                .. attribute:: auto_configuration
                
                	Auto IPv6 Interface Configuration
                	**type**\:  :py:class:`AutoConfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.AutoConfiguration>`
                
                

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses, self).__init__()

                    self.yang_name = "addresses"
                    self.yang_parent_name = "ipv6-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("segment-routings", ("segment_routings", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings)), ("link-local-address", ("link_local_address", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.LinkLocalAddress)), ("eui64-addresses", ("eui64_addresses", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses)), ("regular-addresses", ("regular_addresses", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses)), ("auto-configuration", ("auto_configuration", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.AutoConfiguration))])
                    self._leafs = OrderedDict()

                    self.segment_routings = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings()
                    self.segment_routings.parent = self
                    self._children_name_map["segment_routings"] = "segment-routings"

                    self.link_local_address = None
                    self._children_name_map["link_local_address"] = "link-local-address"

                    self.eui64_addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses()
                    self.eui64_addresses.parent = self
                    self._children_name_map["eui64_addresses"] = "eui64-addresses"

                    self.regular_addresses = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses()
                    self.regular_addresses.parent = self
                    self._children_name_map["regular_addresses"] = "regular-addresses"

                    self.auto_configuration = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.AutoConfiguration()
                    self.auto_configuration.parent = self
                    self._children_name_map["auto_configuration"] = "auto-configuration"
                    self._segment_path = lambda: "addresses"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses, [], name, value)


                class SegmentRoutings(Entity):
                    """
                    Segment Routing Table
                    
                    .. attribute:: segment_routing
                    
                    	Segment Routing Submode 
                    	**type**\: list of  		 :py:class:`SegmentRouting <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings.SegmentRouting>`
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings, self).__init__()

                        self.yang_name = "segment-routings"
                        self.yang_parent_name = "addresses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("segment-routing", ("segment_routing", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings.SegmentRouting))])
                        self._leafs = OrderedDict()

                        self.segment_routing = YList(self)
                        self._segment_path = lambda: "segment-routings"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings, [], name, value)


                    class SegmentRouting(Entity):
                        """
                        Segment Routing Submode 
                        
                        .. attribute:: address  (key)
                        
                        	IPv6 address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6_prefix_sid
                        
                        	Prefix\-Sid for Segment Routing
                        	**type**\:  :py:class:`Ipv6PrefixSid <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings.SegmentRouting.Ipv6PrefixSid>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: enable
                        
                        	Segment Routing Submode
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv6-ma-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings.SegmentRouting, self).__init__()

                            self.yang_name = "segment-routing"
                            self.yang_parent_name = "segment-routings"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['address']
                            self._child_classes = OrderedDict([("ipv6-prefix-sid", ("ipv6_prefix_sid", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings.SegmentRouting.Ipv6PrefixSid))])
                            self._leafs = OrderedDict([
                                ('address', (YLeaf(YType.str, 'address'), ['str','str'])),
                                ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ])
                            self.address = None
                            self.enable = None

                            self.ipv6_prefix_sid = None
                            self._children_name_map["ipv6_prefix_sid"] = "ipv6-prefix-sid"
                            self._segment_path = lambda: "segment-routing" + "[address='" + str(self.address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings.SegmentRouting, ['address', 'enable'], name, value)


                        class Ipv6PrefixSid(Entity):
                            """
                            Prefix\-Sid for Segment Routing
                            
                            .. attribute:: prefix_length
                            
                            	Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..128
                            
                            	**mandatory**\: True
                            
                            .. attribute:: zone
                            
                            	IPv6 address zone
                            	**type**\: str
                            
                            .. attribute:: route_tag
                            
                            	RouteTag
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv6-ma-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings.SegmentRouting.Ipv6PrefixSid, self).__init__()

                                self.yang_name = "ipv6-prefix-sid"
                                self.yang_parent_name = "segment-routing"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                    ('zone', (YLeaf(YType.str, 'zone'), ['str'])),
                                    ('route_tag', (YLeaf(YType.uint32, 'route-tag'), ['int'])),
                                ])
                                self.prefix_length = None
                                self.zone = None
                                self.route_tag = None
                                self._segment_path = lambda: "ipv6-prefix-sid"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.SegmentRoutings.SegmentRouting.Ipv6PrefixSid, ['prefix_length', 'zone', 'route_tag'], name, value)





                class LinkLocalAddress(Entity):
                    """
                    Link local IPv6 address
                    
                    .. attribute:: address
                    
                    	IPv6 address
                    	**type**\: union of the below types:
                    
                    		**type**\: str
                    
                    			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    		**type**\: str
                    
                    			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: zone
                    
                    	IPv6 address zone
                    	**type**\: str
                    
                    	**default value**\: 0
                    
                    .. attribute:: route_tag
                    
                    	RouteTag
                    	**type**\: int
                    
                    	**range:** 1..4294967295
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.LinkLocalAddress, self).__init__()

                        self.yang_name = "link-local-address"
                        self.yang_parent_name = "addresses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('address', (YLeaf(YType.str, 'address'), ['str','str'])),
                            ('zone', (YLeaf(YType.str, 'zone'), ['str'])),
                            ('route_tag', (YLeaf(YType.uint32, 'route-tag'), ['int'])),
                        ])
                        self.address = None
                        self.zone = None
                        self.route_tag = None
                        self._segment_path = lambda: "link-local-address"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.LinkLocalAddress, ['address', 'zone', 'route_tag'], name, value)



                class Eui64Addresses(Entity):
                    """
                    EUI\-64 IPv6 address Table
                    
                    .. attribute:: eui64_address
                    
                    	EUI\-64 IPv6 address
                    	**type**\: list of  		 :py:class:`Eui64Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses.Eui64Address>`
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses, self).__init__()

                        self.yang_name = "eui64-addresses"
                        self.yang_parent_name = "addresses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("eui64-address", ("eui64_address", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses.Eui64Address))])
                        self._leafs = OrderedDict()

                        self.eui64_address = YList(self)
                        self._segment_path = lambda: "eui64-addresses"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses, [], name, value)


                    class Eui64Address(Entity):
                        """
                        EUI\-64 IPv6 address
                        
                        .. attribute:: address  (key)
                        
                        	IPv6 address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_length
                        
                        	Prefix Length
                        	**type**\: int
                        
                        	**range:** 0..128
                        
                        	**mandatory**\: True
                        
                        .. attribute:: zone
                        
                        	IPv6 address zone
                        	**type**\: str
                        
                        	**default value**\: 0
                        
                        .. attribute:: route_tag
                        
                        	RouteTag
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        

                        """

                        _prefix = 'ipv6-ma-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses.Eui64Address, self).__init__()

                            self.yang_name = "eui64-address"
                            self.yang_parent_name = "eui64-addresses"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['address']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', (YLeaf(YType.str, 'address'), ['str','str'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('zone', (YLeaf(YType.str, 'zone'), ['str'])),
                                ('route_tag', (YLeaf(YType.uint32, 'route-tag'), ['int'])),
                            ])
                            self.address = None
                            self.prefix_length = None
                            self.zone = None
                            self.route_tag = None
                            self._segment_path = lambda: "eui64-address" + "[address='" + str(self.address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.Eui64Addresses.Eui64Address, ['address', 'prefix_length', 'zone', 'route_tag'], name, value)




                class RegularAddresses(Entity):
                    """
                    Regular IPv6 address Table
                    
                    .. attribute:: regular_address
                    
                    	Regular IPv6 address
                    	**type**\: list of  		 :py:class:`RegularAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses.RegularAddress>`
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses, self).__init__()

                        self.yang_name = "regular-addresses"
                        self.yang_parent_name = "addresses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("regular-address", ("regular_address", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses.RegularAddress))])
                        self._leafs = OrderedDict()

                        self.regular_address = YList(self)
                        self._segment_path = lambda: "regular-addresses"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses, [], name, value)


                    class RegularAddress(Entity):
                        """
                        Regular IPv6 address
                        
                        .. attribute:: address  (key)
                        
                        	IPv6 address
                        	**type**\: union of the below types:
                        
                        		**type**\: str
                        
                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        		**type**\: str
                        
                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_length
                        
                        	Prefix Length
                        	**type**\: int
                        
                        	**range:** 0..128
                        
                        	**mandatory**\: True
                        
                        .. attribute:: zone
                        
                        	IPv6 address zone
                        	**type**\: str
                        
                        	**default value**\: 0
                        
                        .. attribute:: route_tag
                        
                        	RouteTag
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        

                        """

                        _prefix = 'ipv6-ma-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses.RegularAddress, self).__init__()

                            self.yang_name = "regular-address"
                            self.yang_parent_name = "regular-addresses"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['address']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', (YLeaf(YType.str, 'address'), ['str','str'])),
                                ('prefix_length', (YLeaf(YType.uint32, 'prefix-length'), ['int'])),
                                ('zone', (YLeaf(YType.str, 'zone'), ['str'])),
                                ('route_tag', (YLeaf(YType.uint32, 'route-tag'), ['int'])),
                            ])
                            self.address = None
                            self.prefix_length = None
                            self.zone = None
                            self.route_tag = None
                            self._segment_path = lambda: "regular-address" + "[address='" + str(self.address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.RegularAddresses.RegularAddress, ['address', 'prefix_length', 'zone', 'route_tag'], name, value)




                class AutoConfiguration(Entity):
                    """
                    Auto IPv6 Interface Configuration
                    
                    .. attribute:: enable
                    
                    	The flag to enable auto ipv6 interface configuration
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: auto_config_slaac
                    
                    	Enable slaac on Mgmt interface
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.AutoConfiguration, self).__init__()

                        self.yang_name = "auto-configuration"
                        self.yang_parent_name = "addresses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ('auto_config_slaac', (YLeaf(YType.empty, 'auto-config-slaac'), ['Empty'])),
                        ])
                        self.enable = None
                        self.auto_config_slaac = None
                        self._segment_path = lambda: "auto-configuration"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.Addresses.AutoConfiguration, ['enable', 'auto_config_slaac'], name, value)




            class BgpFlowTagPolicyTable(Entity):
                """
                Interface ipv6 bgp policy propagation flowtag
                configuration
                
                .. attribute:: bgp_flow_tag_policy
                
                	Input
                	**type**\:  :py:class:`BgpFlowTagPolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable.BgpFlowTagPolicy>`
                
                

                """

                _prefix = 'ipv6-ma-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable, self).__init__()

                    self.yang_name = "bgp-flow-tag-policy-table"
                    self.yang_parent_name = "ipv6-network"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("bgp-flow-tag-policy", ("bgp_flow_tag_policy", InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable.BgpFlowTagPolicy))])
                    self._leafs = OrderedDict()

                    self.bgp_flow_tag_policy = InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable.BgpFlowTagPolicy()
                    self.bgp_flow_tag_policy.parent = self
                    self._children_name_map["bgp_flow_tag_policy"] = "bgp-flow-tag-policy"
                    self._segment_path = lambda: "bgp-flow-tag-policy-table"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable, [], name, value)


                class BgpFlowTagPolicy(Entity):
                    """
                    Input
                    
                    .. attribute:: source
                    
                    	Flow Tag configuration on source
                    	**type**\: bool
                    
                    .. attribute:: destination
                    
                    	Flow Tag configuration on destination
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv6-ma-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable.BgpFlowTagPolicy, self).__init__()

                        self.yang_name = "bgp-flow-tag-policy"
                        self.yang_parent_name = "bgp-flow-tag-policy-table"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('source', (YLeaf(YType.boolean, 'source'), ['bool'])),
                            ('destination', (YLeaf(YType.boolean, 'destination'), ['bool'])),
                        ])
                        self.source = None
                        self.destination = None
                        self._segment_path = lambda: "bgp-flow-tag-policy"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Network.BgpFlowTagPolicyTable.BgpFlowTagPolicy, ['source', 'destination'], name, value)





        class Mpls(Entity):
            """
            MPLS configuration under an interface
            
            .. attribute:: label_security
            
            	MPLS label security
            	**type**\:  :py:class:`LabelSecurity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mpls.LabelSecurity>`
            
            .. attribute:: mtu
            
            	Set the MPLS MTU for the interface
            	**type**\: int
            
            	**range:** 68..65535
            
            

            """

            _prefix = 'mpls-io-cfg'
            _revision = '2017-05-18'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Mpls, self).__init__()

                self.yang_name = "mpls"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("label-security", ("label_security", InterfaceConfigurations.InterfaceConfiguration.Mpls.LabelSecurity))])
                self._leafs = OrderedDict([
                    ('mtu', (YLeaf(YType.uint32, 'mtu'), ['int'])),
                ])
                self.mtu = None

                self.label_security = InterfaceConfigurations.InterfaceConfiguration.Mpls.LabelSecurity()
                self.label_security.parent = self
                self._children_name_map["label_security"] = "label-security"
                self._segment_path = lambda: "Cisco-IOS-XR-mpls-io-cfg:mpls"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Mpls, ['mtu'], name, value)


            class LabelSecurity(Entity):
                """
                MPLS label security
                
                .. attribute:: multi_label_drop
                
                	Enable drop of multi\-labelled incoming packets on a Interface
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: rpf
                
                	Enable MPLS RPF for incoming packets on a Interface
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-io-cfg'
                _revision = '2017-05-18'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Mpls.LabelSecurity, self).__init__()

                    self.yang_name = "label-security"
                    self.yang_parent_name = "mpls"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('multi_label_drop', (YLeaf(YType.empty, 'multi-label-drop'), ['Empty'])),
                        ('rpf', (YLeaf(YType.empty, 'rpf'), ['Empty'])),
                    ])
                    self.multi_label_drop = None
                    self.rpf = None
                    self._segment_path = lambda: "label-security"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Mpls.LabelSecurity, ['multi_label_drop', 'rpf'], name, value)




        class TunnelTeAttributes(Entity):
            """
            MPLS tunnel attributes
            
            .. attribute:: backup_bandwidth
            
            	Tunnel backup bandwidth requirement
            	**type**\:  :py:class:`BackupBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BackupBandwidth>`
            
            .. attribute:: bfd_over_lsp
            
            	BFD over TE LSP
            	**type**\:  :py:class:`BfdOverLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BfdOverLsp>`
            
            .. attribute:: binding_segment_id_mpls
            
            	Allocate MPLS binding segment ID
            	**type**\:  :py:class:`BindingSegmentIdMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BindingSegmentIdMpls>`
            
            .. attribute:: tunnel_path_protection
            
            	MPLS tunnel path protected configs
            	**type**\:  :py:class:`TunnelPathProtection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathProtection>`
            
            .. attribute:: path_option_protects
            
            	Tunnel path protection state
            	**type**\:  :py:class:`PathOptionProtects <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects>`
            
            .. attribute:: bidirectional
            
            	Tunnel Interface Bidirectional configuration data
            	**type**\:  :py:class:`Bidirectional <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional>`
            
            .. attribute:: admin_mode
            
            	Performs admin operations on the optical tunnel interface
            	**type**\:  :py:class:`AdminMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AdminMode>`
            
            .. attribute:: switching
            
            	Specify tunnel LSPs switching capability descriptor
            	**type**\:  :py:class:`Switching <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching>`
            
            .. attribute:: pce
            
            	PCE config
            	**type**\:  :py:class:`Pce <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Pce>`
            
            .. attribute:: forward_class
            
            	Forward class value
            	**type**\: int
            
            	**range:** 0..7
            
            .. attribute:: tunnel_path_selection
            
            	Configure path selection properties
            	**type**\:  :py:class:`TunnelPathSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection>`
            
            .. attribute:: auto_bandwidth
            
            	Tunnel Interface Auto\-bandwidth configuration data
            	**type**\:  :py:class:`AutoBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth>`
            
            .. attribute:: priority
            
            	Tunnel Setup and Hold Priorities
            	**type**\:  :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Priority>`
            
            	**presence node**\: True
            
            .. attribute:: destination
            
            	Set the destination of the tunnel
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: record_route
            
            	Record the route used by the tunnel
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: affinity_mask
            
            	Set the affinity flags and mask
            	**type**\:  :py:class:`AffinityMask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AffinityMask>`
            
            	**presence node**\: True
            
            .. attribute:: forwarding_adjacency
            
            	Forwarding adjacency announcement to IGP
            	**type**\:  :py:class:`ForwardingAdjacency <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.ForwardingAdjacency>`
            
            .. attribute:: logging
            
            	Log tunnel LSP messages
            	**type**\:  :py:class:`Logging <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Logging>`
            
            .. attribute:: bandwidth
            
            	Tunnel bandwidth requirement
            	**type**\:  :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bandwidth>`
            
            	**presence node**\: True
            
            .. attribute:: autoroute
            
            	Parameters for IGP routing over tunnel
            	**type**\:  :py:class:`Autoroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute>`
            
            .. attribute:: policy_classes
            
            	Policy classes for PBTS
            	**type**\:  :py:class:`PolicyClasses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PolicyClasses>`
            
            .. attribute:: path_selection_metric
            
            	Path selection metric to use in path calculation
            	**type**\:  :py:class:`MplsTePathSelectionMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathSelectionMetric>`
            
            .. attribute:: new_style_affinity_affinity_types
            
            	Tunnel new style affinity attributes table
            	**type**\:  :py:class:`NewStyleAffinityAffinityTypes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes>`
            
            .. attribute:: soft_preemption
            
            	Enable the soft\-preemption feature on the tunnel
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: fast_reroute
            
            	Specify MPLS tunnel can be fast\-rerouted
            	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.FastReroute>`
            
            	**presence node**\: True
            
            .. attribute:: load_share
            
            	Tunnel loadsharing metric
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: signalled_name
            
            	The name of the tunnel to be included in signalling messages
            	**type**\: str
            
            	**length:** 1..254
            
            

            """

            _prefix = 'mpls-te-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes, self).__init__()

                self.yang_name = "tunnel-te-attributes"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("backup-bandwidth", ("backup_bandwidth", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BackupBandwidth)), ("bfd-over-lsp", ("bfd_over_lsp", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BfdOverLsp)), ("binding-segment-id-mpls", ("binding_segment_id_mpls", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BindingSegmentIdMpls)), ("tunnel-path-protection", ("tunnel_path_protection", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathProtection)), ("path-option-protects", ("path_option_protects", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects)), ("bidirectional", ("bidirectional", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional)), ("admin-mode", ("admin_mode", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AdminMode)), ("switching", ("switching", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching)), ("pce", ("pce", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Pce)), ("tunnel-path-selection", ("tunnel_path_selection", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection)), ("auto-bandwidth", ("auto_bandwidth", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth)), ("priority", ("priority", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Priority)), ("affinity-mask", ("affinity_mask", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AffinityMask)), ("forwarding-adjacency", ("forwarding_adjacency", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.ForwardingAdjacency)), ("logging", ("logging", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Logging)), ("bandwidth", ("bandwidth", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bandwidth)), ("autoroute", ("autoroute", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute)), ("policy-classes", ("policy_classes", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PolicyClasses)), ("new-style-affinity-affinity-types", ("new_style_affinity_affinity_types", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes)), ("fast-reroute", ("fast_reroute", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.FastReroute))])
                self._leafs = OrderedDict([
                    ('forward_class', (YLeaf(YType.uint32, 'forward-class'), ['int'])),
                    ('destination', (YLeaf(YType.str, 'destination'), ['str'])),
                    ('record_route', (YLeaf(YType.empty, 'record-route'), ['Empty'])),
                    ('path_selection_metric', (YLeaf(YType.enumeration, 'path-selection-metric'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathSelectionMetric', '')])),
                    ('soft_preemption', (YLeaf(YType.empty, 'soft-preemption'), ['Empty'])),
                    ('load_share', (YLeaf(YType.uint32, 'load-share'), ['int'])),
                    ('signalled_name', (YLeaf(YType.str, 'signalled-name'), ['str'])),
                ])
                self.forward_class = None
                self.destination = None
                self.record_route = None
                self.path_selection_metric = None
                self.soft_preemption = None
                self.load_share = None
                self.signalled_name = None

                self.backup_bandwidth = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BackupBandwidth()
                self.backup_bandwidth.parent = self
                self._children_name_map["backup_bandwidth"] = "backup-bandwidth"

                self.bfd_over_lsp = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BfdOverLsp()
                self.bfd_over_lsp.parent = self
                self._children_name_map["bfd_over_lsp"] = "bfd-over-lsp"

                self.binding_segment_id_mpls = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BindingSegmentIdMpls()
                self.binding_segment_id_mpls.parent = self
                self._children_name_map["binding_segment_id_mpls"] = "binding-segment-id-mpls"

                self.tunnel_path_protection = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathProtection()
                self.tunnel_path_protection.parent = self
                self._children_name_map["tunnel_path_protection"] = "tunnel-path-protection"

                self.path_option_protects = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects()
                self.path_option_protects.parent = self
                self._children_name_map["path_option_protects"] = "path-option-protects"

                self.bidirectional = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional()
                self.bidirectional.parent = self
                self._children_name_map["bidirectional"] = "bidirectional"

                self.admin_mode = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AdminMode()
                self.admin_mode.parent = self
                self._children_name_map["admin_mode"] = "admin-mode"

                self.switching = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching()
                self.switching.parent = self
                self._children_name_map["switching"] = "switching"

                self.pce = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Pce()
                self.pce.parent = self
                self._children_name_map["pce"] = "pce"

                self.tunnel_path_selection = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection()
                self.tunnel_path_selection.parent = self
                self._children_name_map["tunnel_path_selection"] = "tunnel-path-selection"

                self.auto_bandwidth = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth()
                self.auto_bandwidth.parent = self
                self._children_name_map["auto_bandwidth"] = "auto-bandwidth"

                self.priority = None
                self._children_name_map["priority"] = "priority"

                self.affinity_mask = None
                self._children_name_map["affinity_mask"] = "affinity-mask"

                self.forwarding_adjacency = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.ForwardingAdjacency()
                self.forwarding_adjacency.parent = self
                self._children_name_map["forwarding_adjacency"] = "forwarding-adjacency"

                self.logging = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Logging()
                self.logging.parent = self
                self._children_name_map["logging"] = "logging"

                self.bandwidth = None
                self._children_name_map["bandwidth"] = "bandwidth"

                self.autoroute = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute()
                self.autoroute.parent = self
                self._children_name_map["autoroute"] = "autoroute"

                self.policy_classes = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PolicyClasses()
                self.policy_classes.parent = self
                self._children_name_map["policy_classes"] = "policy-classes"

                self.new_style_affinity_affinity_types = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes()
                self.new_style_affinity_affinity_types.parent = self
                self._children_name_map["new_style_affinity_affinity_types"] = "new-style-affinity-affinity-types"

                self.fast_reroute = None
                self._children_name_map["fast_reroute"] = "fast-reroute"
                self._segment_path = lambda: "Cisco-IOS-XR-mpls-te-cfg:tunnel-te-attributes"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes, ['forward_class', 'destination', 'record_route', 'path_selection_metric', 'soft_preemption', 'load_share', 'signalled_name'], name, value)


            class BackupBandwidth(Entity):
                """
                Tunnel backup bandwidth requirement
                
                .. attribute:: dste_type
                
                	DSTE\-standard flag
                	**type**\:  :py:class:`MplsTeBandwidthDste <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeBandwidthDste>`
                
                .. attribute:: pool_type
                
                	Backup bandwidth pool type, relevant only if DSTEType is PreStandardDSTE
                	**type**\:  :py:class:`MplsTeBackupBandwidthPool <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeBackupBandwidthPool>`
                
                .. attribute:: class_type
                
                	Backup bandwidth class type, relevant only if DSTEType is StandardDSTE
                	**type**\:  :py:class:`MplsTeBackupBandwidthClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeBackupBandwidthClass>`
                
                .. attribute:: limit_type
                
                	Backup bandwidth limit type
                	**type**\:  :py:class:`MplsTeBandwidthLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeBandwidthLimit>`
                
                .. attribute:: backup_bandwidth
                
                	Backup bandwidth requested by this tunnel in kbps. Ignored if bandwidth limit type is unlimited
                	**type**\: int
                
                	**range:** 1..4294967295
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BackupBandwidth, self).__init__()

                    self.yang_name = "backup-bandwidth"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_type', (YLeaf(YType.enumeration, 'dste-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeBandwidthDste', '')])),
                        ('pool_type', (YLeaf(YType.enumeration, 'pool-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeBackupBandwidthPool', '')])),
                        ('class_type', (YLeaf(YType.enumeration, 'class-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeBackupBandwidthClass', '')])),
                        ('limit_type', (YLeaf(YType.enumeration, 'limit-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeBandwidthLimit', '')])),
                        ('backup_bandwidth', (YLeaf(YType.uint32, 'backup-bandwidth'), ['int'])),
                    ])
                    self.dste_type = None
                    self.pool_type = None
                    self.class_type = None
                    self.limit_type = None
                    self.backup_bandwidth = None
                    self._segment_path = lambda: "backup-bandwidth"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BackupBandwidth, ['dste_type', 'pool_type', 'class_type', 'limit_type', 'backup_bandwidth'], name, value)



            class BfdOverLsp(Entity):
                """
                BFD over TE LSP
                
                .. attribute:: dampening_initial_wait
                
                	Initial delay in milliseconds (default 16000)
                	**type**\: int
                
                	**range:** 1..518400000
                
                .. attribute:: fast_detect
                
                	Enable BFD Fast Detect On the tunnel
                	**type**\:  :py:class:`MplsTebfdSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTebfdSession>`
                
                .. attribute:: enable
                
                	Always set to true
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: multiplier
                
                	Specify the multiplier for BFD failure detection
                	**type**\: int
                
                	**range:** 3..10
                
                .. attribute:: bringup_timeout
                
                	Wait for session to come up in seconds (default 60)
                	**type**\: int
                
                	**range:** 10..3600
                
                .. attribute:: periodic_ping_disable
                
                	Disable Periodic LSP Ping for BFD over LSP
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: dampening_secondary_wait
                
                	Secondary delay in milliseconds (default 20000)
                	**type**\: int
                
                	**range:** 1..518400000
                
                .. attribute:: periodic_ping_interval
                
                	Periodic LSP Ping Interval in seconds (default 120)
                	**type**\: int
                
                	**range:** 60..3600
                
                .. attribute:: dampening_maximum_wait
                
                	Maximum delay in milliseconds (default 600000)
                	**type**\: int
                
                	**range:** 1..518400000
                
                .. attribute:: minimum_interval
                
                	Specify the minimum interval for BFD failure detection
                	**type**\: int
                
                	**range:** 3..30000
                
                .. attribute:: encap_mode
                
                	Specify BFD Encap Mode on the tunnel
                	**type**\: int
                
                	**range:** 0..1
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BfdOverLsp, self).__init__()

                    self.yang_name = "bfd-over-lsp"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dampening_initial_wait', (YLeaf(YType.uint32, 'dampening-initial-wait'), ['int'])),
                        ('fast_detect', (YLeaf(YType.enumeration, 'fast-detect'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTebfdSession', '')])),
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ('multiplier', (YLeaf(YType.uint32, 'multiplier'), ['int'])),
                        ('bringup_timeout', (YLeaf(YType.uint32, 'bringup-timeout'), ['int'])),
                        ('periodic_ping_disable', (YLeaf(YType.empty, 'periodic-ping-disable'), ['Empty'])),
                        ('dampening_secondary_wait', (YLeaf(YType.uint32, 'dampening-secondary-wait'), ['int'])),
                        ('periodic_ping_interval', (YLeaf(YType.uint32, 'periodic-ping-interval'), ['int'])),
                        ('dampening_maximum_wait', (YLeaf(YType.uint32, 'dampening-maximum-wait'), ['int'])),
                        ('minimum_interval', (YLeaf(YType.uint32, 'minimum-interval'), ['int'])),
                        ('encap_mode', (YLeaf(YType.uint32, 'encap-mode'), ['int'])),
                    ])
                    self.dampening_initial_wait = None
                    self.fast_detect = None
                    self.enable = None
                    self.multiplier = None
                    self.bringup_timeout = None
                    self.periodic_ping_disable = None
                    self.dampening_secondary_wait = None
                    self.periodic_ping_interval = None
                    self.dampening_maximum_wait = None
                    self.minimum_interval = None
                    self.encap_mode = None
                    self._segment_path = lambda: "bfd-over-lsp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BfdOverLsp, ['dampening_initial_wait', 'fast_detect', 'enable', 'multiplier', 'bringup_timeout', 'periodic_ping_disable', 'dampening_secondary_wait', 'periodic_ping_interval', 'dampening_maximum_wait', 'minimum_interval', 'encap_mode'], name, value)



            class BindingSegmentIdMpls(Entity):
                """
                Allocate MPLS binding segment ID
                
                .. attribute:: segment_id_type
                
                	MPLS label value type
                	**type**\:  :py:class:`BindingSegmentId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.BindingSegmentId>`
                
                .. attribute:: label_value
                
                	MPLS label
                	**type**\: int
                
                	**range:** 16..4015
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BindingSegmentIdMpls, self).__init__()

                    self.yang_name = "binding-segment-id-mpls"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('segment_id_type', (YLeaf(YType.enumeration, 'segment-id-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'BindingSegmentId', '')])),
                        ('label_value', (YLeaf(YType.uint32, 'label-value'), ['int'])),
                    ])
                    self.segment_id_type = None
                    self.label_value = None
                    self._segment_path = lambda: "binding-segment-id-mpls"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.BindingSegmentIdMpls, ['segment_id_type', 'label_value'], name, value)



            class TunnelPathProtection(Entity):
                """
                MPLS tunnel path protected configs
                
                .. attribute:: enable
                
                	Enable Path Protection
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathProtection, self).__init__()

                    self.yang_name = "tunnel-path-protection"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                    ])
                    self.enable = None
                    self._segment_path = lambda: "tunnel-path-protection"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathProtection, ['enable'], name, value)



            class PathOptionProtects(Entity):
                """
                Tunnel path protection state
                
                .. attribute:: path_option_protect
                
                	Tunnel path protection
                	**type**\: list of  		 :py:class:`PathOptionProtect <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects, self).__init__()

                    self.yang_name = "path-option-protects"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("path-option-protect", ("path_option_protect", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect))])
                    self._leafs = OrderedDict()

                    self.path_option_protect = YList(self)
                    self._segment_path = lambda: "path-option-protects"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects, [], name, value)


                class PathOptionProtect(Entity):
                    """
                    Tunnel path protection
                    
                    .. attribute:: protection  (key)
                    
                    	Protection type for this path
                    	**type**\:  :py:class:`MplsTePathOptionProtection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionProtection>`
                    
                    .. attribute:: path_options
                    
                    	Tunnel path options
                    	**type**\:  :py:class:`PathOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect, self).__init__()

                        self.yang_name = "path-option-protect"
                        self.yang_parent_name = "path-option-protects"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['protection']
                        self._child_classes = OrderedDict([("path-options", ("path_options", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions))])
                        self._leafs = OrderedDict([
                            ('protection', (YLeaf(YType.enumeration, 'protection'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOptionProtection', '')])),
                        ])
                        self.protection = None

                        self.path_options = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions()
                        self.path_options.parent = self
                        self._children_name_map["path_options"] = "path-options"
                        self._segment_path = lambda: "path-option-protect" + "[protection='" + str(self.protection) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect, ['protection'], name, value)


                    class PathOptions(Entity):
                        """
                        Tunnel path options
                        
                        .. attribute:: path_option
                        
                        	A tunnel path option
                        	**type**\: list of  		 :py:class:`PathOption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions.PathOption>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions, self).__init__()

                            self.yang_name = "path-options"
                            self.yang_parent_name = "path-option-protect"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("path-option", ("path_option", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions.PathOption))])
                            self._leafs = OrderedDict()

                            self.path_option = YList(self)
                            self._segment_path = lambda: "path-options"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions, [], name, value)


                        class PathOption(Entity):
                            """
                            A tunnel path option
                            
                            .. attribute:: preference_level  (key)
                            
                            	Preference level for this path option
                            	**type**\: int
                            
                            	**range:** 1..1000
                            
                            .. attribute:: path_type
                            
                            	The type of the path option
                            	**type**\:  :py:class:`MplsTePathOption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOption>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: path_id
                            
                            	The ID of the IP explicit path associated with this option
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: path_name
                            
                            	The name of the IP explicit path associated with this option
                            	**type**\: str
                            
                            .. attribute:: path_property
                            
                            	Deprecated
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**default value**\: 0
                            
                            .. attribute:: interface
                            
                            	Deprecated
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                            
                            .. attribute:: output_label
                            
                            	Deprecated
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**default value**\: 0
                            
                            .. attribute:: destination
                            
                            	Deprecated
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**default value**\: 0.0.0.0
                            
                            .. attribute:: lockdown
                            
                            	Lockdown properties
                            	**type**\:  :py:class:`MplsTePathOptionProperty <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionProperty>`
                            
                            	**default value**\: none
                            
                            .. attribute:: verbatim
                            
                            	Verbatim properties
                            	**type**\:  :py:class:`MplsTePathOptionProperty <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionProperty>`
                            
                            	**default value**\: none
                            
                            .. attribute:: pce
                            
                            	PCE properties
                            	**type**\:  :py:class:`MplsTePathOptionProperty <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionProperty>`
                            
                            	**default value**\: none
                            
                            .. attribute:: pce_address
                            
                            	PCE address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**default value**\: 0.0.0.0
                            
                            .. attribute:: igp_type
                            
                            	IGP type
                            	**type**\:  :py:class:`MplsTeIgpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeIgpProtocol>`
                            
                            	**default value**\: none
                            
                            .. attribute:: igp_instance
                            
                            	IGP instance name
                            	**type**\: str
                            
                            	**length:** 1..40
                            
                            .. attribute:: igp_area
                            
                            	IGP area ID in integer format
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**default value**\: 0
                            
                            .. attribute:: igp_area_ip_address_id
                            
                            	IGP area ID in IP address format
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**default value**\: 0.0.0.0
                            
                            .. attribute:: path_option_attribute_set_name
                            
                            	Path option attribute set name
                            	**type**\: str
                            
                            .. attribute:: protected_by_preference_level
                            
                            	Preference level of the protecting explicit path. Leave unset in order to not use an explicit protecting path
                            	**type**\: int
                            
                            	**range:** 1..1000
                            
                            	**default value**\: 1
                            
                            .. attribute:: segment_routing
                            
                            	Deprecated
                            	**type**\:  :py:class:`MplsTePathOptionProperty <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionProperty>`
                            
                            	**default value**\: none
                            
                            

                            """

                            _prefix = 'mpls-te-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions.PathOption, self).__init__()

                                self.yang_name = "path-option"
                                self.yang_parent_name = "path-options"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['preference_level']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('preference_level', (YLeaf(YType.uint32, 'preference-level'), ['int'])),
                                    ('path_type', (YLeaf(YType.enumeration, 'path-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOption', '')])),
                                    ('path_id', (YLeaf(YType.uint32, 'path-id'), ['int'])),
                                    ('path_name', (YLeaf(YType.str, 'path-name'), ['str'])),
                                    ('path_property', (YLeaf(YType.uint32, 'path-property'), ['int'])),
                                    ('interface', (YLeaf(YType.str, 'interface'), ['str'])),
                                    ('output_label', (YLeaf(YType.uint32, 'output-label'), ['int'])),
                                    ('destination', (YLeaf(YType.str, 'destination'), ['str'])),
                                    ('lockdown', (YLeaf(YType.enumeration, 'lockdown'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOptionProperty', '')])),
                                    ('verbatim', (YLeaf(YType.enumeration, 'verbatim'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOptionProperty', '')])),
                                    ('pce', (YLeaf(YType.enumeration, 'pce'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOptionProperty', '')])),
                                    ('pce_address', (YLeaf(YType.str, 'pce-address'), ['str'])),
                                    ('igp_type', (YLeaf(YType.enumeration, 'igp-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeIgpProtocol', '')])),
                                    ('igp_instance', (YLeaf(YType.str, 'igp-instance'), ['str'])),
                                    ('igp_area', (YLeaf(YType.uint32, 'igp-area'), ['int'])),
                                    ('igp_area_ip_address_id', (YLeaf(YType.str, 'igp-area-ip-address-id'), ['str'])),
                                    ('path_option_attribute_set_name', (YLeaf(YType.str, 'path-option-attribute-set-name'), ['str'])),
                                    ('protected_by_preference_level', (YLeaf(YType.uint32, 'protected-by-preference-level'), ['int'])),
                                    ('segment_routing', (YLeaf(YType.enumeration, 'segment-routing'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOptionProperty', '')])),
                                ])
                                self.preference_level = None
                                self.path_type = None
                                self.path_id = None
                                self.path_name = None
                                self.path_property = None
                                self.interface = None
                                self.output_label = None
                                self.destination = None
                                self.lockdown = None
                                self.verbatim = None
                                self.pce = None
                                self.pce_address = None
                                self.igp_type = None
                                self.igp_instance = None
                                self.igp_area = None
                                self.igp_area_ip_address_id = None
                                self.path_option_attribute_set_name = None
                                self.protected_by_preference_level = None
                                self.segment_routing = None
                                self._segment_path = lambda: "path-option" + "[preference-level='" + str(self.preference_level) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PathOptionProtects.PathOptionProtect.PathOptions.PathOption, ['preference_level', 'path_type', 'path_id', 'path_name', 'path_property', 'interface', 'output_label', 'destination', 'lockdown', 'verbatim', 'pce', 'pce_address', 'igp_type', 'igp_instance', 'igp_area', 'igp_area_ip_address_id', 'path_option_attribute_set_name', 'protected_by_preference_level', 'segment_routing'], name, value)






            class Bidirectional(Entity):
                """
                Tunnel Interface Bidirectional configuration
                data
                
                .. attribute:: association_corouted_type
                
                	Association Corouted Type
                	**type**\:  :py:class:`AssociationCoroutedType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType>`
                
                .. attribute:: association_parameters
                
                	Association ID, Source IP Address, and Global ID
                	**type**\:  :py:class:`AssociationParameters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationParameters>`
                
                	**presence node**\: True
                
                .. attribute:: enabled
                
                	This object is only valid for tunnel interfaces and it controls whether that interface has bidirectional enabled on it or not
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional, self).__init__()

                    self.yang_name = "bidirectional"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("association-corouted-type", ("association_corouted_type", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType)), ("association-parameters", ("association_parameters", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationParameters))])
                    self._leafs = OrderedDict([
                        ('enabled', (YLeaf(YType.empty, 'enabled'), ['Empty'])),
                    ])
                    self.enabled = None

                    self.association_corouted_type = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType()
                    self.association_corouted_type.parent = self
                    self._children_name_map["association_corouted_type"] = "association-corouted-type"

                    self.association_parameters = None
                    self._children_name_map["association_parameters"] = "association-parameters"
                    self._segment_path = lambda: "bidirectional"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional, ['enabled'], name, value)


                class AssociationCoroutedType(Entity):
                    """
                    Association Corouted Type
                    
                    .. attribute:: fault_oam
                    
                    	Tunnel Fault OAM
                    	**type**\:  :py:class:`FaultOam <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType.FaultOam>`
                    
                    .. attribute:: wrap_protection_enable
                    
                    	This object is only valid for bidirectional tunnel interfaces and it controls whether that interface has LSP Wrap protectionenabled on it or not
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: enable
                    
                    	Controls whether association type is co\-routed
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: disable_protection_object
                    
                    	Disable signaling of RSVP Protection Object
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType, self).__init__()

                        self.yang_name = "association-corouted-type"
                        self.yang_parent_name = "bidirectional"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("fault-oam", ("fault_oam", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType.FaultOam))])
                        self._leafs = OrderedDict([
                            ('wrap_protection_enable', (YLeaf(YType.empty, 'wrap-protection-enable'), ['Empty'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ('disable_protection_object', (YLeaf(YType.empty, 'disable-protection-object'), ['Empty'])),
                        ])
                        self.wrap_protection_enable = None
                        self.enable = None
                        self.disable_protection_object = None

                        self.fault_oam = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType.FaultOam()
                        self.fault_oam.parent = self
                        self._children_name_map["fault_oam"] = "fault-oam"
                        self._segment_path = lambda: "association-corouted-type"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType, ['wrap_protection_enable', 'enable', 'disable_protection_object'], name, value)


                    class FaultOam(Entity):
                        """
                        Tunnel Fault OAM
                        
                        .. attribute:: enable
                        
                        	This object is only valid for bidirectional tunnel interfaces and it controls whether that interface has fault OAM enabled on it or not
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType.FaultOam, self).__init__()

                            self.yang_name = "fault-oam"
                            self.yang_parent_name = "association-corouted-type"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ])
                            self.enable = None
                            self._segment_path = lambda: "fault-oam"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationCoroutedType.FaultOam, ['enable'], name, value)




                class AssociationParameters(Entity):
                    """
                    Association ID, Source IP Address, and Global
                    ID
                    
                    .. attribute:: association_id
                    
                    	Association ID
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**mandatory**\: True
                    
                    .. attribute:: association_source_address
                    
                    	Association Source IP Address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: association_is_global_id_configured
                    
                    	Is Association Global ID Configured
                    	**type**\: bool
                    
                    .. attribute:: association_global_id
                    
                    	Association Global ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationParameters, self).__init__()

                        self.yang_name = "association-parameters"
                        self.yang_parent_name = "bidirectional"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('association_id', (YLeaf(YType.uint32, 'association-id'), ['int'])),
                            ('association_source_address', (YLeaf(YType.str, 'association-source-address'), ['str'])),
                            ('association_is_global_id_configured', (YLeaf(YType.boolean, 'association-is-global-id-configured'), ['bool'])),
                            ('association_global_id', (YLeaf(YType.uint32, 'association-global-id'), ['int'])),
                        ])
                        self.association_id = None
                        self.association_source_address = None
                        self.association_is_global_id_configured = None
                        self.association_global_id = None
                        self._segment_path = lambda: "association-parameters"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bidirectional.AssociationParameters, ['association_id', 'association_source_address', 'association_is_global_id_configured', 'association_global_id'], name, value)




            class AdminMode(Entity):
                """
                Performs admin operations on the optical tunnel
                interface
                
                .. attribute:: deactivate_tunnel
                
                	Performs signalling operation to deactivate optical tunnel
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AdminMode, self).__init__()

                    self.yang_name = "admin-mode"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('deactivate_tunnel', (YLeaf(YType.empty, 'deactivate-tunnel'), ['Empty'])),
                    ])
                    self.deactivate_tunnel = None
                    self._segment_path = lambda: "admin-mode"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AdminMode, ['deactivate_tunnel'], name, value)



            class Switching(Entity):
                """
                Specify tunnel LSPs switching capability
                descriptor
                
                .. attribute:: transit
                
                	Specify transit switching descriptor parameters
                	**type**\:  :py:class:`Transit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Transit>`
                
                	**presence node**\: True
                
                .. attribute:: endpoint
                
                	Specify end point switching descriptor parameters
                	**type**\:  :py:class:`Endpoint <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Endpoint>`
                
                	**presence node**\: True
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching, self).__init__()

                    self.yang_name = "switching"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("transit", ("transit", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Transit)), ("endpoint", ("endpoint", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Endpoint))])
                    self._leafs = OrderedDict()

                    self.transit = None
                    self._children_name_map["transit"] = "transit"

                    self.endpoint = None
                    self._children_name_map["endpoint"] = "endpoint"
                    self._segment_path = lambda: "switching"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching, [], name, value)


                class Transit(Entity):
                    """
                    Specify transit switching descriptor
                    parameters
                    
                    .. attribute:: capability
                    
                    	Switching capability
                    	**type**\:  :py:class:`MplsTeSwitchingCap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeSwitchingCap>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: encoding
                    
                    	LSP encoding
                    	**type**\:  :py:class:`MplsTeSwitchingEncode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeSwitchingEncode>`
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Transit, self).__init__()

                        self.yang_name = "transit"
                        self.yang_parent_name = "switching"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('capability', (YLeaf(YType.enumeration, 'capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeSwitchingCap', '')])),
                            ('encoding', (YLeaf(YType.enumeration, 'encoding'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeSwitchingEncode', '')])),
                        ])
                        self.capability = None
                        self.encoding = None
                        self._segment_path = lambda: "transit"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Transit, ['capability', 'encoding'], name, value)



                class Endpoint(Entity):
                    """
                    Specify end point switching descriptor
                    parameters
                    
                    .. attribute:: capability
                    
                    	Switching capability
                    	**type**\:  :py:class:`MplsTeSwitchingCap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeSwitchingCap>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: encoding
                    
                    	LSP encoding
                    	**type**\:  :py:class:`MplsTeSwitchingEncode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeSwitchingEncode>`
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Endpoint, self).__init__()

                        self.yang_name = "endpoint"
                        self.yang_parent_name = "switching"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('capability', (YLeaf(YType.enumeration, 'capability'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeSwitchingCap', '')])),
                            ('encoding', (YLeaf(YType.enumeration, 'encoding'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeSwitchingEncode', '')])),
                        ])
                        self.capability = None
                        self.encoding = None
                        self._segment_path = lambda: "endpoint"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Switching.Endpoint, ['capability', 'encoding'], name, value)




            class Pce(Entity):
                """
                PCE config
                
                .. attribute:: enable
                
                	Always set to true
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: delegation
                
                	Enable PCE Delegation
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Pce, self).__init__()

                    self.yang_name = "pce"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ('delegation', (YLeaf(YType.empty, 'delegation'), ['Empty'])),
                    ])
                    self.enable = None
                    self.delegation = None
                    self._segment_path = lambda: "pce"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Pce, ['enable', 'delegation'], name, value)



            class TunnelPathSelection(Entity):
                """
                Configure path selection properties
                
                .. attribute:: tiebreaker
                
                	CSPF tiebreaker to use in path calculation
                	**type**\:  :py:class:`MplsTePathSelectionTiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathSelectionTiebreaker>`
                
                .. attribute:: path_selection_hop_limit
                
                	Path selection hop limit configuration for this specific tunnel
                	**type**\: int
                
                	**range:** 1..255
                
                .. attribute:: path_selection_delay_limit
                
                	Path selection delay limit (usec) configuration for this specific tunnel
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: invalidation
                
                	Deprecated
                	**type**\:  :py:class:`Invalidation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection.Invalidation>`
                
                	**presence node**\: True
                
                .. attribute:: path_selection_cost_limit
                
                	Path selection cost limit configuration for this specific tunnel
                	**type**\: int
                
                	**range:** 1..4294967295
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection, self).__init__()

                    self.yang_name = "tunnel-path-selection"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("invalidation", ("invalidation", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection.Invalidation))])
                    self._leafs = OrderedDict([
                        ('tiebreaker', (YLeaf(YType.enumeration, 'tiebreaker'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathSelectionTiebreaker', '')])),
                        ('path_selection_hop_limit', (YLeaf(YType.uint32, 'path-selection-hop-limit'), ['int'])),
                        ('path_selection_delay_limit', (YLeaf(YType.uint32, 'path-selection-delay-limit'), ['int'])),
                        ('path_selection_cost_limit', (YLeaf(YType.uint32, 'path-selection-cost-limit'), ['int'])),
                    ])
                    self.tiebreaker = None
                    self.path_selection_hop_limit = None
                    self.path_selection_delay_limit = None
                    self.path_selection_cost_limit = None

                    self.invalidation = None
                    self._children_name_map["invalidation"] = "invalidation"
                    self._segment_path = lambda: "tunnel-path-selection"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection, ['tiebreaker', 'path_selection_hop_limit', 'path_selection_delay_limit', 'path_selection_cost_limit'], name, value)


                class Invalidation(Entity):
                    """
                    Deprecated
                    
                    .. attribute:: path_invalidation_timeout
                    
                    	Path Invalidation Timeout
                    	**type**\: int
                    
                    	**range:** 0..60000
                    
                    .. attribute:: path_invalidation_action
                    
                    	Path Invalidation Action
                    	**type**\:  :py:class:`PathInvalidationAction <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.PathInvalidationAction>`
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection.Invalidation, self).__init__()

                        self.yang_name = "invalidation"
                        self.yang_parent_name = "tunnel-path-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('path_invalidation_timeout', (YLeaf(YType.uint32, 'path-invalidation-timeout'), ['int'])),
                            ('path_invalidation_action', (YLeaf(YType.enumeration, 'path-invalidation-action'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'PathInvalidationAction', '')])),
                        ])
                        self.path_invalidation_timeout = None
                        self.path_invalidation_action = None
                        self._segment_path = lambda: "invalidation"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.TunnelPathSelection.Invalidation, ['path_invalidation_timeout', 'path_invalidation_action'], name, value)




            class AutoBandwidth(Entity):
                """
                Tunnel Interface Auto\-bandwidth configuration
                data
                
                .. attribute:: underflow
                
                	Configuring the tunnel underflow detection
                	**type**\:  :py:class:`Underflow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Underflow>`
                
                	**presence node**\: True
                
                .. attribute:: overflow
                
                	Configuring the tunnel overflow detection
                	**type**\:  :py:class:`Overflow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Overflow>`
                
                	**presence node**\: True
                
                .. attribute:: bandwidth_limits
                
                	Set min/max bandwidth auto\-bw can apply on a tunnel
                	**type**\:  :py:class:`BandwidthLimits <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.BandwidthLimits>`
                
                	**presence node**\: True
                
                .. attribute:: adjustment_threshold
                
                	Set the bandwidth change threshold to trigger adjustment
                	**type**\:  :py:class:`AdjustmentThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AdjustmentThreshold>`
                
                	**presence node**\: True
                
                .. attribute:: auto_capacity
                
                	Tunnel auto\-capacity configuration data
                	**type**\:  :py:class:`AutoCapacity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AutoCapacity>`
                
                .. attribute:: underflow_enable
                
                	Enable auto bandwidth underflow detection
                	**type**\: bool
                
                .. attribute:: resignal_last_bandwidth_time_out
                
                	Set the tunnel auto\-bw resignal last bandwidth time\-out in seconds
                	**type**\: int
                
                	**range:** 1..3600000
                
                	**units**\: second
                
                .. attribute:: enabled
                
                	This object is only valid for tunnel interfaces and it controls whether that interface has auto\-bw enabled on it or not.The object must be set before any other auto\-bw configuration is supplied for the interface, and must be the last auto\-bw configuration object to be removed 
                	**type**\: bool
                
                .. attribute:: application_frequency
                
                	Set the tunnel auto\-bw application frequency in minutes
                	**type**\: int
                
                	**range:** 5..10080
                
                	**units**\: minute
                
                .. attribute:: overflow_enable
                
                	Enable auto bandwidth overflow detection
                	**type**\: bool
                
                .. attribute:: collection_only
                
                	Enable bandwidth collection only, no auto\-bw adjustment
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth, self).__init__()

                    self.yang_name = "auto-bandwidth"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("underflow", ("underflow", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Underflow)), ("overflow", ("overflow", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Overflow)), ("bandwidth-limits", ("bandwidth_limits", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.BandwidthLimits)), ("adjustment-threshold", ("adjustment_threshold", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AdjustmentThreshold)), ("auto-capacity", ("auto_capacity", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AutoCapacity))])
                    self._leafs = OrderedDict([
                        ('underflow_enable', (YLeaf(YType.boolean, 'underflow-enable'), ['bool'])),
                        ('resignal_last_bandwidth_time_out', (YLeaf(YType.uint32, 'resignal-last-bandwidth-time-out'), ['int'])),
                        ('enabled', (YLeaf(YType.boolean, 'enabled'), ['bool'])),
                        ('application_frequency', (YLeaf(YType.uint32, 'application-frequency'), ['int'])),
                        ('overflow_enable', (YLeaf(YType.boolean, 'overflow-enable'), ['bool'])),
                        ('collection_only', (YLeaf(YType.empty, 'collection-only'), ['Empty'])),
                    ])
                    self.underflow_enable = None
                    self.resignal_last_bandwidth_time_out = None
                    self.enabled = None
                    self.application_frequency = None
                    self.overflow_enable = None
                    self.collection_only = None

                    self.underflow = None
                    self._children_name_map["underflow"] = "underflow"

                    self.overflow = None
                    self._children_name_map["overflow"] = "overflow"

                    self.bandwidth_limits = None
                    self._children_name_map["bandwidth_limits"] = "bandwidth-limits"

                    self.adjustment_threshold = None
                    self._children_name_map["adjustment_threshold"] = "adjustment-threshold"

                    self.auto_capacity = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AutoCapacity()
                    self.auto_capacity.parent = self
                    self._children_name_map["auto_capacity"] = "auto-capacity"
                    self._segment_path = lambda: "auto-bandwidth"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth, ['underflow_enable', 'resignal_last_bandwidth_time_out', 'enabled', 'application_frequency', 'overflow_enable', 'collection_only'], name, value)


                class Underflow(Entity):
                    """
                    Configuring the tunnel underflow detection
                    
                    .. attribute:: underflow_threshold_percent
                    
                    	Bandwidth change percent to trigger an underflow
                    	**type**\: int
                    
                    	**range:** 1..100
                    
                    	**mandatory**\: True
                    
                    	**units**\: percentage
                    
                    .. attribute:: underflow_threshold_value
                    
                    	Bandwidth change value to trigger an underflow (kbps)
                    	**type**\: int
                    
                    	**range:** 10..4294967295
                    
                    	**mandatory**\: True
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: underflow_threshold_limit
                    
                    	Number of consecutive collections exceeding threshold
                    	**type**\: int
                    
                    	**range:** 1..10
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Underflow, self).__init__()

                        self.yang_name = "underflow"
                        self.yang_parent_name = "auto-bandwidth"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('underflow_threshold_percent', (YLeaf(YType.uint32, 'underflow-threshold-percent'), ['int'])),
                            ('underflow_threshold_value', (YLeaf(YType.uint32, 'underflow-threshold-value'), ['int'])),
                            ('underflow_threshold_limit', (YLeaf(YType.uint32, 'underflow-threshold-limit'), ['int'])),
                        ])
                        self.underflow_threshold_percent = None
                        self.underflow_threshold_value = None
                        self.underflow_threshold_limit = None
                        self._segment_path = lambda: "underflow"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Underflow, ['underflow_threshold_percent', 'underflow_threshold_value', 'underflow_threshold_limit'], name, value)



                class Overflow(Entity):
                    """
                    Configuring the tunnel overflow detection
                    
                    .. attribute:: overflow_threshold_percent
                    
                    	Bandwidth change percent to trigger an overflow
                    	**type**\: int
                    
                    	**range:** 1..100
                    
                    	**mandatory**\: True
                    
                    	**units**\: percentage
                    
                    .. attribute:: overflow_threshold_value
                    
                    	Bandwidth change value to trigger an overflow (kbps)
                    	**type**\: int
                    
                    	**range:** 10..4294967295
                    
                    	**mandatory**\: True
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: overflow_threshold_limit
                    
                    	Number of consecutive collections exceeding threshold
                    	**type**\: int
                    
                    	**range:** 1..10
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Overflow, self).__init__()

                        self.yang_name = "overflow"
                        self.yang_parent_name = "auto-bandwidth"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('overflow_threshold_percent', (YLeaf(YType.uint32, 'overflow-threshold-percent'), ['int'])),
                            ('overflow_threshold_value', (YLeaf(YType.uint32, 'overflow-threshold-value'), ['int'])),
                            ('overflow_threshold_limit', (YLeaf(YType.uint32, 'overflow-threshold-limit'), ['int'])),
                        ])
                        self.overflow_threshold_percent = None
                        self.overflow_threshold_value = None
                        self.overflow_threshold_limit = None
                        self._segment_path = lambda: "overflow"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.Overflow, ['overflow_threshold_percent', 'overflow_threshold_value', 'overflow_threshold_limit'], name, value)



                class BandwidthLimits(Entity):
                    """
                    Set min/max bandwidth auto\-bw can apply on a
                    tunnel
                    
                    .. attribute:: bandwidth_min_limit
                    
                    	Set minimum bandwidth auto\-bw can apply on a tunnel
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    .. attribute:: bandwidth_max_limit
                    
                    	Set maximum bandwidth auto\-bw can apply on a tunnel
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.BandwidthLimits, self).__init__()

                        self.yang_name = "bandwidth-limits"
                        self.yang_parent_name = "auto-bandwidth"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('bandwidth_min_limit', (YLeaf(YType.uint32, 'bandwidth-min-limit'), ['int'])),
                            ('bandwidth_max_limit', (YLeaf(YType.uint32, 'bandwidth-max-limit'), ['int'])),
                        ])
                        self.bandwidth_min_limit = None
                        self.bandwidth_max_limit = None
                        self._segment_path = lambda: "bandwidth-limits"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.BandwidthLimits, ['bandwidth_min_limit', 'bandwidth_max_limit'], name, value)



                class AdjustmentThreshold(Entity):
                    """
                    Set the bandwidth change threshold to trigger
                    adjustment
                    
                    .. attribute:: adjustment_threshold_percent
                    
                    	Bandwidth change percent to trigger adjustment
                    	**type**\: int
                    
                    	**range:** 1..100
                    
                    	**mandatory**\: True
                    
                    	**units**\: percentage
                    
                    .. attribute:: adjustment_threshold_value
                    
                    	Bandwidth change value to trigger adjustment (kbps)
                    	**type**\: int
                    
                    	**range:** 10..4294967295
                    
                    	**mandatory**\: True
                    
                    	**units**\: kbit/s
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AdjustmentThreshold, self).__init__()

                        self.yang_name = "adjustment-threshold"
                        self.yang_parent_name = "auto-bandwidth"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('adjustment_threshold_percent', (YLeaf(YType.uint32, 'adjustment-threshold-percent'), ['int'])),
                            ('adjustment_threshold_value', (YLeaf(YType.uint32, 'adjustment-threshold-value'), ['int'])),
                        ])
                        self.adjustment_threshold_percent = None
                        self.adjustment_threshold_value = None
                        self._segment_path = lambda: "adjustment-threshold"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AdjustmentThreshold, ['adjustment_threshold_percent', 'adjustment_threshold_value'], name, value)



                class AutoCapacity(Entity):
                    """
                    Tunnel auto\-capacity configuration data
                    
                    .. attribute:: nominal_bandwidth
                    
                    	Bandwidth value used to compute the desired number of tunnels for auto\-capacity
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: enable
                    
                    	Enable auto\-capacityThe object must be set before any other auto capacity configuration is supplied for the tunnel,and must be the last auto\-capacity configuration object to be removed
                    	**type**\: bool
                    
                    .. attribute:: clones_minimum
                    
                    	Lower limit on the number of clones can be created for the tunnel
                    	**type**\: int
                    
                    	**range:** 0..63
                    
                    	**default value**\: 0
                    
                    .. attribute:: split_bandwidth
                    
                    	Upper bandwidth limit that causes the tunnel to be split
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: merge_bandwidth
                    
                    	Lower bandwidth limit that causes the tunnel to be merged
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: clones_maximum
                    
                    	Upper limit on the number of clones can be created for the tunnel
                    	**type**\: int
                    
                    	**range:** 0..63
                    
                    	**default value**\: 63
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AutoCapacity, self).__init__()

                        self.yang_name = "auto-capacity"
                        self.yang_parent_name = "auto-bandwidth"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('nominal_bandwidth', (YLeaf(YType.uint32, 'nominal-bandwidth'), ['int'])),
                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                            ('clones_minimum', (YLeaf(YType.uint32, 'clones-minimum'), ['int'])),
                            ('split_bandwidth', (YLeaf(YType.uint32, 'split-bandwidth'), ['int'])),
                            ('merge_bandwidth', (YLeaf(YType.uint32, 'merge-bandwidth'), ['int'])),
                            ('clones_maximum', (YLeaf(YType.uint32, 'clones-maximum'), ['int'])),
                        ])
                        self.nominal_bandwidth = None
                        self.enable = None
                        self.clones_minimum = None
                        self.split_bandwidth = None
                        self.merge_bandwidth = None
                        self.clones_maximum = None
                        self._segment_path = lambda: "auto-capacity"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AutoBandwidth.AutoCapacity, ['nominal_bandwidth', 'enable', 'clones_minimum', 'split_bandwidth', 'merge_bandwidth', 'clones_maximum'], name, value)




            class Priority(Entity):
                """
                Tunnel Setup and Hold Priorities
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\: int
                
                	**range:** 0..7
                
                	**mandatory**\: True
                
                .. attribute:: hold_priority
                
                	Hold Priority
                	**type**\: int
                
                	**range:** 0..7
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Priority, self).__init__()

                    self.yang_name = "priority"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('setup_priority', (YLeaf(YType.uint32, 'setup-priority'), ['int'])),
                        ('hold_priority', (YLeaf(YType.uint32, 'hold-priority'), ['int'])),
                    ])
                    self.setup_priority = None
                    self.hold_priority = None
                    self._segment_path = lambda: "priority"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Priority, ['setup_priority', 'hold_priority'], name, value)



            class AffinityMask(Entity):
                """
                Set the affinity flags and mask
                
                .. attribute:: affinity
                
                	Affinity flags
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                	**mandatory**\: True
                
                .. attribute:: mask
                
                	Affinity mask
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AffinityMask, self).__init__()

                    self.yang_name = "affinity-mask"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('affinity', (YLeaf(YType.str, 'affinity'), ['str'])),
                        ('mask', (YLeaf(YType.str, 'mask'), ['str'])),
                    ])
                    self.affinity = None
                    self.mask = None
                    self._segment_path = lambda: "affinity-mask"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.AffinityMask, ['affinity', 'mask'], name, value)



            class ForwardingAdjacency(Entity):
                """
                Forwarding adjacency announcement to IGP
                
                .. attribute:: enable
                
                	Enable forwarding adjacency
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: include_ipv6
                
                	Specify that the tunnel should be an IPv6 forwarding adjacency also
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: hold_time
                
                	Specify the holdtime for the tunnel as forwarding adjacency
                	**type**\: int
                
                	**range:** 0..20000
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.ForwardingAdjacency, self).__init__()

                    self.yang_name = "forwarding-adjacency"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ('include_ipv6', (YLeaf(YType.empty, 'include-ipv6'), ['Empty'])),
                        ('hold_time', (YLeaf(YType.uint32, 'hold-time'), ['int'])),
                    ])
                    self.enable = None
                    self.include_ipv6 = None
                    self.hold_time = None
                    self._segment_path = lambda: "forwarding-adjacency"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.ForwardingAdjacency, ['enable', 'include_ipv6', 'hold_time'], name, value)



            class Logging(Entity):
                """
                Log tunnel LSP messages
                
                .. attribute:: lsp_switch_over_change_message
                
                	Log tunnel messages for bandwidth change
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: all
                
                	Log all events for a tunnel
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: record_route_messsage
                
                	Log tunnel record\-route messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: bfd_state_message
                
                	Enable BFD session state change alarm
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: bandwidth_change_message
                
                	Log tunnel messages for bandwidth change
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: reoptimize_attempts_message
                
                	Log tunnel reoptimization attempts messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: reroute_messsage
                
                	Log tunnel rereoute messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: state_message
                
                	Log tunnel state messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: insufficient_bw_message
                
                	Log tunnel messages for insufficient bandwidth
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: reoptimized_message
                
                	Log tunnel reoptimized messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: pcalc_failure_message
                
                	Enable logging for path\-calculation failures
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Logging, self).__init__()

                    self.yang_name = "logging"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lsp_switch_over_change_message', (YLeaf(YType.empty, 'lsp-switch-over-change-message'), ['Empty'])),
                        ('all', (YLeaf(YType.empty, 'all'), ['Empty'])),
                        ('record_route_messsage', (YLeaf(YType.empty, 'record-route-messsage'), ['Empty'])),
                        ('bfd_state_message', (YLeaf(YType.empty, 'bfd-state-message'), ['Empty'])),
                        ('bandwidth_change_message', (YLeaf(YType.empty, 'bandwidth-change-message'), ['Empty'])),
                        ('reoptimize_attempts_message', (YLeaf(YType.empty, 'reoptimize-attempts-message'), ['Empty'])),
                        ('reroute_messsage', (YLeaf(YType.empty, 'reroute-messsage'), ['Empty'])),
                        ('state_message', (YLeaf(YType.empty, 'state-message'), ['Empty'])),
                        ('insufficient_bw_message', (YLeaf(YType.empty, 'insufficient-bw-message'), ['Empty'])),
                        ('reoptimized_message', (YLeaf(YType.empty, 'reoptimized-message'), ['Empty'])),
                        ('pcalc_failure_message', (YLeaf(YType.empty, 'pcalc-failure-message'), ['Empty'])),
                    ])
                    self.lsp_switch_over_change_message = None
                    self.all = None
                    self.record_route_messsage = None
                    self.bfd_state_message = None
                    self.bandwidth_change_message = None
                    self.reoptimize_attempts_message = None
                    self.reroute_messsage = None
                    self.state_message = None
                    self.insufficient_bw_message = None
                    self.reoptimized_message = None
                    self.pcalc_failure_message = None
                    self._segment_path = lambda: "logging"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Logging, ['lsp_switch_over_change_message', 'all', 'record_route_messsage', 'bfd_state_message', 'bandwidth_change_message', 'reoptimize_attempts_message', 'reroute_messsage', 'state_message', 'insufficient_bw_message', 'reoptimized_message', 'pcalc_failure_message'], name, value)



            class Bandwidth(Entity):
                """
                Tunnel bandwidth requirement
                
                .. attribute:: dste_type
                
                	DSTE\-standard flag
                	**type**\:  :py:class:`MplsTeBandwidthDste <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeBandwidthDste>`
                
                	**mandatory**\: True
                
                .. attribute:: class_or_pool_type
                
                	Class type for the bandwidth allocation
                	**type**\: int
                
                	**range:** 0..1
                
                	**mandatory**\: True
                
                .. attribute:: bandwidth
                
                	The value of the bandwidth reserved by this tunnel in kbps
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                	**units**\: kbit/s
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bandwidth, self).__init__()

                    self.yang_name = "bandwidth"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('dste_type', (YLeaf(YType.enumeration, 'dste-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeBandwidthDste', '')])),
                        ('class_or_pool_type', (YLeaf(YType.uint32, 'class-or-pool-type'), ['int'])),
                        ('bandwidth', (YLeaf(YType.uint32, 'bandwidth'), ['int'])),
                    ])
                    self.dste_type = None
                    self.class_or_pool_type = None
                    self.bandwidth = None
                    self._segment_path = lambda: "bandwidth"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Bandwidth, ['dste_type', 'class_or_pool_type', 'bandwidth'], name, value)



            class Autoroute(Entity):
                """
                Parameters for IGP routing over tunnel
                
                .. attribute:: autoroute_announce
                
                	Announce tunnel to IGP
                	**type**\:  :py:class:`AutorouteAnnounce <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce>`
                
                .. attribute:: destinations
                
                	Tunnel Autoroute Destination(s)
                	**type**\:  :py:class:`Destinations <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute, self).__init__()

                    self.yang_name = "autoroute"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("autoroute-announce", ("autoroute_announce", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce)), ("destinations", ("destinations", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations))])
                    self._leafs = OrderedDict()

                    self.autoroute_announce = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce()
                    self.autoroute_announce.parent = self
                    self._children_name_map["autoroute_announce"] = "autoroute-announce"

                    self.destinations = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations()
                    self.destinations.parent = self
                    self._children_name_map["destinations"] = "destinations"
                    self._segment_path = lambda: "autoroute"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute, [], name, value)


                class AutorouteAnnounce(Entity):
                    """
                    Announce tunnel to IGP
                    
                    .. attribute:: exclude_traffic
                    
                    	Exclude traffic on autorouted tunnel
                    	**type**\:  :py:class:`ExcludeTraffic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.ExcludeTraffic>`
                    
                    .. attribute:: metric
                    
                    	Specify MPLS tunnel metric
                    	**type**\:  :py:class:`Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.Metric>`
                    
                    .. attribute:: enable
                    
                    	Enable autoroute announce
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: include_ipv6
                    
                    	Specify that the tunnel should be an IPv6 autoroute announce also
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce, self).__init__()

                        self.yang_name = "autoroute-announce"
                        self.yang_parent_name = "autoroute"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("exclude-traffic", ("exclude_traffic", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.ExcludeTraffic)), ("metric", ("metric", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.Metric))])
                        self._leafs = OrderedDict([
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ('include_ipv6', (YLeaf(YType.empty, 'include-ipv6'), ['Empty'])),
                        ])
                        self.enable = None
                        self.include_ipv6 = None

                        self.exclude_traffic = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.ExcludeTraffic()
                        self.exclude_traffic.parent = self
                        self._children_name_map["exclude_traffic"] = "exclude-traffic"

                        self.metric = InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.Metric()
                        self.metric.parent = self
                        self._children_name_map["metric"] = "metric"
                        self._segment_path = lambda: "autoroute-announce"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce, ['enable', 'include_ipv6'], name, value)


                    class ExcludeTraffic(Entity):
                        """
                        Exclude traffic on autorouted tunnel
                        
                        .. attribute:: segment_routing
                        
                        	Exclude tunnel in IGP for SR prefixes
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.ExcludeTraffic, self).__init__()

                            self.yang_name = "exclude-traffic"
                            self.yang_parent_name = "autoroute-announce"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('segment_routing', (YLeaf(YType.empty, 'segment-routing'), ['Empty'])),
                            ])
                            self.segment_routing = None
                            self._segment_path = lambda: "exclude-traffic"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.ExcludeTraffic, ['segment_routing'], name, value)



                    class Metric(Entity):
                        """
                        Specify MPLS tunnel metric
                        
                        .. attribute:: metric_type
                        
                        	Autoroute tunnel metric type
                        	**type**\:  :py:class:`MplsTeAutorouteMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeAutorouteMetric>`
                        
                        .. attribute:: absolute_metric
                        
                        	The absolute metric value
                        	**type**\: int
                        
                        	**range:** 1..2147483647
                        
                        .. attribute:: relative_metric
                        
                        	The value of the adjustment
                        	**type**\: int
                        
                        	**range:** \-10..10
                        
                        .. attribute:: constant_metric
                        
                        	The constant metric value
                        	**type**\: int
                        
                        	**range:** 1..2147483647
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.Metric, self).__init__()

                            self.yang_name = "metric"
                            self.yang_parent_name = "autoroute-announce"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeAutorouteMetric', '')])),
                                ('absolute_metric', (YLeaf(YType.uint32, 'absolute-metric'), ['int'])),
                                ('relative_metric', (YLeaf(YType.int32, 'relative-metric'), ['int'])),
                                ('constant_metric', (YLeaf(YType.uint32, 'constant-metric'), ['int'])),
                            ])
                            self.metric_type = None
                            self.absolute_metric = None
                            self.relative_metric = None
                            self.constant_metric = None
                            self._segment_path = lambda: "metric"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.AutorouteAnnounce.Metric, ['metric_type', 'absolute_metric', 'relative_metric', 'constant_metric'], name, value)




                class Destinations(Entity):
                    """
                    Tunnel Autoroute Destination(s)
                    
                    .. attribute:: destination
                    
                    	Destination address to add in RIB
                    	**type**\: list of  		 :py:class:`Destination <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations.Destination>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations, self).__init__()

                        self.yang_name = "destinations"
                        self.yang_parent_name = "autoroute"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("destination", ("destination", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations.Destination))])
                        self._leafs = OrderedDict()

                        self.destination = YList(self)
                        self._segment_path = lambda: "destinations"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations, [], name, value)


                    class Destination(Entity):
                        """
                        Destination address to add in RIB
                        
                        .. attribute:: destination_address  (key)
                        
                        	IP address of destination
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations.Destination, self).__init__()

                            self.yang_name = "destination"
                            self.yang_parent_name = "destinations"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['destination_address']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', (YLeaf(YType.str, 'destination-address'), ['str'])),
                            ])
                            self.destination_address = None
                            self._segment_path = lambda: "destination" + "[destination-address='" + str(self.destination_address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.Autoroute.Destinations.Destination, ['destination_address'], name, value)





            class PolicyClasses(Entity):
                """
                Policy classes for PBTS
                
                .. attribute:: policy_class
                
                	Array of Policy class
                	**type**\: list of int
                
                	**range:** 1..8
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PolicyClasses, self).__init__()

                    self.yang_name = "policy-classes"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('policy_class', (YLeafList(YType.uint32, 'policy-class'), ['int'])),
                    ])
                    self.policy_class = []
                    self._segment_path = lambda: "policy-classes"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.PolicyClasses, ['policy_class'], name, value)



            class NewStyleAffinityAffinityTypes(Entity):
                """
                Tunnel new style affinity attributes table
                
                .. attribute:: new_style_affinity_affinity_type
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityType>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2_affinity3
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8_affinity9
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9>`
                
                .. attribute:: new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8_affinity9_affinity10
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes, self).__init__()

                    self.yang_name = "new-style-affinity-affinity-types"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("new-style-affinity-affinity-type", ("new_style_affinity_affinity_type", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityType)), ("new-style-affinity-affinity-type-affinity1", ("new_style_affinity_affinity_type_affinity1", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1)), ("new-style-affinity-affinity-type-affinity1-affinity2", ("new_style_affinity_affinity_type_affinity1_affinity2", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2)), ("new-style-affinity-affinity-type-affinity1-affinity2-affinity3", ("new_style_affinity_affinity_type_affinity1_affinity2_affinity3", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)), ("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4", ("new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)), ("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5", ("new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)), ("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6", ("new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)), ("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7", ("new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)), ("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8", ("new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)), ("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9", ("new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8_affinity9", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)), ("new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10", ("new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8_affinity9_affinity10", InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10))])
                    self._leafs = OrderedDict()

                    self.new_style_affinity_affinity_type = YList(self)
                    self.new_style_affinity_affinity_type_affinity1 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2_affinity3 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8_affinity9 = YList(self)
                    self.new_style_affinity_affinity_type_affinity1_affinity2_affinity3_affinity4_affinity5_affinity6_affinity7_affinity8_affinity9_affinity10 = YList(self)
                    self._segment_path = lambda: "new-style-affinity-affinity-types"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes, [], name, value)


                class NewStyleAffinityAffinityType(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                        ])
                        self.affinity_type = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type" + "[affinity-type='" + str(self.affinity_type) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, ['affinity_type'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, ['affinity_type', 'affinity1'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, ['affinity_type', 'affinity1', 'affinity2'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, ['affinity_type', 'affinity1', 'affinity2', 'affinity3'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  (key)
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3','affinity4']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                            ('affinity4', (YLeaf(YType.str, 'affinity4'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']" + "[affinity4='" + str(self.affinity4) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, ['affinity_type', 'affinity1', 'affinity2', 'affinity3', 'affinity4'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  (key)
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  (key)
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3','affinity4','affinity5']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                            ('affinity4', (YLeaf(YType.str, 'affinity4'), ['str'])),
                            ('affinity5', (YLeaf(YType.str, 'affinity5'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']" + "[affinity4='" + str(self.affinity4) + "']" + "[affinity5='" + str(self.affinity5) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, ['affinity_type', 'affinity1', 'affinity2', 'affinity3', 'affinity4', 'affinity5'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  (key)
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  (key)
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity6  (key)
                    
                    	The name of the sixth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3','affinity4','affinity5','affinity6']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                            ('affinity4', (YLeaf(YType.str, 'affinity4'), ['str'])),
                            ('affinity5', (YLeaf(YType.str, 'affinity5'), ['str'])),
                            ('affinity6', (YLeaf(YType.str, 'affinity6'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self.affinity6 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']" + "[affinity4='" + str(self.affinity4) + "']" + "[affinity5='" + str(self.affinity5) + "']" + "[affinity6='" + str(self.affinity6) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, ['affinity_type', 'affinity1', 'affinity2', 'affinity3', 'affinity4', 'affinity5', 'affinity6'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  (key)
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  (key)
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity6  (key)
                    
                    	The name of the sixth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity7  (key)
                    
                    	The name of the seventh affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3','affinity4','affinity5','affinity6','affinity7']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                            ('affinity4', (YLeaf(YType.str, 'affinity4'), ['str'])),
                            ('affinity5', (YLeaf(YType.str, 'affinity5'), ['str'])),
                            ('affinity6', (YLeaf(YType.str, 'affinity6'), ['str'])),
                            ('affinity7', (YLeaf(YType.str, 'affinity7'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self.affinity6 = None
                        self.affinity7 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']" + "[affinity4='" + str(self.affinity4) + "']" + "[affinity5='" + str(self.affinity5) + "']" + "[affinity6='" + str(self.affinity6) + "']" + "[affinity7='" + str(self.affinity7) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, ['affinity_type', 'affinity1', 'affinity2', 'affinity3', 'affinity4', 'affinity5', 'affinity6', 'affinity7'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  (key)
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  (key)
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity6  (key)
                    
                    	The name of the sixth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity7  (key)
                    
                    	The name of the seventh affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity8  (key)
                    
                    	The name of the eighth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3','affinity4','affinity5','affinity6','affinity7','affinity8']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                            ('affinity4', (YLeaf(YType.str, 'affinity4'), ['str'])),
                            ('affinity5', (YLeaf(YType.str, 'affinity5'), ['str'])),
                            ('affinity6', (YLeaf(YType.str, 'affinity6'), ['str'])),
                            ('affinity7', (YLeaf(YType.str, 'affinity7'), ['str'])),
                            ('affinity8', (YLeaf(YType.str, 'affinity8'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self.affinity6 = None
                        self.affinity7 = None
                        self.affinity8 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']" + "[affinity4='" + str(self.affinity4) + "']" + "[affinity5='" + str(self.affinity5) + "']" + "[affinity6='" + str(self.affinity6) + "']" + "[affinity7='" + str(self.affinity7) + "']" + "[affinity8='" + str(self.affinity8) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, ['affinity_type', 'affinity1', 'affinity2', 'affinity3', 'affinity4', 'affinity5', 'affinity6', 'affinity7', 'affinity8'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  (key)
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  (key)
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity6  (key)
                    
                    	The name of the sixth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity7  (key)
                    
                    	The name of the seventh affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity8  (key)
                    
                    	The name of the eighth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity9  (key)
                    
                    	The name of the nineth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3','affinity4','affinity5','affinity6','affinity7','affinity8','affinity9']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                            ('affinity4', (YLeaf(YType.str, 'affinity4'), ['str'])),
                            ('affinity5', (YLeaf(YType.str, 'affinity5'), ['str'])),
                            ('affinity6', (YLeaf(YType.str, 'affinity6'), ['str'])),
                            ('affinity7', (YLeaf(YType.str, 'affinity7'), ['str'])),
                            ('affinity8', (YLeaf(YType.str, 'affinity8'), ['str'])),
                            ('affinity9', (YLeaf(YType.str, 'affinity9'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self.affinity6 = None
                        self.affinity7 = None
                        self.affinity8 = None
                        self.affinity9 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']" + "[affinity4='" + str(self.affinity4) + "']" + "[affinity5='" + str(self.affinity5) + "']" + "[affinity6='" + str(self.affinity6) + "']" + "[affinity7='" + str(self.affinity7) + "']" + "[affinity8='" + str(self.affinity8) + "']" + "[affinity9='" + str(self.affinity9) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, ['affinity_type', 'affinity1', 'affinity2', 'affinity3', 'affinity4', 'affinity5', 'affinity6', 'affinity7', 'affinity8', 'affinity9'], name, value)



                class NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  (key)
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  (key)
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity6  (key)
                    
                    	The name of the sixth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity7  (key)
                    
                    	The name of the seventh affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity8  (key)
                    
                    	The name of the eighth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity9  (key)
                    
                    	The name of the nineth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity10  (key)
                    
                    	The name of the tenth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, self).__init__()

                        self.yang_name = "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10"
                        self.yang_parent_name = "new-style-affinity-affinity-types"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3','affinity4','affinity5','affinity6','affinity7','affinity8','affinity9','affinity10']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                            ('affinity4', (YLeaf(YType.str, 'affinity4'), ['str'])),
                            ('affinity5', (YLeaf(YType.str, 'affinity5'), ['str'])),
                            ('affinity6', (YLeaf(YType.str, 'affinity6'), ['str'])),
                            ('affinity7', (YLeaf(YType.str, 'affinity7'), ['str'])),
                            ('affinity8', (YLeaf(YType.str, 'affinity8'), ['str'])),
                            ('affinity9', (YLeaf(YType.str, 'affinity9'), ['str'])),
                            ('affinity10', (YLeaf(YType.str, 'affinity10'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self.affinity6 = None
                        self.affinity7 = None
                        self.affinity8 = None
                        self.affinity9 = None
                        self.affinity10 = None
                        self._segment_path = lambda: "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']" + "[affinity4='" + str(self.affinity4) + "']" + "[affinity5='" + str(self.affinity5) + "']" + "[affinity6='" + str(self.affinity6) + "']" + "[affinity7='" + str(self.affinity7) + "']" + "[affinity8='" + str(self.affinity8) + "']" + "[affinity9='" + str(self.affinity9) + "']" + "[affinity10='" + str(self.affinity10) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.NewStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, ['affinity_type', 'affinity1', 'affinity2', 'affinity3', 'affinity4', 'affinity5', 'affinity6', 'affinity7', 'affinity8', 'affinity9', 'affinity10'], name, value)




            class FastReroute(Entity):
                """
                Specify MPLS tunnel can be fast\-rerouted
                
                .. attribute:: bandwidth_protection
                
                	Bandwidth Protection
                	**type**\: int
                
                	**range:** 0..1
                
                	**mandatory**\: True
                
                .. attribute:: node_protection
                
                	Node Protection
                	**type**\: int
                
                	**range:** 0..1
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.FastReroute, self).__init__()

                    self.yang_name = "fast-reroute"
                    self.yang_parent_name = "tunnel-te-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('bandwidth_protection', (YLeaf(YType.uint32, 'bandwidth-protection'), ['int'])),
                        ('node_protection', (YLeaf(YType.uint32, 'node-protection'), ['int'])),
                    ])
                    self.bandwidth_protection = None
                    self.node_protection = None
                    self._segment_path = lambda: "fast-reroute"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TunnelTeAttributes.FastReroute, ['bandwidth_protection', 'node_protection'], name, value)




        class TransportProfileTunnel(Entity):
            """
            MPLS\-TP tunnel attributes
            
            .. attribute:: bfd
            
            	Configure BFD parameters
            	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd>`
            
            .. attribute:: working_lsp
            
            	Working LSP
            	**type**\:  :py:class:`WorkingLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp>`
            
            .. attribute:: destination
            
            	Node identifier and optional global identifier and tunnel identifier at destination
            	**type**\:  :py:class:`Destination <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Destination>`
            
            .. attribute:: fault
            
            	Fault management
            	**type**\:  :py:class:`Fault <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault>`
            
            .. attribute:: protect_lsp
            
            	Protect LSP
            	**type**\:  :py:class:`ProtectLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp>`
            
            .. attribute:: source
            
            	Transport profile node identifier in IPv4 address format
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'mpls-te-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel, self).__init__()

                self.yang_name = "transport-profile-tunnel"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("bfd", ("bfd", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd)), ("working-lsp", ("working_lsp", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp)), ("destination", ("destination", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Destination)), ("fault", ("fault", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault)), ("protect-lsp", ("protect_lsp", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp))])
                self._leafs = OrderedDict([
                    ('source', (YLeaf(YType.str, 'source'), ['str'])),
                ])
                self.source = None

                self.bfd = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd()
                self.bfd.parent = self
                self._children_name_map["bfd"] = "bfd"

                self.working_lsp = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp()
                self.working_lsp.parent = self
                self._children_name_map["working_lsp"] = "working-lsp"

                self.destination = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Destination()
                self.destination.parent = self
                self._children_name_map["destination"] = "destination"

                self.fault = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault()
                self.fault.parent = self
                self._children_name_map["fault"] = "fault"

                self.protect_lsp = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp()
                self.protect_lsp.parent = self
                self._children_name_map["protect_lsp"] = "protect-lsp"
                self._segment_path = lambda: "Cisco-IOS-XR-mpls-te-cfg:transport-profile-tunnel"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel, ['source'], name, value)


            class Bfd(Entity):
                """
                Configure BFD parameters
                
                .. attribute:: min_interval
                
                	Hello interval, either in milli\-seconds or in micro\-seconds
                	**type**\:  :py:class:`MinInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinInterval>`
                
                .. attribute:: min_interval_standby
                
                	Hello interval for standby transport profile LSP, either in milli\-seconds or in micro\-seconds
                	**type**\:  :py:class:`MinIntervalStandby <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinIntervalStandby>`
                
                .. attribute:: detection_multiplier
                
                	Detect multiplier
                	**type**\: int
                
                	**range:** 2..10
                
                .. attribute:: enable
                
                	Configure BFD parameters
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: multiplier_standby
                
                	Detect multiplier for standby transport profile LSP
                	**type**\: int
                
                	**range:** 2..10
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd, self).__init__()

                    self.yang_name = "bfd"
                    self.yang_parent_name = "transport-profile-tunnel"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("min-interval", ("min_interval", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinInterval)), ("min-interval-standby", ("min_interval_standby", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinIntervalStandby))])
                    self._leafs = OrderedDict([
                        ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ('multiplier_standby', (YLeaf(YType.uint32, 'multiplier-standby'), ['int'])),
                    ])
                    self.detection_multiplier = None
                    self.enable = None
                    self.multiplier_standby = None

                    self.min_interval = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinInterval()
                    self.min_interval.parent = self
                    self._children_name_map["min_interval"] = "min-interval"

                    self.min_interval_standby = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinIntervalStandby()
                    self.min_interval_standby.parent = self
                    self._children_name_map["min_interval_standby"] = "min-interval-standby"
                    self._segment_path = lambda: "bfd"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd, ['detection_multiplier', 'enable', 'multiplier_standby'], name, value)


                class MinInterval(Entity):
                    """
                    Hello interval, either in milli\-seconds or in
                    micro\-seconds
                    
                    .. attribute:: interval_ms
                    
                    	Hello interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 3..5000
                    
                    .. attribute:: interval_us
                    
                    	Hello interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 3000..5000000
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinInterval, self).__init__()

                        self.yang_name = "min-interval"
                        self.yang_parent_name = "bfd"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval_ms', (YLeaf(YType.uint32, 'interval-ms'), ['int'])),
                            ('interval_us', (YLeaf(YType.uint32, 'interval-us'), ['int'])),
                        ])
                        self.interval_ms = None
                        self.interval_us = None
                        self._segment_path = lambda: "min-interval"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinInterval, ['interval_ms', 'interval_us'], name, value)



                class MinIntervalStandby(Entity):
                    """
                    Hello interval for standby transport profile
                    LSP, either in milli\-seconds or in
                    micro\-seconds
                    
                    .. attribute:: interval_standby_ms
                    
                    	Hello interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 3..5000
                    
                    .. attribute:: interval_standby_us
                    
                    	Hello interval in micro\-seconds
                    	**type**\: int
                    
                    	**range:** 3000..5000000
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinIntervalStandby, self).__init__()

                        self.yang_name = "min-interval-standby"
                        self.yang_parent_name = "bfd"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval_standby_ms', (YLeaf(YType.uint32, 'interval-standby-ms'), ['int'])),
                            ('interval_standby_us', (YLeaf(YType.uint32, 'interval-standby-us'), ['int'])),
                        ])
                        self.interval_standby_ms = None
                        self.interval_standby_us = None
                        self._segment_path = lambda: "min-interval-standby"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Bfd.MinIntervalStandby, ['interval_standby_ms', 'interval_standby_us'], name, value)




            class WorkingLsp(Entity):
                """
                Working LSP
                
                .. attribute:: out_label
                
                	Outgoing MPLS label of the working LSP
                	**type**\:  :py:class:`OutLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp.OutLabel>`
                
                	**presence node**\: True
                
                .. attribute:: in_label
                
                	Incoming MPLS label of the working LSP
                	**type**\: int
                
                	**range:** 16..4015
                
                .. attribute:: lockout
                
                	Enable lockout of working LSP
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: lsp_id
                
                	LSP Identifier of the working LSP
                	**type**\: int
                
                	**range:** 0..65535
                
                	**default value**\: 0
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp, self).__init__()

                    self.yang_name = "working-lsp"
                    self.yang_parent_name = "transport-profile-tunnel"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("out-label", ("out_label", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp.OutLabel))])
                    self._leafs = OrderedDict([
                        ('in_label', (YLeaf(YType.uint32, 'in-label'), ['int'])),
                        ('lockout', (YLeaf(YType.empty, 'lockout'), ['Empty'])),
                        ('lsp_id', (YLeaf(YType.uint32, 'lsp-id'), ['int'])),
                    ])
                    self.in_label = None
                    self.lockout = None
                    self.lsp_id = None

                    self.out_label = None
                    self._children_name_map["out_label"] = "out-label"
                    self._segment_path = lambda: "working-lsp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp, ['in_label', 'lockout', 'lsp_id'], name, value)


                class OutLabel(Entity):
                    """
                    Outgoing MPLS label of the working LSP
                    
                    .. attribute:: label
                    
                    	MPLS label
                    	**type**\: int
                    
                    	**range:** 16..1048575
                    
                    .. attribute:: link
                    
                    	Transport profile identifier of outgoing link
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp.OutLabel, self).__init__()

                        self.yang_name = "out-label"
                        self.yang_parent_name = "working-lsp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('label', (YLeaf(YType.uint32, 'label'), ['int'])),
                            ('link', (YLeaf(YType.uint32, 'link'), ['int'])),
                        ])
                        self.label = None
                        self.link = None
                        self._segment_path = lambda: "out-label"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.WorkingLsp.OutLabel, ['label', 'link'], name, value)




            class Destination(Entity):
                """
                Node identifier and optional global identifier
                and tunnel identifier at destination
                
                .. attribute:: node_id
                
                	Node identifier in IPv4 address format
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: global_id
                
                	Numeric global identifier
                	**type**\: int
                
                	**range:** 1..65535
                
                .. attribute:: tunnel_id
                
                	Numeric tunnel identifier
                	**type**\: int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Destination, self).__init__()

                    self.yang_name = "destination"
                    self.yang_parent_name = "transport-profile-tunnel"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('node_id', (YLeaf(YType.str, 'node-id'), ['str'])),
                        ('global_id', (YLeaf(YType.uint32, 'global-id'), ['int'])),
                        ('tunnel_id', (YLeaf(YType.uint32, 'tunnel-id'), ['int'])),
                    ])
                    self.node_id = None
                    self.global_id = None
                    self.tunnel_id = None
                    self._segment_path = lambda: "destination"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Destination, ['node_id', 'global_id', 'tunnel_id'], name, value)



            class Fault(Entity):
                """
                Fault management
                
                .. attribute:: protection_trigger
                
                	OAM events that trigger protection switching
                	**type**\:  :py:class:`ProtectionTrigger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault.ProtectionTrigger>`
                
                .. attribute:: enable
                
                	Enter transport profile tunnel fault configuration
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault, self).__init__()

                    self.yang_name = "fault"
                    self.yang_parent_name = "transport-profile-tunnel"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("protection-trigger", ("protection_trigger", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault.ProtectionTrigger))])
                    self._leafs = OrderedDict([
                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                    ])
                    self.enable = None

                    self.protection_trigger = InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault.ProtectionTrigger()
                    self.protection_trigger.parent = self
                    self._children_name_map["protection_trigger"] = "protection-trigger"
                    self._segment_path = lambda: "fault"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault, ['enable'], name, value)


                class ProtectionTrigger(Entity):
                    """
                    OAM events that trigger protection switching
                    
                    .. attribute:: ldi
                    
                    	Enable protection switching due to LDI event
                    	**type**\: bool
                    
                    .. attribute:: ais
                    
                    	Enable protection switching due to AIS event
                    	**type**\: bool
                    
                    .. attribute:: lkr
                    
                    	Enable protection switching due to LKR event
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault.ProtectionTrigger, self).__init__()

                        self.yang_name = "protection-trigger"
                        self.yang_parent_name = "fault"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('ldi', (YLeaf(YType.boolean, 'ldi'), ['bool'])),
                            ('ais', (YLeaf(YType.boolean, 'ais'), ['bool'])),
                            ('lkr', (YLeaf(YType.boolean, 'lkr'), ['bool'])),
                        ])
                        self.ldi = None
                        self.ais = None
                        self.lkr = None
                        self._segment_path = lambda: "protection-trigger"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.Fault.ProtectionTrigger, ['ldi', 'ais', 'lkr'], name, value)




            class ProtectLsp(Entity):
                """
                Protect LSP
                
                .. attribute:: out_label
                
                	Outgoing MPLS label of the protect LSP
                	**type**\:  :py:class:`OutLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp.OutLabel>`
                
                	**presence node**\: True
                
                .. attribute:: in_label
                
                	Incoming MPLS label of the protect LSP
                	**type**\: int
                
                	**range:** 16..4015
                
                .. attribute:: lockout
                
                	Enable lockout of protect LSP
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: lsp_id
                
                	LSP Identifier of the protect LSP
                	**type**\: int
                
                	**range:** 0..65535
                
                	**default value**\: 1
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp, self).__init__()

                    self.yang_name = "protect-lsp"
                    self.yang_parent_name = "transport-profile-tunnel"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("out-label", ("out_label", InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp.OutLabel))])
                    self._leafs = OrderedDict([
                        ('in_label', (YLeaf(YType.uint32, 'in-label'), ['int'])),
                        ('lockout', (YLeaf(YType.empty, 'lockout'), ['Empty'])),
                        ('lsp_id', (YLeaf(YType.uint32, 'lsp-id'), ['int'])),
                    ])
                    self.in_label = None
                    self.lockout = None
                    self.lsp_id = None

                    self.out_label = None
                    self._children_name_map["out_label"] = "out-label"
                    self._segment_path = lambda: "protect-lsp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp, ['in_label', 'lockout', 'lsp_id'], name, value)


                class OutLabel(Entity):
                    """
                    Outgoing MPLS label of the protect LSP
                    
                    .. attribute:: label
                    
                    	MPLS label
                    	**type**\: int
                    
                    	**range:** 16..1048575
                    
                    .. attribute:: link
                    
                    	Transport profile identifier of outgoing link
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp.OutLabel, self).__init__()

                        self.yang_name = "out-label"
                        self.yang_parent_name = "protect-lsp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('label', (YLeaf(YType.uint32, 'label'), ['int'])),
                            ('link', (YLeaf(YType.uint32, 'link'), ['int'])),
                        ])
                        self.label = None
                        self.link = None
                        self._segment_path = lambda: "out-label"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.TransportProfileTunnel.ProtectLsp.OutLabel, ['label', 'link'], name, value)





        class MteTunnelAttributes(Entity):
            """
            MPLS P2MP tunnel attributes
            
            .. attribute:: destination_leafs
            
            	P2MP destination table
            	**type**\:  :py:class:`DestinationLeafs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs>`
            
            .. attribute:: priority
            
            	P2MP tunnel setup and hold priorities
            	**type**\:  :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Priority>`
            
            	**presence node**\: True
            
            .. attribute:: new_style_affinities
            
            	P2MP tunnel new style affinity attributes table
            	**type**\:  :py:class:`NewStyleAffinities <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities>`
            
            .. attribute:: bandwidth
            
            	P2MP tunnel bandwidth requirement
            	**type**\:  :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Bandwidth>`
            
            .. attribute:: affinity_mask
            
            	P2MP tunnel affinity and mask
            	**type**\:  :py:class:`AffinityMask <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.AffinityMask>`
            
            .. attribute:: record_route
            
            	Record route used by individual P2MP S2L(s)
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: signalled_name
            
            	The name of the P2MP tunnel to be included in signalling messages
            	**type**\: str
            
            	**length:** 1..254
            
            .. attribute:: path_selection_metric
            
            	Path selection configuration for this specific tunnel
            	**type**\:  :py:class:`MplsTePathSelectionMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathSelectionMetric>`
            
            .. attribute:: signalled_payload
            
            	P2MP tunnel ipv6 signalled payload
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{1,8}
            
            .. attribute:: fast_reroute
            
            	Specify P2MP tunnel can be fast\-rerouted
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: impose_explicit_null
            
            	Impose an explicit null bellow the TE label
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: logging
            
            	Log tunnel LSP messages
            	**type**\:  :py:class:`Logging <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Logging>`
            
            

            """

            _prefix = 'mpls-te-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes, self).__init__()

                self.yang_name = "mte-tunnel-attributes"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("destination-leafs", ("destination_leafs", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs)), ("priority", ("priority", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Priority)), ("new-style-affinities", ("new_style_affinities", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities)), ("bandwidth", ("bandwidth", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Bandwidth)), ("affinity-mask", ("affinity_mask", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.AffinityMask)), ("logging", ("logging", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Logging))])
                self._leafs = OrderedDict([
                    ('record_route', (YLeaf(YType.empty, 'record-route'), ['Empty'])),
                    ('signalled_name', (YLeaf(YType.str, 'signalled-name'), ['str'])),
                    ('path_selection_metric', (YLeaf(YType.enumeration, 'path-selection-metric'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathSelectionMetric', '')])),
                    ('signalled_payload', (YLeaf(YType.str, 'signalled-payload'), ['str'])),
                    ('fast_reroute', (YLeaf(YType.empty, 'fast-reroute'), ['Empty'])),
                    ('impose_explicit_null', (YLeaf(YType.empty, 'impose-explicit-null'), ['Empty'])),
                ])
                self.record_route = None
                self.signalled_name = None
                self.path_selection_metric = None
                self.signalled_payload = None
                self.fast_reroute = None
                self.impose_explicit_null = None

                self.destination_leafs = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs()
                self.destination_leafs.parent = self
                self._children_name_map["destination_leafs"] = "destination-leafs"

                self.priority = None
                self._children_name_map["priority"] = "priority"

                self.new_style_affinities = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities()
                self.new_style_affinities.parent = self
                self._children_name_map["new_style_affinities"] = "new-style-affinities"

                self.bandwidth = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Bandwidth()
                self.bandwidth.parent = self
                self._children_name_map["bandwidth"] = "bandwidth"

                self.affinity_mask = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.AffinityMask()
                self.affinity_mask.parent = self
                self._children_name_map["affinity_mask"] = "affinity-mask"

                self.logging = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Logging()
                self.logging.parent = self
                self._children_name_map["logging"] = "logging"
                self._segment_path = lambda: "Cisco-IOS-XR-mpls-te-cfg:mte-tunnel-attributes"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes, ['record_route', 'signalled_name', 'path_selection_metric', 'signalled_payload', 'fast_reroute', 'impose_explicit_null'], name, value)


            class DestinationLeafs(Entity):
                """
                P2MP destination table
                
                .. attribute:: destination_leaf
                
                	P2MP destination leaf
                	**type**\: list of  		 :py:class:`DestinationLeaf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs, self).__init__()

                    self.yang_name = "destination-leafs"
                    self.yang_parent_name = "mte-tunnel-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("destination-leaf", ("destination_leaf", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf))])
                    self._leafs = OrderedDict()

                    self.destination_leaf = YList(self)
                    self._segment_path = lambda: "destination-leafs"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs, [], name, value)


                class DestinationLeaf(Entity):
                    """
                    P2MP destination leaf
                    
                    .. attribute:: address  (key)
                    
                    	Address of P2MP destination
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: s2l_logging
                    
                    	Log tunnel destination s2l messages
                    	**type**\:  :py:class:`S2lLogging <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.S2lLogging>`
                    
                    .. attribute:: path_options
                    
                    	P2MP destination path\-options attributes table
                    	**type**\:  :py:class:`PathOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions>`
                    
                    .. attribute:: destination_disable
                    
                    	Disables P2MP destination
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: destination
                    
                    	Always set to true
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf, self).__init__()

                        self.yang_name = "destination-leaf"
                        self.yang_parent_name = "destination-leafs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['address']
                        self._child_classes = OrderedDict([("s2l-logging", ("s2l_logging", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.S2lLogging)), ("path-options", ("path_options", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions))])
                        self._leafs = OrderedDict([
                            ('address', (YLeaf(YType.str, 'address'), ['str'])),
                            ('destination_disable', (YLeaf(YType.empty, 'destination-disable'), ['Empty'])),
                            ('destination', (YLeaf(YType.empty, 'destination'), ['Empty'])),
                        ])
                        self.address = None
                        self.destination_disable = None
                        self.destination = None

                        self.s2l_logging = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.S2lLogging()
                        self.s2l_logging.parent = self
                        self._children_name_map["s2l_logging"] = "s2l-logging"

                        self.path_options = InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions()
                        self.path_options.parent = self
                        self._children_name_map["path_options"] = "path-options"
                        self._segment_path = lambda: "destination-leaf" + "[address='" + str(self.address) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf, ['address', 'destination_disable', 'destination'], name, value)


                    class S2lLogging(Entity):
                        """
                        Log tunnel destination s2l messages
                        
                        .. attribute:: s2l_reroute_messsage
                        
                        	Log tunnel destination s2l rereoute messages
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: s2l_insufficient_bw_messsage
                        
                        	Log tunnel destination s2l insufficient BW messages
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: s2l_pcalc_failure_message
                        
                        	Enable logging for destination s2l path\-calculation failures
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: s2l_state_message
                        
                        	Log tunnel destination s2l state messages
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.S2lLogging, self).__init__()

                            self.yang_name = "s2l-logging"
                            self.yang_parent_name = "destination-leaf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('s2l_reroute_messsage', (YLeaf(YType.empty, 's2l-reroute-messsage'), ['Empty'])),
                                ('s2l_insufficient_bw_messsage', (YLeaf(YType.empty, 's2l-insufficient-bw-messsage'), ['Empty'])),
                                ('s2l_pcalc_failure_message', (YLeaf(YType.empty, 's2l-pcalc-failure-message'), ['Empty'])),
                                ('s2l_state_message', (YLeaf(YType.empty, 's2l-state-message'), ['Empty'])),
                            ])
                            self.s2l_reroute_messsage = None
                            self.s2l_insufficient_bw_messsage = None
                            self.s2l_pcalc_failure_message = None
                            self.s2l_state_message = None
                            self._segment_path = lambda: "s2l-logging"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.S2lLogging, ['s2l_reroute_messsage', 's2l_insufficient_bw_messsage', 's2l_pcalc_failure_message', 's2l_state_message'], name, value)



                    class PathOptions(Entity):
                        """
                        P2MP destination path\-options attributes
                        table
                        
                        .. attribute:: path_option
                        
                        	P2MP destination path option
                        	**type**\: list of  		 :py:class:`PathOption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions.PathOption>`
                        
                        

                        """

                        _prefix = 'mpls-te-cfg'
                        _revision = '2017-09-07'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions, self).__init__()

                            self.yang_name = "path-options"
                            self.yang_parent_name = "destination-leaf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("path-option", ("path_option", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions.PathOption))])
                            self._leafs = OrderedDict()

                            self.path_option = YList(self)
                            self._segment_path = lambda: "path-options"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions, [], name, value)


                        class PathOption(Entity):
                            """
                            P2MP destination path option
                            
                            .. attribute:: preference_level  (key)
                            
                            	Preference level for this path option
                            	**type**\: int
                            
                            	**range:** 1..1000
                            
                            .. attribute:: path_type
                            
                            	The type of the path option
                            	**type**\:  :py:class:`MplsTePathOption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOption>`
                            
                            .. attribute:: path_id
                            
                            	The ID of the IP explicit path associated with this option
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            .. attribute:: path_name
                            
                            	The name of the IP explicit path associated with this option
                            	**type**\: str
                            
                            .. attribute:: lockdown
                            
                            	Path option properties
                            	**type**\:  :py:class:`MplsTePathOptionProperty <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionProperty>`
                            
                            .. attribute:: verbatim
                            
                            	Path option properties
                            	**type**\:  :py:class:`MplsTePathOptionProperty <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTePathOptionProperty>`
                            
                            

                            """

                            _prefix = 'mpls-te-cfg'
                            _revision = '2017-09-07'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions.PathOption, self).__init__()

                                self.yang_name = "path-option"
                                self.yang_parent_name = "path-options"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['preference_level']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('preference_level', (YLeaf(YType.uint32, 'preference-level'), ['int'])),
                                    ('path_type', (YLeaf(YType.enumeration, 'path-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOption', '')])),
                                    ('path_id', (YLeaf(YType.uint32, 'path-id'), ['int'])),
                                    ('path_name', (YLeaf(YType.str, 'path-name'), ['str'])),
                                    ('lockdown', (YLeaf(YType.enumeration, 'lockdown'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOptionProperty', '')])),
                                    ('verbatim', (YLeaf(YType.enumeration, 'verbatim'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTePathOptionProperty', '')])),
                                ])
                                self.preference_level = None
                                self.path_type = None
                                self.path_id = None
                                self.path_name = None
                                self.lockdown = None
                                self.verbatim = None
                                self._segment_path = lambda: "path-option" + "[preference-level='" + str(self.preference_level) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.DestinationLeafs.DestinationLeaf.PathOptions.PathOption, ['preference_level', 'path_type', 'path_id', 'path_name', 'lockdown', 'verbatim'], name, value)






            class Priority(Entity):
                """
                P2MP tunnel setup and hold priorities
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\: int
                
                	**range:** 0..7
                
                	**mandatory**\: True
                
                .. attribute:: hold_priority
                
                	Hold Priority
                	**type**\: int
                
                	**range:** 0..7
                
                	**mandatory**\: True
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Priority, self).__init__()

                    self.yang_name = "priority"
                    self.yang_parent_name = "mte-tunnel-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('setup_priority', (YLeaf(YType.uint32, 'setup-priority'), ['int'])),
                        ('hold_priority', (YLeaf(YType.uint32, 'hold-priority'), ['int'])),
                    ])
                    self.setup_priority = None
                    self.hold_priority = None
                    self._segment_path = lambda: "priority"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Priority, ['setup_priority', 'hold_priority'], name, value)



            class NewStyleAffinities(Entity):
                """
                P2MP tunnel new style affinity attributes table
                
                .. attribute:: new_style_affinity
                
                	Tunnel new style affinity attribute
                	**type**\: list of  		 :py:class:`NewStyleAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities.NewStyleAffinity>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities, self).__init__()

                    self.yang_name = "new-style-affinities"
                    self.yang_parent_name = "mte-tunnel-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("new-style-affinity", ("new_style_affinity", InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities.NewStyleAffinity))])
                    self._leafs = OrderedDict()

                    self.new_style_affinity = YList(self)
                    self._segment_path = lambda: "new-style-affinities"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities, [], name, value)


                class NewStyleAffinity(Entity):
                    """
                    Tunnel new style affinity attribute
                    
                    .. attribute:: affinity_type  (key)
                    
                    	The type of the affinity entry
                    	**type**\:  :py:class:`MplsTeTunnelAffinity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeTunnelAffinity>`
                    
                    .. attribute:: affinity1  (key)
                    
                    	The name of the first affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity2  (key)
                    
                    	The name of the second affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity3  (key)
                    
                    	The name of the third affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity4  (key)
                    
                    	The name of the fourth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity5  (key)
                    
                    	The name of the fifth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity6  (key)
                    
                    	The name of the sixth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity7  (key)
                    
                    	The name of the seventh affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity8  (key)
                    
                    	The name of the eighth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity9  (key)
                    
                    	The name of the nineth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: affinity10  (key)
                    
                    	The name of the tenth affinity
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    

                    """

                    _prefix = 'mpls-te-cfg'
                    _revision = '2017-09-07'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities.NewStyleAffinity, self).__init__()

                        self.yang_name = "new-style-affinity"
                        self.yang_parent_name = "new-style-affinities"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['affinity_type','affinity1','affinity2','affinity3','affinity4','affinity5','affinity6','affinity7','affinity8','affinity9','affinity10']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('affinity_type', (YLeaf(YType.enumeration, 'affinity-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeTunnelAffinity', '')])),
                            ('affinity1', (YLeaf(YType.str, 'affinity1'), ['str'])),
                            ('affinity2', (YLeaf(YType.str, 'affinity2'), ['str'])),
                            ('affinity3', (YLeaf(YType.str, 'affinity3'), ['str'])),
                            ('affinity4', (YLeaf(YType.str, 'affinity4'), ['str'])),
                            ('affinity5', (YLeaf(YType.str, 'affinity5'), ['str'])),
                            ('affinity6', (YLeaf(YType.str, 'affinity6'), ['str'])),
                            ('affinity7', (YLeaf(YType.str, 'affinity7'), ['str'])),
                            ('affinity8', (YLeaf(YType.str, 'affinity8'), ['str'])),
                            ('affinity9', (YLeaf(YType.str, 'affinity9'), ['str'])),
                            ('affinity10', (YLeaf(YType.str, 'affinity10'), ['str'])),
                        ])
                        self.affinity_type = None
                        self.affinity1 = None
                        self.affinity2 = None
                        self.affinity3 = None
                        self.affinity4 = None
                        self.affinity5 = None
                        self.affinity6 = None
                        self.affinity7 = None
                        self.affinity8 = None
                        self.affinity9 = None
                        self.affinity10 = None
                        self._segment_path = lambda: "new-style-affinity" + "[affinity-type='" + str(self.affinity_type) + "']" + "[affinity1='" + str(self.affinity1) + "']" + "[affinity2='" + str(self.affinity2) + "']" + "[affinity3='" + str(self.affinity3) + "']" + "[affinity4='" + str(self.affinity4) + "']" + "[affinity5='" + str(self.affinity5) + "']" + "[affinity6='" + str(self.affinity6) + "']" + "[affinity7='" + str(self.affinity7) + "']" + "[affinity8='" + str(self.affinity8) + "']" + "[affinity9='" + str(self.affinity9) + "']" + "[affinity10='" + str(self.affinity10) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.NewStyleAffinities.NewStyleAffinity, ['affinity_type', 'affinity1', 'affinity2', 'affinity3', 'affinity4', 'affinity5', 'affinity6', 'affinity7', 'affinity8', 'affinity9', 'affinity10'], name, value)




            class Bandwidth(Entity):
                """
                P2MP tunnel bandwidth requirement
                
                .. attribute:: dste_type
                
                	DSTE\-standard flag
                	**type**\:  :py:class:`MplsTeBandwidthDste <ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg.MplsTeBandwidthDste>`
                
                .. attribute:: class_or_pool_type
                
                	Class type for the bandwidth allocation
                	**type**\: int
                
                	**range:** 0..1
                
                .. attribute:: bandwidth
                
                	The value of the bandwidth reserved by this tunnel in kbps
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Bandwidth, self).__init__()

                    self.yang_name = "bandwidth"
                    self.yang_parent_name = "mte-tunnel-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_type', (YLeaf(YType.enumeration, 'dste-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_mpls_te_cfg', 'MplsTeBandwidthDste', '')])),
                        ('class_or_pool_type', (YLeaf(YType.uint32, 'class-or-pool-type'), ['int'])),
                        ('bandwidth', (YLeaf(YType.uint32, 'bandwidth'), ['int'])),
                    ])
                    self.dste_type = None
                    self.class_or_pool_type = None
                    self.bandwidth = None
                    self._segment_path = lambda: "bandwidth"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Bandwidth, ['dste_type', 'class_or_pool_type', 'bandwidth'], name, value)



            class AffinityMask(Entity):
                """
                P2MP tunnel affinity and mask
                
                .. attribute:: affinity
                
                	Affinity flags
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                .. attribute:: mask
                
                	Affinity mask
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{1,8}
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.AffinityMask, self).__init__()

                    self.yang_name = "affinity-mask"
                    self.yang_parent_name = "mte-tunnel-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('affinity', (YLeaf(YType.str, 'affinity'), ['str'])),
                        ('mask', (YLeaf(YType.str, 'mask'), ['str'])),
                    ])
                    self.affinity = None
                    self.mask = None
                    self._segment_path = lambda: "affinity-mask"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.AffinityMask, ['affinity', 'mask'], name, value)



            class Logging(Entity):
                """
                Log tunnel LSP messages
                
                .. attribute:: insufficient_bw_message
                
                	Log tunnel messages for insufficient bandwidth
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: reoptimized_message
                
                	Log tunnel reoptimized messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: bandwidth_change_message
                
                	Log tunnel bandwidth change messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: all
                
                	Log all events for a tunnel
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: pcalc_failure_message
                
                	Enable logging for path\-calculation failures
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: state_message
                
                	Log tunnel state messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: reoptimize_attempts_message
                
                	Log tunnel reoptimization attempts messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: sub_lsp_state_message
                
                	Log all tunnel sub\-LSP state messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: reroute_messsage
                
                	Log tunnel rereoute messages
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'mpls-te-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Logging, self).__init__()

                    self.yang_name = "logging"
                    self.yang_parent_name = "mte-tunnel-attributes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('insufficient_bw_message', (YLeaf(YType.empty, 'insufficient-bw-message'), ['Empty'])),
                        ('reoptimized_message', (YLeaf(YType.empty, 'reoptimized-message'), ['Empty'])),
                        ('bandwidth_change_message', (YLeaf(YType.empty, 'bandwidth-change-message'), ['Empty'])),
                        ('all', (YLeaf(YType.empty, 'all'), ['Empty'])),
                        ('pcalc_failure_message', (YLeaf(YType.empty, 'pcalc-failure-message'), ['Empty'])),
                        ('state_message', (YLeaf(YType.empty, 'state-message'), ['Empty'])),
                        ('reoptimize_attempts_message', (YLeaf(YType.empty, 'reoptimize-attempts-message'), ['Empty'])),
                        ('sub_lsp_state_message', (YLeaf(YType.empty, 'sub-lsp-state-message'), ['Empty'])),
                        ('reroute_messsage', (YLeaf(YType.empty, 'reroute-messsage'), ['Empty'])),
                    ])
                    self.insufficient_bw_message = None
                    self.reoptimized_message = None
                    self.bandwidth_change_message = None
                    self.all = None
                    self.pcalc_failure_message = None
                    self.state_message = None
                    self.reoptimize_attempts_message = None
                    self.sub_lsp_state_message = None
                    self.reroute_messsage = None
                    self._segment_path = lambda: "logging"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.MteTunnelAttributes.Logging, ['insufficient_bw_message', 'reoptimized_message', 'bandwidth_change_message', 'all', 'pcalc_failure_message', 'state_message', 'reoptimize_attempts_message', 'sub_lsp_state_message', 'reroute_messsage'], name, value)




        class Otu(Entity):
            """
            OTU port controller configuration
            
            .. attribute:: otn_send_ttitcmos
            
            	Configure OTN Send TTI value for OS config
            	**type**\:  :py:class:`OtnSendTtitcmos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmos>`
            
            .. attribute:: otn_send_ttitcmdapi
            
            	Configure OTN Send TTI value for DAPI configs
            	**type**\:  :py:class:`OtnSendTtitcmdapi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmdapi>`
            
            .. attribute:: otn_expected_ttisapi
            
            	Configure OTN Expected TTI value for SAPI configs
            	**type**\:  :py:class:`OtnExpectedTtisapi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtisapi>`
            
            .. attribute:: proactive_protection
            
            	Configure Proactive Protection
            	**type**\:  :py:class:`ProactiveProtection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection>`
            
            .. attribute:: network_srlgs
            
            	Configure Network srlgs
            	**type**\:  :py:class:`NetworkSrlgs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs>`
            
            .. attribute:: otn_send_tti
            
            	Configure OTN Send TTI value for Full ASCII/HEX
            	**type**\:  :py:class:`OtnSendTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTti>`
            
            .. attribute:: otn_expected_ttitcmdapi
            
            	Configure OTN Expected TTI value for DAPI configs
            	**type**\:  :py:class:`OtnExpectedTtitcmdapi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmdapi>`
            
            .. attribute:: otn_send_ttisapi
            
            	Configure OTN Send TTI value for SAPI configs
            	**type**\:  :py:class:`OtnSendTtisapi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtisapi>`
            
            .. attribute:: prbs
            
            	Enable Prbs And configure
            	**type**\:  :py:class:`Prbs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.Prbs>`
            
            .. attribute:: otn_expected_ttitcmos
            
            	Configure OTN Expected TTI value for OS config
            	**type**\:  :py:class:`OtnExpectedTtitcmos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmos>`
            
            .. attribute:: otn_expected_tti
            
            	Configure OTN Expected TTI value for Full ASCII/HEX
            	**type**\:  :py:class:`OtnExpectedTti <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTti>`
            
            .. attribute:: gcc
            
            	General Communication Channel configuration
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: sf
            
            	Signal failure threshold
            	**type**\: int
            
            	**range:** 5..9
            
            .. attribute:: secondary_admin_state
            
            	Configure secondary admin state 
            	**type**\:  :py:class:`OtnSecAdminState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnSecAdminState>`
            
            	**default value**\: normal
            
            .. attribute:: sd
            
            	Signal degrade threshold
            	**type**\: int
            
            	**range:** 5..9
            
            .. attribute:: performance_monitoring
            
            	Configure performance monitoring
            	**type**\:  :py:class:`OtnPerMon <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnPerMon>`
            
            	**default value**\: enable
            
            .. attribute:: loopback
            
            	Type of Loopback
            	**type**\:  :py:class:`OtnLoopback <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnLoopback>`
            
            .. attribute:: fec
            
            	Configure forward error correction
            	**type**\:  :py:class:`OtuForwardErrorCorrection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtuForwardErrorCorrection>`
            
            	**default value**\: none
            
            

            """

            _prefix = 'controller-otu-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Otu, self).__init__()

                self.yang_name = "otu"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("otn-send-ttitcmos", ("otn_send_ttitcmos", InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmos)), ("otn-send-ttitcmdapi", ("otn_send_ttitcmdapi", InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmdapi)), ("otn-expected-ttisapi", ("otn_expected_ttisapi", InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtisapi)), ("proactive-protection", ("proactive_protection", InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection)), ("network-srlgs", ("network_srlgs", InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs)), ("otn-send-tti", ("otn_send_tti", InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTti)), ("otn-expected-ttitcmdapi", ("otn_expected_ttitcmdapi", InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmdapi)), ("otn-send-ttisapi", ("otn_send_ttisapi", InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtisapi)), ("prbs", ("prbs", InterfaceConfigurations.InterfaceConfiguration.Otu.Prbs)), ("otn-expected-ttitcmos", ("otn_expected_ttitcmos", InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmos)), ("otn-expected-tti", ("otn_expected_tti", InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTti))])
                self._leafs = OrderedDict([
                    ('gcc', (YLeaf(YType.empty, 'gcc'), ['Empty'])),
                    ('sf', (YLeaf(YType.uint32, 'sf'), ['int'])),
                    ('secondary_admin_state', (YLeaf(YType.enumeration, 'secondary-admin-state'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnSecAdminState', '')])),
                    ('sd', (YLeaf(YType.uint32, 'sd'), ['int'])),
                    ('performance_monitoring', (YLeaf(YType.enumeration, 'performance-monitoring'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnPerMon', '')])),
                    ('loopback', (YLeaf(YType.enumeration, 'loopback'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnLoopback', '')])),
                    ('fec', (YLeaf(YType.enumeration, 'fec'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtuForwardErrorCorrection', '')])),
                ])
                self.gcc = None
                self.sf = None
                self.secondary_admin_state = None
                self.sd = None
                self.performance_monitoring = None
                self.loopback = None
                self.fec = None

                self.otn_send_ttitcmos = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmos()
                self.otn_send_ttitcmos.parent = self
                self._children_name_map["otn_send_ttitcmos"] = "otn-send-ttitcmos"

                self.otn_send_ttitcmdapi = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmdapi()
                self.otn_send_ttitcmdapi.parent = self
                self._children_name_map["otn_send_ttitcmdapi"] = "otn-send-ttitcmdapi"

                self.otn_expected_ttisapi = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtisapi()
                self.otn_expected_ttisapi.parent = self
                self._children_name_map["otn_expected_ttisapi"] = "otn-expected-ttisapi"

                self.proactive_protection = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection()
                self.proactive_protection.parent = self
                self._children_name_map["proactive_protection"] = "proactive-protection"

                self.network_srlgs = InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs()
                self.network_srlgs.parent = self
                self._children_name_map["network_srlgs"] = "network-srlgs"

                self.otn_send_tti = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTti()
                self.otn_send_tti.parent = self
                self._children_name_map["otn_send_tti"] = "otn-send-tti"

                self.otn_expected_ttitcmdapi = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmdapi()
                self.otn_expected_ttitcmdapi.parent = self
                self._children_name_map["otn_expected_ttitcmdapi"] = "otn-expected-ttitcmdapi"

                self.otn_send_ttisapi = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtisapi()
                self.otn_send_ttisapi.parent = self
                self._children_name_map["otn_send_ttisapi"] = "otn-send-ttisapi"

                self.prbs = InterfaceConfigurations.InterfaceConfiguration.Otu.Prbs()
                self.prbs.parent = self
                self._children_name_map["prbs"] = "prbs"

                self.otn_expected_ttitcmos = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmos()
                self.otn_expected_ttitcmos.parent = self
                self._children_name_map["otn_expected_ttitcmos"] = "otn-expected-ttitcmos"

                self.otn_expected_tti = InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTti()
                self.otn_expected_tti.parent = self
                self._children_name_map["otn_expected_tti"] = "otn-expected-tti"
                self._segment_path = lambda: "Cisco-IOS-XR-controller-otu-cfg:otu"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu, ['gcc', 'sf', 'secondary_admin_state', 'sd', 'performance_monitoring', 'loopback', 'fec'], name, value)


            class OtnSendTtitcmos(Entity):
                """
                Configure OTN Send TTI value for OS config
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\:  :py:class:`OtnSendTtiTypeOs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnSendTtiTypeOs>`
                
                .. attribute:: osascii_string
                
                	OS ASCII text (Max 32 characters)
                	**type**\: str
                
                	**length:** 1..32
                
                .. attribute:: oshex_string
                
                	OS HEX text (Max 64 characters)
                	**type**\: str
                
                	**length:** 1..64
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmos, self).__init__()

                    self.yang_name = "otn-send-ttitcmos"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnSendTtiTypeOs', '')])),
                        ('osascii_string', (YLeaf(YType.str, 'osascii-string'), ['str'])),
                        ('oshex_string', (YLeaf(YType.str, 'oshex-string'), ['str'])),
                    ])
                    self.string_type = None
                    self.osascii_string = None
                    self.oshex_string = None
                    self._segment_path = lambda: "otn-send-ttitcmos"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmos, ['string_type', 'osascii_string', 'oshex_string'], name, value)



            class OtnSendTtitcmdapi(Entity):
                """
                Configure OTN Send TTI value for DAPI configs
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\:  :py:class:`OtnSendTtiTypeDapi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnSendTtiTypeDapi>`
                
                .. attribute:: dapi_ascii_string
                
                	DAPI ASCII text (Max 14 characters)
                	**type**\: str
                
                	**length:** 1..14
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmdapi, self).__init__()

                    self.yang_name = "otn-send-ttitcmdapi"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnSendTtiTypeDapi', '')])),
                        ('dapi_ascii_string', (YLeaf(YType.str, 'dapi-ascii-string'), ['str'])),
                    ])
                    self.string_type = None
                    self.dapi_ascii_string = None
                    self._segment_path = lambda: "otn-send-ttitcmdapi"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtitcmdapi, ['string_type', 'dapi_ascii_string'], name, value)



            class OtnExpectedTtisapi(Entity):
                """
                Configure OTN Expected TTI value for SAPI
                configs
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\:  :py:class:`OtnExpTtiTypeSapi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnExpTtiTypeSapi>`
                
                .. attribute:: sapi_ascii_string
                
                	SAPI ASCII text (Max 14 characters)
                	**type**\: str
                
                	**length:** 1..14
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtisapi, self).__init__()

                    self.yang_name = "otn-expected-ttisapi"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnExpTtiTypeSapi', '')])),
                        ('sapi_ascii_string', (YLeaf(YType.str, 'sapi-ascii-string'), ['str'])),
                    ])
                    self.string_type = None
                    self.sapi_ascii_string = None
                    self._segment_path = lambda: "otn-expected-ttisapi"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtisapi, ['string_type', 'sapi_ascii_string'], name, value)



            class ProactiveProtection(Entity):
                """
                Configure Proactive Protection
                
                .. attribute:: trigger_threshold
                
                	Proactive Protection Threshold
                	**type**\:  :py:class:`TriggerThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerThreshold>`
                
                .. attribute:: revert_window
                
                	Proactive Protection Window
                	**type**\:  :py:class:`RevertWindow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertWindow>`
                
                .. attribute:: trigger_window
                
                	Proactive Protection Window
                	**type**\:  :py:class:`TriggerWindow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerWindow>`
                
                .. attribute:: revert_threshold
                
                	Proactive Protection Threshold
                	**type**\:  :py:class:`RevertThreshold <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertThreshold>`
                
                .. attribute:: status
                
                	Enable Proactive Protection
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection, self).__init__()

                    self.yang_name = "proactive-protection"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("trigger-threshold", ("trigger_threshold", InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerThreshold)), ("revert-window", ("revert_window", InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertWindow)), ("trigger-window", ("trigger_window", InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerWindow)), ("revert-threshold", ("revert_threshold", InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertThreshold))])
                    self._leafs = OrderedDict([
                        ('status', (YLeaf(YType.empty, 'status'), ['Empty'])),
                    ])
                    self.status = None

                    self.trigger_threshold = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerThreshold()
                    self.trigger_threshold.parent = self
                    self._children_name_map["trigger_threshold"] = "trigger-threshold"

                    self.revert_window = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertWindow()
                    self.revert_window.parent = self
                    self._children_name_map["revert_window"] = "revert-window"

                    self.trigger_window = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerWindow()
                    self.trigger_window.parent = self
                    self._children_name_map["trigger_window"] = "trigger-window"

                    self.revert_threshold = InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertThreshold()
                    self.revert_threshold.parent = self
                    self._children_name_map["revert_threshold"] = "revert-threshold"
                    self._segment_path = lambda: "proactive-protection"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection, ['status'], name, value)


                class TriggerThreshold(Entity):
                    """
                    Proactive Protection Threshold
                    
                    .. attribute:: coefficient
                    
                    	Bit error rate coefficient
                    	**type**\: int
                    
                    	**range:** 1..9
                    
                    .. attribute:: power
                    
                    	Bit error rate power
                    	**type**\: int
                    
                    	**range:** 3..9
                    
                    .. attribute:: enable
                    
                    	Proactive Protection supported
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerThreshold, self).__init__()

                        self.yang_name = "trigger-threshold"
                        self.yang_parent_name = "proactive-protection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('coefficient', (YLeaf(YType.uint32, 'coefficient'), ['int'])),
                            ('power', (YLeaf(YType.uint32, 'power'), ['int'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ])
                        self.coefficient = None
                        self.power = None
                        self.enable = None
                        self._segment_path = lambda: "trigger-threshold"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerThreshold, ['coefficient', 'power', 'enable'], name, value)



                class RevertWindow(Entity):
                    """
                    Proactive Protection Window
                    
                    .. attribute:: value
                    
                    	Integration window for FRR trigger in MS
                    	**type**\: int
                    
                    	**range:** 2000..10000
                    
                    .. attribute:: enable
                    
                    	Enable Proactive Protection
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertWindow, self).__init__()

                        self.yang_name = "revert-window"
                        self.yang_parent_name = "proactive-protection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('value', (YLeaf(YType.uint32, 'value'), ['int'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ])
                        self.value = None
                        self.enable = None
                        self._segment_path = lambda: "revert-window"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertWindow, ['value', 'enable'], name, value)



                class TriggerWindow(Entity):
                    """
                    Proactive Protection Window
                    
                    .. attribute:: value
                    
                    	Integration window for FRR trigger in MS
                    	**type**\: int
                    
                    	**range:** 10..10000
                    
                    .. attribute:: enable
                    
                    	Enable Proactive Protection
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerWindow, self).__init__()

                        self.yang_name = "trigger-window"
                        self.yang_parent_name = "proactive-protection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('value', (YLeaf(YType.uint32, 'value'), ['int'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ])
                        self.value = None
                        self.enable = None
                        self._segment_path = lambda: "trigger-window"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.TriggerWindow, ['value', 'enable'], name, value)



                class RevertThreshold(Entity):
                    """
                    Proactive Protection Threshold
                    
                    .. attribute:: coefficient
                    
                    	Bit error rate coefficient
                    	**type**\: int
                    
                    	**range:** 1..9
                    
                    .. attribute:: power
                    
                    	Bit error rate power
                    	**type**\: int
                    
                    	**range:** 4..10
                    
                    .. attribute:: enable
                    
                    	Proactive Protection supported
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertThreshold, self).__init__()

                        self.yang_name = "revert-threshold"
                        self.yang_parent_name = "proactive-protection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('coefficient', (YLeaf(YType.uint32, 'coefficient'), ['int'])),
                            ('power', (YLeaf(YType.uint32, 'power'), ['int'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                        ])
                        self.coefficient = None
                        self.power = None
                        self.enable = None
                        self._segment_path = lambda: "revert-threshold"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.ProactiveProtection.RevertThreshold, ['coefficient', 'power', 'enable'], name, value)




            class NetworkSrlgs(Entity):
                """
                Configure Network srlgs
                
                .. attribute:: network_srlg
                
                	Configure network srlg sets
                	**type**\: list of  		 :py:class:`NetworkSrlg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs.NetworkSrlg>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs, self).__init__()

                    self.yang_name = "network-srlgs"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("network-srlg", ("network_srlg", InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs.NetworkSrlg))])
                    self._leafs = OrderedDict()

                    self.network_srlg = YList(self)
                    self._segment_path = lambda: "network-srlgs"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs, [], name, value)


                class NetworkSrlg(Entity):
                    """
                    Configure network srlg sets
                    
                    .. attribute:: set_id  (key)
                    
                    	Set index
                    	**type**\: int
                    
                    	**range:** 1..17
                    
                    .. attribute:: srlg1
                    
                    	First value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg2
                    
                    	Second value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg3
                    
                    	Third value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg4
                    
                    	Forth value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg5
                    
                    	Fifth value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    .. attribute:: srlg6
                    
                    	Sixth value for Network SRLG
                    	**type**\: int
                    
                    	**range:** 0..4294967294
                    
                    

                    """

                    _prefix = 'controller-otu-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs.NetworkSrlg, self).__init__()

                        self.yang_name = "network-srlg"
                        self.yang_parent_name = "network-srlgs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['set_id']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('set_id', (YLeaf(YType.uint32, 'set-id'), ['int'])),
                            ('srlg1', (YLeaf(YType.uint32, 'srlg1'), ['int'])),
                            ('srlg2', (YLeaf(YType.uint32, 'srlg2'), ['int'])),
                            ('srlg3', (YLeaf(YType.uint32, 'srlg3'), ['int'])),
                            ('srlg4', (YLeaf(YType.uint32, 'srlg4'), ['int'])),
                            ('srlg5', (YLeaf(YType.uint32, 'srlg5'), ['int'])),
                            ('srlg6', (YLeaf(YType.uint32, 'srlg6'), ['int'])),
                        ])
                        self.set_id = None
                        self.srlg1 = None
                        self.srlg2 = None
                        self.srlg3 = None
                        self.srlg4 = None
                        self.srlg5 = None
                        self.srlg6 = None
                        self._segment_path = lambda: "network-srlg" + "[set-id='" + str(self.set_id) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.NetworkSrlgs.NetworkSrlg, ['set_id', 'srlg1', 'srlg2', 'srlg3', 'srlg4', 'srlg5', 'srlg6'], name, value)




            class OtnSendTti(Entity):
                """
                Configure OTN Send TTI value for Full ASCII/HEX
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\:  :py:class:`OtnSendTtiTypeFull <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnSendTtiTypeFull>`
                
                .. attribute:: full_ascii_string
                
                	Full ASCII text (Max 64 characters)
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: hex_string
                
                	Hex nibbles (Max 128 \- The string length should be an even number)
                	**type**\: str
                
                	**length:** 1..128
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTti, self).__init__()

                    self.yang_name = "otn-send-tti"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnSendTtiTypeFull', '')])),
                        ('full_ascii_string', (YLeaf(YType.str, 'full-ascii-string'), ['str'])),
                        ('hex_string', (YLeaf(YType.str, 'hex-string'), ['str'])),
                    ])
                    self.string_type = None
                    self.full_ascii_string = None
                    self.hex_string = None
                    self._segment_path = lambda: "otn-send-tti"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTti, ['string_type', 'full_ascii_string', 'hex_string'], name, value)



            class OtnExpectedTtitcmdapi(Entity):
                """
                Configure OTN Expected TTI value for DAPI
                configs
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\:  :py:class:`OtnExpTtiTypeDapi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnExpTtiTypeDapi>`
                
                .. attribute:: dapi_ascii_string
                
                	DAPI ASCII text (Max 14 characters)
                	**type**\: str
                
                	**length:** 1..14
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmdapi, self).__init__()

                    self.yang_name = "otn-expected-ttitcmdapi"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnExpTtiTypeDapi', '')])),
                        ('dapi_ascii_string', (YLeaf(YType.str, 'dapi-ascii-string'), ['str'])),
                    ])
                    self.string_type = None
                    self.dapi_ascii_string = None
                    self._segment_path = lambda: "otn-expected-ttitcmdapi"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmdapi, ['string_type', 'dapi_ascii_string'], name, value)



            class OtnSendTtisapi(Entity):
                """
                Configure OTN Send TTI value for SAPI configs
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\:  :py:class:`OtnSendTtiTypeSapi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnSendTtiTypeSapi>`
                
                .. attribute:: sapi_ascii_string
                
                	SAPI ASCII text (Max 14 characters)
                	**type**\: str
                
                	**length:** 1..14
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtisapi, self).__init__()

                    self.yang_name = "otn-send-ttisapi"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnSendTtiTypeSapi', '')])),
                        ('sapi_ascii_string', (YLeaf(YType.str, 'sapi-ascii-string'), ['str'])),
                    ])
                    self.string_type = None
                    self.sapi_ascii_string = None
                    self._segment_path = lambda: "otn-send-ttisapi"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnSendTtisapi, ['string_type', 'sapi_ascii_string'], name, value)



            class Prbs(Entity):
                """
                Enable Prbs And configure
                
                .. attribute:: mode_value
                
                	Mode value
                	**type**\:  :py:class:`OtuMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtuMode>`
                
                .. attribute:: patternvalue
                
                	Pattern value
                	**type**\:  :py:class:`OtuPattern <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtuPattern>`
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.Prbs, self).__init__()

                    self.yang_name = "prbs"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('mode_value', (YLeaf(YType.enumeration, 'mode-value'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtuMode', '')])),
                        ('patternvalue', (YLeaf(YType.enumeration, 'patternvalue'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtuPattern', '')])),
                    ])
                    self.mode_value = None
                    self.patternvalue = None
                    self._segment_path = lambda: "prbs"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.Prbs, ['mode_value', 'patternvalue'], name, value)



            class OtnExpectedTtitcmos(Entity):
                """
                Configure OTN Expected TTI value for OS config
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\:  :py:class:`OtnExpTtiTypeOs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnExpTtiTypeOs>`
                
                .. attribute:: osascii_string
                
                	OS ASCII text (Max 32 characters)
                	**type**\: str
                
                	**length:** 1..32
                
                .. attribute:: oshex_string
                
                	OS HEX text (Max 64 characters)
                	**type**\: str
                
                	**length:** 1..64
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmos, self).__init__()

                    self.yang_name = "otn-expected-ttitcmos"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnExpTtiTypeOs', '')])),
                        ('osascii_string', (YLeaf(YType.str, 'osascii-string'), ['str'])),
                        ('oshex_string', (YLeaf(YType.str, 'oshex-string'), ['str'])),
                    ])
                    self.string_type = None
                    self.osascii_string = None
                    self.oshex_string = None
                    self._segment_path = lambda: "otn-expected-ttitcmos"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTtitcmos, ['string_type', 'osascii_string', 'oshex_string'], name, value)



            class OtnExpectedTti(Entity):
                """
                Configure OTN Expected TTI value for Full
                ASCII/HEX
                
                .. attribute:: string_type
                
                	TTI string type (FULL ASCII or  DAPI ASCII or SAPI ASCII or hex format or OS ASCII or OS HEX)
                	**type**\:  :py:class:`OtnExpTtiTypeFull <ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg.OtnExpTtiTypeFull>`
                
                .. attribute:: full_ascii_string
                
                	Full ASCII text (Max 64 characters)
                	**type**\: str
                
                	**length:** 1..64
                
                .. attribute:: hex_string
                
                	Hex nibbles (Max 128 \- The string length should be an even number)
                	**type**\: str
                
                	**length:** 1..128
                
                

                """

                _prefix = 'controller-otu-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTti, self).__init__()

                    self.yang_name = "otn-expected-tti"
                    self.yang_parent_name = "otu"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('string_type', (YLeaf(YType.enumeration, 'string-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_controller_otu_cfg', 'OtnExpTtiTypeFull', '')])),
                        ('full_ascii_string', (YLeaf(YType.str, 'full-ascii-string'), ['str'])),
                        ('hex_string', (YLeaf(YType.str, 'hex-string'), ['str'])),
                    ])
                    self.string_type = None
                    self.full_ascii_string = None
                    self.hex_string = None
                    self._segment_path = lambda: "otn-expected-tti"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Otu.OtnExpectedTti, ['string_type', 'full_ascii_string', 'hex_string'], name, value)




        class NetFlow(Entity):
            """
            Interface netflow configuration
            
            .. attribute:: data_link_frame_section
            
            	Configure datalinkframesection netflow
            	**type**\:  :py:class:`DataLinkFrameSection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection>`
            
            .. attribute:: mpls
            
            	Configure MPLS netflow
            	**type**\:  :py:class:`Mpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls>`
            
            .. attribute:: ipv6
            
            	Configure IPv6 netflow
            	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6>`
            
            .. attribute:: ipv4
            
            	Configure IPv4 netflow
            	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4>`
            
            

            """

            _prefix = 'traffmon-netflow-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow, self).__init__()

                self.yang_name = "net-flow"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("data-link-frame-section", ("data_link_frame_section", InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection)), ("mpls", ("mpls", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls)), ("ipv6", ("ipv6", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6)), ("ipv4", ("ipv4", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4))])
                self._leafs = OrderedDict()

                self.data_link_frame_section = InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection()
                self.data_link_frame_section.parent = self
                self._children_name_map["data_link_frame_section"] = "data-link-frame-section"

                self.mpls = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls()
                self.mpls.parent = self
                self._children_name_map["mpls"] = "mpls"

                self.ipv6 = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6()
                self.ipv6.parent = self
                self._children_name_map["ipv6"] = "ipv6"

                self.ipv4 = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4()
                self.ipv4.parent = self
                self._children_name_map["ipv4"] = "ipv4"
                self._segment_path = lambda: "Cisco-IOS-XR-traffmon-netflow-cfg:net-flow"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow, [], name, value)


            class DataLinkFrameSection(Entity):
                """
                Configure datalinkframesection netflow
                
                .. attribute:: flow_monitor_map
                
                	Configure a flow monitor map
                	**type**\:  :py:class:`FlowMonitorMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap>`
                
                

                """

                _prefix = 'traffmon-netflow-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection, self).__init__()

                    self.yang_name = "data-link-frame-section"
                    self.yang_parent_name = "net-flow"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("flow-monitor-map", ("flow_monitor_map", InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap))])
                    self._leafs = OrderedDict()

                    self.flow_monitor_map = InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap()
                    self.flow_monitor_map.parent = self
                    self._children_name_map["flow_monitor_map"] = "flow-monitor-map"
                    self._segment_path = lambda: "data-link-frame-section"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection, [], name, value)


                class FlowMonitorMap(Entity):
                    """
                    Configure a flow monitor map
                    
                    .. attribute:: ingress
                    
                    	Configure ingress monitoring direction
                    	**type**\:  :py:class:`Ingress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress>`
                    
                    .. attribute:: egress
                    
                    	Configure egress monitoring direction
                    	**type**\:  :py:class:`Egress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress>`
                    
                    

                    """

                    _prefix = 'traffmon-netflow-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap, self).__init__()

                        self.yang_name = "flow-monitor-map"
                        self.yang_parent_name = "data-link-frame-section"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ingress", ("ingress", InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress)), ("egress", ("egress", InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress))])
                        self._leafs = OrderedDict()

                        self.ingress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress()
                        self.ingress.parent = self
                        self._children_name_map["ingress"] = "ingress"

                        self.egress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress()
                        self.egress.parent = self
                        self._children_name_map["egress"] = "egress"
                        self._segment_path = lambda: "flow-monitor-map"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap, [], name, value)


                    class Ingress(Entity):
                        """
                        Configure ingress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of  		 :py:class:`FlowMonitorName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress, self).__init__()

                            self.yang_name = "ingress"
                            self.yang_parent_name = "flow-monitor-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("flow-monitor-name", ("flow_monitor_name", InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress.FlowMonitorName))])
                            self._leafs = OrderedDict()

                            self.flow_monitor_name = YList(self)
                            self._segment_path = lambda: "ingress"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress, [], name, value)


                        class FlowMonitorName(Entity):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  (key)
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress.FlowMonitorName, self).__init__()

                                self.yang_name = "flow-monitor-name"
                                self.yang_parent_name = "ingress"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['monitor_map_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('monitor_map_name', (YLeaf(YType.str, 'monitor-map-name'), ['str'])),
                                    ('sampler_map_name', (YLeaf(YType.str, 'sampler-map-name'), ['str'])),
                                ])
                                self.monitor_map_name = None
                                self.sampler_map_name = None
                                self._segment_path = lambda: "flow-monitor-name" + "[monitor-map-name='" + str(self.monitor_map_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Ingress.FlowMonitorName, ['monitor_map_name', 'sampler_map_name'], name, value)




                    class Egress(Entity):
                        """
                        Configure egress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of  		 :py:class:`FlowMonitorName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress, self).__init__()

                            self.yang_name = "egress"
                            self.yang_parent_name = "flow-monitor-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("flow-monitor-name", ("flow_monitor_name", InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress.FlowMonitorName))])
                            self._leafs = OrderedDict()

                            self.flow_monitor_name = YList(self)
                            self._segment_path = lambda: "egress"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress, [], name, value)


                        class FlowMonitorName(Entity):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  (key)
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress.FlowMonitorName, self).__init__()

                                self.yang_name = "flow-monitor-name"
                                self.yang_parent_name = "egress"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['monitor_map_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('monitor_map_name', (YLeaf(YType.str, 'monitor-map-name'), ['str'])),
                                    ('sampler_map_name', (YLeaf(YType.str, 'sampler-map-name'), ['str'])),
                                ])
                                self.monitor_map_name = None
                                self.sampler_map_name = None
                                self._segment_path = lambda: "flow-monitor-name" + "[monitor-map-name='" + str(self.monitor_map_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.DataLinkFrameSection.FlowMonitorMap.Egress.FlowMonitorName, ['monitor_map_name', 'sampler_map_name'], name, value)






            class Mpls(Entity):
                """
                Configure MPLS netflow
                
                .. attribute:: flow_monitor_map
                
                	Configure a flow monitor map
                	**type**\:  :py:class:`FlowMonitorMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap>`
                
                

                """

                _prefix = 'traffmon-netflow-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls, self).__init__()

                    self.yang_name = "mpls"
                    self.yang_parent_name = "net-flow"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("flow-monitor-map", ("flow_monitor_map", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap))])
                    self._leafs = OrderedDict()

                    self.flow_monitor_map = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap()
                    self.flow_monitor_map.parent = self
                    self._children_name_map["flow_monitor_map"] = "flow-monitor-map"
                    self._segment_path = lambda: "mpls"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls, [], name, value)


                class FlowMonitorMap(Entity):
                    """
                    Configure a flow monitor map
                    
                    .. attribute:: ingress
                    
                    	Configure ingress monitoring direction
                    	**type**\:  :py:class:`Ingress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress>`
                    
                    .. attribute:: egress
                    
                    	Configure egress monitoring direction
                    	**type**\:  :py:class:`Egress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress>`
                    
                    

                    """

                    _prefix = 'traffmon-netflow-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap, self).__init__()

                        self.yang_name = "flow-monitor-map"
                        self.yang_parent_name = "mpls"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ingress", ("ingress", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress)), ("egress", ("egress", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress))])
                        self._leafs = OrderedDict()

                        self.ingress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress()
                        self.ingress.parent = self
                        self._children_name_map["ingress"] = "ingress"

                        self.egress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress()
                        self.egress.parent = self
                        self._children_name_map["egress"] = "egress"
                        self._segment_path = lambda: "flow-monitor-map"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap, [], name, value)


                    class Ingress(Entity):
                        """
                        Configure ingress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of  		 :py:class:`FlowMonitorName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress, self).__init__()

                            self.yang_name = "ingress"
                            self.yang_parent_name = "flow-monitor-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("flow-monitor-name", ("flow_monitor_name", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress.FlowMonitorName))])
                            self._leafs = OrderedDict()

                            self.flow_monitor_name = YList(self)
                            self._segment_path = lambda: "ingress"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress, [], name, value)


                        class FlowMonitorName(Entity):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  (key)
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress.FlowMonitorName, self).__init__()

                                self.yang_name = "flow-monitor-name"
                                self.yang_parent_name = "ingress"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['monitor_map_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('monitor_map_name', (YLeaf(YType.str, 'monitor-map-name'), ['str'])),
                                    ('sampler_map_name', (YLeaf(YType.str, 'sampler-map-name'), ['str'])),
                                ])
                                self.monitor_map_name = None
                                self.sampler_map_name = None
                                self._segment_path = lambda: "flow-monitor-name" + "[monitor-map-name='" + str(self.monitor_map_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Ingress.FlowMonitorName, ['monitor_map_name', 'sampler_map_name'], name, value)




                    class Egress(Entity):
                        """
                        Configure egress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of  		 :py:class:`FlowMonitorName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress, self).__init__()

                            self.yang_name = "egress"
                            self.yang_parent_name = "flow-monitor-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("flow-monitor-name", ("flow_monitor_name", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress.FlowMonitorName))])
                            self._leafs = OrderedDict()

                            self.flow_monitor_name = YList(self)
                            self._segment_path = lambda: "egress"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress, [], name, value)


                        class FlowMonitorName(Entity):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  (key)
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress.FlowMonitorName, self).__init__()

                                self.yang_name = "flow-monitor-name"
                                self.yang_parent_name = "egress"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['monitor_map_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('monitor_map_name', (YLeaf(YType.str, 'monitor-map-name'), ['str'])),
                                    ('sampler_map_name', (YLeaf(YType.str, 'sampler-map-name'), ['str'])),
                                ])
                                self.monitor_map_name = None
                                self.sampler_map_name = None
                                self._segment_path = lambda: "flow-monitor-name" + "[monitor-map-name='" + str(self.monitor_map_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Mpls.FlowMonitorMap.Egress.FlowMonitorName, ['monitor_map_name', 'sampler_map_name'], name, value)






            class Ipv6(Entity):
                """
                Configure IPv6 netflow
                
                .. attribute:: flow_monitor_map
                
                	Configure a flow monitor map
                	**type**\:  :py:class:`FlowMonitorMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap>`
                
                

                """

                _prefix = 'traffmon-netflow-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6, self).__init__()

                    self.yang_name = "ipv6"
                    self.yang_parent_name = "net-flow"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("flow-monitor-map", ("flow_monitor_map", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap))])
                    self._leafs = OrderedDict()

                    self.flow_monitor_map = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap()
                    self.flow_monitor_map.parent = self
                    self._children_name_map["flow_monitor_map"] = "flow-monitor-map"
                    self._segment_path = lambda: "ipv6"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6, [], name, value)


                class FlowMonitorMap(Entity):
                    """
                    Configure a flow monitor map
                    
                    .. attribute:: ingress
                    
                    	Configure ingress monitoring direction
                    	**type**\:  :py:class:`Ingress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress>`
                    
                    .. attribute:: egress
                    
                    	Configure egress monitoring direction
                    	**type**\:  :py:class:`Egress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress>`
                    
                    

                    """

                    _prefix = 'traffmon-netflow-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap, self).__init__()

                        self.yang_name = "flow-monitor-map"
                        self.yang_parent_name = "ipv6"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ingress", ("ingress", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress)), ("egress", ("egress", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress))])
                        self._leafs = OrderedDict()

                        self.ingress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress()
                        self.ingress.parent = self
                        self._children_name_map["ingress"] = "ingress"

                        self.egress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress()
                        self.egress.parent = self
                        self._children_name_map["egress"] = "egress"
                        self._segment_path = lambda: "flow-monitor-map"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap, [], name, value)


                    class Ingress(Entity):
                        """
                        Configure ingress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of  		 :py:class:`FlowMonitorName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress, self).__init__()

                            self.yang_name = "ingress"
                            self.yang_parent_name = "flow-monitor-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("flow-monitor-name", ("flow_monitor_name", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress.FlowMonitorName))])
                            self._leafs = OrderedDict()

                            self.flow_monitor_name = YList(self)
                            self._segment_path = lambda: "ingress"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress, [], name, value)


                        class FlowMonitorName(Entity):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  (key)
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress.FlowMonitorName, self).__init__()

                                self.yang_name = "flow-monitor-name"
                                self.yang_parent_name = "ingress"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['monitor_map_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('monitor_map_name', (YLeaf(YType.str, 'monitor-map-name'), ['str'])),
                                    ('sampler_map_name', (YLeaf(YType.str, 'sampler-map-name'), ['str'])),
                                ])
                                self.monitor_map_name = None
                                self.sampler_map_name = None
                                self._segment_path = lambda: "flow-monitor-name" + "[monitor-map-name='" + str(self.monitor_map_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Ingress.FlowMonitorName, ['monitor_map_name', 'sampler_map_name'], name, value)




                    class Egress(Entity):
                        """
                        Configure egress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of  		 :py:class:`FlowMonitorName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress, self).__init__()

                            self.yang_name = "egress"
                            self.yang_parent_name = "flow-monitor-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("flow-monitor-name", ("flow_monitor_name", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress.FlowMonitorName))])
                            self._leafs = OrderedDict()

                            self.flow_monitor_name = YList(self)
                            self._segment_path = lambda: "egress"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress, [], name, value)


                        class FlowMonitorName(Entity):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  (key)
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress.FlowMonitorName, self).__init__()

                                self.yang_name = "flow-monitor-name"
                                self.yang_parent_name = "egress"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['monitor_map_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('monitor_map_name', (YLeaf(YType.str, 'monitor-map-name'), ['str'])),
                                    ('sampler_map_name', (YLeaf(YType.str, 'sampler-map-name'), ['str'])),
                                ])
                                self.monitor_map_name = None
                                self.sampler_map_name = None
                                self._segment_path = lambda: "flow-monitor-name" + "[monitor-map-name='" + str(self.monitor_map_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv6.FlowMonitorMap.Egress.FlowMonitorName, ['monitor_map_name', 'sampler_map_name'], name, value)






            class Ipv4(Entity):
                """
                Configure IPv4 netflow
                
                .. attribute:: flow_monitor_map
                
                	Configure a flow monitor map
                	**type**\:  :py:class:`FlowMonitorMap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap>`
                
                

                """

                _prefix = 'traffmon-netflow-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4, self).__init__()

                    self.yang_name = "ipv4"
                    self.yang_parent_name = "net-flow"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("flow-monitor-map", ("flow_monitor_map", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap))])
                    self._leafs = OrderedDict()

                    self.flow_monitor_map = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap()
                    self.flow_monitor_map.parent = self
                    self._children_name_map["flow_monitor_map"] = "flow-monitor-map"
                    self._segment_path = lambda: "ipv4"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4, [], name, value)


                class FlowMonitorMap(Entity):
                    """
                    Configure a flow monitor map
                    
                    .. attribute:: ingress
                    
                    	Configure ingress monitoring direction
                    	**type**\:  :py:class:`Ingress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress>`
                    
                    .. attribute:: egress
                    
                    	Configure egress monitoring direction
                    	**type**\:  :py:class:`Egress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress>`
                    
                    

                    """

                    _prefix = 'traffmon-netflow-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap, self).__init__()

                        self.yang_name = "flow-monitor-map"
                        self.yang_parent_name = "ipv4"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ingress", ("ingress", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress)), ("egress", ("egress", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress))])
                        self._leafs = OrderedDict()

                        self.ingress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress()
                        self.ingress.parent = self
                        self._children_name_map["ingress"] = "ingress"

                        self.egress = InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress()
                        self.egress.parent = self
                        self._children_name_map["egress"] = "egress"
                        self._segment_path = lambda: "flow-monitor-map"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap, [], name, value)


                    class Ingress(Entity):
                        """
                        Configure ingress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of  		 :py:class:`FlowMonitorName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress, self).__init__()

                            self.yang_name = "ingress"
                            self.yang_parent_name = "flow-monitor-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("flow-monitor-name", ("flow_monitor_name", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress.FlowMonitorName))])
                            self._leafs = OrderedDict()

                            self.flow_monitor_name = YList(self)
                            self._segment_path = lambda: "ingress"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress, [], name, value)


                        class FlowMonitorName(Entity):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  (key)
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress.FlowMonitorName, self).__init__()

                                self.yang_name = "flow-monitor-name"
                                self.yang_parent_name = "ingress"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['monitor_map_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('monitor_map_name', (YLeaf(YType.str, 'monitor-map-name'), ['str'])),
                                    ('sampler_map_name', (YLeaf(YType.str, 'sampler-map-name'), ['str'])),
                                ])
                                self.monitor_map_name = None
                                self.sampler_map_name = None
                                self._segment_path = lambda: "flow-monitor-name" + "[monitor-map-name='" + str(self.monitor_map_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Ingress.FlowMonitorName, ['monitor_map_name', 'sampler_map_name'], name, value)




                    class Egress(Entity):
                        """
                        Configure egress monitoring direction
                        
                        .. attribute:: flow_monitor_name
                        
                        	Specify a sampler for a flow monitor
                        	**type**\: list of  		 :py:class:`FlowMonitorName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress.FlowMonitorName>`
                        
                        

                        """

                        _prefix = 'traffmon-netflow-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress, self).__init__()

                            self.yang_name = "egress"
                            self.yang_parent_name = "flow-monitor-map"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("flow-monitor-name", ("flow_monitor_name", InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress.FlowMonitorName))])
                            self._leafs = OrderedDict()

                            self.flow_monitor_name = YList(self)
                            self._segment_path = lambda: "egress"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress, [], name, value)


                        class FlowMonitorName(Entity):
                            """
                            Specify a sampler for a flow monitor
                            
                            .. attribute:: monitor_map_name  (key)
                            
                            	Flow monitor map name
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: sampler_map_name
                            
                            	Sampler map name
                            	**type**\: str
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'traffmon-netflow-cfg'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress.FlowMonitorName, self).__init__()

                                self.yang_name = "flow-monitor-name"
                                self.yang_parent_name = "egress"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['monitor_map_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('monitor_map_name', (YLeaf(YType.str, 'monitor-map-name'), ['str'])),
                                    ('sampler_map_name', (YLeaf(YType.str, 'sampler-map-name'), ['str'])),
                                ])
                                self.monitor_map_name = None
                                self.sampler_map_name = None
                                self._segment_path = lambda: "flow-monitor-name" + "[monitor-map-name='" + str(self.monitor_map_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.NetFlow.Ipv4.FlowMonitorMap.Egress.FlowMonitorName, ['monitor_map_name', 'sampler_map_name'], name, value)







        class Bfd(Entity):
            """
            BFD over bundle members configuration
            
            .. attribute:: address_family
            
            	Configuration of BFDoBM for all address families
            	**type**\:  :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily>`
            
            .. attribute:: mode
            
            	Configuration of BFDoBM mode [cisco\|ietf]
            	**type**\:  :py:class:`BfdMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.BfdMode>`
            
            	**default value**\: no-cfg
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Bfd, self).__init__()

                self.yang_name = "bfd"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("address-family", ("address_family", InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily))])
                self._leafs = OrderedDict([
                    ('mode', (YLeaf(YType.enumeration, 'mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'BfdMode', '')])),
                ])
                self.mode = None

                self.address_family = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily()
                self.address_family.parent = self
                self._children_name_map["address_family"] = "address-family"
                self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-cfg:bfd"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bfd, ['mode'], name, value)


            class AddressFamily(Entity):
                """
                Configuration of BFDoBM for all address
                families
                
                .. attribute:: ipv6
                
                	Configuration of BFDoBM for IPv6 address family
                	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6>`
                
                .. attribute:: ipv4
                
                	Configuration of BFDoBM for IPv4 address family
                	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4>`
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily, self).__init__()

                    self.yang_name = "address-family"
                    self.yang_parent_name = "bfd"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ipv6", ("ipv6", InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6)), ("ipv4", ("ipv4", InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4))])
                    self._leafs = OrderedDict()

                    self.ipv6 = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6()
                    self.ipv6.parent = self
                    self._children_name_map["ipv6"] = "ipv6"

                    self.ipv4 = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4()
                    self.ipv4.parent = self
                    self._children_name_map["ipv4"] = "ipv4"
                    self._segment_path = lambda: "address-family"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily, [], name, value)


                class Ipv6(Entity):
                    """
                    Configuration of BFDoBM for IPv6 address
                    family
                    
                    .. attribute:: ipv6_timers
                    
                    	Timers associated with BFDoBM
                    	**type**\:  :py:class:`Ipv6Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6.Ipv6Timers>`
                    
                    .. attribute:: ipv6_destination_address
                    
                    	IPv6 Destination address for BFD sessions created by bundlemgr
                    	**type**\: str
                    
                    .. attribute:: ipv6_detection_multiplier
                    
                    	IPv6 Detection multiplier for BFD sessions created by bundlemgr
                    	**type**\: int
                    
                    	**range:** 2..50
                    
                    .. attribute:: ipv6_fast_detect
                    
                    	Configure to enable BFD over bundle members
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: ipv6_interval
                    
                    	IPV6 Hello interval for BFD sessions created by bundlemgr
                    	**type**\: int
                    
                    	**range:** 3..30000
                    
                    

                    """

                    _prefix = 'bundlemgr-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6, self).__init__()

                        self.yang_name = "ipv6"
                        self.yang_parent_name = "address-family"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ipv6-timers", ("ipv6_timers", InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6.Ipv6Timers))])
                        self._leafs = OrderedDict([
                            ('ipv6_destination_address', (YLeaf(YType.str, 'ipv6-destination-address'), ['str'])),
                            ('ipv6_detection_multiplier', (YLeaf(YType.uint32, 'ipv6-detection-multiplier'), ['int'])),
                            ('ipv6_fast_detect', (YLeaf(YType.empty, 'ipv6-fast-detect'), ['Empty'])),
                            ('ipv6_interval', (YLeaf(YType.uint32, 'ipv6-interval'), ['int'])),
                        ])
                        self.ipv6_destination_address = None
                        self.ipv6_detection_multiplier = None
                        self.ipv6_fast_detect = None
                        self.ipv6_interval = None

                        self.ipv6_timers = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6.Ipv6Timers()
                        self.ipv6_timers.parent = self
                        self._children_name_map["ipv6_timers"] = "ipv6-timers"
                        self._segment_path = lambda: "ipv6"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6, ['ipv6_destination_address', 'ipv6_detection_multiplier', 'ipv6_fast_detect', 'ipv6_interval'], name, value)


                    class Ipv6Timers(Entity):
                        """
                        Timers associated with BFDoBM
                        
                        .. attribute:: ipv6_nbor_unconfig_timer
                        
                        	IPv6 Timer associated with aggressiveness on BFD session peer being unconfigured
                        	**type**\: int
                        
                        	**range:** 60..3600
                        
                        .. attribute:: ipv6_start_timer
                        
                        	IPv6 Timer associated with aggressiveness on BFD session creation
                        	**type**\: int
                        
                        	**range:** 60..3600
                        
                        

                        """

                        _prefix = 'bundlemgr-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6.Ipv6Timers, self).__init__()

                            self.yang_name = "ipv6-timers"
                            self.yang_parent_name = "ipv6"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ipv6_nbor_unconfig_timer', (YLeaf(YType.uint32, 'ipv6-nbor-unconfig-timer'), ['int'])),
                                ('ipv6_start_timer', (YLeaf(YType.uint32, 'ipv6-start-timer'), ['int'])),
                            ])
                            self.ipv6_nbor_unconfig_timer = None
                            self.ipv6_start_timer = None
                            self._segment_path = lambda: "ipv6-timers"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv6.Ipv6Timers, ['ipv6_nbor_unconfig_timer', 'ipv6_start_timer'], name, value)




                class Ipv4(Entity):
                    """
                    Configuration of BFDoBM for IPv4 address
                    family
                    
                    .. attribute:: echo
                    
                    	Container for Echo min\-multiplier
                    	**type**\:  :py:class:`Echo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Echo>`
                    
                    .. attribute:: timers
                    
                    	Timers associated with BFDoBM
                    	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Timers>`
                    
                    .. attribute:: interval
                    
                    	Hello interval for BFD sessions created by bundlemgr
                    	**type**\: int
                    
                    	**range:** 3..30000
                    
                    .. attribute:: detection_multiplier
                    
                    	Detection multiplier for BFD sessions created by bundlemgr
                    	**type**\: int
                    
                    	**range:** 2..50
                    
                    .. attribute:: destination_address
                    
                    	Destination address for BFD sessions created by bundlemgr
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: fast_detect
                    
                    	Configure to enable BFD over bundle members
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    

                    """

                    _prefix = 'bundlemgr-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4, self).__init__()

                        self.yang_name = "ipv4"
                        self.yang_parent_name = "address-family"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("echo", ("echo", InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Echo)), ("timers", ("timers", InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Timers))])
                        self._leafs = OrderedDict([
                            ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                            ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                            ('destination_address', (YLeaf(YType.str, 'destination-address'), ['str'])),
                            ('fast_detect', (YLeaf(YType.empty, 'fast-detect'), ['Empty'])),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.destination_address = None
                        self.fast_detect = None

                        self.echo = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Echo()
                        self.echo.parent = self
                        self._children_name_map["echo"] = "echo"

                        self.timers = InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Timers()
                        self.timers.parent = self
                        self._children_name_map["timers"] = "timers"
                        self._segment_path = lambda: "ipv4"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4, ['interval', 'detection_multiplier', 'destination_address', 'fast_detect'], name, value)


                    class Echo(Entity):
                        """
                        Container for Echo min\-multiplier
                        
                        .. attribute:: min_interval
                        
                        	Configure echo min\-interval for bundle interface
                        	**type**\: int
                        
                        	**range:** 15..2000
                        
                        

                        """

                        _prefix = 'bundlemgr-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Echo, self).__init__()

                            self.yang_name = "echo"
                            self.yang_parent_name = "ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('min_interval', (YLeaf(YType.uint32, 'min-interval'), ['int'])),
                            ])
                            self.min_interval = None
                            self._segment_path = lambda: "echo"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Echo, ['min_interval'], name, value)



                    class Timers(Entity):
                        """
                        Timers associated with BFDoBM
                        
                        .. attribute:: nbor_unconfig_timer
                        
                        	Timer associated with aggressiveness on BFD session peer being unconfigured
                        	**type**\: int
                        
                        	**range:** 60..3600
                        
                        .. attribute:: start_timer
                        
                        	Timer associated with aggressiveness on BFD session creation
                        	**type**\: int
                        
                        	**range:** 60..3600
                        
                        

                        """

                        _prefix = 'bundlemgr-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Timers, self).__init__()

                            self.yang_name = "timers"
                            self.yang_parent_name = "ipv4"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('nbor_unconfig_timer', (YLeaf(YType.uint32, 'nbor-unconfig-timer'), ['int'])),
                                ('start_timer', (YLeaf(YType.uint32, 'start-timer'), ['int'])),
                            ])
                            self.nbor_unconfig_timer = None
                            self.start_timer = None
                            self._segment_path = lambda: "timers"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bfd.AddressFamily.Ipv4.Timers, ['nbor_unconfig_timer', 'start_timer'], name, value)






        class Bundle(Entity):
            """
            Generic per\-bundle configuration
            
            .. attribute:: bundle_load_balancing
            
            	Load\-balance configuration
            	**type**\:  :py:class:`BundleLoadBalancing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing>`
            
            .. attribute:: minimum_active
            
            	Minimum criteria for a bundle to be active
            	**type**\:  :py:class:`MinimumActive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive>`
            
            .. attribute:: maximum_active
            
            	Set a limit on the number of links that can be active
            	**type**\:  :py:class:`MaximumActive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive>`
            
            .. attribute:: lacp_delay
            
            	Set the lacp\-delay timeout for members of this bundle
            	**type**\: int
            
            	**range:** 1000..15000
            
            .. attribute:: lacp_fallback
            
            	Set the lacp\-fallback timeout for this bundle
            	**type**\: int
            
            	**range:** 1..120
            
            	**default value**\: 5
            
            .. attribute:: shutdown
            
            	Deactivate all member links (down to Standby state)
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: wait_while
            
            	Set the wait\-while timeout for members of this bundle
            	**type**\: int
            
            	**range:** 0..2000
            
            	**default value**\: 2000
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Bundle, self).__init__()

                self.yang_name = "bundle"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("bundle-load-balancing", ("bundle_load_balancing", InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing)), ("minimum-active", ("minimum_active", InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive)), ("maximum-active", ("maximum_active", InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive))])
                self._leafs = OrderedDict([
                    ('lacp_delay', (YLeaf(YType.uint32, 'lacp-delay'), ['int'])),
                    ('lacp_fallback', (YLeaf(YType.uint32, 'lacp-fallback'), ['int'])),
                    ('shutdown', (YLeaf(YType.empty, 'shutdown'), ['Empty'])),
                    ('wait_while', (YLeaf(YType.uint32, 'wait-while'), ['int'])),
                ])
                self.lacp_delay = None
                self.lacp_fallback = None
                self.shutdown = None
                self.wait_while = None

                self.bundle_load_balancing = InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing()
                self.bundle_load_balancing.parent = self
                self._children_name_map["bundle_load_balancing"] = "bundle-load-balancing"

                self.minimum_active = InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive()
                self.minimum_active.parent = self
                self._children_name_map["minimum_active"] = "minimum-active"

                self.maximum_active = InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive()
                self.maximum_active.parent = self
                self._children_name_map["maximum_active"] = "maximum-active"
                self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-cfg:bundle"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bundle, ['lacp_delay', 'lacp_fallback', 'shutdown', 'wait_while'], name, value)


            class BundleLoadBalancing(Entity):
                """
                Load\-balance configuration
                
                .. attribute:: hash_function
                
                	Enable loadbalancing on this Bundle / EFP
                	**type**\:  :py:class:`HashFunction <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing.HashFunction>`
                
                	**presence node**\: True
                
                .. attribute:: localize_links
                
                	Set thresholds for forwarding bundle traffic within a rack
                	**type**\: int
                
                	**range:** 1..64
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing, self).__init__()

                    self.yang_name = "bundle-load-balancing"
                    self.yang_parent_name = "bundle"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("hash-function", ("hash_function", InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing.HashFunction))])
                    self._leafs = OrderedDict([
                        ('localize_links', (YLeaf(YType.uint32, 'localize-links'), ['int'])),
                    ])
                    self.localize_links = None

                    self.hash_function = None
                    self._children_name_map["hash_function"] = "hash-function"
                    self._segment_path = lambda: "bundle-load-balancing"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing, ['localize_links'], name, value)


                class HashFunction(Entity):
                    """
                    Enable loadbalancing on this Bundle / EFP
                    
                    .. attribute:: hash_type
                    
                    	The specified hash function to use
                    	**type**\:  :py:class:`BundleLoadBalance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.BundleLoadBalance>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: hash_value
                    
                    	The loadbalance hash value selected. For non\-EFP Value methods, this value must be set to 1
                    	**type**\: int
                    
                    	**range:** 1..64
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'bundlemgr-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing.HashFunction, self).__init__()

                        self.yang_name = "hash-function"
                        self.yang_parent_name = "bundle-load-balancing"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('hash_type', (YLeaf(YType.enumeration, 'hash-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'BundleLoadBalance', '')])),
                            ('hash_value', (YLeaf(YType.uint32, 'hash-value'), ['int'])),
                        ])
                        self.hash_type = None
                        self.hash_value = None
                        self._segment_path = lambda: "hash-function"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bundle.BundleLoadBalancing.HashFunction, ['hash_type', 'hash_value'], name, value)




            class MinimumActive(Entity):
                """
                Minimum criteria for a bundle to be active
                
                .. attribute:: bandwidth
                
                	Bandwidth (in kbps) needed to bring up a bundle
                	**type**\:  :py:class:`Bandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive.Bandwidth>`
                
                	**presence node**\: True
                
                .. attribute:: links
                
                	Number of active links needed to bring up a bundle
                	**type**\: int
                
                	**range:** 1..64
                
                	**default value**\: 1
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive, self).__init__()

                    self.yang_name = "minimum-active"
                    self.yang_parent_name = "bundle"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("bandwidth", ("bandwidth", InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive.Bandwidth))])
                    self._leafs = OrderedDict([
                        ('links', (YLeaf(YType.uint32, 'links'), ['int'])),
                    ])
                    self.links = None

                    self.bandwidth = None
                    self._children_name_map["bandwidth"] = "bandwidth"
                    self._segment_path = lambda: "minimum-active"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive, ['links'], name, value)


                class Bandwidth(Entity):
                    """
                    Bandwidth (in kbps) needed to bring up a
                    bundle
                    
                    .. attribute:: min_bandwidth_range
                    
                    	Minimum Bandwidth Range
                    	**type**\:  :py:class:`BundleMinimumBandwidthRange <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.BundleMinimumBandwidthRange>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: bandwidth
                    
                    	Bandwidth
                    	**type**\: int
                    
                    	**range:** 1..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'bundlemgr-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive.Bandwidth, self).__init__()

                        self.yang_name = "bandwidth"
                        self.yang_parent_name = "minimum-active"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('min_bandwidth_range', (YLeaf(YType.enumeration, 'min-bandwidth-range'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'BundleMinimumBandwidthRange', '')])),
                            ('bandwidth', (YLeaf(YType.uint32, 'bandwidth'), ['int'])),
                        ])
                        self.min_bandwidth_range = None
                        self.bandwidth = None
                        self._segment_path = lambda: "bandwidth"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bundle.MinimumActive.Bandwidth, ['min_bandwidth_range', 'bandwidth'], name, value)




            class MaximumActive(Entity):
                """
                Set a limit on the number of links that can be
                active
                
                .. attribute:: links
                
                	Maximum number of active links in a bundle
                	**type**\:  :py:class:`Links <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive.Links>`
                
                	**presence node**\: True
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive, self).__init__()

                    self.yang_name = "maximum-active"
                    self.yang_parent_name = "bundle"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("links", ("links", InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive.Links))])
                    self._leafs = OrderedDict()

                    self.links = None
                    self._children_name_map["links"] = "links"
                    self._segment_path = lambda: "maximum-active"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive, [], name, value)


                class Links(Entity):
                    """
                    Maximum number of active links in a bundle
                    
                    .. attribute:: links
                    
                    	Number of active links
                    	**type**\: int
                    
                    	**range:** 1..64
                    
                    	**mandatory**\: True
                    
                    .. attribute:: max_active_links_mode
                    
                    	Maximum active links mode
                    	**type**\:  :py:class:`BundleMaximumActiveLinksMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.BundleMaximumActiveLinksMode>`
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'bundlemgr-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive.Links, self).__init__()

                        self.yang_name = "links"
                        self.yang_parent_name = "maximum-active"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('links', (YLeaf(YType.uint32, 'links'), ['int'])),
                            ('max_active_links_mode', (YLeaf(YType.enumeration, 'max-active-links-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'BundleMaximumActiveLinksMode', '')])),
                        ])
                        self.links = None
                        self.max_active_links_mode = None
                        self._segment_path = lambda: "links"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Bundle.MaximumActive.Links, ['links', 'max_active_links_mode'], name, value)





        class Lacp(Entity):
            """
            Link Aggregation Control Protocol per\-interface
            configuration (for bundle or member)
            
            .. attribute:: cisco_extensions
            
            	Enable bundle Cisco extensions
            	**type**\:  :py:class:`CiscoExtensions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lacp.CiscoExtensions>`
            
            	**presence node**\: True
            
            .. attribute:: timeout
            
            	Set timeout values for LACP\-related timers
            	**type**\:  :py:class:`Timeout <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Lacp.Timeout>`
            
            .. attribute:: system_priority
            
            	System priority for this bundle. Lower value is higher priority
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: period
            
            	Lacp period for the bundle
            	**type**\: union of the below types:
            
            		**type**\:  :py:class:`BundlePeriod <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.BundlePeriod>`
            
            		**type**\: int
            
            			**range:** 1..1000
            
            .. attribute:: collector_max_delay
            
            	Collector Max Delay value to signal to the LACP partner
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: lacp_nonrevertive
            
            	Configure to enable lacp non\-revertive mode
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: mode
            
            	Lacp mode for the bundle
            	**type**\:  :py:class:`BundleMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.BundleMode>`
            
            .. attribute:: fast_switchover
            
            	Configure to enable the fast\-switchover mode
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: suppress_flaps
            
            	Suppress flaps on switchover for the specified period (in ms)
            	**type**\: int
            
            	**range:** 100..65535
            
            .. attribute:: system_mac
            
            	System identifier for this bundle
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            .. attribute:: period_short
            
            	LACP period to request from the partner (LACP standard short period, or rate in milliseconds for use with Cisco\-specific extensions). Default is LACP standard long period (30s)
            	**type**\: union of the below types:
            
            		**type**\:  :py:class:`PeriodShortEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.PeriodShortEnum>`
            
            		**type**\: int
            
            			**range:** 1..1000
            
            	**units**\: millisecond
            
            .. attribute:: churn_logging
            
            	Log churn notifications on the specified system(s)
            	**type**\:  :py:class:`ChurnLogging <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.ChurnLogging>`
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Lacp, self).__init__()

                self.yang_name = "lacp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("cisco-extensions", ("cisco_extensions", InterfaceConfigurations.InterfaceConfiguration.Lacp.CiscoExtensions)), ("timeout", ("timeout", InterfaceConfigurations.InterfaceConfiguration.Lacp.Timeout))])
                self._leafs = OrderedDict([
                    ('system_priority', (YLeaf(YType.uint32, 'system-priority'), ['int'])),
                    ('period', (YLeaf(YType.str, 'period'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'BundlePeriod', ''),'int'])),
                    ('collector_max_delay', (YLeaf(YType.uint32, 'collector-max-delay'), ['int'])),
                    ('lacp_nonrevertive', (YLeaf(YType.empty, 'lacp-nonrevertive'), ['Empty'])),
                    ('mode', (YLeaf(YType.enumeration, 'mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'BundleMode', '')])),
                    ('fast_switchover', (YLeaf(YType.empty, 'fast-switchover'), ['Empty'])),
                    ('suppress_flaps', (YLeaf(YType.uint32, 'suppress-flaps'), ['int'])),
                    ('system_mac', (YLeaf(YType.str, 'system-mac'), ['str'])),
                    ('period_short', (YLeaf(YType.str, 'period-short'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'PeriodShortEnum', ''),'int'])),
                    ('churn_logging', (YLeaf(YType.enumeration, 'churn-logging'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'ChurnLogging', '')])),
                ])
                self.system_priority = None
                self.period = None
                self.collector_max_delay = None
                self.lacp_nonrevertive = None
                self.mode = None
                self.fast_switchover = None
                self.suppress_flaps = None
                self.system_mac = None
                self.period_short = None
                self.churn_logging = None

                self.cisco_extensions = None
                self._children_name_map["cisco_extensions"] = "cisco-extensions"

                self.timeout = InterfaceConfigurations.InterfaceConfiguration.Lacp.Timeout()
                self.timeout.parent = self
                self._children_name_map["timeout"] = "timeout"
                self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-cfg:lacp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Lacp, ['system_priority', 'period', 'collector_max_delay', 'lacp_nonrevertive', 'mode', 'fast_switchover', 'suppress_flaps', 'system_mac', 'period_short', 'churn_logging'], name, value)


            class CiscoExtensions(Entity):
                """
                Enable bundle Cisco extensions
                
                .. attribute:: cisco_ext
                
                	Cisco extensions
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                	**mandatory**\: True
                
                .. attribute:: cisco_ext_type
                
                	Specific Cisco extension to enable / disable
                	**type**\:  :py:class:`BundleCiscoExtTypes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.BundleCiscoExtTypes>`
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Lacp.CiscoExtensions, self).__init__()

                    self.yang_name = "cisco-extensions"
                    self.yang_parent_name = "lacp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('cisco_ext', (YLeaf(YType.empty, 'cisco-ext'), ['Empty'])),
                        ('cisco_ext_type', (YLeaf(YType.enumeration, 'cisco-ext-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'BundleCiscoExtTypes', '')])),
                    ])
                    self.cisco_ext = None
                    self.cisco_ext_type = None
                    self._segment_path = lambda: "cisco-extensions"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Lacp.CiscoExtensions, ['cisco_ext', 'cisco_ext_type'], name, value)



            class Timeout(Entity):
                """
                Set timeout values for LACP\-related timers
                
                .. attribute:: rx_default
                
                	Set the timeout between expired and defaulted states
                	**type**\: int
                
                	**range:** 0..3000
                
                .. attribute:: actor_churn
                
                	The time in milliseconds for which to run the timer
                	**type**\: int
                
                	**range:** 0..120
                
                .. attribute:: partner_churn
                
                	Set the timeout to use before declaring partner churn
                	**type**\: int
                
                	**range:** 0..120
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Lacp.Timeout, self).__init__()

                    self.yang_name = "timeout"
                    self.yang_parent_name = "lacp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rx_default', (YLeaf(YType.uint32, 'rx-default'), ['int'])),
                        ('actor_churn', (YLeaf(YType.uint32, 'actor-churn'), ['int'])),
                        ('partner_churn', (YLeaf(YType.uint32, 'partner-churn'), ['int'])),
                    ])
                    self.rx_default = None
                    self.actor_churn = None
                    self.partner_churn = None
                    self._segment_path = lambda: "timeout"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Lacp.Timeout, ['rx_default', 'actor_churn', 'partner_churn'], name, value)




        class BundleMember(Entity):
            """
            Generic per\-member configuration
            
            .. attribute:: id
            
            	Add the port to an aggregated interface
            	**type**\:  :py:class:`Id <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.BundleMember.Id>`
            
            .. attribute:: port_priority
            
            	Priority for this port. Lower value is higher priority
            	**type**\: int
            
            	**range:** 1..65535
            
            	**default value**\: 32768
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.BundleMember, self).__init__()

                self.yang_name = "bundle-member"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("id", ("id", InterfaceConfigurations.InterfaceConfiguration.BundleMember.Id))])
                self._leafs = OrderedDict([
                    ('port_priority', (YLeaf(YType.uint16, 'port-priority'), ['int'])),
                ])
                self.port_priority = None

                self.id = InterfaceConfigurations.InterfaceConfiguration.BundleMember.Id()
                self.id.parent = self
                self._children_name_map["id"] = "id"
                self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-cfg:bundle-member"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.BundleMember, ['port_priority'], name, value)


            class Id(Entity):
                """
                Add the port to an aggregated interface.
                
                .. attribute:: bundle_id
                
                	Identifier of the bundle to add the port to
                	**type**\: int
                
                	**range:** 1..65535
                
                .. attribute:: port_activity
                
                	Port Activity
                	**type**\:  :py:class:`BundlePortActivity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.BundlePortActivity>`
                
                

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.BundleMember.Id, self).__init__()

                    self.yang_name = "id"
                    self.yang_parent_name = "bundle-member"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_id', (YLeaf(YType.uint32, 'bundle-id'), ['int'])),
                        ('port_activity', (YLeaf(YType.enumeration, 'port-activity'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'BundlePortActivity', '')])),
                    ])
                    self.bundle_id = None
                    self.port_activity = None
                    self._segment_path = lambda: "id"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.BundleMember.Id, ['bundle_id', 'port_activity'], name, value)




        class Mlacp(Entity):
            """
            Multi\-chassis LACP configuration
            
            .. attribute:: maximize
            
            	Set parameters to maximize between the mLACP peers
            	**type**\:  :py:class:`Maximize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Mlacp.Maximize>`
            
            	**presence node**\: True
            
            .. attribute:: port_priority
            
            	The LACP port priority (lower value is higher priority)
            	**type**\: int
            
            	**range:** 1..65535
            
            	**default value**\: 32768
            
            .. attribute:: recovery_delay
            
            	Set the delay before the bundle becomes active after recovery from failure
            	**type**\: int
            
            	**range:** 0..65535
            
            	**default value**\: 300
            
            .. attribute:: switchover_type
            
            	Set the type of mLACP switchover to use for this bundle
            	**type**\:  :py:class:`MlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.MlacpSwitchover>`
            
            .. attribute:: iccp_group
            
            	Specify an ICCP Group in which this bundle should operate
            	**type**\: int
            
            	**range:** 1..4294967295
            
            

            """

            _prefix = 'bundlemgr-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Mlacp, self).__init__()

                self.yang_name = "mlacp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("maximize", ("maximize", InterfaceConfigurations.InterfaceConfiguration.Mlacp.Maximize))])
                self._leafs = OrderedDict([
                    ('port_priority', (YLeaf(YType.uint16, 'port-priority'), ['int'])),
                    ('recovery_delay', (YLeaf(YType.uint32, 'recovery-delay'), ['int'])),
                    ('switchover_type', (YLeaf(YType.enumeration, 'switchover-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'MlacpSwitchover', '')])),
                    ('iccp_group', (YLeaf(YType.uint32, 'iccp-group'), ['int'])),
                ])
                self.port_priority = None
                self.recovery_delay = None
                self.switchover_type = None
                self.iccp_group = None

                self.maximize = None
                self._children_name_map["maximize"] = "maximize"
                self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-cfg:mlacp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Mlacp, ['port_priority', 'recovery_delay', 'switchover_type', 'iccp_group'], name, value)


            class Maximize(Entity):
                """
                Set parameters to maximize between the mLACP
                peers
                
                .. attribute:: maximize_by
                
                	The paramenter which should be maximized
                	**type**\:  :py:class:`MlacpMaximizeParameter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg.MlacpMaximizeParameter>`
                
                	**mandatory**\: True
                
                .. attribute:: link_threshold
                
                	The number of links below which to switch to the peer if it has more links available. Only applicable if maximizing by links. If 0, no threshold is applied
                	**type**\: int
                
                	**range:** 0..64
                
                .. attribute:: bandwidth_threshold
                
                	The bandwidth (in kbps) below which to switch to the peer if it has more bandwidth available . Only applicable if maximizing by bandwidth. If 0, no threshold is applied
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'bundlemgr-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Mlacp.Maximize, self).__init__()

                    self.yang_name = "maximize"
                    self.yang_parent_name = "mlacp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('maximize_by', (YLeaf(YType.enumeration, 'maximize-by'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_cfg', 'MlacpMaximizeParameter', '')])),
                        ('link_threshold', (YLeaf(YType.uint32, 'link-threshold'), ['int'])),
                        ('bandwidth_threshold', (YLeaf(YType.uint32, 'bandwidth-threshold'), ['int'])),
                    ])
                    self.maximize_by = None
                    self.link_threshold = None
                    self.bandwidth_threshold = None
                    self._segment_path = lambda: "maximize"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Mlacp.Maximize, ['maximize_by', 'link_threshold', 'bandwidth_threshold'], name, value)




        class Macsec(Entity):
            """
            MACSec service for an interface
            
            .. attribute:: macsec_service
            
            	macsec\-service configuration on interface
            	**type**\:  :py:class:`MacsecService <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Macsec.MacsecService>`
            
            	**presence node**\: True
            
            .. attribute:: eap
            
            	Enabling MACSec eap Configuration on Interface
            	**type**\:  :py:class:`Eap <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Macsec.Eap>`
            
            .. attribute:: psk_key_chain
            
            	MACSec MKA Configuration on Interface
            	**type**\:  :py:class:`PskKeyChain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Macsec.PskKeyChain>`
            
            	**presence node**\: True
            
            

            """

            _prefix = 'crypto-macsec-mka-if-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Macsec, self).__init__()

                self.yang_name = "macsec"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("macsec-service", ("macsec_service", InterfaceConfigurations.InterfaceConfiguration.Macsec.MacsecService)), ("eap", ("eap", InterfaceConfigurations.InterfaceConfiguration.Macsec.Eap)), ("psk-key-chain", ("psk_key_chain", InterfaceConfigurations.InterfaceConfiguration.Macsec.PskKeyChain))])
                self._leafs = OrderedDict()

                self.macsec_service = None
                self._children_name_map["macsec_service"] = "macsec-service"

                self.eap = InterfaceConfigurations.InterfaceConfiguration.Macsec.Eap()
                self.eap.parent = self
                self._children_name_map["eap"] = "eap"

                self.psk_key_chain = None
                self._children_name_map["psk_key_chain"] = "psk-key-chain"
                self._segment_path = lambda: "Cisco-IOS-XR-crypto-macsec-mka-if-cfg:macsec"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Macsec, [], name, value)


            class MacsecService(Entity):
                """
                macsec\-service configuration on interface
                
                .. attribute:: decrypt_port
                
                	macsec service decryption port
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                
                	**mandatory**\: True
                
                .. attribute:: key_chain
                
                	name of keychain
                	**type**\: str
                
                	**length:** 1..32
                
                	**mandatory**\: True
                
                .. attribute:: policy
                
                	name of policy
                	**type**\: str
                
                	**length:** 1..16
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'crypto-macsec-mka-if-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Macsec.MacsecService, self).__init__()

                    self.yang_name = "macsec-service"
                    self.yang_parent_name = "macsec"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('decrypt_port', (YLeaf(YType.str, 'decrypt-port'), ['str'])),
                        ('key_chain', (YLeaf(YType.str, 'key-chain'), ['str'])),
                        ('policy', (YLeaf(YType.str, 'policy'), ['str'])),
                    ])
                    self.decrypt_port = None
                    self.key_chain = None
                    self.policy = None
                    self._segment_path = lambda: "macsec-service"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Macsec.MacsecService, ['decrypt_port', 'key_chain', 'policy'], name, value)



            class Eap(Entity):
                """
                Enabling MACSec eap Configuration on Interface
                
                .. attribute:: eap_config
                
                	Eap config
                	**type**\: str
                
                	**pattern:** (eap)
                
                .. attribute:: policy_name
                
                	Name of Policy
                	**type**\: str
                
                	**length:** 1..16
                
                

                """

                _prefix = 'crypto-macsec-mka-if-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Macsec.Eap, self).__init__()

                    self.yang_name = "eap"
                    self.yang_parent_name = "macsec"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('eap_config', (YLeaf(YType.str, 'eap-config'), ['str'])),
                        ('policy_name', (YLeaf(YType.str, 'policy-name'), ['str'])),
                    ])
                    self.eap_config = None
                    self.policy_name = None
                    self._segment_path = lambda: "eap"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Macsec.Eap, ['eap_config', 'policy_name'], name, value)



            class PskKeyChain(Entity):
                """
                MACSec MKA Configuration on Interface
                
                .. attribute:: key_chain_name
                
                	Name of KeyChainName
                	**type**\: str
                
                	**length:** 1..32
                
                	**mandatory**\: True
                
                .. attribute:: policy_name
                
                	Name of Policy
                	**type**\: str
                
                	**length:** 1..16
                
                .. attribute:: fallback_key_chain
                
                	name of fallback keychain
                	**type**\: str
                
                	**length:** 1..32
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'crypto-macsec-mka-if-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Macsec.PskKeyChain, self).__init__()

                    self.yang_name = "psk-key-chain"
                    self.yang_parent_name = "macsec"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('key_chain_name', (YLeaf(YType.str, 'key-chain-name'), ['str'])),
                        ('policy_name', (YLeaf(YType.str, 'policy-name'), ['str'])),
                        ('fallback_key_chain', (YLeaf(YType.str, 'fallback-key-chain'), ['str'])),
                    ])
                    self.key_chain_name = None
                    self.policy_name = None
                    self.fallback_key_chain = None
                    self._segment_path = lambda: "psk-key-chain"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Macsec.PskKeyChain, ['key_chain_name', 'policy_name', 'fallback_key_chain'], name, value)




        class Ipv6Neighbor(Entity):
            """
            IPv6 interface neighbor or neighbor discovery
            configuration
            
            .. attribute:: raspecific_route_s
            
            	IPv6 Router Advertisement (RA) Specific Route
            	**type**\:  :py:class:`RaspecificRouteS <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS>`
            
            .. attribute:: radns_searches
            
            	IPv6 Router Advertisement (RA) DNS Search List
            	**type**\:  :py:class:`RadnsSearches <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches>`
            
            .. attribute:: radns_servers
            
            	IPv6 Router Advertisement (RA) DNS Servre
            	**type**\:  :py:class:`RadnsServers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers>`
            
            .. attribute:: ra_interval
            
            	Set IPv6 Router Advertisement (RA) interval in seconds
            	**type**\:  :py:class:`RaInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaInterval>`
            
            	**presence node**\: True
            
            .. attribute:: ipv6_prefixes
            
            	Prefixes 
            	**type**\:  :py:class:`Ipv6Prefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes>`
            
            .. attribute:: reachable_time
            
            	Set advertised reachability time in milliseconds
            	**type**\: int
            
            	**range:** 0..3600000
            
            	**units**\: millisecond
            
            .. attribute:: ra_unspecify_hoplimit
            
            	Unspecify IPv6 Router Advertisement (RA) hop\-limit
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: dad_attempts
            
            	Set IPv6 duplicate address detection transmits
            	**type**\: int
            
            	**range:** 0..600
            
            .. attribute:: srp_multicast_encapsulation
            
            	Set SRP multicast prefer encapsulation
            	**type**\:  :py:class:`Ipv6srpEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6srpEncapsulation>`
            
            .. attribute:: ns_interval
            
            	Set advertised NS retransmission interval in milliseconds
            	**type**\: int
            
            	**range:** 1000..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: cache_limit
            
            	Set the cache limit for neighbor entries
            	**type**\: int
            
            	**range:** 0..128000
            
            .. attribute:: redirect
            
            	Enable sending of ICMP Redirect messages
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: srp_unicast_encapsulation
            
            	Set SRP unicast prefer encapsulation
            	**type**\:  :py:class:`Ipv6srpEncapsulation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6srpEncapsulation>`
            
            .. attribute:: ramtu_suppress
            
            	Enable suppress MTU in IPv6 router advertisement
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: managed_config
            
            	Host to use stateful protocol for address configuration
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: ra_unicast
            
            	Enable unicast IPv6 router advertisement
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: ra_lifetime
            
            	Set IPv6 Router Advertisement (RA) lifetime in seconds
            	**type**\: int
            
            	**range:** 0..9000
            
            	**units**\: second
            
            .. attribute:: other_config
            
            	Host to use stateful protocol for non\-address configuration
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: ra_suppress
            
            	Enable suppress IPv6 router advertisement
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: router_preference
            
            	RA Router Preference
            	**type**\:  :py:class:`Ipv6NdRouterPref <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6NdRouterPref>`
            
            

            """

            _prefix = 'ipv6-nd-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor, self).__init__()

                self.yang_name = "ipv6-neighbor"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("raspecific-route-s", ("raspecific_route_s", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS)), ("radns-searches", ("radns_searches", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches)), ("radns-servers", ("radns_servers", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers)), ("ra-interval", ("ra_interval", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaInterval)), ("ipv6-prefixes", ("ipv6_prefixes", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes))])
                self._leafs = OrderedDict([
                    ('reachable_time', (YLeaf(YType.uint32, 'reachable-time'), ['int'])),
                    ('ra_unspecify_hoplimit', (YLeaf(YType.empty, 'ra-unspecify-hoplimit'), ['Empty'])),
                    ('dad_attempts', (YLeaf(YType.uint32, 'dad-attempts'), ['int'])),
                    ('srp_multicast_encapsulation', (YLeaf(YType.enumeration, 'srp-multicast-encapsulation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg', 'Ipv6srpEncapsulation', '')])),
                    ('ns_interval', (YLeaf(YType.uint32, 'ns-interval'), ['int'])),
                    ('cache_limit', (YLeaf(YType.uint32, 'cache-limit'), ['int'])),
                    ('redirect', (YLeaf(YType.empty, 'redirect'), ['Empty'])),
                    ('srp_unicast_encapsulation', (YLeaf(YType.enumeration, 'srp-unicast-encapsulation'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg', 'Ipv6srpEncapsulation', '')])),
                    ('ramtu_suppress', (YLeaf(YType.empty, 'ramtu-suppress'), ['Empty'])),
                    ('managed_config', (YLeaf(YType.empty, 'managed-config'), ['Empty'])),
                    ('ra_unicast', (YLeaf(YType.empty, 'ra-unicast'), ['Empty'])),
                    ('ra_lifetime', (YLeaf(YType.uint32, 'ra-lifetime'), ['int'])),
                    ('other_config', (YLeaf(YType.empty, 'other-config'), ['Empty'])),
                    ('ra_suppress', (YLeaf(YType.empty, 'ra-suppress'), ['Empty'])),
                    ('router_preference', (YLeaf(YType.enumeration, 'router-preference'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg', 'Ipv6NdRouterPref', '')])),
                ])
                self.reachable_time = None
                self.ra_unspecify_hoplimit = None
                self.dad_attempts = None
                self.srp_multicast_encapsulation = None
                self.ns_interval = None
                self.cache_limit = None
                self.redirect = None
                self.srp_unicast_encapsulation = None
                self.ramtu_suppress = None
                self.managed_config = None
                self.ra_unicast = None
                self.ra_lifetime = None
                self.other_config = None
                self.ra_suppress = None
                self.router_preference = None

                self.raspecific_route_s = InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS()
                self.raspecific_route_s.parent = self
                self._children_name_map["raspecific_route_s"] = "raspecific-route-s"

                self.radns_searches = InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches()
                self.radns_searches.parent = self
                self._children_name_map["radns_searches"] = "radns-searches"

                self.radns_servers = InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers()
                self.radns_servers.parent = self
                self._children_name_map["radns_servers"] = "radns-servers"

                self.ra_interval = None
                self._children_name_map["ra_interval"] = "ra-interval"

                self.ipv6_prefixes = InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes()
                self.ipv6_prefixes.parent = self
                self._children_name_map["ipv6_prefixes"] = "ipv6-prefixes"
                self._segment_path = lambda: "Cisco-IOS-XR-ipv6-nd-cfg:ipv6-neighbor"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor, ['reachable_time', 'ra_unspecify_hoplimit', 'dad_attempts', 'srp_multicast_encapsulation', 'ns_interval', 'cache_limit', 'redirect', 'srp_unicast_encapsulation', 'ramtu_suppress', 'managed_config', 'ra_unicast', 'ra_lifetime', 'other_config', 'ra_suppress', 'router_preference'], name, value)


            class RaspecificRouteS(Entity):
                """
                IPv6 Router Advertisement (RA) Specific Route
                
                .. attribute:: raspecific_route
                
                	IPv6 Router Advertisement (RA) Specific Route
                	**type**\: list of  		 :py:class:`RaspecificRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS.RaspecificRoute>`
                
                

                """

                _prefix = 'ipv6-nd-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS, self).__init__()

                    self.yang_name = "raspecific-route-s"
                    self.yang_parent_name = "ipv6-neighbor"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("raspecific-route", ("raspecific_route", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS.RaspecificRoute))])
                    self._leafs = OrderedDict()

                    self.raspecific_route = YList(self)
                    self._segment_path = lambda: "raspecific-route-s"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS, [], name, value)


                class RaspecificRoute(Entity):
                    """
                    IPv6 Router Advertisement (RA) Specific Route
                    
                    .. attribute:: specific_route  (key)
                    
                    	IPv6 Address
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: prefix_length
                    
                    	Prefix mask length
                    	**type**\: int
                    
                    	**range:** 0..128
                    
                    .. attribute:: lifetime
                    
                    	Lifetime (seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: preference
                    
                    	Preference
                    	**type**\:  :py:class:`Ipv6NdRouterPref <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6NdRouterPref>`
                    
                    

                    """

                    _prefix = 'ipv6-nd-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS.RaspecificRoute, self).__init__()

                        self.yang_name = "raspecific-route"
                        self.yang_parent_name = "raspecific-route-s"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['specific_route']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('specific_route', (YLeaf(YType.str, 'specific-route'), ['str'])),
                            ('prefix_length', (YLeaf(YType.uint8, 'prefix-length'), ['int'])),
                            ('lifetime', (YLeaf(YType.uint32, 'lifetime'), ['int'])),
                            ('preference', (YLeaf(YType.enumeration, 'preference'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg', 'Ipv6NdRouterPref', '')])),
                        ])
                        self.specific_route = None
                        self.prefix_length = None
                        self.lifetime = None
                        self.preference = None
                        self._segment_path = lambda: "raspecific-route" + "[specific-route='" + str(self.specific_route) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaspecificRouteS.RaspecificRoute, ['specific_route', 'prefix_length', 'lifetime', 'preference'], name, value)




            class RadnsSearches(Entity):
                """
                IPv6 Router Advertisement (RA) DNS Search List
                
                .. attribute:: radns_search
                
                	IPv6 Router Advertisement (RA) DNS Search List
                	**type**\: list of  		 :py:class:`RadnsSearch <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches.RadnsSearch>`
                
                

                """

                _prefix = 'ipv6-nd-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches, self).__init__()

                    self.yang_name = "radns-searches"
                    self.yang_parent_name = "ipv6-neighbor"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("radns-search", ("radns_search", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches.RadnsSearch))])
                    self._leafs = OrderedDict()

                    self.radns_search = YList(self)
                    self._segment_path = lambda: "radns-searches"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches, [], name, value)


                class RadnsSearch(Entity):
                    """
                    IPv6 Router Advertisement (RA) DNS Search List
                    
                    .. attribute:: dns_search_list  (key)
                    
                    	Search List
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: lifetime
                    
                    	Lifetime value in seconds
                    	**type**\: int
                    
                    	**range:** 4..3600
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'ipv6-nd-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches.RadnsSearch, self).__init__()

                        self.yang_name = "radns-search"
                        self.yang_parent_name = "radns-searches"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['dns_search_list']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('dns_search_list', (YLeaf(YType.str, 'dns-search-list'), ['str'])),
                            ('lifetime', (YLeaf(YType.uint32, 'lifetime'), ['int'])),
                        ])
                        self.dns_search_list = None
                        self.lifetime = None
                        self._segment_path = lambda: "radns-search" + "[dns-search-list='" + str(self.dns_search_list) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsSearches.RadnsSearch, ['dns_search_list', 'lifetime'], name, value)




            class RadnsServers(Entity):
                """
                IPv6 Router Advertisement (RA) DNS Servre
                
                .. attribute:: radns_server
                
                	IPv6 Router Advertisement (RA) DNS Servre
                	**type**\: list of  		 :py:class:`RadnsServer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers.RadnsServer>`
                
                

                """

                _prefix = 'ipv6-nd-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers, self).__init__()

                    self.yang_name = "radns-servers"
                    self.yang_parent_name = "ipv6-neighbor"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("radns-server", ("radns_server", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers.RadnsServer))])
                    self._leafs = OrderedDict()

                    self.radns_server = YList(self)
                    self._segment_path = lambda: "radns-servers"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers, [], name, value)


                class RadnsServer(Entity):
                    """
                    IPv6 Router Advertisement (RA) DNS Servre
                    
                    .. attribute:: dns_server  (key)
                    
                    	IPv6 Address
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: lifetime
                    
                    	Lifetime value in seconds
                    	**type**\: int
                    
                    	**range:** 4..3600
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'ipv6-nd-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers.RadnsServer, self).__init__()

                        self.yang_name = "radns-server"
                        self.yang_parent_name = "radns-servers"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['dns_server']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('dns_server', (YLeaf(YType.str, 'dns-server'), ['str'])),
                            ('lifetime', (YLeaf(YType.uint32, 'lifetime'), ['int'])),
                        ])
                        self.dns_server = None
                        self.lifetime = None
                        self._segment_path = lambda: "radns-server" + "[dns-server='" + str(self.dns_server) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RadnsServers.RadnsServer, ['dns_server', 'lifetime'], name, value)




            class RaInterval(Entity):
                """
                Set IPv6 Router Advertisement (RA) interval in
                seconds
                
                .. attribute:: maximum
                
                	Maximum RA interval in seconds
                	**type**\: int
                
                	**range:** 4..1800
                
                	**mandatory**\: True
                
                .. attribute:: minimum
                
                	Minimum RA interval in seconds. Must be less than 0.75 \* maximum interval
                	**type**\: int
                
                	**range:** 3..1800
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv6-nd-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaInterval, self).__init__()

                    self.yang_name = "ra-interval"
                    self.yang_parent_name = "ipv6-neighbor"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('maximum', (YLeaf(YType.uint32, 'maximum'), ['int'])),
                        ('minimum', (YLeaf(YType.uint32, 'minimum'), ['int'])),
                    ])
                    self.maximum = None
                    self.minimum = None
                    self._segment_path = lambda: "ra-interval"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.RaInterval, ['maximum', 'minimum'], name, value)



            class Ipv6Prefixes(Entity):
                """
                Prefixes 
                
                .. attribute:: ipv6_prefix
                
                	Configure prefix with paramemters
                	**type**\: list of  		 :py:class:`Ipv6Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes.Ipv6Prefix>`
                
                

                """

                _prefix = 'ipv6-nd-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes, self).__init__()

                    self.yang_name = "ipv6-prefixes"
                    self.yang_parent_name = "ipv6-neighbor"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("ipv6-prefix", ("ipv6_prefix", InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes.Ipv6Prefix))])
                    self._leafs = OrderedDict()

                    self.ipv6_prefix = YList(self)
                    self._segment_path = lambda: "ipv6-prefixes"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes, [], name, value)


                class Ipv6Prefix(Entity):
                    """
                    Configure prefix with paramemters
                    
                    .. attribute:: prefix  (key)
                    
                    	IPv6 prefix
                    	**type**\: str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: prefix_zone
                    
                    	Prefix zone
                    	**type**\: str
                    
                    	**length:** 1..9
                    
                    .. attribute:: prefix_length
                    
                    	Prefix mask length
                    	**type**\: int
                    
                    	**range:** 0..128
                    
                    	**mandatory**\: True
                    
                    .. attribute:: valid_lifetime
                    
                    	Valid Lifetime (seconds)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: preferred_lifetime
                    
                    	Preferred Lifetime (seconds) must be <= Valid Lifetime
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: off_link
                    
                    	If set, prefix will not be used for onlink determination
                    	**type**\: bool
                    
                    .. attribute:: no_auto_config
                    
                    	If set, prefix will not be used for auto configuration
                    	**type**\: bool
                    
                    .. attribute:: no_advertize
                    
                    	If set, prefix will not be advertized
                    	**type**\: bool
                    
                    .. attribute:: expiry_month
                    
                    	Month to expire valid lifetime
                    	**type**\:  :py:class:`Ipv6ndMonth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6ndMonth>`
                    
                    .. attribute:: expiry_date
                    
                    	Date to expire valid lifetime
                    	**type**\: int
                    
                    	**range:** 1..31
                    
                    .. attribute:: expiry_year
                    
                    	Year to expire valid lifetime
                    	**type**\: int
                    
                    	**range:** 2003..2035
                    
                    .. attribute:: expiry_hour
                    
                    	Hour to expire valid lifetime
                    	**type**\: int
                    
                    	**range:** 0..23
                    
                    .. attribute:: expiry_minute
                    
                    	Minute to expire valid lifetime
                    	**type**\: int
                    
                    	**range:** 0..59
                    
                    .. attribute:: pref_expiry_month
                    
                    	Month to expire preferred lifetime
                    	**type**\:  :py:class:`Ipv6ndMonth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg.Ipv6ndMonth>`
                    
                    .. attribute:: pref_expiry_date
                    
                    	Date to expire preferred lifetime
                    	**type**\: int
                    
                    	**range:** 1..31
                    
                    .. attribute:: pref_expiry_year
                    
                    	Year to expire preferred lifetime
                    	**type**\: int
                    
                    	**range:** 2003..2035
                    
                    .. attribute:: pref_expiry_hour
                    
                    	Hour to expire preferred lifetime
                    	**type**\: int
                    
                    	**range:** 0..23
                    
                    .. attribute:: pref_expiry_minute
                    
                    	Minute to expire preferred lifetime
                    	**type**\: int
                    
                    	**range:** 0..59
                    
                    

                    """

                    _prefix = 'ipv6-nd-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes.Ipv6Prefix, self).__init__()

                        self.yang_name = "ipv6-prefix"
                        self.yang_parent_name = "ipv6-prefixes"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['prefix']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('prefix', (YLeaf(YType.str, 'prefix'), ['str'])),
                            ('prefix_zone', (YLeaf(YType.str, 'prefix-zone'), ['str'])),
                            ('prefix_length', (YLeaf(YType.uint8, 'prefix-length'), ['int'])),
                            ('valid_lifetime', (YLeaf(YType.uint32, 'valid-lifetime'), ['int'])),
                            ('preferred_lifetime', (YLeaf(YType.uint32, 'preferred-lifetime'), ['int'])),
                            ('off_link', (YLeaf(YType.boolean, 'off-link'), ['bool'])),
                            ('no_auto_config', (YLeaf(YType.boolean, 'no-auto-config'), ['bool'])),
                            ('no_advertize', (YLeaf(YType.boolean, 'no-advertize'), ['bool'])),
                            ('expiry_month', (YLeaf(YType.enumeration, 'expiry-month'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg', 'Ipv6ndMonth', '')])),
                            ('expiry_date', (YLeaf(YType.uint32, 'expiry-date'), ['int'])),
                            ('expiry_year', (YLeaf(YType.uint32, 'expiry-year'), ['int'])),
                            ('expiry_hour', (YLeaf(YType.uint32, 'expiry-hour'), ['int'])),
                            ('expiry_minute', (YLeaf(YType.uint32, 'expiry-minute'), ['int'])),
                            ('pref_expiry_month', (YLeaf(YType.enumeration, 'pref-expiry-month'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_nd_cfg', 'Ipv6ndMonth', '')])),
                            ('pref_expiry_date', (YLeaf(YType.uint32, 'pref-expiry-date'), ['int'])),
                            ('pref_expiry_year', (YLeaf(YType.uint32, 'pref-expiry-year'), ['int'])),
                            ('pref_expiry_hour', (YLeaf(YType.uint32, 'pref-expiry-hour'), ['int'])),
                            ('pref_expiry_minute', (YLeaf(YType.uint32, 'pref-expiry-minute'), ['int'])),
                        ])
                        self.prefix = None
                        self.prefix_zone = None
                        self.prefix_length = None
                        self.valid_lifetime = None
                        self.preferred_lifetime = None
                        self.off_link = None
                        self.no_auto_config = None
                        self.no_advertize = None
                        self.expiry_month = None
                        self.expiry_date = None
                        self.expiry_year = None
                        self.expiry_hour = None
                        self.expiry_minute = None
                        self.pref_expiry_month = None
                        self.pref_expiry_date = None
                        self.pref_expiry_year = None
                        self.pref_expiry_hour = None
                        self.pref_expiry_minute = None
                        self._segment_path = lambda: "ipv6-prefix" + "[prefix='" + str(self.prefix) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv6Neighbor.Ipv6Prefixes.Ipv6Prefix, ['prefix', 'prefix_zone', 'prefix_length', 'valid_lifetime', 'preferred_lifetime', 'off_link', 'no_auto_config', 'no_advertize', 'expiry_month', 'expiry_date', 'expiry_year', 'expiry_hour', 'expiry_minute', 'pref_expiry_month', 'pref_expiry_date', 'pref_expiry_year', 'pref_expiry_hour', 'pref_expiry_minute'], name, value)





        class ServicePolicies(Entity):
            """
            Interface control subscriber policy
            configuration
            
            .. attribute:: service_policy
            
            	Service policy to be applied to access interface  for subscribers
            	**type**\: list of  		 :py:class:`ServicePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.ServicePolicies.ServicePolicy>`
            
            

            """

            _prefix = 'iedge4710-cfg'
            _revision = '2017-09-07'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.ServicePolicies, self).__init__()

                self.yang_name = "service-policies"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("service-policy", ("service_policy", InterfaceConfigurations.InterfaceConfiguration.ServicePolicies.ServicePolicy))])
                self._leafs = OrderedDict()

                self.service_policy = YList(self)
                self._segment_path = lambda: "Cisco-IOS-XR-iedge4710-cfg:service-policies"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.ServicePolicies, [], name, value)


            class ServicePolicy(Entity):
                """
                Service policy to be applied to access
                interface  for subscribers
                
                .. attribute:: service_policy_name  (key)
                
                	Name of policy\-map
                	**type**\: str
                
                	**length:** 1..63
                
                

                """

                _prefix = 'iedge4710-cfg'
                _revision = '2017-09-07'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.ServicePolicies.ServicePolicy, self).__init__()

                    self.yang_name = "service-policy"
                    self.yang_parent_name = "service-policies"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['service_policy_name']
                    self._child_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('service_policy_name', (YLeaf(YType.str, 'service-policy-name'), ['str'])),
                    ])
                    self.service_policy_name = None
                    self._segment_path = lambda: "service-policy" + "[service-policy-name='" + str(self.service_policy_name) + "']"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.ServicePolicies.ServicePolicy, ['service_policy_name'], name, value)




        class Portmode(Entity):
            """
            Configure through port\-mode
            
            .. attribute:: speed_sel
            
            	Select speed
            	**type**\:  :py:class:`SpeedSel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ncs5500_coherent_portmode_cfg.SpeedSel>`
            
            .. attribute:: fec_sel
            
            	Select Fec
            	**type**\:  :py:class:`FecSel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ncs5500_coherent_portmode_cfg.FecSel>`
            
            .. attribute:: diff_sel
            
            	Select Diff
            	**type**\:  :py:class:`DiffSel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ncs5500_coherent_portmode_cfg.DiffSel>`
            
            .. attribute:: mod_sel
            
            	Select modulation
            	**type**\:  :py:class:`ModSel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ncs5500_coherent_portmode_cfg.ModSel>`
            
            

            """

            _prefix = 'ncs5500-coherent-portmode-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Portmode, self).__init__()

                self.yang_name = "portmode"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('speed_sel', (YLeaf(YType.enumeration, 'speed-sel'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ncs5500_coherent_portmode_cfg', 'SpeedSel', '')])),
                    ('fec_sel', (YLeaf(YType.enumeration, 'fec-sel'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ncs5500_coherent_portmode_cfg', 'FecSel', '')])),
                    ('diff_sel', (YLeaf(YType.enumeration, 'diff-sel'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ncs5500_coherent_portmode_cfg', 'DiffSel', '')])),
                    ('mod_sel', (YLeaf(YType.enumeration, 'mod-sel'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ncs5500_coherent_portmode_cfg', 'ModSel', '')])),
                ])
                self.speed_sel = None
                self.fec_sel = None
                self.diff_sel = None
                self.mod_sel = None
                self._segment_path = lambda: "Cisco-IOS-XR-ncs5500-coherent-portmode-cfg:portmode"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Portmode, ['speed_sel', 'fec_sel', 'diff_sel', 'mod_sel'], name, value)



        class CiscoIOSXRPppMaIpcpCfgPpp(Entity):
            """
            Interface PPP configuration data
            
            .. attribute:: ipcp
            
            	PPP IPCP configuration data
            	**type**\:  :py:class:`Ipcp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp>`
            
            

            """

            _prefix = 'ppp-ma-ipcp-cfg'
            _revision = '2015-11-09'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp, self).__init__()

                self.yang_name = "ppp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("ipcp", ("ipcp", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp))])
                self._leafs = OrderedDict()

                self.ipcp = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp()
                self.ipcp.parent = self
                self._children_name_map["ipcp"] = "ipcp"
                self._segment_path = lambda: "Cisco-IOS-XR-ppp-ma-ipcp-cfg:ppp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp, [], name, value)


            class Ipcp(Entity):
                """
                PPP IPCP configuration data
                
                .. attribute:: peer_address
                
                	IPCP address parameters
                	**type**\:  :py:class:`PeerAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.PeerAddress>`
                
                .. attribute:: dns
                
                	IPCP DNS parameters
                	**type**\:  :py:class:`Dns <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns>`
                
                .. attribute:: neighbor_route_disable
                
                	Disable Neighbor Route installation
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'ppp-ma-ipcp-cfg'
                _revision = '2015-11-09'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp, self).__init__()

                    self.yang_name = "ipcp"
                    self.yang_parent_name = "ppp"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("peer-address", ("peer_address", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.PeerAddress)), ("dns", ("dns", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns))])
                    self._leafs = OrderedDict([
                        ('neighbor_route_disable', (YLeaf(YType.empty, 'neighbor-route-disable'), ['Empty'])),
                    ])
                    self.neighbor_route_disable = None

                    self.peer_address = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.PeerAddress()
                    self.peer_address.parent = self
                    self._children_name_map["peer_address"] = "peer-address"

                    self.dns = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns()
                    self.dns.parent = self
                    self._children_name_map["dns"] = "dns"
                    self._segment_path = lambda: "ipcp"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp, ['neighbor_route_disable'], name, value)


                class PeerAddress(Entity):
                    """
                    IPCP address parameters
                    
                    .. attribute:: default
                    
                    	Specify an IP address to assign to peers through IPCP
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'ppp-ma-ipcp-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.PeerAddress, self).__init__()

                        self.yang_name = "peer-address"
                        self.yang_parent_name = "ipcp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('default', (YLeaf(YType.str, 'default'), ['str'])),
                        ])
                        self.default = None
                        self._segment_path = lambda: "peer-address"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.PeerAddress, ['default'], name, value)



                class Dns(Entity):
                    """
                    IPCP DNS parameters
                    
                    .. attribute:: dns_addresses
                    
                    	Specify DNS address(es) to provide
                    	**type**\:  :py:class:`DnsAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns.DnsAddresses>`
                    
                    

                    """

                    _prefix = 'ppp-ma-ipcp-cfg'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns, self).__init__()

                        self.yang_name = "dns"
                        self.yang_parent_name = "ipcp"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("dns-addresses", ("dns_addresses", InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns.DnsAddresses))])
                        self._leafs = OrderedDict()

                        self.dns_addresses = InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns.DnsAddresses()
                        self.dns_addresses.parent = self
                        self._children_name_map["dns_addresses"] = "dns-addresses"
                        self._segment_path = lambda: "dns"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns, [], name, value)


                    class DnsAddresses(Entity):
                        """
                        Specify DNS address(es) to provide
                        
                        .. attribute:: primary
                        
                        	Primary DNS IP address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: secondary
                        
                        	Secondary DNS IP address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ppp-ma-ipcp-cfg'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns.DnsAddresses, self).__init__()

                            self.yang_name = "dns-addresses"
                            self.yang_parent_name = "dns"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('primary', (YLeaf(YType.str, 'primary'), ['str'])),
                                ('secondary', (YLeaf(YType.str, 'secondary'), ['str'])),
                            ])
                            self.primary = None
                            self.secondary = None
                            self._segment_path = lambda: "dns-addresses"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.CiscoIOSXRPppMaIpcpCfgPpp.Ipcp.Dns.DnsAddresses, ['primary', 'secondary'], name, value)






        class Dagrs(Entity):
            """
            Direct\-Attached Gateway Redundancy configuration
            
            .. attribute:: dagr
            
            	The DAGR entry being configured
            	**type**\: list of  		 :py:class:`Dagr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr>`
            
            

            """

            _prefix = 'ipv4-arp-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Dagrs, self).__init__()

                self.yang_name = "dagrs"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([("dagr", ("dagr", InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr))])
                self._leafs = OrderedDict()

                self.dagr = YList(self)
                self._segment_path = lambda: "Cisco-IOS-XR-ipv4-arp-cfg:dagrs"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dagrs, [], name, value)


            class Dagr(Entity):
                """
                The DAGR entry being configured
                
                .. attribute:: ip_addr  (key)
                
                	DAGR Peer IPv4 address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: sub
                
                	DAGR Submode configuration
                	**type**\:  :py:class:`Sub <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub>`
                
                .. attribute:: enter
                
                	DAGR Group Enter item
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                

                """

                _prefix = 'ipv4-arp-cfg'
                _revision = '2017-05-01'

                def __init__(self):
                    super(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr, self).__init__()

                    self.yang_name = "dagr"
                    self.yang_parent_name = "dagrs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = ['ip_addr']
                    self._child_classes = OrderedDict([("sub", ("sub", InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub))])
                    self._leafs = OrderedDict([
                        ('ip_addr', (YLeaf(YType.str, 'ip-addr'), ['str'])),
                        ('enter', (YLeaf(YType.empty, 'enter'), ['Empty'])),
                    ])
                    self.ip_addr = None
                    self.enter = None

                    self.sub = InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub()
                    self.sub.parent = self
                    self._children_name_map["sub"] = "sub"
                    self._segment_path = lambda: "dagr" + "[ip-addr='" + str(self.ip_addr) + "']"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr, ['ip_addr', 'enter'], name, value)


                class Sub(Entity):
                    """
                    DAGR Submode configuration
                    
                    .. attribute:: metric
                    
                    	Set Route Metric
                    	**type**\:  :py:class:`Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Metric>`
                    
                    .. attribute:: timers
                    
                    	Set Query Timers
                    	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Timers>`
                    
                    .. attribute:: distance
                    
                    	Set Route Distance
                    	**type**\:  :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ifmgr_cfg.InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Distance>`
                    
                    .. attribute:: priority_timeout
                    
                    	Priority Timeout value
                    	**type**\: int
                    
                    	**range:** 1..10000
                    
                    	**default value**\: 20
                    
                    

                    """

                    _prefix = 'ipv4-arp-cfg'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub, self).__init__()

                        self.yang_name = "sub"
                        self.yang_parent_name = "dagr"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("metric", ("metric", InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Metric)), ("timers", ("timers", InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Timers)), ("distance", ("distance", InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Distance))])
                        self._leafs = OrderedDict([
                            ('priority_timeout', (YLeaf(YType.uint32, 'priority-timeout'), ['int'])),
                        ])
                        self.priority_timeout = None

                        self.metric = InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Metric()
                        self.metric.parent = self
                        self._children_name_map["metric"] = "metric"

                        self.timers = InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Timers()
                        self.timers.parent = self
                        self._children_name_map["timers"] = "timers"

                        self.distance = InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Distance()
                        self.distance.parent = self
                        self._children_name_map["distance"] = "distance"
                        self._segment_path = lambda: "sub"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub, ['priority_timeout'], name, value)


                    class Metric(Entity):
                        """
                        Set Route Metric
                        
                        .. attribute:: metric_norm
                        
                        	Normal Route Metric
                        	**type**\: int
                        
                        	**range:** 0..256
                        
                        	**default value**\: 100
                        
                        .. attribute:: metric_prio
                        
                        	Priority Route Metric
                        	**type**\: int
                        
                        	**range:** 0..256
                        
                        	**default value**\: 90
                        
                        

                        """

                        _prefix = 'ipv4-arp-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Metric, self).__init__()

                            self.yang_name = "metric"
                            self.yang_parent_name = "sub"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('metric_norm', (YLeaf(YType.uint32, 'metric-norm'), ['int'])),
                                ('metric_prio', (YLeaf(YType.uint32, 'metric-prio'), ['int'])),
                            ])
                            self.metric_norm = None
                            self.metric_prio = None
                            self._segment_path = lambda: "metric"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Metric, ['metric_norm', 'metric_prio'], name, value)



                    class Timers(Entity):
                        """
                        Set Query Timers
                        
                        .. attribute:: query_time
                        
                        	Query Timeout
                        	**type**\: int
                        
                        	**range:** 1..10000
                        
                        	**default value**\: 1
                        
                        .. attribute:: sby_time
                        
                        	Standby Query Timeout
                        	**type**\: int
                        
                        	**range:** 1..10000
                        
                        	**default value**\: 20
                        
                        

                        """

                        _prefix = 'ipv4-arp-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Timers, self).__init__()

                            self.yang_name = "timers"
                            self.yang_parent_name = "sub"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('query_time', (YLeaf(YType.uint32, 'query-time'), ['int'])),
                                ('sby_time', (YLeaf(YType.uint32, 'sby-time'), ['int'])),
                            ])
                            self.query_time = None
                            self.sby_time = None
                            self._segment_path = lambda: "timers"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Timers, ['query_time', 'sby_time'], name, value)



                    class Distance(Entity):
                        """
                        Set Route Distance
                        
                        .. attribute:: dist_norm
                        
                        	Normal Route Distance
                        	**type**\: int
                        
                        	**range:** 0..256
                        
                        	**default value**\: 150
                        
                        .. attribute:: dist_prio
                        
                        	Priority Route Distance
                        	**type**\: int
                        
                        	**range:** 0..256
                        
                        	**default value**\: 5
                        
                        

                        """

                        _prefix = 'ipv4-arp-cfg'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Distance, self).__init__()

                            self.yang_name = "distance"
                            self.yang_parent_name = "sub"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('dist_norm', (YLeaf(YType.uint32, 'dist-norm'), ['int'])),
                                ('dist_prio', (YLeaf(YType.uint32, 'dist-prio'), ['int'])),
                            ])
                            self.dist_norm = None
                            self.dist_prio = None
                            self._segment_path = lambda: "distance"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Dagrs.Dagr.Sub.Distance, ['dist_norm', 'dist_prio'], name, value)






        class Ipv4arp(Entity):
            """
            Configure Address Resolution Protocol
            
            .. attribute:: learning_local
            
            	Enable the dynamic learning of ARP entries(for local subnet) on the interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: learning_solicited
            
            	ARP learning solicited configuration
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: gratuitous_ignore
            
            	Ignore the receipt of Gratuitous ARP packets on the interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: proxy_arp
            
            	Proxy ARP configuration
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: purge_delay
            
            	Time to delay purging arp entries when the interface goes down
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: learning_disable
            
            	Disable the dynamic learning of ARP entries on the interface
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: local_proxy_arp
            
            	Local Proxy ARP configuration
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            .. attribute:: timeout
            
            	Number of seconds for ARP cache timeout
            	**type**\: int
            
            	**range:** 30..2144448000
            
            	**units**\: second
            
            

            """

            _prefix = 'ipv4-arp-cfg'
            _revision = '2017-05-01'

            def __init__(self):
                super(InterfaceConfigurations.InterfaceConfiguration.Ipv4arp, self).__init__()

                self.yang_name = "ipv4arp"
                self.yang_parent_name = "interface-configuration"
                self.is_top_level_class = False
                self.has_list_ancestor = True
                self.ylist_key_names = []
                self._child_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('learning_local', (YLeaf(YType.empty, 'learning-local'), ['Empty'])),
                    ('learning_solicited', (YLeaf(YType.empty, 'learning-solicited'), ['Empty'])),
                    ('gratuitous_ignore', (YLeaf(YType.empty, 'gratuitous-ignore'), ['Empty'])),
                    ('proxy_arp', (YLeaf(YType.empty, 'proxy-arp'), ['Empty'])),
                    ('purge_delay', (YLeaf(YType.uint32, 'purge-delay'), ['int'])),
                    ('learning_disable', (YLeaf(YType.empty, 'learning-disable'), ['Empty'])),
                    ('local_proxy_arp', (YLeaf(YType.empty, 'local-proxy-arp'), ['Empty'])),
                    ('timeout', (YLeaf(YType.uint32, 'timeout'), ['int'])),
                ])
                self.learning_local = None
                self.learning_solicited = None
                self.gratuitous_ignore = None
                self.proxy_arp = None
                self.purge_delay = None
                self.learning_disable = None
                self.local_proxy_arp = None
                self.timeout = None
                self._segment_path = lambda: "Cisco-IOS-XR-ipv4-arp-cfg:ipv4arp"
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(InterfaceConfigurations.InterfaceConfiguration.Ipv4arp, ['learning_local', 'learning_solicited', 'gratuitous_ignore', 'proxy_arp', 'purge_delay', 'learning_disable', 'local_proxy_arp', 'timeout'], name, value)



    def clone_ptr(self):
        self._top_entity = InterfaceConfigurations()
        return self._top_entity



