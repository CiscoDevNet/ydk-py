""" Cisco_IOS_XR_policy_repository_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR policy\-repository package operational data.

This module contains definitions
for the following management objects\:
  routing\-policy\: Routing policy operational data

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class AddressFamily(Enum):
    """
    AddressFamily

    Address Family

    .. data:: ipv4 = 0

    	IPv4 Address Family

    .. data:: ipv6 = 1

    	IPv6 Address Family

    .. data:: l2vpn = 2

    	L2VPN Address Family

    .. data:: ls = 3

    	LINKSTATE Address Family

    .. data:: af_none = 4

    	No Address Family

    .. data:: af_unknown = 5

    	Unknown Address Family

    """

    ipv4 = Enum.YLeaf(0, "ipv4")

    ipv6 = Enum.YLeaf(1, "ipv6")

    l2vpn = Enum.YLeaf(2, "l2vpn")

    ls = Enum.YLeaf(3, "ls")

    af_none = Enum.YLeaf(4, "af-none")

    af_unknown = Enum.YLeaf(5, "af-unknown")


class AttachPointDirection(Enum):
    """
    AttachPointDirection

    Attach Point Direction

    .. data:: in_ = 0

    	Attach Point Direction IN

    .. data:: out = 1

    	Attach Point Direction OUT

    """

    in_ = Enum.YLeaf(0, "in")

    out = Enum.YLeaf(1, "out")


class Group(Enum):
    """
    Group

    BGP Neighbor Group Type

    .. data:: address_family_group = 0

    	Address Family Group

    .. data:: session_group = 1

    	Session Group

    .. data:: neighbor_group = 2

    	Neighbor Group

    .. data:: neighbor = 3

    	Neighbor

    .. data:: error_group = 4

    	Error Group

    """

    address_family_group = Enum.YLeaf(0, "address-family-group")

    session_group = Enum.YLeaf(1, "session-group")

    neighbor_group = Enum.YLeaf(2, "neighbor-group")

    neighbor = Enum.YLeaf(3, "neighbor")

    error_group = Enum.YLeaf(4, "error-group")


class ObjectStatus(Enum):
    """
    ObjectStatus

    Whether an RPL object is used/referenced

    .. data:: active = 0

    	The object is in use

    .. data:: inactive = 1

    	The object is referenced by another object, but

    	not used

    .. data:: unused = 2

    	The object is not used or referenced

    """

    active = Enum.YLeaf(0, "active")

    inactive = Enum.YLeaf(1, "inactive")

    unused = Enum.YLeaf(2, "unused")


class SubAddressFamily(Enum):
    """
    SubAddressFamily

    Sub Address Family

    .. data:: unicast = 0

    	Unicast

    .. data:: multicast = 1

    	Multicast

    .. data:: label = 2

    	Label

    .. data:: tunnel = 3

    	Tunnel

    .. data:: vpn = 4

    	VPN

    .. data:: mdt = 5

    	MDT

    .. data:: vpls = 6

    	VPLS

    .. data:: rt_constraint = 7

    	RTConstraint

    .. data:: mvpn = 8

    	MVPN

    .. data:: flow = 9

    	FLOW

    .. data:: vpn_mcast = 10

    	VPN Multicast

    .. data:: saf_none = 11

    	No SAFI

    .. data:: saf_unknown = 12

    	Unknown

    """

    unicast = Enum.YLeaf(0, "unicast")

    multicast = Enum.YLeaf(1, "multicast")

    label = Enum.YLeaf(2, "label")

    tunnel = Enum.YLeaf(3, "tunnel")

    vpn = Enum.YLeaf(4, "vpn")

    mdt = Enum.YLeaf(5, "mdt")

    vpls = Enum.YLeaf(6, "vpls")

    rt_constraint = Enum.YLeaf(7, "rt-constraint")

    mvpn = Enum.YLeaf(8, "mvpn")

    flow = Enum.YLeaf(9, "flow")

    vpn_mcast = Enum.YLeaf(10, "vpn-mcast")

    saf_none = Enum.YLeaf(11, "saf-none")

    saf_unknown = Enum.YLeaf(12, "saf-unknown")



class RoutingPolicy(Entity):
    """
    Routing policy operational data
    
    .. attribute:: limits
    
    	Information about configured limits and the current values
    	**type**\:   :py:class:`Limits <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Limits>`
    
    .. attribute:: policies
    
    	Information about configured route policies
    	**type**\:   :py:class:`Policies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies>`
    
    .. attribute:: sets
    
    	Information about configured sets
    	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets>`
    
    

    """

    _prefix = 'policy-repository-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(RoutingPolicy, self).__init__()
        self._top_entity = None

        self.yang_name = "routing-policy"
        self.yang_parent_name = "Cisco-IOS-XR-policy-repository-oper"

        self.limits = RoutingPolicy.Limits()
        self.limits.parent = self
        self._children_name_map["limits"] = "limits"
        self._children_yang_names.add("limits")

        self.policies = RoutingPolicy.Policies()
        self.policies.parent = self
        self._children_name_map["policies"] = "policies"
        self._children_yang_names.add("policies")

        self.sets = RoutingPolicy.Sets()
        self.sets.parent = self
        self._children_name_map["sets"] = "sets"
        self._children_yang_names.add("sets")


    class Limits(Entity):
        """
        Information about configured limits and the
        current values
        
        .. attribute:: compiled_policies_length
        
        	The total compiled length of all policies
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: current_lines_of_policy_limit
        
        	Number of lines of configuration for policies/sets currently allowed
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: current_lines_of_policy_used
        
        	Current number of lines configured for all policies and sets
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: current_number_of_policies_limit
        
        	Number of policies currently allowed
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: current_number_of_policies_used
        
        	Current number of policies configured
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: maximum_lines_of_policy
        
        	Maximum lines of configuration allowable for all policies and sets
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: maximum_number_of_policies
        
        	Maximum number of policies allowable
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        

        """

        _prefix = 'policy-repository-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(RoutingPolicy.Limits, self).__init__()

            self.yang_name = "limits"
            self.yang_parent_name = "routing-policy"

            self.compiled_policies_length = YLeaf(YType.uint32, "compiled-policies-length")

            self.current_lines_of_policy_limit = YLeaf(YType.uint32, "current-lines-of-policy-limit")

            self.current_lines_of_policy_used = YLeaf(YType.uint32, "current-lines-of-policy-used")

            self.current_number_of_policies_limit = YLeaf(YType.uint32, "current-number-of-policies-limit")

            self.current_number_of_policies_used = YLeaf(YType.uint32, "current-number-of-policies-used")

            self.maximum_lines_of_policy = YLeaf(YType.uint32, "maximum-lines-of-policy")

            self.maximum_number_of_policies = YLeaf(YType.uint32, "maximum-number-of-policies")

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in ("compiled_policies_length",
                            "current_lines_of_policy_limit",
                            "current_lines_of_policy_used",
                            "current_number_of_policies_limit",
                            "current_number_of_policies_used",
                            "maximum_lines_of_policy",
                            "maximum_number_of_policies") and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(RoutingPolicy.Limits, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(RoutingPolicy.Limits, self).__setattr__(name, value)

        def has_data(self):
            return (
                self.compiled_policies_length.is_set or
                self.current_lines_of_policy_limit.is_set or
                self.current_lines_of_policy_used.is_set or
                self.current_number_of_policies_limit.is_set or
                self.current_number_of_policies_used.is_set or
                self.maximum_lines_of_policy.is_set or
                self.maximum_number_of_policies.is_set)

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                self.compiled_policies_length.yfilter != YFilter.not_set or
                self.current_lines_of_policy_limit.yfilter != YFilter.not_set or
                self.current_lines_of_policy_used.yfilter != YFilter.not_set or
                self.current_number_of_policies_limit.yfilter != YFilter.not_set or
                self.current_number_of_policies_used.yfilter != YFilter.not_set or
                self.maximum_lines_of_policy.yfilter != YFilter.not_set or
                self.maximum_number_of_policies.yfilter != YFilter.not_set)

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "limits" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()
            if (self.compiled_policies_length.is_set or self.compiled_policies_length.yfilter != YFilter.not_set):
                leaf_name_data.append(self.compiled_policies_length.get_name_leafdata())
            if (self.current_lines_of_policy_limit.is_set or self.current_lines_of_policy_limit.yfilter != YFilter.not_set):
                leaf_name_data.append(self.current_lines_of_policy_limit.get_name_leafdata())
            if (self.current_lines_of_policy_used.is_set or self.current_lines_of_policy_used.yfilter != YFilter.not_set):
                leaf_name_data.append(self.current_lines_of_policy_used.get_name_leafdata())
            if (self.current_number_of_policies_limit.is_set or self.current_number_of_policies_limit.yfilter != YFilter.not_set):
                leaf_name_data.append(self.current_number_of_policies_limit.get_name_leafdata())
            if (self.current_number_of_policies_used.is_set or self.current_number_of_policies_used.yfilter != YFilter.not_set):
                leaf_name_data.append(self.current_number_of_policies_used.get_name_leafdata())
            if (self.maximum_lines_of_policy.is_set or self.maximum_lines_of_policy.yfilter != YFilter.not_set):
                leaf_name_data.append(self.maximum_lines_of_policy.get_name_leafdata())
            if (self.maximum_number_of_policies.is_set or self.maximum_number_of_policies.yfilter != YFilter.not_set):
                leaf_name_data.append(self.maximum_number_of_policies.get_name_leafdata())

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "compiled-policies-length" or name == "current-lines-of-policy-limit" or name == "current-lines-of-policy-used" or name == "current-number-of-policies-limit" or name == "current-number-of-policies-used" or name == "maximum-lines-of-policy" or name == "maximum-number-of-policies"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            if(value_path == "compiled-policies-length"):
                self.compiled_policies_length = value
                self.compiled_policies_length.value_namespace = name_space
                self.compiled_policies_length.value_namespace_prefix = name_space_prefix
            if(value_path == "current-lines-of-policy-limit"):
                self.current_lines_of_policy_limit = value
                self.current_lines_of_policy_limit.value_namespace = name_space
                self.current_lines_of_policy_limit.value_namespace_prefix = name_space_prefix
            if(value_path == "current-lines-of-policy-used"):
                self.current_lines_of_policy_used = value
                self.current_lines_of_policy_used.value_namespace = name_space
                self.current_lines_of_policy_used.value_namespace_prefix = name_space_prefix
            if(value_path == "current-number-of-policies-limit"):
                self.current_number_of_policies_limit = value
                self.current_number_of_policies_limit.value_namespace = name_space
                self.current_number_of_policies_limit.value_namespace_prefix = name_space_prefix
            if(value_path == "current-number-of-policies-used"):
                self.current_number_of_policies_used = value
                self.current_number_of_policies_used.value_namespace = name_space
                self.current_number_of_policies_used.value_namespace_prefix = name_space_prefix
            if(value_path == "maximum-lines-of-policy"):
                self.maximum_lines_of_policy = value
                self.maximum_lines_of_policy.value_namespace = name_space
                self.maximum_lines_of_policy.value_namespace_prefix = name_space_prefix
            if(value_path == "maximum-number-of-policies"):
                self.maximum_number_of_policies = value
                self.maximum_number_of_policies.value_namespace = name_space
                self.maximum_number_of_policies.value_namespace_prefix = name_space_prefix


    class Policies(Entity):
        """
        Information about configured route policies
        
        .. attribute:: active
        
        	All objects of a given type that are attached to a protocol
        	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.Active>`
        
        .. attribute:: inactive
        
        	All objects of a given type that are not attached to a protocol
        	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.Inactive>`
        
        .. attribute:: route_policies
        
        	Information about individual policies
        	**type**\:   :py:class:`RoutePolicies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies>`
        
        .. attribute:: unused
        
        	All objects of a given type that are not referenced at all
        	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.Unused>`
        
        

        """

        _prefix = 'policy-repository-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(RoutingPolicy.Policies, self).__init__()

            self.yang_name = "policies"
            self.yang_parent_name = "routing-policy"

            self.active = RoutingPolicy.Policies.Active()
            self.active.parent = self
            self._children_name_map["active"] = "active"
            self._children_yang_names.add("active")

            self.inactive = RoutingPolicy.Policies.Inactive()
            self.inactive.parent = self
            self._children_name_map["inactive"] = "inactive"
            self._children_yang_names.add("inactive")

            self.route_policies = RoutingPolicy.Policies.RoutePolicies()
            self.route_policies.parent = self
            self._children_name_map["route_policies"] = "route-policies"
            self._children_yang_names.add("route-policies")

            self.unused = RoutingPolicy.Policies.Unused()
            self.unused.parent = self
            self._children_name_map["unused"] = "unused"
            self._children_yang_names.add("unused")


        class RoutePolicies(Entity):
            """
            Information about individual policies
            
            .. attribute:: route_policy
            
            	Information about an individual policy
            	**type**\: list of    :py:class:`RoutePolicy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Policies.RoutePolicies, self).__init__()

                self.yang_name = "route-policies"
                self.yang_parent_name = "policies"

                self.route_policy = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(RoutingPolicy.Policies.RoutePolicies, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(RoutingPolicy.Policies.RoutePolicies, self).__setattr__(name, value)


            class RoutePolicy(Entity):
                """
                Information about an individual policy
                
                .. attribute:: route_policy_name  <key>
                
                	Route policy name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: attached
                
                	Information about where this policy or set is attached
                	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached>`
                
                .. attribute:: policy_uses
                
                	Information about which policies and sets this policy uses
                	**type**\:   :py:class:`PolicyUses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses>`
                
                .. attribute:: used_by
                
                	Policies that use this object, directly or indirectly
                	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy, self).__init__()

                    self.yang_name = "route-policy"
                    self.yang_parent_name = "route-policies"

                    self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                    self.attached = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached()
                    self.attached.parent = self
                    self._children_name_map["attached"] = "attached"
                    self._children_yang_names.add("attached")

                    self.policy_uses = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses()
                    self.policy_uses.parent = self
                    self._children_name_map["policy_uses"] = "policy-uses"
                    self._children_yang_names.add("policy-uses")

                    self.used_by = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy()
                    self.used_by.parent = self
                    self._children_name_map["used_by"] = "used-by"
                    self._children_yang_names.add("used-by")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("route_policy_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy, self).__setattr__(name, value)


                class PolicyUses(Entity):
                    """
                    Information about which policies and sets
                    this policy uses
                    
                    .. attribute:: all_used_policies
                    
                    	Policies used by this policy, or by policies that it uses
                    	**type**\:   :py:class:`AllUsedPolicies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedPolicies>`
                    
                    .. attribute:: all_used_sets
                    
                    	Sets used by this policy, or by policies that it uses
                    	**type**\:   :py:class:`AllUsedSets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets>`
                    
                    .. attribute:: directly_used_policies
                    
                    	Policies that this policy uses directly
                    	**type**\:   :py:class:`DirectlyUsedPolicies <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedPolicies>`
                    
                    .. attribute:: directly_used_sets
                    
                    	Sets that this policy uses directly
                    	**type**\:   :py:class:`DirectlyUsedSets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses, self).__init__()

                        self.yang_name = "policy-uses"
                        self.yang_parent_name = "route-policy"

                        self.all_used_policies = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedPolicies()
                        self.all_used_policies.parent = self
                        self._children_name_map["all_used_policies"] = "all-used-policies"
                        self._children_yang_names.add("all-used-policies")

                        self.all_used_sets = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets()
                        self.all_used_sets.parent = self
                        self._children_name_map["all_used_sets"] = "all-used-sets"
                        self._children_yang_names.add("all-used-sets")

                        self.directly_used_policies = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedPolicies()
                        self.directly_used_policies.parent = self
                        self._children_name_map["directly_used_policies"] = "directly-used-policies"
                        self._children_yang_names.add("directly-used-policies")

                        self.directly_used_sets = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets()
                        self.directly_used_sets.parent = self
                        self._children_name_map["directly_used_sets"] = "directly-used-sets"
                        self._children_yang_names.add("directly-used-sets")


                    class DirectlyUsedPolicies(Entity):
                        """
                        Policies that this policy uses directly
                        
                        .. attribute:: object
                        
                        	Policy objects
                        	**type**\:  list of str
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedPolicies, self).__init__()

                            self.yang_name = "directly-used-policies"
                            self.yang_parent_name = "policy-uses"

                            self.object = YLeafList(YType.str, "object")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("object") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedPolicies, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedPolicies, self).__setattr__(name, value)

                        def has_data(self):
                            for leaf in self.object.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            return False

                        def has_operation(self):
                            for leaf in self.object.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            return (
                                self.yfilter != YFilter.not_set or
                                self.object.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "directly-used-policies" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            leaf_name_data.extend(self.object.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "object"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "object"):
                                self.object.append(value)


                    class AllUsedSets(Entity):
                        """
                        Sets used by this policy, or by policies
                        that it uses
                        
                        .. attribute:: sets
                        
                        	List of sets in several domains
                        	**type**\: list of    :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets.Sets>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets, self).__init__()

                            self.yang_name = "all-used-sets"
                            self.yang_parent_name = "policy-uses"

                            self.sets = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets, self).__setattr__(name, value)


                        class Sets(Entity):
                            """
                            List of sets in several domains
                            
                            .. attribute:: set_domain
                            
                            	Domain of sets
                            	**type**\:  str
                            
                            .. attribute:: set_name
                            
                            	Names of sets in this domain
                            	**type**\:  list of str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets.Sets, self).__init__()

                                self.yang_name = "sets"
                                self.yang_parent_name = "all-used-sets"

                                self.set_domain = YLeaf(YType.str, "set-domain")

                                self.set_name = YLeafList(YType.str, "set-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("set_domain",
                                                "set_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets.Sets, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets.Sets, self).__setattr__(name, value)

                            def has_data(self):
                                for leaf in self.set_name.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return self.set_domain.is_set

                            def has_operation(self):
                                for leaf in self.set_name.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.set_domain.yfilter != YFilter.not_set or
                                    self.set_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "sets" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.set_domain.is_set or self.set_domain.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.set_domain.get_name_leafdata())

                                leaf_name_data.extend(self.set_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "set-domain" or name == "set-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "set-domain"):
                                    self.set_domain = value
                                    self.set_domain.value_namespace = name_space
                                    self.set_domain.value_namespace_prefix = name_space_prefix
                                if(value_path == "set-name"):
                                    self.set_name.append(value)

                        def has_data(self):
                            for c in self.sets:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.sets:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "all-used-sets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "sets"):
                                for c in self.sets:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets.Sets()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.sets.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "sets"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class DirectlyUsedSets(Entity):
                        """
                        Sets that this policy uses directly
                        
                        .. attribute:: sets
                        
                        	List of sets in several domains
                        	**type**\: list of    :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets.Sets>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets, self).__init__()

                            self.yang_name = "directly-used-sets"
                            self.yang_parent_name = "policy-uses"

                            self.sets = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets, self).__setattr__(name, value)


                        class Sets(Entity):
                            """
                            List of sets in several domains
                            
                            .. attribute:: set_domain
                            
                            	Domain of sets
                            	**type**\:  str
                            
                            .. attribute:: set_name
                            
                            	Names of sets in this domain
                            	**type**\:  list of str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets.Sets, self).__init__()

                                self.yang_name = "sets"
                                self.yang_parent_name = "directly-used-sets"

                                self.set_domain = YLeaf(YType.str, "set-domain")

                                self.set_name = YLeafList(YType.str, "set-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("set_domain",
                                                "set_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets.Sets, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets.Sets, self).__setattr__(name, value)

                            def has_data(self):
                                for leaf in self.set_name.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return self.set_domain.is_set

                            def has_operation(self):
                                for leaf in self.set_name.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.set_domain.yfilter != YFilter.not_set or
                                    self.set_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "sets" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.set_domain.is_set or self.set_domain.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.set_domain.get_name_leafdata())

                                leaf_name_data.extend(self.set_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "set-domain" or name == "set-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "set-domain"):
                                    self.set_domain = value
                                    self.set_domain.value_namespace = name_space
                                    self.set_domain.value_namespace_prefix = name_space_prefix
                                if(value_path == "set-name"):
                                    self.set_name.append(value)

                        def has_data(self):
                            for c in self.sets:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.sets:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "directly-used-sets" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "sets"):
                                for c in self.sets:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets.Sets()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.sets.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "sets"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class AllUsedPolicies(Entity):
                        """
                        Policies used by this policy, or by policies
                        that it uses
                        
                        .. attribute:: object
                        
                        	Policy objects
                        	**type**\:  list of str
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedPolicies, self).__init__()

                            self.yang_name = "all-used-policies"
                            self.yang_parent_name = "policy-uses"

                            self.object = YLeafList(YType.str, "object")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("object") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedPolicies, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedPolicies, self).__setattr__(name, value)

                        def has_data(self):
                            for leaf in self.object.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            return False

                        def has_operation(self):
                            for leaf in self.object.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            return (
                                self.yfilter != YFilter.not_set or
                                self.object.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "all-used-policies" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            leaf_name_data.extend(self.object.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "object"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "object"):
                                self.object.append(value)

                    def has_data(self):
                        return (
                            (self.all_used_policies is not None and self.all_used_policies.has_data()) or
                            (self.all_used_sets is not None and self.all_used_sets.has_data()) or
                            (self.directly_used_policies is not None and self.directly_used_policies.has_data()) or
                            (self.directly_used_sets is not None and self.directly_used_sets.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.all_used_policies is not None and self.all_used_policies.has_operation()) or
                            (self.all_used_sets is not None and self.all_used_sets.has_operation()) or
                            (self.directly_used_policies is not None and self.directly_used_policies.has_operation()) or
                            (self.directly_used_sets is not None and self.directly_used_sets.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "policy-uses" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "all-used-policies"):
                            if (self.all_used_policies is None):
                                self.all_used_policies = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedPolicies()
                                self.all_used_policies.parent = self
                                self._children_name_map["all_used_policies"] = "all-used-policies"
                            return self.all_used_policies

                        if (child_yang_name == "all-used-sets"):
                            if (self.all_used_sets is None):
                                self.all_used_sets = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.AllUsedSets()
                                self.all_used_sets.parent = self
                                self._children_name_map["all_used_sets"] = "all-used-sets"
                            return self.all_used_sets

                        if (child_yang_name == "directly-used-policies"):
                            if (self.directly_used_policies is None):
                                self.directly_used_policies = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedPolicies()
                                self.directly_used_policies.parent = self
                                self._children_name_map["directly_used_policies"] = "directly-used-policies"
                            return self.directly_used_policies

                        if (child_yang_name == "directly-used-sets"):
                            if (self.directly_used_sets is None):
                                self.directly_used_sets = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses.DirectlyUsedSets()
                                self.directly_used_sets.parent = self
                                self._children_name_map["directly_used_sets"] = "directly-used-sets"
                            return self.directly_used_sets

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "all-used-policies" or name == "all-used-sets" or name == "directly-used-policies" or name == "directly-used-sets"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class UsedBy(Entity):
                    """
                    Policies that use this object, directly or
                    indirectly
                    
                    .. attribute:: reference
                    
                    	Information about policies referring to this object
                    	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy.Reference>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy, self).__init__()

                        self.yang_name = "used-by"
                        self.yang_parent_name = "route-policy"

                        self.reference = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy, self).__setattr__(name, value)


                    class Reference(Entity):
                        """
                        Information about policies referring to this
                        object
                        
                        .. attribute:: route_policy_name
                        
                        	Name of policy
                        	**type**\:  str
                        
                        .. attribute:: status
                        
                        	Active, Inactive, or Unused
                        	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                        
                        .. attribute:: used_directly
                        
                        	Whether the policy uses this object directly or indirectly
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy.Reference, self).__init__()

                            self.yang_name = "reference"
                            self.yang_parent_name = "used-by"

                            self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                            self.status = YLeaf(YType.enumeration, "status")

                            self.used_directly = YLeaf(YType.boolean, "used-directly")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("route_policy_name",
                                            "status",
                                            "used_directly") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy.Reference, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy.Reference, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.route_policy_name.is_set or
                                self.status.is_set or
                                self.used_directly.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.route_policy_name.yfilter != YFilter.not_set or
                                self.status.yfilter != YFilter.not_set or
                                self.used_directly.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "reference" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                            if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.status.get_name_leafdata())
                            if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.used_directly.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "route-policy-name"):
                                self.route_policy_name = value
                                self.route_policy_name.value_namespace = name_space
                                self.route_policy_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "status"):
                                self.status = value
                                self.status.value_namespace = name_space
                                self.status.value_namespace_prefix = name_space_prefix
                            if(value_path == "used-directly"):
                                self.used_directly = value
                                self.used_directly.value_namespace = name_space
                                self.used_directly.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.reference:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.reference:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "used-by" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "reference"):
                            for c in self.reference:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy.Reference()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.reference.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "reference"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Attached(Entity):
                    """
                    Information about where this policy or set is
                    attached
                    
                    .. attribute:: binding
                    
                    	bindings list
                    	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached.Binding>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached, self).__init__()

                        self.yang_name = "attached"
                        self.yang_parent_name = "route-policy"

                        self.binding = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached, self).__setattr__(name, value)


                    class Binding(Entity):
                        """
                        bindings list
                        
                        .. attribute:: af_name
                        
                        	Address Family Identifier
                        	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                        
                        .. attribute:: aggregate_network_address
                        
                        	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                        	**type**\:  str
                        
                        .. attribute:: area_id
                        
                        	OSPF Area ID in Decimal Integer Format
                        	**type**\:  str
                        
                        .. attribute:: attach_point
                        
                        	Name of attach point where policy is attached
                        	**type**\:  str
                        
                        .. attribute:: attached_policy
                        
                        	The attached policy that (maybe indirectly) uses the object in question
                        	**type**\:  str
                        
                        .. attribute:: direction
                        
                        	Direction In or Out
                        	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                        
                        .. attribute:: group
                        
                        	Neighbor Group 
                        	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                        
                        .. attribute:: group_name
                        
                        	Neighbor Group Name
                        	**type**\:  str
                        
                        .. attribute:: instance
                        
                        	Instance
                        	**type**\:  str
                        
                        .. attribute:: interface_name
                        
                        	Interface Name
                        	**type**\:  str
                        
                        .. attribute:: neighbor_address
                        
                        	Neighbor IP Address
                        	**type**\:  str
                        
                        .. attribute:: neighbor_af_name
                        
                        	Neighbor IP Address Family
                        	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                        
                        .. attribute:: propogate_from
                        
                        	ISIS Propogate From Level
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: propogate_to
                        
                        	ISIS Propogate To Level
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: proto_instance
                        
                        	Protocol instance
                        	**type**\:  str
                        
                        .. attribute:: protocol
                        
                        	Protocol to which policy attached
                        	**type**\:  str
                        
                        .. attribute:: route_policy_name
                        
                        	Policy that uses object in question
                        	**type**\:  str
                        
                        .. attribute:: saf_name
                        
                        	Subsequent Address Family Identifier
                        	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                        
                        .. attribute:: source_protocol
                        
                        	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                        	**type**\:  str
                        
                        .. attribute:: vrf_name
                        
                        	VRF name
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached.Binding, self).__init__()

                            self.yang_name = "binding"
                            self.yang_parent_name = "attached"

                            self.af_name = YLeaf(YType.enumeration, "af-name")

                            self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                            self.area_id = YLeaf(YType.str, "area-id")

                            self.attach_point = YLeaf(YType.str, "attach-point")

                            self.attached_policy = YLeaf(YType.str, "attached-policy")

                            self.direction = YLeaf(YType.enumeration, "direction")

                            self.group = YLeaf(YType.enumeration, "group")

                            self.group_name = YLeaf(YType.str, "group-name")

                            self.instance = YLeaf(YType.str, "instance")

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                            self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                            self.propogate_from = YLeaf(YType.int32, "propogate-from")

                            self.propogate_to = YLeaf(YType.int32, "propogate-to")

                            self.proto_instance = YLeaf(YType.str, "proto-instance")

                            self.protocol = YLeaf(YType.str, "protocol")

                            self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                            self.saf_name = YLeaf(YType.enumeration, "saf-name")

                            self.source_protocol = YLeaf(YType.str, "source-protocol")

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("af_name",
                                            "aggregate_network_address",
                                            "area_id",
                                            "attach_point",
                                            "attached_policy",
                                            "direction",
                                            "group",
                                            "group_name",
                                            "instance",
                                            "interface_name",
                                            "neighbor_address",
                                            "neighbor_af_name",
                                            "propogate_from",
                                            "propogate_to",
                                            "proto_instance",
                                            "protocol",
                                            "route_policy_name",
                                            "saf_name",
                                            "source_protocol",
                                            "vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached.Binding, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached.Binding, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.af_name.is_set or
                                self.aggregate_network_address.is_set or
                                self.area_id.is_set or
                                self.attach_point.is_set or
                                self.attached_policy.is_set or
                                self.direction.is_set or
                                self.group.is_set or
                                self.group_name.is_set or
                                self.instance.is_set or
                                self.interface_name.is_set or
                                self.neighbor_address.is_set or
                                self.neighbor_af_name.is_set or
                                self.propogate_from.is_set or
                                self.propogate_to.is_set or
                                self.proto_instance.is_set or
                                self.protocol.is_set or
                                self.route_policy_name.is_set or
                                self.saf_name.is_set or
                                self.source_protocol.is_set or
                                self.vrf_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.af_name.yfilter != YFilter.not_set or
                                self.aggregate_network_address.yfilter != YFilter.not_set or
                                self.area_id.yfilter != YFilter.not_set or
                                self.attach_point.yfilter != YFilter.not_set or
                                self.attached_policy.yfilter != YFilter.not_set or
                                self.direction.yfilter != YFilter.not_set or
                                self.group.yfilter != YFilter.not_set or
                                self.group_name.yfilter != YFilter.not_set or
                                self.instance.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                self.neighbor_address.yfilter != YFilter.not_set or
                                self.neighbor_af_name.yfilter != YFilter.not_set or
                                self.propogate_from.yfilter != YFilter.not_set or
                                self.propogate_to.yfilter != YFilter.not_set or
                                self.proto_instance.yfilter != YFilter.not_set or
                                self.protocol.yfilter != YFilter.not_set or
                                self.route_policy_name.yfilter != YFilter.not_set or
                                self.saf_name.yfilter != YFilter.not_set or
                                self.source_protocol.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "binding" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.af_name.get_name_leafdata())
                            if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                            if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.area_id.get_name_leafdata())
                            if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.attach_point.get_name_leafdata())
                            if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.attached_policy.get_name_leafdata())
                            if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.direction.get_name_leafdata())
                            if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.group.get_name_leafdata())
                            if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.group_name.get_name_leafdata())
                            if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.instance.get_name_leafdata())
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                            if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                            if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                            if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.propogate_from.get_name_leafdata())
                            if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.propogate_to.get_name_leafdata())
                            if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proto_instance.get_name_leafdata())
                            if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.protocol.get_name_leafdata())
                            if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                            if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.saf_name.get_name_leafdata())
                            if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.source_protocol.get_name_leafdata())
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "af-name"):
                                self.af_name = value
                                self.af_name.value_namespace = name_space
                                self.af_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "aggregate-network-address"):
                                self.aggregate_network_address = value
                                self.aggregate_network_address.value_namespace = name_space
                                self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "area-id"):
                                self.area_id = value
                                self.area_id.value_namespace = name_space
                                self.area_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "attach-point"):
                                self.attach_point = value
                                self.attach_point.value_namespace = name_space
                                self.attach_point.value_namespace_prefix = name_space_prefix
                            if(value_path == "attached-policy"):
                                self.attached_policy = value
                                self.attached_policy.value_namespace = name_space
                                self.attached_policy.value_namespace_prefix = name_space_prefix
                            if(value_path == "direction"):
                                self.direction = value
                                self.direction.value_namespace = name_space
                                self.direction.value_namespace_prefix = name_space_prefix
                            if(value_path == "group"):
                                self.group = value
                                self.group.value_namespace = name_space
                                self.group.value_namespace_prefix = name_space_prefix
                            if(value_path == "group-name"):
                                self.group_name = value
                                self.group_name.value_namespace = name_space
                                self.group_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "instance"):
                                self.instance = value
                                self.instance.value_namespace = name_space
                                self.instance.value_namespace_prefix = name_space_prefix
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "neighbor-address"):
                                self.neighbor_address = value
                                self.neighbor_address.value_namespace = name_space
                                self.neighbor_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "neighbor-af-name"):
                                self.neighbor_af_name = value
                                self.neighbor_af_name.value_namespace = name_space
                                self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "propogate-from"):
                                self.propogate_from = value
                                self.propogate_from.value_namespace = name_space
                                self.propogate_from.value_namespace_prefix = name_space_prefix
                            if(value_path == "propogate-to"):
                                self.propogate_to = value
                                self.propogate_to.value_namespace = name_space
                                self.propogate_to.value_namespace_prefix = name_space_prefix
                            if(value_path == "proto-instance"):
                                self.proto_instance = value
                                self.proto_instance.value_namespace = name_space
                                self.proto_instance.value_namespace_prefix = name_space_prefix
                            if(value_path == "protocol"):
                                self.protocol = value
                                self.protocol.value_namespace = name_space
                                self.protocol.value_namespace_prefix = name_space_prefix
                            if(value_path == "route-policy-name"):
                                self.route_policy_name = value
                                self.route_policy_name.value_namespace = name_space
                                self.route_policy_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "saf-name"):
                                self.saf_name = value
                                self.saf_name.value_namespace = name_space
                                self.saf_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "source-protocol"):
                                self.source_protocol = value
                                self.source_protocol.value_namespace = name_space
                                self.source_protocol.value_namespace_prefix = name_space_prefix
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.binding:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.binding:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "attached" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "binding"):
                            for c in self.binding:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached.Binding()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.binding.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "binding"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        self.route_policy_name.is_set or
                        (self.attached is not None and self.attached.has_data()) or
                        (self.policy_uses is not None and self.policy_uses.has_data()) or
                        (self.used_by is not None and self.used_by.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.route_policy_name.yfilter != YFilter.not_set or
                        (self.attached is not None and self.attached.has_operation()) or
                        (self.policy_uses is not None and self.policy_uses.has_operation()) or
                        (self.used_by is not None and self.used_by.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "route-policy" + "[route-policy-name='" + self.route_policy_name.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/policies/route-policies/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.route_policy_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "attached"):
                        if (self.attached is None):
                            self.attached = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.Attached()
                            self.attached.parent = self
                            self._children_name_map["attached"] = "attached"
                        return self.attached

                    if (child_yang_name == "policy-uses"):
                        if (self.policy_uses is None):
                            self.policy_uses = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.PolicyUses()
                            self.policy_uses.parent = self
                            self._children_name_map["policy_uses"] = "policy-uses"
                        return self.policy_uses

                    if (child_yang_name == "used-by"):
                        if (self.used_by is None):
                            self.used_by = RoutingPolicy.Policies.RoutePolicies.RoutePolicy.UsedBy()
                            self.used_by.parent = self
                            self._children_name_map["used_by"] = "used-by"
                        return self.used_by

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "attached" or name == "policy-uses" or name == "used-by" or name == "route-policy-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "route-policy-name"):
                        self.route_policy_name = value
                        self.route_policy_name.value_namespace = name_space
                        self.route_policy_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.route_policy:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.route_policy:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "route-policies" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/policies/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "route-policy"):
                    for c in self.route_policy:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = RoutingPolicy.Policies.RoutePolicies.RoutePolicy()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.route_policy.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "route-policy"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Unused(Entity):
            """
            All objects of a given type that are not
            referenced at all
            
            .. attribute:: object
            
            	Policy objects
            	**type**\:  list of str
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Policies.Unused, self).__init__()

                self.yang_name = "unused"
                self.yang_parent_name = "policies"

                self.object = YLeafList(YType.str, "object")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("object") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(RoutingPolicy.Policies.Unused, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(RoutingPolicy.Policies.Unused, self).__setattr__(name, value)

            def has_data(self):
                for leaf in self.object.getYLeafs():
                    if (leaf.yfilter != YFilter.not_set):
                        return True
                return False

            def has_operation(self):
                for leaf in self.object.getYLeafs():
                    if (leaf.is_set):
                        return True
                return (
                    self.yfilter != YFilter.not_set or
                    self.object.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "unused" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/policies/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                leaf_name_data.extend(self.object.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "object"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "object"):
                    self.object.append(value)


        class Inactive(Entity):
            """
            All objects of a given type that are not
            attached to a protocol
            
            .. attribute:: object
            
            	Policy objects
            	**type**\:  list of str
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Policies.Inactive, self).__init__()

                self.yang_name = "inactive"
                self.yang_parent_name = "policies"

                self.object = YLeafList(YType.str, "object")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("object") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(RoutingPolicy.Policies.Inactive, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(RoutingPolicy.Policies.Inactive, self).__setattr__(name, value)

            def has_data(self):
                for leaf in self.object.getYLeafs():
                    if (leaf.yfilter != YFilter.not_set):
                        return True
                return False

            def has_operation(self):
                for leaf in self.object.getYLeafs():
                    if (leaf.is_set):
                        return True
                return (
                    self.yfilter != YFilter.not_set or
                    self.object.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "inactive" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/policies/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                leaf_name_data.extend(self.object.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "object"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "object"):
                    self.object.append(value)


        class Active(Entity):
            """
            All objects of a given type that are attached to
            a protocol
            
            .. attribute:: object
            
            	Policy objects
            	**type**\:  list of str
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Policies.Active, self).__init__()

                self.yang_name = "active"
                self.yang_parent_name = "policies"

                self.object = YLeafList(YType.str, "object")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("object") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(RoutingPolicy.Policies.Active, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(RoutingPolicy.Policies.Active, self).__setattr__(name, value)

            def has_data(self):
                for leaf in self.object.getYLeafs():
                    if (leaf.yfilter != YFilter.not_set):
                        return True
                return False

            def has_operation(self):
                for leaf in self.object.getYLeafs():
                    if (leaf.is_set):
                        return True
                return (
                    self.yfilter != YFilter.not_set or
                    self.object.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "active" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/policies/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                leaf_name_data.extend(self.object.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "object"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "object"):
                    self.object.append(value)

        def has_data(self):
            return (
                (self.active is not None and self.active.has_data()) or
                (self.inactive is not None and self.inactive.has_data()) or
                (self.route_policies is not None and self.route_policies.has_data()) or
                (self.unused is not None and self.unused.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.active is not None and self.active.has_operation()) or
                (self.inactive is not None and self.inactive.has_operation()) or
                (self.route_policies is not None and self.route_policies.has_operation()) or
                (self.unused is not None and self.unused.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "policies" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "active"):
                if (self.active is None):
                    self.active = RoutingPolicy.Policies.Active()
                    self.active.parent = self
                    self._children_name_map["active"] = "active"
                return self.active

            if (child_yang_name == "inactive"):
                if (self.inactive is None):
                    self.inactive = RoutingPolicy.Policies.Inactive()
                    self.inactive.parent = self
                    self._children_name_map["inactive"] = "inactive"
                return self.inactive

            if (child_yang_name == "route-policies"):
                if (self.route_policies is None):
                    self.route_policies = RoutingPolicy.Policies.RoutePolicies()
                    self.route_policies.parent = self
                    self._children_name_map["route_policies"] = "route-policies"
                return self.route_policies

            if (child_yang_name == "unused"):
                if (self.unused is None):
                    self.unused = RoutingPolicy.Policies.Unused()
                    self.unused.parent = self
                    self._children_name_map["unused"] = "unused"
                return self.unused

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "active" or name == "inactive" or name == "route-policies" or name == "unused"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class Sets(Entity):
        """
        Information about configured sets
        
        .. attribute:: as_path
        
        	Information about AS Path sets
        	**type**\:   :py:class:`AsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath>`
        
        .. attribute:: community
        
        	Information about Community sets
        	**type**\:   :py:class:`Community <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community>`
        
        .. attribute:: esi
        
        	Information about Esi sets
        	**type**\:   :py:class:`Esi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi>`
        
        .. attribute:: etag
        
        	Information about Etag sets
        	**type**\:   :py:class:`Etag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag>`
        
        .. attribute:: extended_community_bandwidth
        
        	Information about Extended Community Bandwidth sets
        	**type**\:   :py:class:`ExtendedCommunityBandwidth <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth>`
        
        .. attribute:: extended_community_cost
        
        	Information about Extended Community Cost sets
        	**type**\:   :py:class:`ExtendedCommunityCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost>`
        
        .. attribute:: extended_community_opaque
        
        	Information about Extended Community Opaque sets
        	**type**\:   :py:class:`ExtendedCommunityOpaque <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque>`
        
        .. attribute:: extended_community_rt
        
        	Information about Extended Community RT sets
        	**type**\:   :py:class:`ExtendedCommunityRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt>`
        
        .. attribute:: extended_community_seg_nh
        
        	Information about Extended Community SegNH sets
        	**type**\:   :py:class:`ExtendedCommunitySegNh <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh>`
        
        .. attribute:: extended_community_soo
        
        	Information about Extended Community SOO sets
        	**type**\:   :py:class:`ExtendedCommunitySoo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo>`
        
        .. attribute:: mac
        
        	Information about Mac sets
        	**type**\:   :py:class:`Mac <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac>`
        
        .. attribute:: ospf_area
        
        	Information about OSPF Area sets
        	**type**\:   :py:class:`OspfArea <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea>`
        
        .. attribute:: prefix
        
        	Information about AS Path sets
        	**type**\:   :py:class:`Prefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix>`
        
        .. attribute:: rd
        
        	Information about RD sets
        	**type**\:   :py:class:`Rd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd>`
        
        .. attribute:: tag
        
        	Information about Tag sets
        	**type**\:   :py:class:`Tag <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag>`
        
        

        """

        _prefix = 'policy-repository-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(RoutingPolicy.Sets, self).__init__()

            self.yang_name = "sets"
            self.yang_parent_name = "routing-policy"

            self.as_path = RoutingPolicy.Sets.AsPath()
            self.as_path.parent = self
            self._children_name_map["as_path"] = "as-path"
            self._children_yang_names.add("as-path")

            self.community = RoutingPolicy.Sets.Community()
            self.community.parent = self
            self._children_name_map["community"] = "community"
            self._children_yang_names.add("community")

            self.esi = RoutingPolicy.Sets.Esi()
            self.esi.parent = self
            self._children_name_map["esi"] = "esi"
            self._children_yang_names.add("esi")

            self.etag = RoutingPolicy.Sets.Etag()
            self.etag.parent = self
            self._children_name_map["etag"] = "etag"
            self._children_yang_names.add("etag")

            self.extended_community_bandwidth = RoutingPolicy.Sets.ExtendedCommunityBandwidth()
            self.extended_community_bandwidth.parent = self
            self._children_name_map["extended_community_bandwidth"] = "extended-community-bandwidth"
            self._children_yang_names.add("extended-community-bandwidth")

            self.extended_community_cost = RoutingPolicy.Sets.ExtendedCommunityCost()
            self.extended_community_cost.parent = self
            self._children_name_map["extended_community_cost"] = "extended-community-cost"
            self._children_yang_names.add("extended-community-cost")

            self.extended_community_opaque = RoutingPolicy.Sets.ExtendedCommunityOpaque()
            self.extended_community_opaque.parent = self
            self._children_name_map["extended_community_opaque"] = "extended-community-opaque"
            self._children_yang_names.add("extended-community-opaque")

            self.extended_community_rt = RoutingPolicy.Sets.ExtendedCommunityRt()
            self.extended_community_rt.parent = self
            self._children_name_map["extended_community_rt"] = "extended-community-rt"
            self._children_yang_names.add("extended-community-rt")

            self.extended_community_seg_nh = RoutingPolicy.Sets.ExtendedCommunitySegNh()
            self.extended_community_seg_nh.parent = self
            self._children_name_map["extended_community_seg_nh"] = "extended-community-seg-nh"
            self._children_yang_names.add("extended-community-seg-nh")

            self.extended_community_soo = RoutingPolicy.Sets.ExtendedCommunitySoo()
            self.extended_community_soo.parent = self
            self._children_name_map["extended_community_soo"] = "extended-community-soo"
            self._children_yang_names.add("extended-community-soo")

            self.mac = RoutingPolicy.Sets.Mac()
            self.mac.parent = self
            self._children_name_map["mac"] = "mac"
            self._children_yang_names.add("mac")

            self.ospf_area = RoutingPolicy.Sets.OspfArea()
            self.ospf_area.parent = self
            self._children_name_map["ospf_area"] = "ospf-area"
            self._children_yang_names.add("ospf-area")

            self.prefix = RoutingPolicy.Sets.Prefix()
            self.prefix.parent = self
            self._children_name_map["prefix"] = "prefix"
            self._children_yang_names.add("prefix")

            self.rd = RoutingPolicy.Sets.Rd()
            self.rd.parent = self
            self._children_name_map["rd"] = "rd"
            self._children_yang_names.add("rd")

            self.tag = RoutingPolicy.Sets.Tag()
            self.tag.parent = self
            self._children_name_map["tag"] = "tag"
            self._children_yang_names.add("tag")


        class Etag(Entity):
            """
            Information about Etag sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.Etag, self).__init__()

                self.yang_name = "etag"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.Etag.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.Etag.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.Etag.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.Etag.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Etag.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "etag"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Etag.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Etag.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.Etag.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.Etag.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.Etag.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.Etag.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.Etag.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Etag.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Etag.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Etag.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Etag.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Etag.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Etag.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Etag.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Etag.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Etag.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Etag.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Etag.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Etag.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Etag.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Etag.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Etag.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/etag/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.Etag.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.Etag.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/etag/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.Etag.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Etag.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "etag"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Etag.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Etag.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/etag/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Etag.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "etag"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Etag.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Etag.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/etag/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Etag.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "etag"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Etag.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Etag.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/etag/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "etag" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.Etag.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.Etag.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.Etag.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.Etag.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class OspfArea(Entity):
            """
            Information about OSPF Area sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.OspfArea, self).__init__()

                self.yang_name = "ospf-area"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.OspfArea.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.OspfArea.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.OspfArea.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.OspfArea.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.OspfArea.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "ospf-area"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.OspfArea.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.OspfArea.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.OspfArea.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.OspfArea.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.OspfArea.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.OspfArea.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.OspfArea.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.OspfArea.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.OspfArea.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.OspfArea.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.OspfArea.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.OspfArea.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.OspfArea.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.OspfArea.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/ospf-area/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.OspfArea.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.OspfArea.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/ospf-area/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.OspfArea.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.OspfArea.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "ospf-area"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.OspfArea.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.OspfArea.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/ospf-area/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.OspfArea.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "ospf-area"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.OspfArea.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.OspfArea.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/ospf-area/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.OspfArea.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "ospf-area"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.OspfArea.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.OspfArea.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/ospf-area/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "ospf-area" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.OspfArea.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.OspfArea.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.OspfArea.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.OspfArea.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ExtendedCommunityOpaque(Entity):
            """
            Information about Extended Community Opaque
            sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.ExtendedCommunityOpaque, self).__init__()

                self.yang_name = "extended-community-opaque"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.ExtendedCommunityOpaque.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.ExtendedCommunityOpaque.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.ExtendedCommunityOpaque.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "extended-community-opaque"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-opaque/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-opaque/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "extended-community-opaque"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-opaque/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "extended-community-opaque"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-opaque/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "extended-community-opaque"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityOpaque.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-opaque/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "extended-community-opaque" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.ExtendedCommunityOpaque.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.ExtendedCommunityOpaque.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.ExtendedCommunityOpaque.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.ExtendedCommunityOpaque.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ExtendedCommunitySegNh(Entity):
            """
            Information about Extended Community SegNH sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.ExtendedCommunitySegNh, self).__init__()

                self.yang_name = "extended-community-seg-nh"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.ExtendedCommunitySegNh.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.ExtendedCommunitySegNh.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.ExtendedCommunitySegNh.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "extended-community-seg-nh"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-seg-nh/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-seg-nh/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "extended-community-seg-nh"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-seg-nh/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "extended-community-seg-nh"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-seg-nh/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "extended-community-seg-nh"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunitySegNh.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-seg-nh/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "extended-community-seg-nh" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.ExtendedCommunitySegNh.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.ExtendedCommunitySegNh.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.ExtendedCommunitySegNh.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.ExtendedCommunitySegNh.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ExtendedCommunitySoo(Entity):
            """
            Information about Extended Community SOO sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.ExtendedCommunitySoo, self).__init__()

                self.yang_name = "extended-community-soo"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.ExtendedCommunitySoo.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.ExtendedCommunitySoo.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.ExtendedCommunitySoo.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "extended-community-soo"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-soo/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-soo/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunitySoo.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "extended-community-soo"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunitySoo.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunitySoo.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-soo/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunitySoo.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "extended-community-soo"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunitySoo.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunitySoo.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-soo/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunitySoo.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "extended-community-soo"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunitySoo.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunitySoo.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-soo/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "extended-community-soo" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.ExtendedCommunitySoo.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.ExtendedCommunitySoo.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.ExtendedCommunitySoo.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.ExtendedCommunitySoo.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Tag(Entity):
            """
            Information about Tag sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.Tag, self).__init__()

                self.yang_name = "tag"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.Tag.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.Tag.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.Tag.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.Tag.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Tag.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "tag"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Tag.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Tag.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.Tag.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.Tag.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.Tag.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.Tag.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.Tag.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Tag.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Tag.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Tag.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Tag.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Tag.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Tag.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Tag.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Tag.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Tag.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Tag.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Tag.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Tag.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Tag.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Tag.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Tag.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/tag/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.Tag.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.Tag.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/tag/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.Tag.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Tag.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "tag"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Tag.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Tag.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/tag/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Tag.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "tag"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Tag.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Tag.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/tag/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Tag.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "tag"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Tag.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Tag.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/tag/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "tag" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.Tag.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.Tag.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.Tag.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.Tag.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Prefix(Entity):
            """
            Information about AS Path sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.Prefix, self).__init__()

                self.yang_name = "prefix"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.Prefix.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.Prefix.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.Prefix.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.Prefix.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Prefix.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "prefix"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Prefix.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Prefix.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.Prefix.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.Prefix.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.Prefix.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.Prefix.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Prefix.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Prefix.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Prefix.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Prefix.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Prefix.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Prefix.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Prefix.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Prefix.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/prefix/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.Prefix.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.Prefix.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/prefix/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.Prefix.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Prefix.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "prefix"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Prefix.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Prefix.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/prefix/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Prefix.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "prefix"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Prefix.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Prefix.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/prefix/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Prefix.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "prefix"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Prefix.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Prefix.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/prefix/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "prefix" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.Prefix.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.Prefix.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.Prefix.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.Prefix.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Community(Entity):
            """
            Information about Community sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.Community, self).__init__()

                self.yang_name = "community"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.Community.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.Community.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.Community.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.Community.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Community.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "community"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Community.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Community.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.Community.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.Community.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.Community.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.Community.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.Community.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Community.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Community.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Community.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Community.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Community.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Community.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Community.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Community.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Community.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Community.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Community.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Community.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Community.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Community.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Community.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/community/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.Community.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.Community.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/community/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.Community.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Community.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "community"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Community.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Community.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/community/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Community.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "community"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Community.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Community.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/community/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Community.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "community"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Community.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Community.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/community/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "community" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.Community.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.Community.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.Community.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.Community.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class AsPath(Entity):
            """
            Information about AS Path sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.AsPath, self).__init__()

                self.yang_name = "as-path"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.AsPath.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.AsPath.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.AsPath.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.AsPath.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.AsPath.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "as-path"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.AsPath.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.AsPath.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.AsPath.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.AsPath.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.AsPath.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.AsPath.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.AsPath.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.AsPath.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.AsPath.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.AsPath.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.AsPath.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.AsPath.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.AsPath.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.AsPath.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/as-path/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.AsPath.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.AsPath.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/as-path/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.AsPath.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.AsPath.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "as-path"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.AsPath.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.AsPath.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/as-path/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.AsPath.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "as-path"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.AsPath.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.AsPath.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/as-path/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.AsPath.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "as-path"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.AsPath.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.AsPath.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/as-path/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "as-path" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.AsPath.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.AsPath.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.AsPath.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.AsPath.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Esi(Entity):
            """
            Information about Esi sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.Esi, self).__init__()

                self.yang_name = "esi"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.Esi.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.Esi.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.Esi.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.Esi.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Esi.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "esi"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Esi.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Esi.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.Esi.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.Esi.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.Esi.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.Esi.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.Esi.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Esi.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Esi.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Esi.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Esi.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Esi.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Esi.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Esi.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Esi.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Esi.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Esi.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Esi.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Esi.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Esi.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Esi.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Esi.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/esi/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.Esi.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.Esi.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/esi/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.Esi.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Esi.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "esi"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Esi.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Esi.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/esi/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Esi.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "esi"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Esi.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Esi.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/esi/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Esi.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "esi"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Esi.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Esi.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/esi/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "esi" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.Esi.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.Esi.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.Esi.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.Esi.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ExtendedCommunityBandwidth(Entity):
            """
            Information about Extended Community Bandwidth
            sets
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.ExtendedCommunityBandwidth, self).__init__()

                self.yang_name = "extended-community-bandwidth"
                self.yang_parent_name = "sets"

                self.inactive = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "extended-community-bandwidth"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-bandwidth/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-bandwidth/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "extended-community-bandwidth"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-bandwidth/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "extended-community-bandwidth"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityBandwidth.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-bandwidth/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "extended-community-bandwidth" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.ExtendedCommunityBandwidth.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ExtendedCommunityRt(Entity):
            """
            Information about Extended Community RT sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.ExtendedCommunityRt, self).__init__()

                self.yang_name = "extended-community-rt"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.ExtendedCommunityRt.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.ExtendedCommunityRt.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.ExtendedCommunityRt.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.ExtendedCommunityRt.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "extended-community-rt"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-rt/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-rt/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.ExtendedCommunityRt.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityRt.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "extended-community-rt"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityRt.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityRt.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-rt/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityRt.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "extended-community-rt"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityRt.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityRt.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-rt/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityRt.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "extended-community-rt"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityRt.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityRt.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-rt/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "extended-community-rt" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.ExtendedCommunityRt.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.ExtendedCommunityRt.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.ExtendedCommunityRt.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.ExtendedCommunityRt.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Rd(Entity):
            """
            Information about RD sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.Rd, self).__init__()

                self.yang_name = "rd"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.Rd.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.Rd.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.Rd.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.Rd.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Rd.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "rd"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Rd.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Rd.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.Rd.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.Rd.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.Rd.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.Rd.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.Rd.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Rd.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Rd.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Rd.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Rd.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Rd.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Rd.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Rd.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Rd.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Rd.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Rd.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Rd.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Rd.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Rd.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Rd.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Rd.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/rd/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.Rd.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.Rd.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/rd/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.Rd.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Rd.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "rd"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Rd.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Rd.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/rd/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Rd.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "rd"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Rd.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Rd.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/rd/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Rd.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "rd"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Rd.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Rd.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/rd/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "rd" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.Rd.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.Rd.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.Rd.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.Rd.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Mac(Entity):
            """
            Information about Mac sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.Mac, self).__init__()

                self.yang_name = "mac"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.Mac.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.Mac.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.Mac.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.Mac.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Mac.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "mac"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Mac.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Mac.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.Mac.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.Mac.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.Mac.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.Mac.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.Mac.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Mac.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Mac.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Mac.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Mac.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Mac.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Mac.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Mac.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.Mac.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.Mac.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.Mac.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.Mac.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.Mac.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.Mac.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.Mac.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.Mac.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/mac/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.Mac.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.Mac.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/mac/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.Mac.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Mac.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "mac"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Mac.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Mac.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/mac/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Mac.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "mac"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Mac.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Mac.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/mac/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.Mac.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "mac"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.Mac.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.Mac.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/mac/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "mac" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.Mac.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.Mac.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.Mac.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.Mac.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ExtendedCommunityCost(Entity):
            """
            Information about Extended Community Cost sets
            
            .. attribute:: active
            
            	All objects of a given type that are attached to a protocol
            	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Active>`
            
            .. attribute:: inactive
            
            	All objects of a given type that are not attached to a protocol
            	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Inactive>`
            
            .. attribute:: sets
            
            	Information about individual sets
            	**type**\:   :py:class:`Sets <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Sets>`
            
            .. attribute:: unused
            
            	All objects of a given type that are not referenced at all
            	**type**\:   :py:class:`Unused <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Unused>`
            
            

            """

            _prefix = 'policy-repository-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(RoutingPolicy.Sets.ExtendedCommunityCost, self).__init__()

                self.yang_name = "extended-community-cost"
                self.yang_parent_name = "sets"

                self.active = RoutingPolicy.Sets.ExtendedCommunityCost.Active()
                self.active.parent = self
                self._children_name_map["active"] = "active"
                self._children_yang_names.add("active")

                self.inactive = RoutingPolicy.Sets.ExtendedCommunityCost.Inactive()
                self.inactive.parent = self
                self._children_name_map["inactive"] = "inactive"
                self._children_yang_names.add("inactive")

                self.sets = RoutingPolicy.Sets.ExtendedCommunityCost.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
                self._children_yang_names.add("sets")

                self.unused = RoutingPolicy.Sets.ExtendedCommunityCost.Unused()
                self.unused.parent = self
                self._children_name_map["unused"] = "unused"
                self._children_yang_names.add("unused")


            class Sets(Entity):
                """
                Information about individual sets
                
                .. attribute:: set
                
                	Information about an individual set
                	**type**\: list of    :py:class:`Set <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set>`
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets, self).__init__()

                    self.yang_name = "sets"
                    self.yang_parent_name = "extended-community-cost"

                    self.set = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets, self).__setattr__(name, value)


                class Set(Entity):
                    """
                    Information about an individual set
                    
                    .. attribute:: set_name  <key>
                    
                    	Set name
                    	**type**\:  str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: attached
                    
                    	Information about where this policy or set is attached
                    	**type**\:   :py:class:`Attached <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached>`
                    
                    .. attribute:: used_by
                    
                    	Policies that use this object, directly or indirectly
                    	**type**\:   :py:class:`UsedBy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy>`
                    
                    

                    """

                    _prefix = 'policy-repository-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set, self).__init__()

                        self.yang_name = "set"
                        self.yang_parent_name = "sets"

                        self.set_name = YLeaf(YType.str, "set-name")

                        self.attached = RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached()
                        self.attached.parent = self
                        self._children_name_map["attached"] = "attached"
                        self._children_yang_names.add("attached")

                        self.used_by = RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy()
                        self.used_by.parent = self
                        self._children_name_map["used_by"] = "used-by"
                        self._children_yang_names.add("used-by")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("set_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set, self).__setattr__(name, value)


                    class UsedBy(Entity):
                        """
                        Policies that use this object, directly or
                        indirectly
                        
                        .. attribute:: reference
                        
                        	Information about policies referring to this object
                        	**type**\: list of    :py:class:`Reference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy.Reference>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy, self).__init__()

                            self.yang_name = "used-by"
                            self.yang_parent_name = "set"

                            self.reference = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy, self).__setattr__(name, value)


                        class Reference(Entity):
                            """
                            Information about policies referring to this
                            object
                            
                            .. attribute:: route_policy_name
                            
                            	Name of policy
                            	**type**\:  str
                            
                            .. attribute:: status
                            
                            	Active, Inactive, or Unused
                            	**type**\:   :py:class:`ObjectStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.ObjectStatus>`
                            
                            .. attribute:: used_directly
                            
                            	Whether the policy uses this object directly or indirectly
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy.Reference, self).__init__()

                                self.yang_name = "reference"
                                self.yang_parent_name = "used-by"

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.status = YLeaf(YType.enumeration, "status")

                                self.used_directly = YLeaf(YType.boolean, "used-directly")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("route_policy_name",
                                                "status",
                                                "used_directly") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy.Reference, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.route_policy_name.is_set or
                                    self.status.is_set or
                                    self.used_directly.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.status.yfilter != YFilter.not_set or
                                    self.used_directly.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "reference" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.status.is_set or self.status.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.status.get_name_leafdata())
                                if (self.used_directly.is_set or self.used_directly.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.used_directly.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "route-policy-name" or name == "status" or name == "used-directly"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "status"):
                                    self.status = value
                                    self.status.value_namespace = name_space
                                    self.status.value_namespace_prefix = name_space_prefix
                                if(value_path == "used-directly"):
                                    self.used_directly = value
                                    self.used_directly.value_namespace = name_space
                                    self.used_directly.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.reference:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.reference:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "used-by" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "reference"):
                                for c in self.reference:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy.Reference()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.reference.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "reference"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Attached(Entity):
                        """
                        Information about where this policy or set is
                        attached
                        
                        .. attribute:: binding
                        
                        	bindings list
                        	**type**\: list of    :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached.Binding>`
                        
                        

                        """

                        _prefix = 'policy-repository-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached, self).__init__()

                            self.yang_name = "attached"
                            self.yang_parent_name = "set"

                            self.binding = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached, self).__setattr__(name, value)


                        class Binding(Entity):
                            """
                            bindings list
                            
                            .. attribute:: af_name
                            
                            	Address Family Identifier
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: aggregate_network_address
                            
                            	Aggregate IP address or Network IP Address       in IPv4 or IPv6 Format
                            	**type**\:  str
                            
                            .. attribute:: area_id
                            
                            	OSPF Area ID in Decimal Integer Format
                            	**type**\:  str
                            
                            .. attribute:: attach_point
                            
                            	Name of attach point where policy is attached
                            	**type**\:  str
                            
                            .. attribute:: attached_policy
                            
                            	The attached policy that (maybe indirectly) uses the object in question
                            	**type**\:  str
                            
                            .. attribute:: direction
                            
                            	Direction In or Out
                            	**type**\:   :py:class:`AttachPointDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AttachPointDirection>`
                            
                            .. attribute:: group
                            
                            	Neighbor Group 
                            	**type**\:   :py:class:`Group <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.Group>`
                            
                            .. attribute:: group_name
                            
                            	Neighbor Group Name
                            	**type**\:  str
                            
                            .. attribute:: instance
                            
                            	Instance
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbor_address
                            
                            	Neighbor IP Address
                            	**type**\:  str
                            
                            .. attribute:: neighbor_af_name
                            
                            	Neighbor IP Address Family
                            	**type**\:   :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.AddressFamily>`
                            
                            .. attribute:: propogate_from
                            
                            	ISIS Propogate From Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: propogate_to
                            
                            	ISIS Propogate To Level
                            	**type**\:  int
                            
                            	**range:** \-2147483648..2147483647
                            
                            .. attribute:: proto_instance
                            
                            	Protocol instance
                            	**type**\:  str
                            
                            .. attribute:: protocol
                            
                            	Protocol to which policy attached
                            	**type**\:  str
                            
                            .. attribute:: route_policy_name
                            
                            	Policy that uses object in question
                            	**type**\:  str
                            
                            .. attribute:: saf_name
                            
                            	Subsequent Address Family Identifier
                            	**type**\:   :py:class:`SubAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_policy_repository_oper.SubAddressFamily>`
                            
                            .. attribute:: source_protocol
                            
                            	Source Protocol to redistribute,                 Source Protocol can be one of the following values                               {all, connected, local, static, bgp, rip, isis, ospf,  ospfv3, eigrp, unknown }
                            	**type**\:  str
                            
                            .. attribute:: vrf_name
                            
                            	VRF name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'policy-repository-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached.Binding, self).__init__()

                                self.yang_name = "binding"
                                self.yang_parent_name = "attached"

                                self.af_name = YLeaf(YType.enumeration, "af-name")

                                self.aggregate_network_address = YLeaf(YType.str, "aggregate-network-address")

                                self.area_id = YLeaf(YType.str, "area-id")

                                self.attach_point = YLeaf(YType.str, "attach-point")

                                self.attached_policy = YLeaf(YType.str, "attached-policy")

                                self.direction = YLeaf(YType.enumeration, "direction")

                                self.group = YLeaf(YType.enumeration, "group")

                                self.group_name = YLeaf(YType.str, "group-name")

                                self.instance = YLeaf(YType.str, "instance")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.neighbor_address = YLeaf(YType.str, "neighbor-address")

                                self.neighbor_af_name = YLeaf(YType.enumeration, "neighbor-af-name")

                                self.propogate_from = YLeaf(YType.int32, "propogate-from")

                                self.propogate_to = YLeaf(YType.int32, "propogate-to")

                                self.proto_instance = YLeaf(YType.str, "proto-instance")

                                self.protocol = YLeaf(YType.str, "protocol")

                                self.route_policy_name = YLeaf(YType.str, "route-policy-name")

                                self.saf_name = YLeaf(YType.enumeration, "saf-name")

                                self.source_protocol = YLeaf(YType.str, "source-protocol")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("af_name",
                                                "aggregate_network_address",
                                                "area_id",
                                                "attach_point",
                                                "attached_policy",
                                                "direction",
                                                "group",
                                                "group_name",
                                                "instance",
                                                "interface_name",
                                                "neighbor_address",
                                                "neighbor_af_name",
                                                "propogate_from",
                                                "propogate_to",
                                                "proto_instance",
                                                "protocol",
                                                "route_policy_name",
                                                "saf_name",
                                                "source_protocol",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached.Binding, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached.Binding, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.af_name.is_set or
                                    self.aggregate_network_address.is_set or
                                    self.area_id.is_set or
                                    self.attach_point.is_set or
                                    self.attached_policy.is_set or
                                    self.direction.is_set or
                                    self.group.is_set or
                                    self.group_name.is_set or
                                    self.instance.is_set or
                                    self.interface_name.is_set or
                                    self.neighbor_address.is_set or
                                    self.neighbor_af_name.is_set or
                                    self.propogate_from.is_set or
                                    self.propogate_to.is_set or
                                    self.proto_instance.is_set or
                                    self.protocol.is_set or
                                    self.route_policy_name.is_set or
                                    self.saf_name.is_set or
                                    self.source_protocol.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.af_name.yfilter != YFilter.not_set or
                                    self.aggregate_network_address.yfilter != YFilter.not_set or
                                    self.area_id.yfilter != YFilter.not_set or
                                    self.attach_point.yfilter != YFilter.not_set or
                                    self.attached_policy.yfilter != YFilter.not_set or
                                    self.direction.yfilter != YFilter.not_set or
                                    self.group.yfilter != YFilter.not_set or
                                    self.group_name.yfilter != YFilter.not_set or
                                    self.instance.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.neighbor_address.yfilter != YFilter.not_set or
                                    self.neighbor_af_name.yfilter != YFilter.not_set or
                                    self.propogate_from.yfilter != YFilter.not_set or
                                    self.propogate_to.yfilter != YFilter.not_set or
                                    self.proto_instance.yfilter != YFilter.not_set or
                                    self.protocol.yfilter != YFilter.not_set or
                                    self.route_policy_name.yfilter != YFilter.not_set or
                                    self.saf_name.yfilter != YFilter.not_set or
                                    self.source_protocol.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "binding" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.af_name.is_set or self.af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.af_name.get_name_leafdata())
                                if (self.aggregate_network_address.is_set or self.aggregate_network_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aggregate_network_address.get_name_leafdata())
                                if (self.area_id.is_set or self.area_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.area_id.get_name_leafdata())
                                if (self.attach_point.is_set or self.attach_point.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attach_point.get_name_leafdata())
                                if (self.attached_policy.is_set or self.attached_policy.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.attached_policy.get_name_leafdata())
                                if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.direction.get_name_leafdata())
                                if (self.group.is_set or self.group.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group.get_name_leafdata())
                                if (self.group_name.is_set or self.group_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.group_name.get_name_leafdata())
                                if (self.instance.is_set or self.instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.instance.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.neighbor_address.is_set or self.neighbor_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_address.get_name_leafdata())
                                if (self.neighbor_af_name.is_set or self.neighbor_af_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.neighbor_af_name.get_name_leafdata())
                                if (self.propogate_from.is_set or self.propogate_from.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_from.get_name_leafdata())
                                if (self.propogate_to.is_set or self.propogate_to.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.propogate_to.get_name_leafdata())
                                if (self.proto_instance.is_set or self.proto_instance.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proto_instance.get_name_leafdata())
                                if (self.protocol.is_set or self.protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.protocol.get_name_leafdata())
                                if (self.route_policy_name.is_set or self.route_policy_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.route_policy_name.get_name_leafdata())
                                if (self.saf_name.is_set or self.saf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.saf_name.get_name_leafdata())
                                if (self.source_protocol.is_set or self.source_protocol.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.source_protocol.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "af-name" or name == "aggregate-network-address" or name == "area-id" or name == "attach-point" or name == "attached-policy" or name == "direction" or name == "group" or name == "group-name" or name == "instance" or name == "interface-name" or name == "neighbor-address" or name == "neighbor-af-name" or name == "propogate-from" or name == "propogate-to" or name == "proto-instance" or name == "protocol" or name == "route-policy-name" or name == "saf-name" or name == "source-protocol" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "af-name"):
                                    self.af_name = value
                                    self.af_name.value_namespace = name_space
                                    self.af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "aggregate-network-address"):
                                    self.aggregate_network_address = value
                                    self.aggregate_network_address.value_namespace = name_space
                                    self.aggregate_network_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "area-id"):
                                    self.area_id = value
                                    self.area_id.value_namespace = name_space
                                    self.area_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "attach-point"):
                                    self.attach_point = value
                                    self.attach_point.value_namespace = name_space
                                    self.attach_point.value_namespace_prefix = name_space_prefix
                                if(value_path == "attached-policy"):
                                    self.attached_policy = value
                                    self.attached_policy.value_namespace = name_space
                                    self.attached_policy.value_namespace_prefix = name_space_prefix
                                if(value_path == "direction"):
                                    self.direction = value
                                    self.direction.value_namespace = name_space
                                    self.direction.value_namespace_prefix = name_space_prefix
                                if(value_path == "group"):
                                    self.group = value
                                    self.group.value_namespace = name_space
                                    self.group.value_namespace_prefix = name_space_prefix
                                if(value_path == "group-name"):
                                    self.group_name = value
                                    self.group_name.value_namespace = name_space
                                    self.group_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "instance"):
                                    self.instance = value
                                    self.instance.value_namespace = name_space
                                    self.instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-address"):
                                    self.neighbor_address = value
                                    self.neighbor_address.value_namespace = name_space
                                    self.neighbor_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "neighbor-af-name"):
                                    self.neighbor_af_name = value
                                    self.neighbor_af_name.value_namespace = name_space
                                    self.neighbor_af_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-from"):
                                    self.propogate_from = value
                                    self.propogate_from.value_namespace = name_space
                                    self.propogate_from.value_namespace_prefix = name_space_prefix
                                if(value_path == "propogate-to"):
                                    self.propogate_to = value
                                    self.propogate_to.value_namespace = name_space
                                    self.propogate_to.value_namespace_prefix = name_space_prefix
                                if(value_path == "proto-instance"):
                                    self.proto_instance = value
                                    self.proto_instance.value_namespace = name_space
                                    self.proto_instance.value_namespace_prefix = name_space_prefix
                                if(value_path == "protocol"):
                                    self.protocol = value
                                    self.protocol.value_namespace = name_space
                                    self.protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "route-policy-name"):
                                    self.route_policy_name = value
                                    self.route_policy_name.value_namespace = name_space
                                    self.route_policy_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "saf-name"):
                                    self.saf_name = value
                                    self.saf_name.value_namespace = name_space
                                    self.saf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "source-protocol"):
                                    self.source_protocol = value
                                    self.source_protocol.value_namespace = name_space
                                    self.source_protocol.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.binding:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.binding:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "attached" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "binding"):
                                for c in self.binding:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached.Binding()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.binding.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "binding"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.set_name.is_set or
                            (self.attached is not None and self.attached.has_data()) or
                            (self.used_by is not None and self.used_by.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.set_name.yfilter != YFilter.not_set or
                            (self.attached is not None and self.attached.has_operation()) or
                            (self.used_by is not None and self.used_by.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "set" + "[set-name='" + self.set_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-cost/sets/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.set_name.is_set or self.set_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.set_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "attached"):
                            if (self.attached is None):
                                self.attached = RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.Attached()
                                self.attached.parent = self
                                self._children_name_map["attached"] = "attached"
                            return self.attached

                        if (child_yang_name == "used-by"):
                            if (self.used_by is None):
                                self.used_by = RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set.UsedBy()
                                self.used_by.parent = self
                                self._children_name_map["used_by"] = "used-by"
                            return self.used_by

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attached" or name == "used-by" or name == "set-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "set-name"):
                            self.set_name = value
                            self.set_name.value_namespace = name_space
                            self.set_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.set:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.set:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "sets" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-cost/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "set"):
                        for c in self.set:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = RoutingPolicy.Sets.ExtendedCommunityCost.Sets.Set()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.set.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "set"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Unused(Entity):
                """
                All objects of a given type that are not
                referenced at all
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityCost.Unused, self).__init__()

                    self.yang_name = "unused"
                    self.yang_parent_name = "extended-community-cost"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityCost.Unused, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityCost.Unused, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "unused" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-cost/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Inactive(Entity):
                """
                All objects of a given type that are not
                attached to a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityCost.Inactive, self).__init__()

                    self.yang_name = "inactive"
                    self.yang_parent_name = "extended-community-cost"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityCost.Inactive, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityCost.Inactive, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inactive" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-cost/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)


            class Active(Entity):
                """
                All objects of a given type that are attached to
                a protocol
                
                .. attribute:: object
                
                	Policy objects
                	**type**\:  list of str
                
                

                """

                _prefix = 'policy-repository-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(RoutingPolicy.Sets.ExtendedCommunityCost.Active, self).__init__()

                    self.yang_name = "active"
                    self.yang_parent_name = "extended-community-cost"

                    self.object = YLeafList(YType.str, "object")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("object") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(RoutingPolicy.Sets.ExtendedCommunityCost.Active, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(RoutingPolicy.Sets.ExtendedCommunityCost.Active, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.object.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.object.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "active" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/extended-community-cost/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.object.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "object"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "object"):
                        self.object.append(value)

            def has_data(self):
                return (
                    (self.active is not None and self.active.has_data()) or
                    (self.inactive is not None and self.inactive.has_data()) or
                    (self.sets is not None and self.sets.has_data()) or
                    (self.unused is not None and self.unused.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.active is not None and self.active.has_operation()) or
                    (self.inactive is not None and self.inactive.has_operation()) or
                    (self.sets is not None and self.sets.has_operation()) or
                    (self.unused is not None and self.unused.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "extended-community-cost" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/sets/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "active"):
                    if (self.active is None):
                        self.active = RoutingPolicy.Sets.ExtendedCommunityCost.Active()
                        self.active.parent = self
                        self._children_name_map["active"] = "active"
                    return self.active

                if (child_yang_name == "inactive"):
                    if (self.inactive is None):
                        self.inactive = RoutingPolicy.Sets.ExtendedCommunityCost.Inactive()
                        self.inactive.parent = self
                        self._children_name_map["inactive"] = "inactive"
                    return self.inactive

                if (child_yang_name == "sets"):
                    if (self.sets is None):
                        self.sets = RoutingPolicy.Sets.ExtendedCommunityCost.Sets()
                        self.sets.parent = self
                        self._children_name_map["sets"] = "sets"
                    return self.sets

                if (child_yang_name == "unused"):
                    if (self.unused is None):
                        self.unused = RoutingPolicy.Sets.ExtendedCommunityCost.Unused()
                        self.unused.parent = self
                        self._children_name_map["unused"] = "unused"
                    return self.unused

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "active" or name == "inactive" or name == "sets" or name == "unused"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (
                (self.as_path is not None and self.as_path.has_data()) or
                (self.community is not None and self.community.has_data()) or
                (self.esi is not None and self.esi.has_data()) or
                (self.etag is not None and self.etag.has_data()) or
                (self.extended_community_bandwidth is not None and self.extended_community_bandwidth.has_data()) or
                (self.extended_community_cost is not None and self.extended_community_cost.has_data()) or
                (self.extended_community_opaque is not None and self.extended_community_opaque.has_data()) or
                (self.extended_community_rt is not None and self.extended_community_rt.has_data()) or
                (self.extended_community_seg_nh is not None and self.extended_community_seg_nh.has_data()) or
                (self.extended_community_soo is not None and self.extended_community_soo.has_data()) or
                (self.mac is not None and self.mac.has_data()) or
                (self.ospf_area is not None and self.ospf_area.has_data()) or
                (self.prefix is not None and self.prefix.has_data()) or
                (self.rd is not None and self.rd.has_data()) or
                (self.tag is not None and self.tag.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.as_path is not None and self.as_path.has_operation()) or
                (self.community is not None and self.community.has_operation()) or
                (self.esi is not None and self.esi.has_operation()) or
                (self.etag is not None and self.etag.has_operation()) or
                (self.extended_community_bandwidth is not None and self.extended_community_bandwidth.has_operation()) or
                (self.extended_community_cost is not None and self.extended_community_cost.has_operation()) or
                (self.extended_community_opaque is not None and self.extended_community_opaque.has_operation()) or
                (self.extended_community_rt is not None and self.extended_community_rt.has_operation()) or
                (self.extended_community_seg_nh is not None and self.extended_community_seg_nh.has_operation()) or
                (self.extended_community_soo is not None and self.extended_community_soo.has_operation()) or
                (self.mac is not None and self.mac.has_operation()) or
                (self.ospf_area is not None and self.ospf_area.has_operation()) or
                (self.prefix is not None and self.prefix.has_operation()) or
                (self.rd is not None and self.rd.has_operation()) or
                (self.tag is not None and self.tag.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "sets" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "as-path"):
                if (self.as_path is None):
                    self.as_path = RoutingPolicy.Sets.AsPath()
                    self.as_path.parent = self
                    self._children_name_map["as_path"] = "as-path"
                return self.as_path

            if (child_yang_name == "community"):
                if (self.community is None):
                    self.community = RoutingPolicy.Sets.Community()
                    self.community.parent = self
                    self._children_name_map["community"] = "community"
                return self.community

            if (child_yang_name == "esi"):
                if (self.esi is None):
                    self.esi = RoutingPolicy.Sets.Esi()
                    self.esi.parent = self
                    self._children_name_map["esi"] = "esi"
                return self.esi

            if (child_yang_name == "etag"):
                if (self.etag is None):
                    self.etag = RoutingPolicy.Sets.Etag()
                    self.etag.parent = self
                    self._children_name_map["etag"] = "etag"
                return self.etag

            if (child_yang_name == "extended-community-bandwidth"):
                if (self.extended_community_bandwidth is None):
                    self.extended_community_bandwidth = RoutingPolicy.Sets.ExtendedCommunityBandwidth()
                    self.extended_community_bandwidth.parent = self
                    self._children_name_map["extended_community_bandwidth"] = "extended-community-bandwidth"
                return self.extended_community_bandwidth

            if (child_yang_name == "extended-community-cost"):
                if (self.extended_community_cost is None):
                    self.extended_community_cost = RoutingPolicy.Sets.ExtendedCommunityCost()
                    self.extended_community_cost.parent = self
                    self._children_name_map["extended_community_cost"] = "extended-community-cost"
                return self.extended_community_cost

            if (child_yang_name == "extended-community-opaque"):
                if (self.extended_community_opaque is None):
                    self.extended_community_opaque = RoutingPolicy.Sets.ExtendedCommunityOpaque()
                    self.extended_community_opaque.parent = self
                    self._children_name_map["extended_community_opaque"] = "extended-community-opaque"
                return self.extended_community_opaque

            if (child_yang_name == "extended-community-rt"):
                if (self.extended_community_rt is None):
                    self.extended_community_rt = RoutingPolicy.Sets.ExtendedCommunityRt()
                    self.extended_community_rt.parent = self
                    self._children_name_map["extended_community_rt"] = "extended-community-rt"
                return self.extended_community_rt

            if (child_yang_name == "extended-community-seg-nh"):
                if (self.extended_community_seg_nh is None):
                    self.extended_community_seg_nh = RoutingPolicy.Sets.ExtendedCommunitySegNh()
                    self.extended_community_seg_nh.parent = self
                    self._children_name_map["extended_community_seg_nh"] = "extended-community-seg-nh"
                return self.extended_community_seg_nh

            if (child_yang_name == "extended-community-soo"):
                if (self.extended_community_soo is None):
                    self.extended_community_soo = RoutingPolicy.Sets.ExtendedCommunitySoo()
                    self.extended_community_soo.parent = self
                    self._children_name_map["extended_community_soo"] = "extended-community-soo"
                return self.extended_community_soo

            if (child_yang_name == "mac"):
                if (self.mac is None):
                    self.mac = RoutingPolicy.Sets.Mac()
                    self.mac.parent = self
                    self._children_name_map["mac"] = "mac"
                return self.mac

            if (child_yang_name == "ospf-area"):
                if (self.ospf_area is None):
                    self.ospf_area = RoutingPolicy.Sets.OspfArea()
                    self.ospf_area.parent = self
                    self._children_name_map["ospf_area"] = "ospf-area"
                return self.ospf_area

            if (child_yang_name == "prefix"):
                if (self.prefix is None):
                    self.prefix = RoutingPolicy.Sets.Prefix()
                    self.prefix.parent = self
                    self._children_name_map["prefix"] = "prefix"
                return self.prefix

            if (child_yang_name == "rd"):
                if (self.rd is None):
                    self.rd = RoutingPolicy.Sets.Rd()
                    self.rd.parent = self
                    self._children_name_map["rd"] = "rd"
                return self.rd

            if (child_yang_name == "tag"):
                if (self.tag is None):
                    self.tag = RoutingPolicy.Sets.Tag()
                    self.tag.parent = self
                    self._children_name_map["tag"] = "tag"
                return self.tag

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "as-path" or name == "community" or name == "esi" or name == "etag" or name == "extended-community-bandwidth" or name == "extended-community-cost" or name == "extended-community-opaque" or name == "extended-community-rt" or name == "extended-community-seg-nh" or name == "extended-community-soo" or name == "mac" or name == "ospf-area" or name == "prefix" or name == "rd" or name == "tag"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (
            (self.limits is not None and self.limits.has_data()) or
            (self.policies is not None and self.policies.has_data()) or
            (self.sets is not None and self.sets.has_data()))

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.limits is not None and self.limits.has_operation()) or
            (self.policies is not None and self.policies.has_operation()) or
            (self.sets is not None and self.sets.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-policy-repository-oper:routing-policy" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "limits"):
            if (self.limits is None):
                self.limits = RoutingPolicy.Limits()
                self.limits.parent = self
                self._children_name_map["limits"] = "limits"
            return self.limits

        if (child_yang_name == "policies"):
            if (self.policies is None):
                self.policies = RoutingPolicy.Policies()
                self.policies.parent = self
                self._children_name_map["policies"] = "policies"
            return self.policies

        if (child_yang_name == "sets"):
            if (self.sets is None):
                self.sets = RoutingPolicy.Sets()
                self.sets.parent = self
                self._children_name_map["sets"] = "sets"
            return self.sets

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "limits" or name == "policies" or name == "sets"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = RoutingPolicy()
        return self._top_entity

