""" Cisco_IOS_XR_infra_rcmd_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR infra\-rcmd package operational data.

This module contains definitions
for the following management objects\:
  rcmd\: Show command for Route Convergence Monitoring &
    Diagnostics

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError



class RcmdBagEnableDisableEnum(Enum):
    """
    RcmdBagEnableDisableEnum

    status enum

    .. data:: disable = 0

    	Disabled

    .. data:: enable = 1

    	Enabled

    """

    disable = 0

    enable = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdBagEnableDisableEnum']


class RcmdBagEnblDsblEnum(Enum):
    """
    RcmdBagEnblDsblEnum

    status enum

    .. data:: dsbl = 0

    	Disabled

    .. data:: enbl = 1

    	Enabled

    """

    dsbl = 0

    enbl = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdBagEnblDsblEnum']


class RcmdBoolYesNoEnum(Enum):
    """
    RcmdBoolYesNoEnum

    Boolean enum

    .. data:: no = 0

    	No

    .. data:: yes = 1

    	Yes

    """

    no = 0

    yes = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdBoolYesNoEnum']


class RcmdChangeEnum(Enum):
    """
    RcmdChangeEnum

    Type of change

    .. data:: none = 0

    	Invalid

    .. data:: add = 1

    	Added

    .. data:: delete = 2

    	Deleted

    .. data:: modify = 3

    	Modified

    .. data:: no_change = 4

    	No Change

    """

    none = 0

    add = 1

    delete = 2

    modify = 3

    no_change = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdChangeEnum']


class RcmdIsisLvlEnum(Enum):
    """
    RcmdIsisLvlEnum

    Type of an ISIS Level

    .. data:: l1 = 0

    	Level 1

    .. data:: l2 = 1

    	Level 2

    """

    l1 = 0

    l2 = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdIsisLvlEnum']


class RcmdIsisSpfEnum(Enum):
    """
    RcmdIsisSpfEnum

    Type of an ISIS SPF run

    .. data:: full = 0

    	Full

    .. data:: incremental = 1

    	Incremental

    .. data:: next_hop = 2

    	Next hop calculation

    .. data:: partial_route = 3

    	Partial route calculation

    """

    full = 0

    incremental = 1

    next_hop = 2

    partial_route = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdIsisSpfEnum']


class RcmdLdpEventEnum(Enum):
    """
    RcmdLdpEventEnum

    Type of LDP Event

    .. data:: neighbor = 1

    	Neighbor Event

    .. data:: adjacency = 2

    	Adjacency Event

    """

    neighbor = 1

    adjacency = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdLdpEventEnum']


class RcmdLinecardSpeedEnum(Enum):
    """
    RcmdLinecardSpeedEnum

    Comparative speed of programming on linecard

    .. data:: other = 0

    	Other linecard

    .. data:: fastest = 1

    	Fastest linecard

    .. data:: slowest = 2

    	Slowest linecard

    """

    other = 0

    fastest = 1

    slowest = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdLinecardSpeedEnum']


class RcmdLsChangeEnum(Enum):
    """
    RcmdLsChangeEnum

    Type of change

    .. data:: new = 0

    	Added

    .. data:: delete = 1

    	Deleted

    .. data:: modify = 2

    	Modified

    .. data:: noop = 3

    	No operation

    """

    new = 0

    delete = 1

    modify = 2

    noop = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdLsChangeEnum']


class RcmdLsaEnum(Enum):
    """
    RcmdLsaEnum

    Type of LSA

    .. data:: unknown = 0

    	Invalid LSA

    .. data:: router = 1

    	Router LSA

    .. data:: network = 2

    	Network LSA

    .. data:: summary = 3

    	Summary LSA

    .. data:: asbr = 4

    	ASBR LSA

    .. data:: external = 5

    	External LSA

    .. data:: multicast = 6

    	Multicast LSA

    .. data:: nssa = 7

    	NSSA LSA

    """

    unknown = 0

    router = 1

    network = 2

    summary = 3

    asbr = 4

    external = 5

    multicast = 6

    nssa = 7


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdLsaEnum']


class RcmdPriorityLevelEnum(Enum):
    """
    RcmdPriorityLevelEnum

    Level of priority

    .. data:: critical = 0

    	Critical

    .. data:: high = 1

    	High

    .. data:: medium = 2

    	Medium

    .. data:: low = 3

    	Low

    """

    critical = 0

    high = 1

    medium = 2

    low = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdPriorityLevelEnum']


class RcmdProtocolIdEnum(Enum):
    """
    RcmdProtocolIdEnum

    Protocol Info

    .. data:: ospf = 0

    	OSPF protocol

    .. data:: isis = 1

    	ISIS Prrotocol

    .. data:: na = 2

    	Max NA

    """

    ospf = 0

    isis = 1

    na = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdProtocolIdEnum']


class RcmdShowCompIdEnum(Enum):
    """
    RcmdShowCompIdEnum

    Component Info

    .. data:: ospf = 0

    	OSPF component

    .. data:: isis = 1

    	ISIS component

    .. data:: un_known = 2

    	Max NA

    """

    ospf = 0

    isis = 1

    un_known = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowCompIdEnum']


class RcmdShowInstStateEnum(Enum):
    """
    RcmdShowInstStateEnum

    instance state

    .. data:: unknown = 0

    	Unknown state

    .. data:: active = 1

    	Active state

    .. data:: in_active = 2

    	InActive state

    .. data:: na = 3

    	Max state

    """

    unknown = 0

    active = 1

    in_active = 2

    na = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowInstStateEnum']


class RcmdShowIntfEventEnum(Enum):
    """
    RcmdShowIntfEventEnum

    Rcmd show intf event

    .. data:: create = 1

    	Create

    .. data:: delete = 2

    	Delete

    .. data:: link_up = 3

    	LinkUp

    .. data:: link_down = 4

    	LinkDown

    .. data:: primary_address = 5

    	PrimaryAddress

    .. data:: secondary_address = 6

    	SecondaryAddress

    .. data:: ipv6_link_local_address = 7

    	Ipv6LinkLocalAddress

    .. data:: ipv6_global_address = 8

    	Ipv6GlobalAddress

    .. data:: mtu = 9

    	MTU

    .. data:: band_width = 10

    	BandWidth

    .. data:: ldp_sync = 11

    	LDPSync

    .. data:: forward_reference = 12

    	ForwardReference

    .. data:: ldp_no_sync = 13

    	LDPNoSync

    """

    create = 1

    delete = 2

    link_up = 3

    link_down = 4

    primary_address = 5

    secondary_address = 6

    ipv6_link_local_address = 7

    ipv6_global_address = 8

    mtu = 9

    band_width = 10

    ldp_sync = 11

    forward_reference = 12

    ldp_no_sync = 13


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowIntfEventEnum']


class RcmdShowIpfrrLfaEnum(Enum):
    """
    RcmdShowIpfrrLfaEnum

    IP Frr LFA Types

    .. data:: none = 0

    	No IP Frr LFA Type 

    .. data:: local = 1

    	IP Frr Local LFA

    .. data:: remote = 2

    	IP Frr Remote LFA

    """

    none = 0

    local = 1

    remote = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowIpfrrLfaEnum']


class RcmdShowLdpConvStateEnum(Enum):
    """
    RcmdShowLdpConvStateEnum

    LDP Convergence States

    .. data:: not_full = 0

    	Not Fully Covered

    .. data:: fully_covered = 1

    	Fully Covered

    .. data:: coverage_above_threshold = 2

    	Backup Coverage Above Threshold

    .. data:: coverage_below_threshold = 3

    	Backup Coverage Below Threshold

    .. data:: coverage_flapping = 4

    	Backup Coverage is Flappping

    """

    not_full = 0

    fully_covered = 1

    coverage_above_threshold = 2

    coverage_below_threshold = 3

    coverage_flapping = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowLdpConvStateEnum']


class RcmdShowLdpNeighbourStatusEnum(Enum):
    """
    RcmdShowLdpNeighbourStatusEnum

    LDP Adjacency Session Status

    .. data:: down = 0

    	Down State

    .. data:: up = 1

    	Up State

    """

    down = 0

    up = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowLdpNeighbourStatusEnum']


class RcmdShowLdpSessionStateEnum(Enum):
    """
    RcmdShowLdpSessionStateEnum

    LDP Session State

    .. data:: gr_down = 0

    	GR Down State

    .. data:: gr_converging = 1

    	GR Converging State

    .. data:: establishing = 2

    	Establishing State

    .. data:: converging = 3

    	Converging State

    .. data:: converged = 4

    	Converged State

    .. data:: retrying = 5

    	Retrying State

    .. data:: total = 6

    	Cumulative Coverage for all the States

    """

    gr_down = 0

    gr_converging = 1

    establishing = 2

    converging = 3

    converged = 4

    retrying = 5

    total = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowLdpSessionStateEnum']


class RcmdShowMemEnum(Enum):
    """
    RcmdShowMemEnum

    RCMD Memory Manager type

    .. data:: standard = 0

    	Standard type

    .. data:: chunk = 1

    	Chunk type

    .. data:: edm = 2

    	EDM type

    .. data:: string = 3

    	String type

    .. data:: static = 4

    	Static type

    .. data:: unknown = 5

    	Unknown type

    """

    standard = 0

    chunk = 1

    edm = 2

    string = 3

    static = 4

    unknown = 5


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowMemEnum']


class RcmdShowNodeEnum(Enum):
    """
    RcmdShowNodeEnum

    Type of Node

    .. data:: unknown = 0

    	Unknown Type

    .. data:: lc = 1

    	LC Type

    .. data:: rp = 2

    	RP Type

    """

    unknown = 0

    lc = 1

    rp = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowNodeEnum']


class RcmdShowPrcsStateEnum(Enum):
    """
    RcmdShowPrcsStateEnum

    Post Processing Info

    .. data:: success = 0

    	Success

    .. data:: cpu = 1

    	Cpu overload

    .. data:: memory = 2

    	Memory overload

    """

    success = 0

    cpu = 1

    memory = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowPrcsStateEnum']


class RcmdShowRouteEnum(Enum):
    """
    RcmdShowRouteEnum

    Route Types

    .. data:: ospf = 0

    	OSPF route init

    .. data:: intra = 1

    	OSPF Intra route

    .. data:: inter = 2

    	OSPF Inter route

    .. data:: ext_1 = 3

    	OSPF External Type-1 Route

    .. data:: ext_2 = 4

    	OSPF External Type-2 Route

    .. data:: nssa_1 = 5

    	OSPF NSSA Type-1 Route

    .. data:: nssa_2 = 6

    	OSPF NSSA Type-2 Route

    .. data:: isis = 7

    	ISIS route init

    .. data:: l1_summary = 8

    	ISIS L1 Summary

    .. data:: l1 = 9

    	ISIS L1

    .. data:: l2_summary = 10

    	ISIS L2 Summary

    .. data:: l2 = 11

    	ISIS L2

    .. data:: inter_area_summary = 12

    	ISIS Inter Area Summary

    .. data:: inter_area = 13

    	ISIS Inter Area

    .. data:: default_attached = 14

    	ISIS Default Route Attached

    """

    ospf = 0

    intra = 1

    inter = 2

    ext_1 = 3

    ext_2 = 4

    nssa_1 = 5

    nssa_2 = 6

    isis = 7

    l1_summary = 8

    l1 = 9

    l2_summary = 10

    l2 = 11

    inter_area_summary = 12

    inter_area = 13

    default_attached = 14


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowRouteEnum']


class RcmdShowRoutePathChangeEnum(Enum):
    """
    RcmdShowRoutePathChangeEnum

    Type of route change

    .. data:: primary = 0

    	Primary path is changed

    .. data:: backup = 1

    	Backup path is changed

    """

    primary = 0

    backup = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdShowRoutePathChangeEnum']


class RcmdSpfStateEnum(Enum):
    """
    RcmdSpfStateEnum

    Type of an ISIS Level

    .. data:: complete = 0

    	Complete

    .. data:: in_complete = 1

    	InComplete

    .. data:: collecting = 2

    	Collecting data

    .. data:: no_route_change = 3

    	No Route Change

    """

    complete = 0

    in_complete = 1

    collecting = 2

    no_route_change = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['RcmdSpfStateEnum']



class Rcmd(object):
    """
    Show command for Route Convergence Monitoring &
    Diagnostics
    
    .. attribute:: intf
    
    	Interface data
    	**type**\:   :py:class:`Intf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Intf>`
    
    .. attribute:: isis
    
    	Operational data for ISIS
    	**type**\:   :py:class:`Isis <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis>`
    
    .. attribute:: ldp
    
    	LDP data
    	**type**\:   :py:class:`Ldp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp>`
    
    .. attribute:: memory
    
    	Memory Info
    	**type**\:   :py:class:`Memory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Memory>`
    
    .. attribute:: node
    
    	Node Info
    	**type**\:   :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Node>`
    
    .. attribute:: ospf
    
    	Operational data for OSPF
    	**type**\:   :py:class:`Ospf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf>`
    
    .. attribute:: process
    
    	Process information
    	**type**\:   :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process>`
    
    .. attribute:: server
    
    	Server Info
    	**type**\:   :py:class:`Server <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server>`
    
    

    """

    _prefix = 'infra-rcmd-oper'
    _revision = '2015-11-09'

    def __init__(self):
        self.intf = Rcmd.Intf()
        self.intf.parent = self
        self.isis = Rcmd.Isis()
        self.isis.parent = self
        self.ldp = Rcmd.Ldp()
        self.ldp.parent = self
        self.memory = Rcmd.Memory()
        self.memory.parent = self
        self.node = Rcmd.Node()
        self.node.parent = self
        self.ospf = Rcmd.Ospf()
        self.ospf.parent = self
        self.process = Rcmd.Process()
        self.process.parent = self
        self.server = Rcmd.Server()
        self.server.parent = self


    class Ospf(object):
        """
        Operational data for OSPF
        
        .. attribute:: instances
        
        	Operational data
        	**type**\:   :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.instances = Rcmd.Ospf.Instances()
            self.instances.parent = self


        class Instances(object):
            """
            Operational data
            
            .. attribute:: instance
            
            	Operational data for a particular instance
            	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.instance = YList()
                self.instance.parent = self
                self.instance.name = 'instance'


            class Instance(object):
                """
                Operational data for a particular instance
                
                .. attribute:: instance_name  <key>
                
                	Operational data for a particular instance
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: ipfrr_event_offlines
                
                	OSPF IP\-FRR Event offline data
                	**type**\:   :py:class:`IpfrrEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines>`
                
                .. attribute:: ipfrr_event_summaries
                
                	OSPF IP\-FRR events summary data
                	**type**\:   :py:class:`IpfrrEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries>`
                
                .. attribute:: prefix_event_offlines
                
                	OSPF Prefix events offline data
                	**type**\:   :py:class:`PrefixEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines>`
                
                .. attribute:: prefix_event_statistics
                
                	OSPF Prefix events summary data
                	**type**\:   :py:class:`PrefixEventStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventStatistics>`
                
                .. attribute:: prefix_event_summaries
                
                	OSPF Prefix events summary data
                	**type**\:   :py:class:`PrefixEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries>`
                
                .. attribute:: spf_run_offlines
                
                	OSPF SPF run offline data
                	**type**\:   :py:class:`SpfRunOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines>`
                
                .. attribute:: spf_run_summaries
                
                	OSPF SPF run summary data
                	**type**\:   :py:class:`SpfRunSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries>`
                
                .. attribute:: summary_external_event_offlines
                
                	OSPF Summary\-External Prefix events offline data
                	**type**\:   :py:class:`SummaryExternalEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines>`
                
                .. attribute:: summary_external_event_statistics
                
                	Summary\-External prefix monitoring statistics
                	**type**\:   :py:class:`SummaryExternalEventStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventStatistics>`
                
                .. attribute:: summary_external_event_summaries
                
                	OSPF Summary\-External Prefix events summary data
                	**type**\:   :py:class:`SummaryExternalEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.instance_name = None
                    self.ipfrr_event_offlines = Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines()
                    self.ipfrr_event_offlines.parent = self
                    self.ipfrr_event_summaries = Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries()
                    self.ipfrr_event_summaries.parent = self
                    self.prefix_event_offlines = Rcmd.Ospf.Instances.Instance.PrefixEventOfflines()
                    self.prefix_event_offlines.parent = self
                    self.prefix_event_statistics = Rcmd.Ospf.Instances.Instance.PrefixEventStatistics()
                    self.prefix_event_statistics.parent = self
                    self.prefix_event_summaries = Rcmd.Ospf.Instances.Instance.PrefixEventSummaries()
                    self.prefix_event_summaries.parent = self
                    self.spf_run_offlines = Rcmd.Ospf.Instances.Instance.SpfRunOfflines()
                    self.spf_run_offlines.parent = self
                    self.spf_run_summaries = Rcmd.Ospf.Instances.Instance.SpfRunSummaries()
                    self.spf_run_summaries.parent = self
                    self.summary_external_event_offlines = Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines()
                    self.summary_external_event_offlines.parent = self
                    self.summary_external_event_statistics = Rcmd.Ospf.Instances.Instance.SummaryExternalEventStatistics()
                    self.summary_external_event_statistics.parent = self
                    self.summary_external_event_summaries = Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries()
                    self.summary_external_event_summaries.parent = self


                class IpfrrEventSummaries(object):
                    """
                    OSPF IP\-FRR events summary data
                    
                    .. attribute:: ipfrr_event_summary
                    
                    	IP\-FRR Event data
                    	**type**\: list of    :py:class:`IpfrrEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipfrr_event_summary = YList()
                        self.ipfrr_event_summary.parent = self
                        self.ipfrr_event_summary.name = 'ipfrr_event_summary'


                    class IpfrrEventSummary(object):
                        """
                        IP\-FRR Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific IP\-FRR Event
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: completed_spf_run
                        
                        	IP\-Frr Completed reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coverage
                        
                        	Coverage in percentage for all priorities
                        	**type**\:  str
                        
                        	**units**\: percentage
                        
                        .. attribute:: duration
                        
                        	Duration for the calculation (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: event_id_xr
                        
                        	IP\-Frr Event ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fully_protected_routes
                        
                        	Cumulative Number of Fully Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipfrr_statistic
                        
                        	IP\-Frr Statistics categorized by priority
                        	**type**\: list of    :py:class:`IpfrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic>`
                        
                        .. attribute:: partially_protected_routes
                        
                        	Cumulative Number of Partially Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: remote_node
                        
                        	Remote Node Information
                        	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode>`
                        
                        .. attribute:: start_time_offset
                        
                        	Start Time offset from trigger time (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: total_routes
                        
                        	Cumulative Number of Routes for all priorities
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_spf_run
                        
                        	IP\-Frr Triggered reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_time
                        
                        	Trigger time  (eg\: Apr 24 13\:16\:04.961)
                        	**type**\:  str
                        
                        .. attribute:: wait_time
                        
                        	Waiting Time (in milliseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.completed_spf_run = None
                            self.coverage = None
                            self.duration = None
                            self.event_id_xr = None
                            self.fully_protected_routes = None
                            self.ipfrr_statistic = YList()
                            self.ipfrr_statistic.parent = self
                            self.ipfrr_statistic.name = 'ipfrr_statistic'
                            self.partially_protected_routes = None
                            self.remote_node = YList()
                            self.remote_node.parent = self
                            self.remote_node.name = 'remote_node'
                            self.start_time_offset = None
                            self.total_routes = None
                            self.trigger_spf_run = None
                            self.trigger_time = None
                            self.wait_time = None


                        class IpfrrStatistic(object):
                            """
                            IP\-Frr Statistics categorized by priority
                            
                            .. attribute:: below_threshold
                            
                            	Covearge is below Configured Threshold
                            	**type**\:  bool
                            
                            .. attribute:: coverage
                            
                            	Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: fully_protected_routes
                            
                            	Fully Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_lfa_coverage
                            
                            	Local LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: partially_protected_routes
                            
                            	Partially Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: priority
                            
                            	Priority
                            	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                            
                            .. attribute:: remote_lfa_coverage
                            
                            	Remote LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: total_routes
                            
                            	Total Number of Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.below_threshold = None
                                self.coverage = None
                                self.fully_protected_routes = None
                                self.local_lfa_coverage = None
                                self.partially_protected_routes = None
                                self.priority = None
                                self.remote_lfa_coverage = None
                                self.total_routes = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-statistic'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.below_threshold is not None:
                                    return True

                                if self.coverage is not None:
                                    return True

                                if self.fully_protected_routes is not None:
                                    return True

                                if self.local_lfa_coverage is not None:
                                    return True

                                if self.partially_protected_routes is not None:
                                    return True

                                if self.priority is not None:
                                    return True

                                if self.remote_lfa_coverage is not None:
                                    return True

                                if self.total_routes is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic']['meta_info']


                        class RemoteNode(object):
                            """
                            Remote Node Information
                            
                            .. attribute:: in_use_time
                            
                            	Inuse time of the Remote Node (eg\: Apr 24 13\:16 \:04.961)
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_count
                            
                            	Number of paths protected by this Remote Node
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: primary_path
                            
                            	Protected Primary Paths
                            	**type**\: list of    :py:class:`PrimaryPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath>`
                            
                            .. attribute:: remote_node_id
                            
                            	Remote\-LFA Node ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.in_use_time = None
                                self.interface_name = None
                                self.neighbour_address = None
                                self.path_count = None
                                self.primary_path = YList()
                                self.primary_path.parent = self
                                self.primary_path.name = 'primary_path'
                                self.remote_node_id = None


                            class PrimaryPath(object):
                                """
                                Protected Primary Paths
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None
                                    self.neighbour_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:primary-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:remote-node'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.in_use_time is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_count is not None:
                                    return True

                                if self.primary_path is not None:
                                    for child_ref in self.primary_path:
                                        if child_ref._has_data():
                                            return True

                                if self.remote_node_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-event-summary[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.completed_spf_run is not None:
                                return True

                            if self.coverage is not None:
                                return True

                            if self.duration is not None:
                                return True

                            if self.event_id_xr is not None:
                                return True

                            if self.fully_protected_routes is not None:
                                return True

                            if self.ipfrr_statistic is not None:
                                for child_ref in self.ipfrr_statistic:
                                    if child_ref._has_data():
                                        return True

                            if self.partially_protected_routes is not None:
                                return True

                            if self.remote_node is not None:
                                for child_ref in self.remote_node:
                                    if child_ref._has_data():
                                        return True

                            if self.start_time_offset is not None:
                                return True

                            if self.total_routes is not None:
                                return True

                            if self.trigger_spf_run is not None:
                                return True

                            if self.trigger_time is not None:
                                return True

                            if self.wait_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-event-summaries'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipfrr_event_summary is not None:
                            for child_ref in self.ipfrr_event_summary:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventSummaries']['meta_info']


                class PrefixEventStatistics(object):
                    """
                    OSPF Prefix events summary data
                    
                    .. attribute:: prefix_event_statistic
                    
                    	Prefix Event statistics
                    	**type**\: list of    :py:class:`PrefixEventStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.prefix_event_statistic = YList()
                        self.prefix_event_statistic.parent = self
                        self.prefix_event_statistic.name = 'prefix_event_statistic'


                    class PrefixEventStatistic(object):
                        """
                        Prefix Event statistics
                        
                        .. attribute:: prefix_info  <key>
                        
                        	Events with Prefix
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        
                        ----
                        .. attribute:: add_count
                        
                        	No. of times route gets Added
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: critical_priority
                        
                        	No. of times processed under Critical Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: delete_count
                        
                        	No. of times route gets Deleted
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: high_priority
                        
                        	No. of times processed under High Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_change_type
                        
                        	Last event Add/Delete
                        	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                        
                        .. attribute:: last_cost
                        
                        	Last Known Cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_event_time
                        
                        	Last event trigger time
                        	**type**\:  str
                        
                        .. attribute:: last_priority
                        
                        	Last event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                        
                        .. attribute:: last_route_type
                        
                        	Last event Route Type
                        	**type**\:   :py:class:`RcmdShowRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRouteEnum>`
                        
                        .. attribute:: low_priority
                        
                        	No. of times processed under Low Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: medium_priority
                        
                        	No. of times processed under Medium Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: modify_count
                        
                        	No. of times route gets Deleted
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceed_count
                        
                        	No. of times threshold got exceeded
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.prefix_info = None
                            self.add_count = None
                            self.critical_priority = None
                            self.delete_count = None
                            self.high_priority = None
                            self.last_change_type = None
                            self.last_cost = None
                            self.last_event_time = None
                            self.last_priority = None
                            self.last_route_type = None
                            self.low_priority = None
                            self.medium_priority = None
                            self.modify_count = None
                            self.prefix = None
                            self.prefix_lenth = None
                            self.threshold_exceed_count = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.prefix_info is None:
                                raise YPYModelError('Key property prefix_info is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-statistic[Cisco-IOS-XR-infra-rcmd-oper:prefix-info = ' + str(self.prefix_info) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.prefix_info is not None:
                                return True

                            if self.add_count is not None:
                                return True

                            if self.critical_priority is not None:
                                return True

                            if self.delete_count is not None:
                                return True

                            if self.high_priority is not None:
                                return True

                            if self.last_change_type is not None:
                                return True

                            if self.last_cost is not None:
                                return True

                            if self.last_event_time is not None:
                                return True

                            if self.last_priority is not None:
                                return True

                            if self.last_route_type is not None:
                                return True

                            if self.low_priority is not None:
                                return True

                            if self.medium_priority is not None:
                                return True

                            if self.modify_count is not None:
                                return True

                            if self.prefix is not None:
                                return True

                            if self.prefix_lenth is not None:
                                return True

                            if self.threshold_exceed_count is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.prefix_event_statistic is not None:
                            for child_ref in self.prefix_event_statistic:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventStatistics']['meta_info']


                class SpfRunSummaries(object):
                    """
                    OSPF SPF run summary data
                    
                    .. attribute:: spf_run_summary
                    
                    	SPF Event data
                    	**type**\: list of    :py:class:`SpfRunSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.spf_run_summary = YList()
                        self.spf_run_summary.parent = self
                        self.spf_run_summary.name = 'spf_run_summary'


                    class SpfRunSummary(object):
                        """
                        SPF Event data
                        
                        .. attribute:: spf_run_number  <key>
                        
                        	Specific SPF run
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: dijkstra_run
                        
                        	List of Dijkstra runs
                        	**type**\: list of    :py:class:`DijkstraRun <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun>`
                        
                        .. attribute:: inter_area_and_external
                        
                        	Inter\-area & external calculation information
                        	**type**\: list of    :py:class:`InterAreaAndExternal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal>`
                        
                        .. attribute:: spf_summary
                        
                        	SPF summary information
                        	**type**\:   :py:class:`SpfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary>`
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.spf_run_number = None
                            self.dijkstra_run = YList()
                            self.dijkstra_run.parent = self
                            self.dijkstra_run.name = 'dijkstra_run'
                            self.inter_area_and_external = YList()
                            self.inter_area_and_external.parent = self
                            self.inter_area_and_external.name = 'inter_area_and_external'
                            self.spf_summary = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary()
                            self.spf_summary.parent = self


                        class SpfSummary(object):
                            """
                            SPF summary information
                            
                            .. attribute:: duration
                            
                            	Duration of complete SPF calculation (in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: is_data_complete
                            
                            	Whether the event has all information
                            	**type**\:  bool
                            
                            .. attribute:: priority_summary
                            
                            	Convergence information summary on per\-priority basis
                            	**type**\: list of    :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary>`
                            
                            .. attribute:: start_time
                            
                            	Start time (offset from event trigger time in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: state
                            
                            	SPF state
                            	**type**\:   :py:class:`RcmdSpfStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdSpfStateEnum>`
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: total_dijkstra_runs
                            
                            	Total number of Dijkstra runs
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_inter_area_and_external_batches
                            
                            	Total number of inter\-area/external computation batches
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_type12lsa_changes
                            
                            	Total number of Type 1/2 LSA changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_type357lsa_changes
                            
                            	Total number of Type 3/5/7 LSA changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.duration = None
                                self.is_data_complete = None
                                self.priority_summary = YList()
                                self.priority_summary.parent = self
                                self.priority_summary.name = 'priority_summary'
                                self.start_time = None
                                self.state = None
                                self.threshold_exceeded = None
                                self.total_dijkstra_runs = None
                                self.total_inter_area_and_external_batches = None
                                self.total_type12lsa_changes = None
                                self.total_type357lsa_changes = None
                                self.trigger_time = None


                            class PrioritySummary(object):
                                """
                                Convergence information summary on per\-priority
                                basis
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.frr_statistic = YList()
                                    self.frr_statistic.parent = self
                                    self.frr_statistic.name = 'frr_statistic'
                                    self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self.level = None
                                    self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self.threshold_exceeded = None


                                class RouteStatistics(object):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.adds = None
                                        self.deletes = None
                                        self.modifies = None
                                        self.reachables = None
                                        self.touches = None
                                        self.unreachables = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.adds is not None:
                                            return True

                                        if self.deletes is not None:
                                            return True

                                        if self.modifies is not None:
                                            return True

                                        if self.reachables is not None:
                                            return True

                                        if self.touches is not None:
                                            return True

                                        if self.unreachables is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics']['meta_info']


                                class IpConvergenceTime(object):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime']['meta_info']


                                class MplsConvergenceTime(object):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime']['meta_info']


                                class FrrStatistic(object):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.coverage = None
                                        self.fully_protected_routes = None
                                        self.partially_protected_routes = None
                                        self.total_routes = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:frr-statistic'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.coverage is not None:
                                            return True

                                        if self.fully_protected_routes is not None:
                                            return True

                                        if self.partially_protected_routes is not None:
                                            return True

                                        if self.total_routes is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.frr_statistic is not None:
                                        for child_ref in self.frr_statistic:
                                            if child_ref._has_data():
                                                return True

                                    if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                        return True

                                    if self.route_statistics is not None and self.route_statistics._has_data():
                                        return True

                                    if self.threshold_exceeded is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-summary'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.duration is not None:
                                    return True

                                if self.is_data_complete is not None:
                                    return True

                                if self.priority_summary is not None:
                                    for child_ref in self.priority_summary:
                                        if child_ref._has_data():
                                            return True

                                if self.start_time is not None:
                                    return True

                                if self.state is not None:
                                    return True

                                if self.threshold_exceeded is not None:
                                    return True

                                if self.total_dijkstra_runs is not None:
                                    return True

                                if self.total_inter_area_and_external_batches is not None:
                                    return True

                                if self.total_type12lsa_changes is not None:
                                    return True

                                if self.total_type357lsa_changes is not None:
                                    return True

                                if self.trigger_time is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary']['meta_info']


                        class DijkstraRun(object):
                            """
                            List of Dijkstra runs
                            
                            .. attribute:: area_id
                            
                            	Area ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: dijkstra_run_number
                            
                            	Area Dijkstra run number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: duration
                            
                            	Duration of Dijktra calculation (in ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: lsa_processed
                            
                            	List of type 1/2 LSA changes processed
                            	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.LsaProcessed>`
                            
                            .. attribute:: priority
                            
                            	Convergence information on per\-priority basis
                            	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority>`
                            
                            .. attribute:: start_time
                            
                            	Start time (offset from event trigger time in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: trigger_lsa
                            
                            	LSA that triggered the Dijkstra run
                            	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.TriggerLsa>`
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: wait_time
                            
                            	Wait time (offset from event trigger time in ss .msec)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.area_id = None
                                self.dijkstra_run_number = None
                                self.duration = None
                                self.lsa_processed = YList()
                                self.lsa_processed.parent = self
                                self.lsa_processed.name = 'lsa_processed'
                                self.priority = YList()
                                self.priority.parent = self
                                self.priority.name = 'priority'
                                self.start_time = None
                                self.threshold_exceeded = None
                                self.trigger_lsa = YList()
                                self.trigger_lsa.parent = self
                                self.trigger_lsa.name = 'trigger_lsa'
                                self.trigger_time = None
                                self.wait_time = None


                            class TriggerLsa(object):
                                """
                                LSA that triggered the Dijkstra run
                                
                                .. attribute:: change_type
                                
                                	Add, Delete, Modify
                                	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                                
                                .. attribute:: lsa_id
                                
                                	LSA ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: lsa_type
                                
                                	LSA type
                                	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                                
                                .. attribute:: origin_router_id
                                
                                	Originating Router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: reception_time
                                
                                	Reception Time on router (in hh\:mm\:ss.msec)
                                	**type**\:  str
                                
                                .. attribute:: sequence_number
                                
                                	Sequence Number
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.lsa_id = None
                                    self.lsa_type = None
                                    self.origin_router_id = None
                                    self.reception_time = None
                                    self.sequence_number = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsa'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.lsa_id is not None:
                                        return True

                                    if self.lsa_type is not None:
                                        return True

                                    if self.origin_router_id is not None:
                                        return True

                                    if self.reception_time is not None:
                                        return True

                                    if self.sequence_number is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.TriggerLsa']['meta_info']


                            class Priority(object):
                                """
                                Convergence information on per\-priority basis
                                
                                .. attribute:: convergence_timeline
                                
                                	Convergence timeline details
                                	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline>`
                                
                                .. attribute:: leaf_networks_added
                                
                                	List of Leaf Networks Added
                                	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksAdded>`
                                
                                .. attribute:: leaf_networks_deleted
                                
                                	List of Leaf Networks Deleted
                                	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksDeleted>`
                                
                                .. attribute:: priority_summary
                                
                                	Summary of the priority
                                	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.convergence_timeline = YList()
                                    self.convergence_timeline.parent = self
                                    self.convergence_timeline.name = 'convergence_timeline'
                                    self.leaf_networks_added = YList()
                                    self.leaf_networks_added.parent = self
                                    self.leaf_networks_added.name = 'leaf_networks_added'
                                    self.leaf_networks_deleted = YList()
                                    self.leaf_networks_deleted.parent = self
                                    self.leaf_networks_deleted.name = 'leaf_networks_deleted'
                                    self.priority_summary = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary()
                                    self.priority_summary.parent = self


                                class PrioritySummary(object):
                                    """
                                    Summary of the priority
                                    
                                    .. attribute:: frr_statistic
                                    
                                    	Fast Re\-Route Statistics
                                    	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.FrrStatistic>`
                                    
                                    .. attribute:: ip_convergence_time
                                    
                                    	Convergence time for IP route programming
                                    	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime>`
                                    
                                    .. attribute:: level
                                    
                                    	Critical, High, Medium or Low
                                    	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                    
                                    .. attribute:: mpls_convergence_time
                                    
                                    	Convergence time for MPLS label programming
                                    	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime>`
                                    
                                    .. attribute:: route_statistics
                                    
                                    	Route statistics
                                    	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.RouteStatistics>`
                                    
                                    .. attribute:: threshold_exceeded
                                    
                                    	Threshold exceeded
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.frr_statistic = YList()
                                        self.frr_statistic.parent = self
                                        self.frr_statistic.name = 'frr_statistic'
                                        self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime()
                                        self.ip_convergence_time.parent = self
                                        self.level = None
                                        self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime()
                                        self.mpls_convergence_time.parent = self
                                        self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.RouteStatistics()
                                        self.route_statistics.parent = self
                                        self.threshold_exceeded = None


                                    class RouteStatistics(object):
                                        """
                                        Route statistics
                                        
                                        .. attribute:: adds
                                        
                                        	Added
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: deletes
                                        
                                        	Deleted
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: modifies
                                        
                                        	Modified
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: reachables
                                        
                                        	Reachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: touches
                                        
                                        	Touched
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unreachables
                                        
                                        	Unreachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adds = None
                                            self.deletes = None
                                            self.modifies = None
                                            self.reachables = None
                                            self.touches = None
                                            self.unreachables = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adds is not None:
                                                return True

                                            if self.deletes is not None:
                                                return True

                                            if self.modifies is not None:
                                                return True

                                            if self.reachables is not None:
                                                return True

                                            if self.touches is not None:
                                                return True

                                            if self.unreachables is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.RouteStatistics']['meta_info']


                                    class IpConvergenceTime(object):
                                        """
                                        Convergence time for IP route programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fastest_node_name = None
                                            self.maximum_time = None
                                            self.minimum_time = None
                                            self.slowest_node_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fastest_node_name is not None:
                                                return True

                                            if self.maximum_time is not None:
                                                return True

                                            if self.minimum_time is not None:
                                                return True

                                            if self.slowest_node_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime']['meta_info']


                                    class MplsConvergenceTime(object):
                                        """
                                        Convergence time for MPLS label programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fastest_node_name = None
                                            self.maximum_time = None
                                            self.minimum_time = None
                                            self.slowest_node_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fastest_node_name is not None:
                                                return True

                                            if self.maximum_time is not None:
                                                return True

                                            if self.minimum_time is not None:
                                                return True

                                            if self.slowest_node_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime']['meta_info']


                                    class FrrStatistic(object):
                                        """
                                        Fast Re\-Route Statistics
                                        
                                        .. attribute:: coverage
                                        
                                        	Coverage in percentage
                                        	**type**\:  str
                                        
                                        	**units**\: percentage
                                        
                                        .. attribute:: fully_protected_routes
                                        
                                        	Fully Protected Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: partially_protected_routes
                                        
                                        	Partially Protected Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: total_routes
                                        
                                        	Total Number of Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.coverage = None
                                            self.fully_protected_routes = None
                                            self.partially_protected_routes = None
                                            self.total_routes = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:frr-statistic'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.coverage is not None:
                                                return True

                                            if self.fully_protected_routes is not None:
                                                return True

                                            if self.partially_protected_routes is not None:
                                                return True

                                            if self.total_routes is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary.FrrStatistic']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.frr_statistic is not None:
                                            for child_ref in self.frr_statistic:
                                                if child_ref._has_data():
                                                    return True

                                        if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                            return True

                                        if self.level is not None:
                                            return True

                                        if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                            return True

                                        if self.route_statistics is not None and self.route_statistics._has_data():
                                            return True

                                        if self.threshold_exceeded is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.PrioritySummary']['meta_info']


                                class ConvergenceTimeline(object):
                                    """
                                    Convergence timeline details
                                    
                                    .. attribute:: lc_ip
                                    
                                    	List of Linecards' completion point for IP routes
                                    	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp>`
                                    
                                    .. attribute:: lc_mpls
                                    
                                    	List of Linecards' completion point for MPLS labels
                                    	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls>`
                                    
                                    .. attribute:: ldp_enter
                                    
                                    	Entry point of LDP
                                    	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter>`
                                    
                                    .. attribute:: ldp_exit
                                    
                                    	Exit point of LDP to LSD
                                    	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpExit>`
                                    
                                    .. attribute:: lsd_enter
                                    
                                    	Entry point of LSD
                                    	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter>`
                                    
                                    .. attribute:: lsd_exit
                                    
                                    	Exit point of LSD to FIBs
                                    	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdExit>`
                                    
                                    .. attribute:: ri_bv4_enter
                                    
                                    	Entry point of IPv4 RIB
                                    	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter>`
                                    
                                    .. attribute:: ri_bv4_exit
                                    
                                    	Exit point from IPv4 RIB to FIBs
                                    	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit>`
                                    
                                    .. attribute:: ri_bv4_redistribute
                                    
                                    	Route Redistribute point from IPv4 RIB to LDP
                                    	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                    
                                    .. attribute:: route_origin
                                    
                                    	Route origin (routing protocol)
                                    	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.lc_ip = YList()
                                        self.lc_ip.parent = self
                                        self.lc_ip.name = 'lc_ip'
                                        self.lc_mpls = YList()
                                        self.lc_mpls.parent = self
                                        self.lc_mpls.name = 'lc_mpls'
                                        self.ldp_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter()
                                        self.ldp_enter.parent = self
                                        self.ldp_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpExit()
                                        self.ldp_exit.parent = self
                                        self.lsd_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter()
                                        self.lsd_enter.parent = self
                                        self.lsd_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdExit()
                                        self.lsd_exit.parent = self
                                        self.ri_bv4_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter()
                                        self.ri_bv4_enter.parent = self
                                        self.ri_bv4_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit()
                                        self.ri_bv4_exit.parent = self
                                        self.ri_bv4_redistribute = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                        self.ri_bv4_redistribute.parent = self
                                        self.route_origin = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin()
                                        self.route_origin.parent = self


                                    class RouteOrigin(object):
                                        """
                                        Route origin (routing protocol)
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-origin'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin']['meta_info']


                                    class RiBv4Enter(object):
                                        """
                                        Entry point of IPv4 RIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter']['meta_info']


                                    class RiBv4Exit(object):
                                        """
                                        Exit point from IPv4 RIB to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit']['meta_info']


                                    class RiBv4Redistribute(object):
                                        """
                                        Route Redistribute point from IPv4 RIB to LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-redistribute'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute']['meta_info']


                                    class LdpEnter(object):
                                        """
                                        Entry point of LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter']['meta_info']


                                    class LdpExit(object):
                                        """
                                        Exit point of LDP to LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LdpExit']['meta_info']


                                    class LsdEnter(object):
                                        """
                                        Entry point of LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter']['meta_info']


                                    class LsdExit(object):
                                        """
                                        Exit point of LSD to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LsdExit']['meta_info']


                                    class LcIp(object):
                                        """
                                        List of Linecards' completion point for IP
                                        routes
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                            self.fib_complete.parent = self
                                            self.node_name = None
                                            self.speed = None


                                        class FibComplete(object):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.duration = None
                                                self.end_time = None
                                                self.start_time = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.duration is not None:
                                                    return True

                                                if self.end_time is not None:
                                                    return True

                                                if self.start_time is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fib_complete is not None and self.fib_complete._has_data():
                                                return True

                                            if self.node_name is not None:
                                                return True

                                            if self.speed is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcIp']['meta_info']


                                    class LcMpls(object):
                                        """
                                        List of Linecards' completion point for MPLS
                                        labels
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                            self.fib_complete.parent = self
                                            self.node_name = None
                                            self.speed = None


                                        class FibComplete(object):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.duration = None
                                                self.end_time = None
                                                self.start_time = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.duration is not None:
                                                    return True

                                                if self.end_time is not None:
                                                    return True

                                                if self.start_time is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fib_complete is not None and self.fib_complete._has_data():
                                                return True

                                            if self.node_name is not None:
                                                return True

                                            if self.speed is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline.LcMpls']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:convergence-timeline'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.lc_ip is not None:
                                            for child_ref in self.lc_ip:
                                                if child_ref._has_data():
                                                    return True

                                        if self.lc_mpls is not None:
                                            for child_ref in self.lc_mpls:
                                                if child_ref._has_data():
                                                    return True

                                        if self.ldp_enter is not None and self.ldp_enter._has_data():
                                            return True

                                        if self.ldp_exit is not None and self.ldp_exit._has_data():
                                            return True

                                        if self.lsd_enter is not None and self.lsd_enter._has_data():
                                            return True

                                        if self.lsd_exit is not None and self.lsd_exit._has_data():
                                            return True

                                        if self.ri_bv4_enter is not None and self.ri_bv4_enter._has_data():
                                            return True

                                        if self.ri_bv4_exit is not None and self.ri_bv4_exit._has_data():
                                            return True

                                        if self.ri_bv4_redistribute is not None and self.ri_bv4_redistribute._has_data():
                                            return True

                                        if self.route_origin is not None and self.route_origin._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.ConvergenceTimeline']['meta_info']


                                class LeafNetworksAdded(object):
                                    """
                                    List of Leaf Networks Added
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.net_mask = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-added'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.net_mask is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksAdded']['meta_info']


                                class LeafNetworksDeleted(object):
                                    """
                                    List of Leaf Networks Deleted
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.net_mask = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-deleted'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.net_mask is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority.LeafNetworksDeleted']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.convergence_timeline is not None:
                                        for child_ref in self.convergence_timeline:
                                            if child_ref._has_data():
                                                return True

                                    if self.leaf_networks_added is not None:
                                        for child_ref in self.leaf_networks_added:
                                            if child_ref._has_data():
                                                return True

                                    if self.leaf_networks_deleted is not None:
                                        for child_ref in self.leaf_networks_deleted:
                                            if child_ref._has_data():
                                                return True

                                    if self.priority_summary is not None and self.priority_summary._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.Priority']['meta_info']


                            class LsaProcessed(object):
                                """
                                List of type 1/2 LSA changes processed
                                
                                .. attribute:: change_type
                                
                                	Add, Delete, Modify
                                	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                                
                                .. attribute:: lsa_id
                                
                                	LSA ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: lsa_type
                                
                                	LSA type
                                	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                                
                                .. attribute:: origin_router_id
                                
                                	Originating Router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: reception_time
                                
                                	Reception Time on router (in hh\:mm\:ss.msec)
                                	**type**\:  str
                                
                                .. attribute:: sequence_number
                                
                                	Sequence Number
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.lsa_id = None
                                    self.lsa_type = None
                                    self.origin_router_id = None
                                    self.reception_time = None
                                    self.sequence_number = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsa-processed'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.lsa_id is not None:
                                        return True

                                    if self.lsa_type is not None:
                                        return True

                                    if self.origin_router_id is not None:
                                        return True

                                    if self.reception_time is not None:
                                        return True

                                    if self.sequence_number is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun.LsaProcessed']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:dijkstra-run'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.area_id is not None:
                                    return True

                                if self.dijkstra_run_number is not None:
                                    return True

                                if self.duration is not None:
                                    return True

                                if self.lsa_processed is not None:
                                    for child_ref in self.lsa_processed:
                                        if child_ref._has_data():
                                            return True

                                if self.priority is not None:
                                    for child_ref in self.priority:
                                        if child_ref._has_data():
                                            return True

                                if self.start_time is not None:
                                    return True

                                if self.threshold_exceeded is not None:
                                    return True

                                if self.trigger_lsa is not None:
                                    for child_ref in self.trigger_lsa:
                                        if child_ref._has_data():
                                            return True

                                if self.trigger_time is not None:
                                    return True

                                if self.wait_time is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.DijkstraRun']['meta_info']


                        class InterAreaAndExternal(object):
                            """
                            Inter\-area & external calculation information
                            
                            .. attribute:: priority
                            
                            	Convergence information on a per\-priority basis
                            	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.priority = YList()
                                self.priority.parent = self
                                self.priority.name = 'priority'


                            class Priority(object):
                                """
                                Convergence information on a per\-priority basis
                                
                                .. attribute:: convergence_timeline
                                
                                	Convergence timeline details
                                	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline>`
                                
                                .. attribute:: leaf_networks_added
                                
                                	List of Leaf Networks Added
                                	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksAdded>`
                                
                                .. attribute:: leaf_networks_deleted
                                
                                	List of Leaf Networks Deleted
                                	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksDeleted>`
                                
                                .. attribute:: priority_summary
                                
                                	Summary of the priority
                                	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.convergence_timeline = YList()
                                    self.convergence_timeline.parent = self
                                    self.convergence_timeline.name = 'convergence_timeline'
                                    self.leaf_networks_added = YList()
                                    self.leaf_networks_added.parent = self
                                    self.leaf_networks_added.name = 'leaf_networks_added'
                                    self.leaf_networks_deleted = YList()
                                    self.leaf_networks_deleted.parent = self
                                    self.leaf_networks_deleted.name = 'leaf_networks_deleted'
                                    self.priority_summary = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary()
                                    self.priority_summary.parent = self


                                class PrioritySummary(object):
                                    """
                                    Summary of the priority
                                    
                                    .. attribute:: ip_convergence_time
                                    
                                    	Convergence time for IP route programming
                                    	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime>`
                                    
                                    .. attribute:: level
                                    
                                    	Critical, High, Medium or Low
                                    	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                    
                                    .. attribute:: mpls_convergence_time
                                    
                                    	Convergence time for MPLS label programming
                                    	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime>`
                                    
                                    .. attribute:: route_statistics
                                    
                                    	Route statistics
                                    	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics>`
                                    
                                    .. attribute:: threshold_exceeded
                                    
                                    	Threshold exceeded
                                    	**type**\:  bool
                                    
                                    .. attribute:: type3ls_as
                                    
                                    	Number of Type 3 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type4ls_as
                                    
                                    	Number of Type 4 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type57ls_as
                                    
                                    	Number of Type 5/7 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime()
                                        self.ip_convergence_time.parent = self
                                        self.level = None
                                        self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime()
                                        self.mpls_convergence_time.parent = self
                                        self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics()
                                        self.route_statistics.parent = self
                                        self.threshold_exceeded = None
                                        self.type3ls_as = None
                                        self.type4ls_as = None
                                        self.type57ls_as = None


                                    class RouteStatistics(object):
                                        """
                                        Route statistics
                                        
                                        .. attribute:: adds
                                        
                                        	Added
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: deletes
                                        
                                        	Deleted
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: modifies
                                        
                                        	Modified
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: reachables
                                        
                                        	Reachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: touches
                                        
                                        	Touched
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unreachables
                                        
                                        	Unreachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adds = None
                                            self.deletes = None
                                            self.modifies = None
                                            self.reachables = None
                                            self.touches = None
                                            self.unreachables = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adds is not None:
                                                return True

                                            if self.deletes is not None:
                                                return True

                                            if self.modifies is not None:
                                                return True

                                            if self.reachables is not None:
                                                return True

                                            if self.touches is not None:
                                                return True

                                            if self.unreachables is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics']['meta_info']


                                    class IpConvergenceTime(object):
                                        """
                                        Convergence time for IP route programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fastest_node_name = None
                                            self.maximum_time = None
                                            self.minimum_time = None
                                            self.slowest_node_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fastest_node_name is not None:
                                                return True

                                            if self.maximum_time is not None:
                                                return True

                                            if self.minimum_time is not None:
                                                return True

                                            if self.slowest_node_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime']['meta_info']


                                    class MplsConvergenceTime(object):
                                        """
                                        Convergence time for MPLS label programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fastest_node_name = None
                                            self.maximum_time = None
                                            self.minimum_time = None
                                            self.slowest_node_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fastest_node_name is not None:
                                                return True

                                            if self.maximum_time is not None:
                                                return True

                                            if self.minimum_time is not None:
                                                return True

                                            if self.slowest_node_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                            return True

                                        if self.level is not None:
                                            return True

                                        if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                            return True

                                        if self.route_statistics is not None and self.route_statistics._has_data():
                                            return True

                                        if self.threshold_exceeded is not None:
                                            return True

                                        if self.type3ls_as is not None:
                                            return True

                                        if self.type4ls_as is not None:
                                            return True

                                        if self.type57ls_as is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.PrioritySummary']['meta_info']


                                class ConvergenceTimeline(object):
                                    """
                                    Convergence timeline details
                                    
                                    .. attribute:: lc_ip
                                    
                                    	List of Linecards' completion point for IP routes
                                    	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp>`
                                    
                                    .. attribute:: lc_mpls
                                    
                                    	List of Linecards' completion point for MPLS labels
                                    	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls>`
                                    
                                    .. attribute:: ldp_enter
                                    
                                    	Entry point of LDP
                                    	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter>`
                                    
                                    .. attribute:: ldp_exit
                                    
                                    	Exit point of LDP to LSD
                                    	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit>`
                                    
                                    .. attribute:: lsd_enter
                                    
                                    	Entry point of LSD
                                    	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter>`
                                    
                                    .. attribute:: lsd_exit
                                    
                                    	Exit point of LSD to FIBs
                                    	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit>`
                                    
                                    .. attribute:: ri_bv4_enter
                                    
                                    	Entry point of IPv4 RIB
                                    	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter>`
                                    
                                    .. attribute:: ri_bv4_exit
                                    
                                    	Exit point from IPv4 RIB to FIBs
                                    	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit>`
                                    
                                    .. attribute:: ri_bv4_redistribute
                                    
                                    	Route Redistribute point from IPv4 RIB to LDP
                                    	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                    
                                    .. attribute:: route_origin
                                    
                                    	Route origin (routing protocol)
                                    	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.lc_ip = YList()
                                        self.lc_ip.parent = self
                                        self.lc_ip.name = 'lc_ip'
                                        self.lc_mpls = YList()
                                        self.lc_mpls.parent = self
                                        self.lc_mpls.name = 'lc_mpls'
                                        self.ldp_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter()
                                        self.ldp_enter.parent = self
                                        self.ldp_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit()
                                        self.ldp_exit.parent = self
                                        self.lsd_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter()
                                        self.lsd_enter.parent = self
                                        self.lsd_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit()
                                        self.lsd_exit.parent = self
                                        self.ri_bv4_enter = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter()
                                        self.ri_bv4_enter.parent = self
                                        self.ri_bv4_exit = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit()
                                        self.ri_bv4_exit.parent = self
                                        self.ri_bv4_redistribute = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                        self.ri_bv4_redistribute.parent = self
                                        self.route_origin = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin()
                                        self.route_origin.parent = self


                                    class RouteOrigin(object):
                                        """
                                        Route origin (routing protocol)
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-origin'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin']['meta_info']


                                    class RiBv4Enter(object):
                                        """
                                        Entry point of IPv4 RIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter']['meta_info']


                                    class RiBv4Exit(object):
                                        """
                                        Exit point from IPv4 RIB to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit']['meta_info']


                                    class RiBv4Redistribute(object):
                                        """
                                        Route Redistribute point from IPv4 RIB to LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-redistribute'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute']['meta_info']


                                    class LdpEnter(object):
                                        """
                                        Entry point of LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter']['meta_info']


                                    class LdpExit(object):
                                        """
                                        Exit point of LDP to LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit']['meta_info']


                                    class LsdEnter(object):
                                        """
                                        Entry point of LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter']['meta_info']


                                    class LsdExit(object):
                                        """
                                        Exit point of LSD to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit']['meta_info']


                                    class LcIp(object):
                                        """
                                        List of Linecards' completion point for IP
                                        routes
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                            self.fib_complete.parent = self
                                            self.node_name = None
                                            self.speed = None


                                        class FibComplete(object):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.duration = None
                                                self.end_time = None
                                                self.start_time = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.duration is not None:
                                                    return True

                                                if self.end_time is not None:
                                                    return True

                                                if self.start_time is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fib_complete is not None and self.fib_complete._has_data():
                                                return True

                                            if self.node_name is not None:
                                                return True

                                            if self.speed is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp']['meta_info']


                                    class LcMpls(object):
                                        """
                                        List of Linecards' completion point for MPLS
                                        labels
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                            self.fib_complete.parent = self
                                            self.node_name = None
                                            self.speed = None


                                        class FibComplete(object):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.duration = None
                                                self.end_time = None
                                                self.start_time = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.duration is not None:
                                                    return True

                                                if self.end_time is not None:
                                                    return True

                                                if self.start_time is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fib_complete is not None and self.fib_complete._has_data():
                                                return True

                                            if self.node_name is not None:
                                                return True

                                            if self.speed is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:convergence-timeline'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.lc_ip is not None:
                                            for child_ref in self.lc_ip:
                                                if child_ref._has_data():
                                                    return True

                                        if self.lc_mpls is not None:
                                            for child_ref in self.lc_mpls:
                                                if child_ref._has_data():
                                                    return True

                                        if self.ldp_enter is not None and self.ldp_enter._has_data():
                                            return True

                                        if self.ldp_exit is not None and self.ldp_exit._has_data():
                                            return True

                                        if self.lsd_enter is not None and self.lsd_enter._has_data():
                                            return True

                                        if self.lsd_exit is not None and self.lsd_exit._has_data():
                                            return True

                                        if self.ri_bv4_enter is not None and self.ri_bv4_enter._has_data():
                                            return True

                                        if self.ri_bv4_exit is not None and self.ri_bv4_exit._has_data():
                                            return True

                                        if self.ri_bv4_redistribute is not None and self.ri_bv4_redistribute._has_data():
                                            return True

                                        if self.route_origin is not None and self.route_origin._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.ConvergenceTimeline']['meta_info']


                                class LeafNetworksAdded(object):
                                    """
                                    List of Leaf Networks Added
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.net_mask = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-added'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.net_mask is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksAdded']['meta_info']


                                class LeafNetworksDeleted(object):
                                    """
                                    List of Leaf Networks Deleted
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.net_mask = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-deleted'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.net_mask is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority.LeafNetworksDeleted']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.convergence_timeline is not None:
                                        for child_ref in self.convergence_timeline:
                                            if child_ref._has_data():
                                                return True

                                    if self.leaf_networks_added is not None:
                                        for child_ref in self.leaf_networks_added:
                                            if child_ref._has_data():
                                                return True

                                    if self.leaf_networks_deleted is not None:
                                        for child_ref in self.leaf_networks_deleted:
                                            if child_ref._has_data():
                                                return True

                                    if self.priority_summary is not None and self.priority_summary._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal.Priority']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:inter-area-and-external'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.priority is not None:
                                    for child_ref in self.priority:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary.InterAreaAndExternal']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.spf_run_number is None:
                                raise YPYModelError('Key property spf_run_number is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-run-summary[Cisco-IOS-XR-infra-rcmd-oper:spf-run-number = ' + str(self.spf_run_number) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.spf_run_number is not None:
                                return True

                            if self.dijkstra_run is not None:
                                for child_ref in self.dijkstra_run:
                                    if child_ref._has_data():
                                        return True

                            if self.inter_area_and_external is not None:
                                for child_ref in self.inter_area_and_external:
                                    if child_ref._has_data():
                                        return True

                            if self.spf_summary is not None and self.spf_summary._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries.SpfRunSummary']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-run-summaries'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.spf_run_summary is not None:
                            for child_ref in self.spf_run_summary:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunSummaries']['meta_info']


                class IpfrrEventOfflines(object):
                    """
                    OSPF IP\-FRR Event offline data
                    
                    .. attribute:: ipfrr_event_offline
                    
                    	Offline operational data for particular OSPF IP\-FRR Event
                    	**type**\: list of    :py:class:`IpfrrEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipfrr_event_offline = YList()
                        self.ipfrr_event_offline.parent = self
                        self.ipfrr_event_offline.name = 'ipfrr_event_offline'


                    class IpfrrEventOffline(object):
                        """
                        Offline operational data for particular OSPF
                        IP\-FRR Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific IP\-FRR Event
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: completed_spf_run
                        
                        	IP\-Frr Completed reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coverage
                        
                        	Coverage in percentage for all priorities
                        	**type**\:  str
                        
                        	**units**\: percentage
                        
                        .. attribute:: duration
                        
                        	Duration for the calculation (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: event_id_xr
                        
                        	IP\-Frr Event ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fully_protected_routes
                        
                        	Cumulative Number of Fully Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipfrr_statistic
                        
                        	IP\-Frr Statistics categorized by priority
                        	**type**\: list of    :py:class:`IpfrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic>`
                        
                        .. attribute:: partially_protected_routes
                        
                        	Cumulative Number of Partially Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: remote_node
                        
                        	Remote Node Information
                        	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode>`
                        
                        .. attribute:: start_time_offset
                        
                        	Start Time offset from trigger time (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: total_routes
                        
                        	Cumulative Number of Routes for all priorities
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_spf_run
                        
                        	IP\-Frr Triggered reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_time
                        
                        	Trigger time  (eg\: Apr 24 13\:16\:04.961)
                        	**type**\:  str
                        
                        .. attribute:: wait_time
                        
                        	Waiting Time (in milliseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.completed_spf_run = None
                            self.coverage = None
                            self.duration = None
                            self.event_id_xr = None
                            self.fully_protected_routes = None
                            self.ipfrr_statistic = YList()
                            self.ipfrr_statistic.parent = self
                            self.ipfrr_statistic.name = 'ipfrr_statistic'
                            self.partially_protected_routes = None
                            self.remote_node = YList()
                            self.remote_node.parent = self
                            self.remote_node.name = 'remote_node'
                            self.start_time_offset = None
                            self.total_routes = None
                            self.trigger_spf_run = None
                            self.trigger_time = None
                            self.wait_time = None


                        class IpfrrStatistic(object):
                            """
                            IP\-Frr Statistics categorized by priority
                            
                            .. attribute:: below_threshold
                            
                            	Covearge is below Configured Threshold
                            	**type**\:  bool
                            
                            .. attribute:: coverage
                            
                            	Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: fully_protected_routes
                            
                            	Fully Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_lfa_coverage
                            
                            	Local LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: partially_protected_routes
                            
                            	Partially Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: priority
                            
                            	Priority
                            	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                            
                            .. attribute:: remote_lfa_coverage
                            
                            	Remote LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: total_routes
                            
                            	Total Number of Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.below_threshold = None
                                self.coverage = None
                                self.fully_protected_routes = None
                                self.local_lfa_coverage = None
                                self.partially_protected_routes = None
                                self.priority = None
                                self.remote_lfa_coverage = None
                                self.total_routes = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-statistic'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.below_threshold is not None:
                                    return True

                                if self.coverage is not None:
                                    return True

                                if self.fully_protected_routes is not None:
                                    return True

                                if self.local_lfa_coverage is not None:
                                    return True

                                if self.partially_protected_routes is not None:
                                    return True

                                if self.priority is not None:
                                    return True

                                if self.remote_lfa_coverage is not None:
                                    return True

                                if self.total_routes is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic']['meta_info']


                        class RemoteNode(object):
                            """
                            Remote Node Information
                            
                            .. attribute:: in_use_time
                            
                            	Inuse time of the Remote Node (eg\: Apr 24 13\:16 \:04.961)
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_count
                            
                            	Number of paths protected by this Remote Node
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: primary_path
                            
                            	Protected Primary Paths
                            	**type**\: list of    :py:class:`PrimaryPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath>`
                            
                            .. attribute:: remote_node_id
                            
                            	Remote\-LFA Node ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.in_use_time = None
                                self.interface_name = None
                                self.neighbour_address = None
                                self.path_count = None
                                self.primary_path = YList()
                                self.primary_path.parent = self
                                self.primary_path.name = 'primary_path'
                                self.remote_node_id = None


                            class PrimaryPath(object):
                                """
                                Protected Primary Paths
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None
                                    self.neighbour_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:primary-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:remote-node'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.in_use_time is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_count is not None:
                                    return True

                                if self.primary_path is not None:
                                    for child_ref in self.primary_path:
                                        if child_ref._has_data():
                                            return True

                                if self.remote_node_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-event-offline[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.completed_spf_run is not None:
                                return True

                            if self.coverage is not None:
                                return True

                            if self.duration is not None:
                                return True

                            if self.event_id_xr is not None:
                                return True

                            if self.fully_protected_routes is not None:
                                return True

                            if self.ipfrr_statistic is not None:
                                for child_ref in self.ipfrr_statistic:
                                    if child_ref._has_data():
                                        return True

                            if self.partially_protected_routes is not None:
                                return True

                            if self.remote_node is not None:
                                for child_ref in self.remote_node:
                                    if child_ref._has_data():
                                        return True

                            if self.start_time_offset is not None:
                                return True

                            if self.total_routes is not None:
                                return True

                            if self.trigger_spf_run is not None:
                                return True

                            if self.trigger_time is not None:
                                return True

                            if self.wait_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-event-offlines'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipfrr_event_offline is not None:
                            for child_ref in self.ipfrr_event_offline:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.IpfrrEventOfflines']['meta_info']


                class SpfRunOfflines(object):
                    """
                    OSPF SPF run offline data
                    
                    .. attribute:: spf_run_offline
                    
                    	Offline operational data for particular OSPF SPF run
                    	**type**\: list of    :py:class:`SpfRunOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.spf_run_offline = YList()
                        self.spf_run_offline.parent = self
                        self.spf_run_offline.name = 'spf_run_offline'


                    class SpfRunOffline(object):
                        """
                        Offline operational data for particular OSPF
                        SPF run
                        
                        .. attribute:: spf_run_number  <key>
                        
                        	Specific SPF run
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: dijkstra_run
                        
                        	List of Dijkstra runs
                        	**type**\: list of    :py:class:`DijkstraRun <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun>`
                        
                        .. attribute:: inter_area_and_external
                        
                        	Inter\-area & external calculation information
                        	**type**\: list of    :py:class:`InterAreaAndExternal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal>`
                        
                        .. attribute:: spf_summary
                        
                        	SPF summary information
                        	**type**\:   :py:class:`SpfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary>`
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.spf_run_number = None
                            self.dijkstra_run = YList()
                            self.dijkstra_run.parent = self
                            self.dijkstra_run.name = 'dijkstra_run'
                            self.inter_area_and_external = YList()
                            self.inter_area_and_external.parent = self
                            self.inter_area_and_external.name = 'inter_area_and_external'
                            self.spf_summary = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary()
                            self.spf_summary.parent = self


                        class SpfSummary(object):
                            """
                            SPF summary information
                            
                            .. attribute:: duration
                            
                            	Duration of complete SPF calculation (in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: is_data_complete
                            
                            	Whether the event has all information
                            	**type**\:  bool
                            
                            .. attribute:: priority_summary
                            
                            	Convergence information summary on per\-priority basis
                            	**type**\: list of    :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary>`
                            
                            .. attribute:: start_time
                            
                            	Start time (offset from event trigger time in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: state
                            
                            	SPF state
                            	**type**\:   :py:class:`RcmdSpfStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdSpfStateEnum>`
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: total_dijkstra_runs
                            
                            	Total number of Dijkstra runs
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_inter_area_and_external_batches
                            
                            	Total number of inter\-area/external computation batches
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_type12lsa_changes
                            
                            	Total number of Type 1/2 LSA changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: total_type357lsa_changes
                            
                            	Total number of Type 3/5/7 LSA changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.duration = None
                                self.is_data_complete = None
                                self.priority_summary = YList()
                                self.priority_summary.parent = self
                                self.priority_summary.name = 'priority_summary'
                                self.start_time = None
                                self.state = None
                                self.threshold_exceeded = None
                                self.total_dijkstra_runs = None
                                self.total_inter_area_and_external_batches = None
                                self.total_type12lsa_changes = None
                                self.total_type357lsa_changes = None
                                self.trigger_time = None


                            class PrioritySummary(object):
                                """
                                Convergence information summary on per\-priority
                                basis
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.frr_statistic = YList()
                                    self.frr_statistic.parent = self
                                    self.frr_statistic.name = 'frr_statistic'
                                    self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self.level = None
                                    self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self.threshold_exceeded = None


                                class RouteStatistics(object):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.adds = None
                                        self.deletes = None
                                        self.modifies = None
                                        self.reachables = None
                                        self.touches = None
                                        self.unreachables = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.adds is not None:
                                            return True

                                        if self.deletes is not None:
                                            return True

                                        if self.modifies is not None:
                                            return True

                                        if self.reachables is not None:
                                            return True

                                        if self.touches is not None:
                                            return True

                                        if self.unreachables is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics']['meta_info']


                                class IpConvergenceTime(object):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime']['meta_info']


                                class MplsConvergenceTime(object):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime']['meta_info']


                                class FrrStatistic(object):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.coverage = None
                                        self.fully_protected_routes = None
                                        self.partially_protected_routes = None
                                        self.total_routes = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:frr-statistic'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.coverage is not None:
                                            return True

                                        if self.fully_protected_routes is not None:
                                            return True

                                        if self.partially_protected_routes is not None:
                                            return True

                                        if self.total_routes is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.frr_statistic is not None:
                                        for child_ref in self.frr_statistic:
                                            if child_ref._has_data():
                                                return True

                                    if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                        return True

                                    if self.route_statistics is not None and self.route_statistics._has_data():
                                        return True

                                    if self.threshold_exceeded is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-summary'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.duration is not None:
                                    return True

                                if self.is_data_complete is not None:
                                    return True

                                if self.priority_summary is not None:
                                    for child_ref in self.priority_summary:
                                        if child_ref._has_data():
                                            return True

                                if self.start_time is not None:
                                    return True

                                if self.state is not None:
                                    return True

                                if self.threshold_exceeded is not None:
                                    return True

                                if self.total_dijkstra_runs is not None:
                                    return True

                                if self.total_inter_area_and_external_batches is not None:
                                    return True

                                if self.total_type12lsa_changes is not None:
                                    return True

                                if self.total_type357lsa_changes is not None:
                                    return True

                                if self.trigger_time is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary']['meta_info']


                        class DijkstraRun(object):
                            """
                            List of Dijkstra runs
                            
                            .. attribute:: area_id
                            
                            	Area ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: dijkstra_run_number
                            
                            	Area Dijkstra run number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: duration
                            
                            	Duration of Dijktra calculation (in ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: lsa_processed
                            
                            	List of type 1/2 LSA changes processed
                            	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.LsaProcessed>`
                            
                            .. attribute:: priority
                            
                            	Convergence information on per\-priority basis
                            	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority>`
                            
                            .. attribute:: start_time
                            
                            	Start time (offset from event trigger time in ss .msec)
                            	**type**\:  str
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: trigger_lsa
                            
                            	LSA that triggered the Dijkstra run
                            	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.TriggerLsa>`
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: wait_time
                            
                            	Wait time (offset from event trigger time in ss .msec)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.area_id = None
                                self.dijkstra_run_number = None
                                self.duration = None
                                self.lsa_processed = YList()
                                self.lsa_processed.parent = self
                                self.lsa_processed.name = 'lsa_processed'
                                self.priority = YList()
                                self.priority.parent = self
                                self.priority.name = 'priority'
                                self.start_time = None
                                self.threshold_exceeded = None
                                self.trigger_lsa = YList()
                                self.trigger_lsa.parent = self
                                self.trigger_lsa.name = 'trigger_lsa'
                                self.trigger_time = None
                                self.wait_time = None


                            class TriggerLsa(object):
                                """
                                LSA that triggered the Dijkstra run
                                
                                .. attribute:: change_type
                                
                                	Add, Delete, Modify
                                	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                                
                                .. attribute:: lsa_id
                                
                                	LSA ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: lsa_type
                                
                                	LSA type
                                	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                                
                                .. attribute:: origin_router_id
                                
                                	Originating Router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: reception_time
                                
                                	Reception Time on router (in hh\:mm\:ss.msec)
                                	**type**\:  str
                                
                                .. attribute:: sequence_number
                                
                                	Sequence Number
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.lsa_id = None
                                    self.lsa_type = None
                                    self.origin_router_id = None
                                    self.reception_time = None
                                    self.sequence_number = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsa'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.lsa_id is not None:
                                        return True

                                    if self.lsa_type is not None:
                                        return True

                                    if self.origin_router_id is not None:
                                        return True

                                    if self.reception_time is not None:
                                        return True

                                    if self.sequence_number is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.TriggerLsa']['meta_info']


                            class Priority(object):
                                """
                                Convergence information on per\-priority basis
                                
                                .. attribute:: convergence_timeline
                                
                                	Convergence timeline details
                                	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline>`
                                
                                .. attribute:: leaf_networks_added
                                
                                	List of Leaf Networks Added
                                	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksAdded>`
                                
                                .. attribute:: leaf_networks_deleted
                                
                                	List of Leaf Networks Deleted
                                	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksDeleted>`
                                
                                .. attribute:: priority_summary
                                
                                	Summary of the priority
                                	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.convergence_timeline = YList()
                                    self.convergence_timeline.parent = self
                                    self.convergence_timeline.name = 'convergence_timeline'
                                    self.leaf_networks_added = YList()
                                    self.leaf_networks_added.parent = self
                                    self.leaf_networks_added.name = 'leaf_networks_added'
                                    self.leaf_networks_deleted = YList()
                                    self.leaf_networks_deleted.parent = self
                                    self.leaf_networks_deleted.name = 'leaf_networks_deleted'
                                    self.priority_summary = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary()
                                    self.priority_summary.parent = self


                                class PrioritySummary(object):
                                    """
                                    Summary of the priority
                                    
                                    .. attribute:: frr_statistic
                                    
                                    	Fast Re\-Route Statistics
                                    	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.FrrStatistic>`
                                    
                                    .. attribute:: ip_convergence_time
                                    
                                    	Convergence time for IP route programming
                                    	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime>`
                                    
                                    .. attribute:: level
                                    
                                    	Critical, High, Medium or Low
                                    	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                    
                                    .. attribute:: mpls_convergence_time
                                    
                                    	Convergence time for MPLS label programming
                                    	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime>`
                                    
                                    .. attribute:: route_statistics
                                    
                                    	Route statistics
                                    	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.RouteStatistics>`
                                    
                                    .. attribute:: threshold_exceeded
                                    
                                    	Threshold exceeded
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.frr_statistic = YList()
                                        self.frr_statistic.parent = self
                                        self.frr_statistic.name = 'frr_statistic'
                                        self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime()
                                        self.ip_convergence_time.parent = self
                                        self.level = None
                                        self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime()
                                        self.mpls_convergence_time.parent = self
                                        self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.RouteStatistics()
                                        self.route_statistics.parent = self
                                        self.threshold_exceeded = None


                                    class RouteStatistics(object):
                                        """
                                        Route statistics
                                        
                                        .. attribute:: adds
                                        
                                        	Added
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: deletes
                                        
                                        	Deleted
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: modifies
                                        
                                        	Modified
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: reachables
                                        
                                        	Reachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: touches
                                        
                                        	Touched
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unreachables
                                        
                                        	Unreachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adds = None
                                            self.deletes = None
                                            self.modifies = None
                                            self.reachables = None
                                            self.touches = None
                                            self.unreachables = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adds is not None:
                                                return True

                                            if self.deletes is not None:
                                                return True

                                            if self.modifies is not None:
                                                return True

                                            if self.reachables is not None:
                                                return True

                                            if self.touches is not None:
                                                return True

                                            if self.unreachables is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.RouteStatistics']['meta_info']


                                    class IpConvergenceTime(object):
                                        """
                                        Convergence time for IP route programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fastest_node_name = None
                                            self.maximum_time = None
                                            self.minimum_time = None
                                            self.slowest_node_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fastest_node_name is not None:
                                                return True

                                            if self.maximum_time is not None:
                                                return True

                                            if self.minimum_time is not None:
                                                return True

                                            if self.slowest_node_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.IpConvergenceTime']['meta_info']


                                    class MplsConvergenceTime(object):
                                        """
                                        Convergence time for MPLS label programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fastest_node_name = None
                                            self.maximum_time = None
                                            self.minimum_time = None
                                            self.slowest_node_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fastest_node_name is not None:
                                                return True

                                            if self.maximum_time is not None:
                                                return True

                                            if self.minimum_time is not None:
                                                return True

                                            if self.slowest_node_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.MplsConvergenceTime']['meta_info']


                                    class FrrStatistic(object):
                                        """
                                        Fast Re\-Route Statistics
                                        
                                        .. attribute:: coverage
                                        
                                        	Coverage in percentage
                                        	**type**\:  str
                                        
                                        	**units**\: percentage
                                        
                                        .. attribute:: fully_protected_routes
                                        
                                        	Fully Protected Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: partially_protected_routes
                                        
                                        	Partially Protected Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: total_routes
                                        
                                        	Total Number of Routes
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.coverage = None
                                            self.fully_protected_routes = None
                                            self.partially_protected_routes = None
                                            self.total_routes = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:frr-statistic'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.coverage is not None:
                                                return True

                                            if self.fully_protected_routes is not None:
                                                return True

                                            if self.partially_protected_routes is not None:
                                                return True

                                            if self.total_routes is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary.FrrStatistic']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.frr_statistic is not None:
                                            for child_ref in self.frr_statistic:
                                                if child_ref._has_data():
                                                    return True

                                        if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                            return True

                                        if self.level is not None:
                                            return True

                                        if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                            return True

                                        if self.route_statistics is not None and self.route_statistics._has_data():
                                            return True

                                        if self.threshold_exceeded is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.PrioritySummary']['meta_info']


                                class ConvergenceTimeline(object):
                                    """
                                    Convergence timeline details
                                    
                                    .. attribute:: lc_ip
                                    
                                    	List of Linecards' completion point for IP routes
                                    	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp>`
                                    
                                    .. attribute:: lc_mpls
                                    
                                    	List of Linecards' completion point for MPLS labels
                                    	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls>`
                                    
                                    .. attribute:: ldp_enter
                                    
                                    	Entry point of LDP
                                    	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter>`
                                    
                                    .. attribute:: ldp_exit
                                    
                                    	Exit point of LDP to LSD
                                    	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpExit>`
                                    
                                    .. attribute:: lsd_enter
                                    
                                    	Entry point of LSD
                                    	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter>`
                                    
                                    .. attribute:: lsd_exit
                                    
                                    	Exit point of LSD to FIBs
                                    	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdExit>`
                                    
                                    .. attribute:: ri_bv4_enter
                                    
                                    	Entry point of IPv4 RIB
                                    	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter>`
                                    
                                    .. attribute:: ri_bv4_exit
                                    
                                    	Exit point from IPv4 RIB to FIBs
                                    	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit>`
                                    
                                    .. attribute:: ri_bv4_redistribute
                                    
                                    	Route Redistribute point from IPv4 RIB to LDP
                                    	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                    
                                    .. attribute:: route_origin
                                    
                                    	Route origin (routing protocol)
                                    	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.lc_ip = YList()
                                        self.lc_ip.parent = self
                                        self.lc_ip.name = 'lc_ip'
                                        self.lc_mpls = YList()
                                        self.lc_mpls.parent = self
                                        self.lc_mpls.name = 'lc_mpls'
                                        self.ldp_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter()
                                        self.ldp_enter.parent = self
                                        self.ldp_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpExit()
                                        self.ldp_exit.parent = self
                                        self.lsd_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter()
                                        self.lsd_enter.parent = self
                                        self.lsd_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdExit()
                                        self.lsd_exit.parent = self
                                        self.ri_bv4_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter()
                                        self.ri_bv4_enter.parent = self
                                        self.ri_bv4_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit()
                                        self.ri_bv4_exit.parent = self
                                        self.ri_bv4_redistribute = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                        self.ri_bv4_redistribute.parent = self
                                        self.route_origin = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin()
                                        self.route_origin.parent = self


                                    class RouteOrigin(object):
                                        """
                                        Route origin (routing protocol)
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-origin'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RouteOrigin']['meta_info']


                                    class RiBv4Enter(object):
                                        """
                                        Entry point of IPv4 RIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Enter']['meta_info']


                                    class RiBv4Exit(object):
                                        """
                                        Exit point from IPv4 RIB to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Exit']['meta_info']


                                    class RiBv4Redistribute(object):
                                        """
                                        Route Redistribute point from IPv4 RIB to LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-redistribute'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.RiBv4Redistribute']['meta_info']


                                    class LdpEnter(object):
                                        """
                                        Entry point of LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpEnter']['meta_info']


                                    class LdpExit(object):
                                        """
                                        Exit point of LDP to LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LdpExit']['meta_info']


                                    class LsdEnter(object):
                                        """
                                        Entry point of LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdEnter']['meta_info']


                                    class LsdExit(object):
                                        """
                                        Exit point of LSD to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LsdExit']['meta_info']


                                    class LcIp(object):
                                        """
                                        List of Linecards' completion point for IP
                                        routes
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                            self.fib_complete.parent = self
                                            self.node_name = None
                                            self.speed = None


                                        class FibComplete(object):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.duration = None
                                                self.end_time = None
                                                self.start_time = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.duration is not None:
                                                    return True

                                                if self.end_time is not None:
                                                    return True

                                                if self.start_time is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp.FibComplete']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fib_complete is not None and self.fib_complete._has_data():
                                                return True

                                            if self.node_name is not None:
                                                return True

                                            if self.speed is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcIp']['meta_info']


                                    class LcMpls(object):
                                        """
                                        List of Linecards' completion point for MPLS
                                        labels
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                            self.fib_complete.parent = self
                                            self.node_name = None
                                            self.speed = None


                                        class FibComplete(object):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.duration = None
                                                self.end_time = None
                                                self.start_time = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.duration is not None:
                                                    return True

                                                if self.end_time is not None:
                                                    return True

                                                if self.start_time is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls.FibComplete']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fib_complete is not None and self.fib_complete._has_data():
                                                return True

                                            if self.node_name is not None:
                                                return True

                                            if self.speed is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline.LcMpls']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:convergence-timeline'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.lc_ip is not None:
                                            for child_ref in self.lc_ip:
                                                if child_ref._has_data():
                                                    return True

                                        if self.lc_mpls is not None:
                                            for child_ref in self.lc_mpls:
                                                if child_ref._has_data():
                                                    return True

                                        if self.ldp_enter is not None and self.ldp_enter._has_data():
                                            return True

                                        if self.ldp_exit is not None and self.ldp_exit._has_data():
                                            return True

                                        if self.lsd_enter is not None and self.lsd_enter._has_data():
                                            return True

                                        if self.lsd_exit is not None and self.lsd_exit._has_data():
                                            return True

                                        if self.ri_bv4_enter is not None and self.ri_bv4_enter._has_data():
                                            return True

                                        if self.ri_bv4_exit is not None and self.ri_bv4_exit._has_data():
                                            return True

                                        if self.ri_bv4_redistribute is not None and self.ri_bv4_redistribute._has_data():
                                            return True

                                        if self.route_origin is not None and self.route_origin._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.ConvergenceTimeline']['meta_info']


                                class LeafNetworksAdded(object):
                                    """
                                    List of Leaf Networks Added
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.net_mask = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-added'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.net_mask is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksAdded']['meta_info']


                                class LeafNetworksDeleted(object):
                                    """
                                    List of Leaf Networks Deleted
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.net_mask = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-deleted'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.net_mask is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority.LeafNetworksDeleted']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.convergence_timeline is not None:
                                        for child_ref in self.convergence_timeline:
                                            if child_ref._has_data():
                                                return True

                                    if self.leaf_networks_added is not None:
                                        for child_ref in self.leaf_networks_added:
                                            if child_ref._has_data():
                                                return True

                                    if self.leaf_networks_deleted is not None:
                                        for child_ref in self.leaf_networks_deleted:
                                            if child_ref._has_data():
                                                return True

                                    if self.priority_summary is not None and self.priority_summary._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.Priority']['meta_info']


                            class LsaProcessed(object):
                                """
                                List of type 1/2 LSA changes processed
                                
                                .. attribute:: change_type
                                
                                	Add, Delete, Modify
                                	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                                
                                .. attribute:: lsa_id
                                
                                	LSA ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: lsa_type
                                
                                	LSA type
                                	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                                
                                .. attribute:: origin_router_id
                                
                                	Originating Router ID
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: reception_time
                                
                                	Reception Time on router (in hh\:mm\:ss.msec)
                                	**type**\:  str
                                
                                .. attribute:: sequence_number
                                
                                	Sequence Number
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.lsa_id = None
                                    self.lsa_type = None
                                    self.origin_router_id = None
                                    self.reception_time = None
                                    self.sequence_number = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsa-processed'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.lsa_id is not None:
                                        return True

                                    if self.lsa_type is not None:
                                        return True

                                    if self.origin_router_id is not None:
                                        return True

                                    if self.reception_time is not None:
                                        return True

                                    if self.sequence_number is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun.LsaProcessed']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:dijkstra-run'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.area_id is not None:
                                    return True

                                if self.dijkstra_run_number is not None:
                                    return True

                                if self.duration is not None:
                                    return True

                                if self.lsa_processed is not None:
                                    for child_ref in self.lsa_processed:
                                        if child_ref._has_data():
                                            return True

                                if self.priority is not None:
                                    for child_ref in self.priority:
                                        if child_ref._has_data():
                                            return True

                                if self.start_time is not None:
                                    return True

                                if self.threshold_exceeded is not None:
                                    return True

                                if self.trigger_lsa is not None:
                                    for child_ref in self.trigger_lsa:
                                        if child_ref._has_data():
                                            return True

                                if self.trigger_time is not None:
                                    return True

                                if self.wait_time is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.DijkstraRun']['meta_info']


                        class InterAreaAndExternal(object):
                            """
                            Inter\-area & external calculation information
                            
                            .. attribute:: priority
                            
                            	Convergence information on a per\-priority basis
                            	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.priority = YList()
                                self.priority.parent = self
                                self.priority.name = 'priority'


                            class Priority(object):
                                """
                                Convergence information on a per\-priority basis
                                
                                .. attribute:: convergence_timeline
                                
                                	Convergence timeline details
                                	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline>`
                                
                                .. attribute:: leaf_networks_added
                                
                                	List of Leaf Networks Added
                                	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksAdded>`
                                
                                .. attribute:: leaf_networks_deleted
                                
                                	List of Leaf Networks Deleted
                                	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksDeleted>`
                                
                                .. attribute:: priority_summary
                                
                                	Summary of the priority
                                	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.convergence_timeline = YList()
                                    self.convergence_timeline.parent = self
                                    self.convergence_timeline.name = 'convergence_timeline'
                                    self.leaf_networks_added = YList()
                                    self.leaf_networks_added.parent = self
                                    self.leaf_networks_added.name = 'leaf_networks_added'
                                    self.leaf_networks_deleted = YList()
                                    self.leaf_networks_deleted.parent = self
                                    self.leaf_networks_deleted.name = 'leaf_networks_deleted'
                                    self.priority_summary = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary()
                                    self.priority_summary.parent = self


                                class PrioritySummary(object):
                                    """
                                    Summary of the priority
                                    
                                    .. attribute:: ip_convergence_time
                                    
                                    	Convergence time for IP route programming
                                    	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime>`
                                    
                                    .. attribute:: level
                                    
                                    	Critical, High, Medium or Low
                                    	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                    
                                    .. attribute:: mpls_convergence_time
                                    
                                    	Convergence time for MPLS label programming
                                    	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime>`
                                    
                                    .. attribute:: route_statistics
                                    
                                    	Route statistics
                                    	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics>`
                                    
                                    .. attribute:: threshold_exceeded
                                    
                                    	Threshold exceeded
                                    	**type**\:  bool
                                    
                                    .. attribute:: type3ls_as
                                    
                                    	Number of Type 3 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type4ls_as
                                    
                                    	Number of Type 4 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: type57ls_as
                                    
                                    	Number of Type 5/7 LSA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime()
                                        self.ip_convergence_time.parent = self
                                        self.level = None
                                        self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime()
                                        self.mpls_convergence_time.parent = self
                                        self.route_statistics = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics()
                                        self.route_statistics.parent = self
                                        self.threshold_exceeded = None
                                        self.type3ls_as = None
                                        self.type4ls_as = None
                                        self.type57ls_as = None


                                    class RouteStatistics(object):
                                        """
                                        Route statistics
                                        
                                        .. attribute:: adds
                                        
                                        	Added
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: deletes
                                        
                                        	Deleted
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: modifies
                                        
                                        	Modified
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: reachables
                                        
                                        	Reachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: touches
                                        
                                        	Touched
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: unreachables
                                        
                                        	Unreachable
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.adds = None
                                            self.deletes = None
                                            self.modifies = None
                                            self.reachables = None
                                            self.touches = None
                                            self.unreachables = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.adds is not None:
                                                return True

                                            if self.deletes is not None:
                                                return True

                                            if self.modifies is not None:
                                                return True

                                            if self.reachables is not None:
                                                return True

                                            if self.touches is not None:
                                                return True

                                            if self.unreachables is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.RouteStatistics']['meta_info']


                                    class IpConvergenceTime(object):
                                        """
                                        Convergence time for IP route programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fastest_node_name = None
                                            self.maximum_time = None
                                            self.minimum_time = None
                                            self.slowest_node_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fastest_node_name is not None:
                                                return True

                                            if self.maximum_time is not None:
                                                return True

                                            if self.minimum_time is not None:
                                                return True

                                            if self.slowest_node_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.IpConvergenceTime']['meta_info']


                                    class MplsConvergenceTime(object):
                                        """
                                        Convergence time for MPLS label programming
                                        
                                        .. attribute:: fastest_node_name
                                        
                                        	Linecard node name which took the minimum time
                                        	**type**\:  str
                                        
                                        .. attribute:: maximum_time
                                        
                                        	Maximum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: minimum_time
                                        
                                        	Minimum time(in seconds.milliseconds)
                                        	**type**\:  str
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: slowest_node_name
                                        
                                        	Linecard node name which took the maximum time
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fastest_node_name = None
                                            self.maximum_time = None
                                            self.minimum_time = None
                                            self.slowest_node_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fastest_node_name is not None:
                                                return True

                                            if self.maximum_time is not None:
                                                return True

                                            if self.minimum_time is not None:
                                                return True

                                            if self.slowest_node_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary.MplsConvergenceTime']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                            return True

                                        if self.level is not None:
                                            return True

                                        if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                            return True

                                        if self.route_statistics is not None and self.route_statistics._has_data():
                                            return True

                                        if self.threshold_exceeded is not None:
                                            return True

                                        if self.type3ls_as is not None:
                                            return True

                                        if self.type4ls_as is not None:
                                            return True

                                        if self.type57ls_as is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.PrioritySummary']['meta_info']


                                class ConvergenceTimeline(object):
                                    """
                                    Convergence timeline details
                                    
                                    .. attribute:: lc_ip
                                    
                                    	List of Linecards' completion point for IP routes
                                    	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp>`
                                    
                                    .. attribute:: lc_mpls
                                    
                                    	List of Linecards' completion point for MPLS labels
                                    	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls>`
                                    
                                    .. attribute:: ldp_enter
                                    
                                    	Entry point of LDP
                                    	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter>`
                                    
                                    .. attribute:: ldp_exit
                                    
                                    	Exit point of LDP to LSD
                                    	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit>`
                                    
                                    .. attribute:: lsd_enter
                                    
                                    	Entry point of LSD
                                    	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter>`
                                    
                                    .. attribute:: lsd_exit
                                    
                                    	Exit point of LSD to FIBs
                                    	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit>`
                                    
                                    .. attribute:: ri_bv4_enter
                                    
                                    	Entry point of IPv4 RIB
                                    	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter>`
                                    
                                    .. attribute:: ri_bv4_exit
                                    
                                    	Exit point from IPv4 RIB to FIBs
                                    	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit>`
                                    
                                    .. attribute:: ri_bv4_redistribute
                                    
                                    	Route Redistribute point from IPv4 RIB to LDP
                                    	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                    
                                    .. attribute:: route_origin
                                    
                                    	Route origin (routing protocol)
                                    	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.lc_ip = YList()
                                        self.lc_ip.parent = self
                                        self.lc_ip.name = 'lc_ip'
                                        self.lc_mpls = YList()
                                        self.lc_mpls.parent = self
                                        self.lc_mpls.name = 'lc_mpls'
                                        self.ldp_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter()
                                        self.ldp_enter.parent = self
                                        self.ldp_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit()
                                        self.ldp_exit.parent = self
                                        self.lsd_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter()
                                        self.lsd_enter.parent = self
                                        self.lsd_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit()
                                        self.lsd_exit.parent = self
                                        self.ri_bv4_enter = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter()
                                        self.ri_bv4_enter.parent = self
                                        self.ri_bv4_exit = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit()
                                        self.ri_bv4_exit.parent = self
                                        self.ri_bv4_redistribute = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                        self.ri_bv4_redistribute.parent = self
                                        self.route_origin = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin()
                                        self.route_origin.parent = self


                                    class RouteOrigin(object):
                                        """
                                        Route origin (routing protocol)
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-origin'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RouteOrigin']['meta_info']


                                    class RiBv4Enter(object):
                                        """
                                        Entry point of IPv4 RIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Enter']['meta_info']


                                    class RiBv4Exit(object):
                                        """
                                        Exit point from IPv4 RIB to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Exit']['meta_info']


                                    class RiBv4Redistribute(object):
                                        """
                                        Route Redistribute point from IPv4 RIB to LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-redistribute'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.RiBv4Redistribute']['meta_info']


                                    class LdpEnter(object):
                                        """
                                        Entry point of LDP
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpEnter']['meta_info']


                                    class LdpExit(object):
                                        """
                                        Exit point of LDP to LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LdpExit']['meta_info']


                                    class LsdEnter(object):
                                        """
                                        Entry point of LSD
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-enter'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdEnter']['meta_info']


                                    class LsdExit(object):
                                        """
                                        Exit point of LSD to FIBs
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-exit'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LsdExit']['meta_info']


                                    class LcIp(object):
                                        """
                                        List of Linecards' completion point for IP
                                        routes
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                            self.fib_complete.parent = self
                                            self.node_name = None
                                            self.speed = None


                                        class FibComplete(object):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.duration = None
                                                self.end_time = None
                                                self.start_time = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.duration is not None:
                                                    return True

                                                if self.end_time is not None:
                                                    return True

                                                if self.start_time is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp.FibComplete']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fib_complete is not None and self.fib_complete._has_data():
                                                return True

                                            if self.node_name is not None:
                                                return True

                                            if self.speed is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcIp']['meta_info']


                                    class LcMpls(object):
                                        """
                                        List of Linecards' completion point for MPLS
                                        labels
                                        
                                        .. attribute:: fib_complete
                                        
                                        	Completion point of FIB
                                        	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                        
                                        .. attribute:: node_name
                                        
                                        	Linecard node name
                                        	**type**\:  str
                                        
                                        .. attribute:: speed
                                        
                                        	Relative convergence speed
                                        	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.fib_complete = Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                            self.fib_complete.parent = self
                                            self.node_name = None
                                            self.speed = None


                                        class FibComplete(object):
                                            """
                                            Completion point of FIB
                                            
                                            .. attribute:: duration
                                            
                                            	Duration of processing (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: end_time
                                            
                                            	Last route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            .. attribute:: start_time
                                            
                                            	First route process time relative to event trigger time (in ss.msec)
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'infra-rcmd-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                self.parent = None
                                                self.duration = None
                                                self.end_time = None
                                                self.start_time = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return False

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.duration is not None:
                                                    return True

                                                if self.end_time is not None:
                                                    return True

                                                if self.start_time is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls.FibComplete']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.fib_complete is not None and self.fib_complete._has_data():
                                                return True

                                            if self.node_name is not None:
                                                return True

                                            if self.speed is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline.LcMpls']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:convergence-timeline'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.lc_ip is not None:
                                            for child_ref in self.lc_ip:
                                                if child_ref._has_data():
                                                    return True

                                        if self.lc_mpls is not None:
                                            for child_ref in self.lc_mpls:
                                                if child_ref._has_data():
                                                    return True

                                        if self.ldp_enter is not None and self.ldp_enter._has_data():
                                            return True

                                        if self.ldp_exit is not None and self.ldp_exit._has_data():
                                            return True

                                        if self.lsd_enter is not None and self.lsd_enter._has_data():
                                            return True

                                        if self.lsd_exit is not None and self.lsd_exit._has_data():
                                            return True

                                        if self.ri_bv4_enter is not None and self.ri_bv4_enter._has_data():
                                            return True

                                        if self.ri_bv4_exit is not None and self.ri_bv4_exit._has_data():
                                            return True

                                        if self.ri_bv4_redistribute is not None and self.ri_bv4_redistribute._has_data():
                                            return True

                                        if self.route_origin is not None and self.route_origin._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.ConvergenceTimeline']['meta_info']


                                class LeafNetworksAdded(object):
                                    """
                                    List of Leaf Networks Added
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.net_mask = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-added'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.net_mask is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksAdded']['meta_info']


                                class LeafNetworksDeleted(object):
                                    """
                                    List of Leaf Networks Deleted
                                    
                                    .. attribute:: address
                                    
                                    	IP address
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: net_mask
                                    
                                    	Mask
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.address = None
                                        self.net_mask = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-deleted'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.address is not None:
                                            return True

                                        if self.net_mask is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority.LeafNetworksDeleted']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.convergence_timeline is not None:
                                        for child_ref in self.convergence_timeline:
                                            if child_ref._has_data():
                                                return True

                                    if self.leaf_networks_added is not None:
                                        for child_ref in self.leaf_networks_added:
                                            if child_ref._has_data():
                                                return True

                                    if self.leaf_networks_deleted is not None:
                                        for child_ref in self.leaf_networks_deleted:
                                            if child_ref._has_data():
                                                return True

                                    if self.priority_summary is not None and self.priority_summary._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal.Priority']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:inter-area-and-external'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.priority is not None:
                                    for child_ref in self.priority:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline.InterAreaAndExternal']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.spf_run_number is None:
                                raise YPYModelError('Key property spf_run_number is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-run-offline[Cisco-IOS-XR-infra-rcmd-oper:spf-run-number = ' + str(self.spf_run_number) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.spf_run_number is not None:
                                return True

                            if self.dijkstra_run is not None:
                                for child_ref in self.dijkstra_run:
                                    if child_ref._has_data():
                                        return True

                            if self.inter_area_and_external is not None:
                                for child_ref in self.inter_area_and_external:
                                    if child_ref._has_data():
                                        return True

                            if self.spf_summary is not None and self.spf_summary._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines.SpfRunOffline']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-run-offlines'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.spf_run_offline is not None:
                            for child_ref in self.spf_run_offline:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SpfRunOfflines']['meta_info']


                class SummaryExternalEventSummaries(object):
                    """
                    OSPF Summary\-External Prefix events summary
                    data
                    
                    .. attribute:: summary_external_event_summary
                    
                    	OSPF Summary\-External Prefix Event data
                    	**type**\: list of    :py:class:`SummaryExternalEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.summary_external_event_summary = YList()
                        self.summary_external_event_summary.parent = self
                        self.summary_external_event_summary.name = 'summary_external_event_summary'


                    class SummaryExternalEventSummary(object):
                        """
                        OSPF Summary\-External Prefix Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChangeEnum>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRouteEnum>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.change_type = None
                            self.cost = None
                            self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self.ipfrr_event_id = None
                            self.lsa_processed = YList()
                            self.lsa_processed.parent = self
                            self.lsa_processed.name = 'lsa_processed'
                            self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self.path = YList()
                            self.path.parent = self
                            self.path.name = 'path'
                            self.prefix = None
                            self.prefix_lenth = None
                            self.priority = None
                            self.route_path_change_type = None
                            self.route_type = None
                            self.spf_run_no = None
                            self.threshold_exceeded = None
                            self.time_line = YList()
                            self.time_line.parent = self
                            self.time_line.name = 'time_line'
                            self.trigger_lsa = YList()
                            self.trigger_lsa.parent = self
                            self.trigger_lsa.name = 'trigger_lsa'
                            self.trigger_time = None


                        class IpConvergenceTime(object):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.IpConvergenceTime']['meta_info']


                        class MplsConvergenceTime(object):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.MplsConvergenceTime']['meta_info']


                        class Path(object):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.interface_name = None
                                self.lfa_path = YList()
                                self.lfa_path.parent = self
                                self.lfa_path.name = 'lfa_path'
                                self.neighbour_address = None
                                self.path_metric = None


                            class LfaPath(object):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfaEnum>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.interface_name = None
                                    self.lfa_type = None
                                    self.neighbour_address = None
                                    self.path_metric = None
                                    self.remote_node_id = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lfa-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.interface_name is not None:
                                        return True

                                    if self.lfa_type is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    if self.path_metric is not None:
                                        return True

                                    if self.remote_node_id is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path.LfaPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:path'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.lfa_path is not None:
                                    for child_ref in self.lfa_path:
                                        if child_ref._has_data():
                                            return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.Path']['meta_info']


                        class TriggerLsa(object):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsa'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TriggerLsa']['meta_info']


                        class TimeLine(object):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.lc_ip = YList()
                                self.lc_ip.parent = self
                                self.lc_ip.name = 'lc_ip'
                                self.lc_mpls = YList()
                                self.lc_mpls.parent = self
                                self.lc_mpls.name = 'lc_mpls'
                                self.ldp_enter = None
                                self.ldp_exit = None
                                self.lsd_enter = None
                                self.lsd_exit = None
                                self.ri_bv4_enter = None
                                self.ri_bv4_exit = None
                                self.ri_bv4_redistribute = None
                                self.route_origin = None


                            class LcIp(object):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcIp']['meta_info']


                            class LcMpls(object):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine.LcMpls']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:time-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.lc_ip is not None:
                                    for child_ref in self.lc_ip:
                                        if child_ref._has_data():
                                            return True

                                if self.lc_mpls is not None:
                                    for child_ref in self.lc_mpls:
                                        if child_ref._has_data():
                                            return True

                                if self.ldp_enter is not None:
                                    return True

                                if self.ldp_exit is not None:
                                    return True

                                if self.lsd_enter is not None:
                                    return True

                                if self.lsd_exit is not None:
                                    return True

                                if self.ri_bv4_enter is not None:
                                    return True

                                if self.ri_bv4_exit is not None:
                                    return True

                                if self.ri_bv4_redistribute is not None:
                                    return True

                                if self.route_origin is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.TimeLine']['meta_info']


                        class LsaProcessed(object):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsa-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary.LsaProcessed']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:summary-external-event-summary[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.change_type is not None:
                                return True

                            if self.cost is not None:
                                return True

                            if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                return True

                            if self.ipfrr_event_id is not None:
                                return True

                            if self.lsa_processed is not None:
                                for child_ref in self.lsa_processed:
                                    if child_ref._has_data():
                                        return True

                            if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                return True

                            if self.path is not None:
                                for child_ref in self.path:
                                    if child_ref._has_data():
                                        return True

                            if self.prefix is not None:
                                return True

                            if self.prefix_lenth is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.route_path_change_type is not None:
                                return True

                            if self.route_type is not None:
                                return True

                            if self.spf_run_no is not None:
                                return True

                            if self.threshold_exceeded is not None:
                                return True

                            if self.time_line is not None:
                                for child_ref in self.time_line:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_lsa is not None:
                                for child_ref in self.trigger_lsa:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries.SummaryExternalEventSummary']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:summary-external-event-summaries'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.summary_external_event_summary is not None:
                            for child_ref in self.summary_external_event_summary:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventSummaries']['meta_info']


                class PrefixEventSummaries(object):
                    """
                    OSPF Prefix events summary data
                    
                    .. attribute:: prefix_event_summary
                    
                    	OSPF Prefix Event data
                    	**type**\: list of    :py:class:`PrefixEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.prefix_event_summary = YList()
                        self.prefix_event_summary.parent = self
                        self.prefix_event_summary.name = 'prefix_event_summary'


                    class PrefixEventSummary(object):
                        """
                        OSPF Prefix Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChangeEnum>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRouteEnum>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.change_type = None
                            self.cost = None
                            self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self.ipfrr_event_id = None
                            self.lsa_processed = YList()
                            self.lsa_processed.parent = self
                            self.lsa_processed.name = 'lsa_processed'
                            self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self.path = YList()
                            self.path.parent = self
                            self.path.name = 'path'
                            self.prefix = None
                            self.prefix_lenth = None
                            self.priority = None
                            self.route_path_change_type = None
                            self.route_type = None
                            self.spf_run_no = None
                            self.threshold_exceeded = None
                            self.time_line = YList()
                            self.time_line.parent = self
                            self.time_line.name = 'time_line'
                            self.trigger_lsa = YList()
                            self.trigger_lsa.parent = self
                            self.trigger_lsa.name = 'trigger_lsa'
                            self.trigger_time = None


                        class IpConvergenceTime(object):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime']['meta_info']


                        class MplsConvergenceTime(object):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime']['meta_info']


                        class Path(object):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.interface_name = None
                                self.lfa_path = YList()
                                self.lfa_path.parent = self
                                self.lfa_path.name = 'lfa_path'
                                self.neighbour_address = None
                                self.path_metric = None


                            class LfaPath(object):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfaEnum>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.interface_name = None
                                    self.lfa_type = None
                                    self.neighbour_address = None
                                    self.path_metric = None
                                    self.remote_node_id = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lfa-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.interface_name is not None:
                                        return True

                                    if self.lfa_type is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    if self.path_metric is not None:
                                        return True

                                    if self.remote_node_id is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:path'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.lfa_path is not None:
                                    for child_ref in self.lfa_path:
                                        if child_ref._has_data():
                                            return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path']['meta_info']


                        class TriggerLsa(object):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsa'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa']['meta_info']


                        class TimeLine(object):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.lc_ip = YList()
                                self.lc_ip.parent = self
                                self.lc_ip.name = 'lc_ip'
                                self.lc_mpls = YList()
                                self.lc_mpls.parent = self
                                self.lc_mpls.name = 'lc_mpls'
                                self.ldp_enter = None
                                self.ldp_exit = None
                                self.lsd_enter = None
                                self.lsd_exit = None
                                self.ri_bv4_enter = None
                                self.ri_bv4_exit = None
                                self.ri_bv4_redistribute = None
                                self.route_origin = None


                            class LcIp(object):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp']['meta_info']


                            class LcMpls(object):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:time-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.lc_ip is not None:
                                    for child_ref in self.lc_ip:
                                        if child_ref._has_data():
                                            return True

                                if self.lc_mpls is not None:
                                    for child_ref in self.lc_mpls:
                                        if child_ref._has_data():
                                            return True

                                if self.ldp_enter is not None:
                                    return True

                                if self.ldp_exit is not None:
                                    return True

                                if self.lsd_enter is not None:
                                    return True

                                if self.lsd_exit is not None:
                                    return True

                                if self.ri_bv4_enter is not None:
                                    return True

                                if self.ri_bv4_exit is not None:
                                    return True

                                if self.ri_bv4_redistribute is not None:
                                    return True

                                if self.route_origin is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine']['meta_info']


                        class LsaProcessed(object):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsa-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-summary[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.change_type is not None:
                                return True

                            if self.cost is not None:
                                return True

                            if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                return True

                            if self.ipfrr_event_id is not None:
                                return True

                            if self.lsa_processed is not None:
                                for child_ref in self.lsa_processed:
                                    if child_ref._has_data():
                                        return True

                            if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                return True

                            if self.path is not None:
                                for child_ref in self.path:
                                    if child_ref._has_data():
                                        return True

                            if self.prefix is not None:
                                return True

                            if self.prefix_lenth is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.route_path_change_type is not None:
                                return True

                            if self.route_type is not None:
                                return True

                            if self.spf_run_no is not None:
                                return True

                            if self.threshold_exceeded is not None:
                                return True

                            if self.time_line is not None:
                                for child_ref in self.time_line:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_lsa is not None:
                                for child_ref in self.trigger_lsa:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries.PrefixEventSummary']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-summaries'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.prefix_event_summary is not None:
                            for child_ref in self.prefix_event_summary:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventSummaries']['meta_info']


                class SummaryExternalEventOfflines(object):
                    """
                    OSPF Summary\-External Prefix events offline
                    data
                    
                    .. attribute:: summary_external_event_offline
                    
                    	Offline operational data for particular OSPF Prefix Event
                    	**type**\: list of    :py:class:`SummaryExternalEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.summary_external_event_offline = YList()
                        self.summary_external_event_offline.parent = self
                        self.summary_external_event_offline.name = 'summary_external_event_offline'


                    class SummaryExternalEventOffline(object):
                        """
                        Offline operational data for particular OSPF
                        Prefix Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChangeEnum>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRouteEnum>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.change_type = None
                            self.cost = None
                            self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self.ipfrr_event_id = None
                            self.lsa_processed = YList()
                            self.lsa_processed.parent = self
                            self.lsa_processed.name = 'lsa_processed'
                            self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self.path = YList()
                            self.path.parent = self
                            self.path.name = 'path'
                            self.prefix = None
                            self.prefix_lenth = None
                            self.priority = None
                            self.route_path_change_type = None
                            self.route_type = None
                            self.spf_run_no = None
                            self.threshold_exceeded = None
                            self.time_line = YList()
                            self.time_line.parent = self
                            self.time_line.name = 'time_line'
                            self.trigger_lsa = YList()
                            self.trigger_lsa.parent = self
                            self.trigger_lsa.name = 'trigger_lsa'
                            self.trigger_time = None


                        class IpConvergenceTime(object):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.IpConvergenceTime']['meta_info']


                        class MplsConvergenceTime(object):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.MplsConvergenceTime']['meta_info']


                        class Path(object):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.interface_name = None
                                self.lfa_path = YList()
                                self.lfa_path.parent = self
                                self.lfa_path.name = 'lfa_path'
                                self.neighbour_address = None
                                self.path_metric = None


                            class LfaPath(object):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfaEnum>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.interface_name = None
                                    self.lfa_type = None
                                    self.neighbour_address = None
                                    self.path_metric = None
                                    self.remote_node_id = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lfa-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.interface_name is not None:
                                        return True

                                    if self.lfa_type is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    if self.path_metric is not None:
                                        return True

                                    if self.remote_node_id is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path.LfaPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:path'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.lfa_path is not None:
                                    for child_ref in self.lfa_path:
                                        if child_ref._has_data():
                                            return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.Path']['meta_info']


                        class TriggerLsa(object):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsa'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TriggerLsa']['meta_info']


                        class TimeLine(object):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.lc_ip = YList()
                                self.lc_ip.parent = self
                                self.lc_ip.name = 'lc_ip'
                                self.lc_mpls = YList()
                                self.lc_mpls.parent = self
                                self.lc_mpls.name = 'lc_mpls'
                                self.ldp_enter = None
                                self.ldp_exit = None
                                self.lsd_enter = None
                                self.lsd_exit = None
                                self.ri_bv4_enter = None
                                self.ri_bv4_exit = None
                                self.ri_bv4_redistribute = None
                                self.route_origin = None


                            class LcIp(object):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcIp']['meta_info']


                            class LcMpls(object):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine.LcMpls']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:time-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.lc_ip is not None:
                                    for child_ref in self.lc_ip:
                                        if child_ref._has_data():
                                            return True

                                if self.lc_mpls is not None:
                                    for child_ref in self.lc_mpls:
                                        if child_ref._has_data():
                                            return True

                                if self.ldp_enter is not None:
                                    return True

                                if self.ldp_exit is not None:
                                    return True

                                if self.lsd_enter is not None:
                                    return True

                                if self.lsd_exit is not None:
                                    return True

                                if self.ri_bv4_enter is not None:
                                    return True

                                if self.ri_bv4_exit is not None:
                                    return True

                                if self.ri_bv4_redistribute is not None:
                                    return True

                                if self.route_origin is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.TimeLine']['meta_info']


                        class LsaProcessed(object):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsa-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline.LsaProcessed']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:summary-external-event-offline[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.change_type is not None:
                                return True

                            if self.cost is not None:
                                return True

                            if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                return True

                            if self.ipfrr_event_id is not None:
                                return True

                            if self.lsa_processed is not None:
                                for child_ref in self.lsa_processed:
                                    if child_ref._has_data():
                                        return True

                            if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                return True

                            if self.path is not None:
                                for child_ref in self.path:
                                    if child_ref._has_data():
                                        return True

                            if self.prefix is not None:
                                return True

                            if self.prefix_lenth is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.route_path_change_type is not None:
                                return True

                            if self.route_type is not None:
                                return True

                            if self.spf_run_no is not None:
                                return True

                            if self.threshold_exceeded is not None:
                                return True

                            if self.time_line is not None:
                                for child_ref in self.time_line:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_lsa is not None:
                                for child_ref in self.trigger_lsa:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines.SummaryExternalEventOffline']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:summary-external-event-offlines'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.summary_external_event_offline is not None:
                            for child_ref in self.summary_external_event_offline:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventOfflines']['meta_info']


                class PrefixEventOfflines(object):
                    """
                    OSPF Prefix events offline data
                    
                    .. attribute:: prefix_event_offline
                    
                    	Offline operational data for particular OSPF Prefix Event
                    	**type**\: list of    :py:class:`PrefixEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.prefix_event_offline = YList()
                        self.prefix_event_offline.parent = self
                        self.prefix_event_offline.name = 'prefix_event_offline'


                    class PrefixEventOffline(object):
                        """
                        Offline operational data for particular OSPF
                        Prefix Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChangeEnum>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRouteEnum>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.change_type = None
                            self.cost = None
                            self.ip_convergence_time = Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self.ipfrr_event_id = None
                            self.lsa_processed = YList()
                            self.lsa_processed.parent = self
                            self.lsa_processed.name = 'lsa_processed'
                            self.mpls_convergence_time = Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self.path = YList()
                            self.path.parent = self
                            self.path.name = 'path'
                            self.prefix = None
                            self.prefix_lenth = None
                            self.priority = None
                            self.route_path_change_type = None
                            self.route_type = None
                            self.spf_run_no = None
                            self.threshold_exceeded = None
                            self.time_line = YList()
                            self.time_line.parent = self
                            self.time_line.name = 'time_line'
                            self.trigger_lsa = YList()
                            self.trigger_lsa.parent = self
                            self.trigger_lsa.name = 'trigger_lsa'
                            self.trigger_time = None


                        class IpConvergenceTime(object):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime']['meta_info']


                        class MplsConvergenceTime(object):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime']['meta_info']


                        class Path(object):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.interface_name = None
                                self.lfa_path = YList()
                                self.lfa_path.parent = self
                                self.lfa_path.name = 'lfa_path'
                                self.neighbour_address = None
                                self.path_metric = None


                            class LfaPath(object):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfaEnum>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.interface_name = None
                                    self.lfa_type = None
                                    self.neighbour_address = None
                                    self.path_metric = None
                                    self.remote_node_id = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lfa-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.interface_name is not None:
                                        return True

                                    if self.lfa_type is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    if self.path_metric is not None:
                                        return True

                                    if self.remote_node_id is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:path'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.lfa_path is not None:
                                    for child_ref in self.lfa_path:
                                        if child_ref._has_data():
                                            return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path']['meta_info']


                        class TriggerLsa(object):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsa'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa']['meta_info']


                        class TimeLine(object):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.lc_ip = YList()
                                self.lc_ip.parent = self
                                self.lc_ip.name = 'lc_ip'
                                self.lc_mpls = YList()
                                self.lc_mpls.parent = self
                                self.lc_mpls.name = 'lc_mpls'
                                self.ldp_enter = None
                                self.ldp_exit = None
                                self.lsd_enter = None
                                self.lsd_exit = None
                                self.ri_bv4_enter = None
                                self.ri_bv4_exit = None
                                self.ri_bv4_redistribute = None
                                self.route_origin = None


                            class LcIp(object):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp']['meta_info']


                            class LcMpls(object):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:time-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.lc_ip is not None:
                                    for child_ref in self.lc_ip:
                                        if child_ref._has_data():
                                            return True

                                if self.lc_mpls is not None:
                                    for child_ref in self.lc_mpls:
                                        if child_ref._has_data():
                                            return True

                                if self.ldp_enter is not None:
                                    return True

                                if self.ldp_exit is not None:
                                    return True

                                if self.lsd_enter is not None:
                                    return True

                                if self.lsd_exit is not None:
                                    return True

                                if self.ri_bv4_enter is not None:
                                    return True

                                if self.ri_bv4_exit is not None:
                                    return True

                                if self.ri_bv4_redistribute is not None:
                                    return True

                                if self.route_origin is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine']['meta_info']


                        class LsaProcessed(object):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsa-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-offline[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.change_type is not None:
                                return True

                            if self.cost is not None:
                                return True

                            if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                return True

                            if self.ipfrr_event_id is not None:
                                return True

                            if self.lsa_processed is not None:
                                for child_ref in self.lsa_processed:
                                    if child_ref._has_data():
                                        return True

                            if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                return True

                            if self.path is not None:
                                for child_ref in self.path:
                                    if child_ref._has_data():
                                        return True

                            if self.prefix is not None:
                                return True

                            if self.prefix_lenth is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.route_path_change_type is not None:
                                return True

                            if self.route_type is not None:
                                return True

                            if self.spf_run_no is not None:
                                return True

                            if self.threshold_exceeded is not None:
                                return True

                            if self.time_line is not None:
                                for child_ref in self.time_line:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_lsa is not None:
                                for child_ref in self.trigger_lsa:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines.PrefixEventOffline']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-offlines'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.prefix_event_offline is not None:
                            for child_ref in self.prefix_event_offline:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.PrefixEventOfflines']['meta_info']


                class SummaryExternalEventStatistics(object):
                    """
                    Summary\-External prefix monitoring statistics
                    
                    .. attribute:: external_added
                    
                    	Total Ext Routes Added
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_critical
                    
                    	Total Ext Routes Critical
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_deleted
                    
                    	Total Ext Routes Deleted
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_high
                    
                    	Total Ext Routes High
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_low
                    
                    	Total Ext Routes Low
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_medium
                    
                    	Total Ext Routes Medium
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_modified
                    
                    	Total Ext Routes Modified
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: external_routes
                    
                    	Total External Routes
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_added
                    
                    	Total IA Routes Added
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_critical
                    
                    	Total IA Routes Critical
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_deleted
                    
                    	Total IA Routes Deleted
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_high
                    
                    	Total IA Routes High
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_low
                    
                    	Total IA Routes Low
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_medium
                    
                    	Total IA Routes Medium
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_modified
                    
                    	Total IA Routes Modified
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: inter_area_routes
                    
                    	Total Inter\-Area Routes
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.external_added = None
                        self.external_critical = None
                        self.external_deleted = None
                        self.external_high = None
                        self.external_low = None
                        self.external_medium = None
                        self.external_modified = None
                        self.external_routes = None
                        self.inter_area_added = None
                        self.inter_area_critical = None
                        self.inter_area_deleted = None
                        self.inter_area_high = None
                        self.inter_area_low = None
                        self.inter_area_medium = None
                        self.inter_area_modified = None
                        self.inter_area_routes = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:summary-external-event-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.external_added is not None:
                            return True

                        if self.external_critical is not None:
                            return True

                        if self.external_deleted is not None:
                            return True

                        if self.external_high is not None:
                            return True

                        if self.external_low is not None:
                            return True

                        if self.external_medium is not None:
                            return True

                        if self.external_modified is not None:
                            return True

                        if self.external_routes is not None:
                            return True

                        if self.inter_area_added is not None:
                            return True

                        if self.inter_area_critical is not None:
                            return True

                        if self.inter_area_deleted is not None:
                            return True

                        if self.inter_area_high is not None:
                            return True

                        if self.inter_area_low is not None:
                            return True

                        if self.inter_area_medium is not None:
                            return True

                        if self.inter_area_modified is not None:
                            return True

                        if self.inter_area_routes is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ospf.Instances.Instance.SummaryExternalEventStatistics']['meta_info']

                @property
                def _common_path(self):
                    if self.instance_name is None:
                        raise YPYModelError('Key property instance_name is None')

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ospf/Cisco-IOS-XR-infra-rcmd-oper:instances/Cisco-IOS-XR-infra-rcmd-oper:instance[Cisco-IOS-XR-infra-rcmd-oper:instance-name = ' + str(self.instance_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.instance_name is not None:
                        return True

                    if self.ipfrr_event_offlines is not None and self.ipfrr_event_offlines._has_data():
                        return True

                    if self.ipfrr_event_summaries is not None and self.ipfrr_event_summaries._has_data():
                        return True

                    if self.prefix_event_offlines is not None and self.prefix_event_offlines._has_data():
                        return True

                    if self.prefix_event_statistics is not None and self.prefix_event_statistics._has_data():
                        return True

                    if self.prefix_event_summaries is not None and self.prefix_event_summaries._has_data():
                        return True

                    if self.spf_run_offlines is not None and self.spf_run_offlines._has_data():
                        return True

                    if self.spf_run_summaries is not None and self.spf_run_summaries._has_data():
                        return True

                    if self.summary_external_event_offlines is not None and self.summary_external_event_offlines._has_data():
                        return True

                    if self.summary_external_event_statistics is not None and self.summary_external_event_statistics._has_data():
                        return True

                    if self.summary_external_event_summaries is not None and self.summary_external_event_summaries._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Ospf.Instances.Instance']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ospf/Cisco-IOS-XR-infra-rcmd-oper:instances'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.instance is not None:
                    for child_ref in self.instance:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Ospf.Instances']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ospf'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instances is not None and self.instances._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
            return meta._meta_table['Rcmd.Ospf']['meta_info']


    class Server(object):
        """
        Server Info
        
        .. attribute:: detail
        
        	Server Info
        	**type**\:   :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail>`
        
        .. attribute:: normal
        
        	Server Info
        	**type**\:   :py:class:`Normal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.detail = Rcmd.Server.Detail()
            self.detail.parent = self
            self.normal = Rcmd.Server.Normal()
            self.normal.parent = self


        class Normal(object):
            """
            Server Info
            
            .. attribute:: archive_count
            
            	Archive Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diag_node_count
            
            	Diag Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diagnostics_archive_node
            
            	Diagnostics Archival Node (Applicable for local location)
            	**type**\:  str
            
            .. attribute:: diagnostics_archive_path
            
            	Diagnostics Archival Path
            	**type**\:  str
            
            .. attribute:: disabled_node_count
            
            	Disabled Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: event_buffer_size
            
            	Event Buffer Size
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: host_name
            
            	Configured Hostname
            	**type**\:  str
            
            .. attribute:: in_active_node_count
            
            	Disabled Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_count
            
            	Interface events count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: last_archival_error
            
            	Last Archival Error
            	**type**\:  str
            
            .. attribute:: last_archival_error_time
            
            	Last Archival Status
            	**type**\:  str
            
            .. attribute:: last_archival_status
            
            	Last Archival Status
            	**type**\:  str
            
            .. attribute:: last_process_duration
            
            	Last Processing Duration
            	**type**\:  str
            
            .. attribute:: last_process_start_time
            
            	Last Processing Start Time
            	**type**\:  str
            
            .. attribute:: last_process_state
            
            	Process state
            	**type**\:   :py:class:`RcmdShowPrcsStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowPrcsStateEnum>`
            
            .. attribute:: max_events
            
            	Maximum Events
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: max_interface_count
            
            	Max Interface events count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: monitoring_interval
            
            	Configured Monitor Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: next_interval
            
            	Time for next processing
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_lc_count
            
            	LC count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_rp_count
            
            	RP count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: process_count
            
            	Post Processing count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: protocol_config
            
            	Protocol level configuration
            	**type**\: list of    :py:class:`ProtocolConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal.ProtocolConfig>`
            
            .. attribute:: reports_archive_node
            
            	Reports Archival Node (Applicable for local location)
            	**type**\:  str
            
            .. attribute:: reports_archive_path
            
            	Reports Archival Path
            	**type**\:  str
            
            .. attribute:: server_detail
            
            	Detailed Information
            	**type**\: list of    :py:class:`ServerDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal.ServerDetail>`
            
            .. attribute:: spf_process_count
            
            	SPF Processing count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: status
            
            	Server Status
            	**type**\:   :py:class:`RcmdBagEnableDisableEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBagEnableDisableEnum>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.archive_count = None
                self.diag_node_count = None
                self.diagnostics_archive_node = None
                self.diagnostics_archive_path = None
                self.disabled_node_count = None
                self.event_buffer_size = None
                self.host_name = None
                self.in_active_node_count = None
                self.interface_count = None
                self.last_archival_error = None
                self.last_archival_error_time = None
                self.last_archival_status = None
                self.last_process_duration = None
                self.last_process_start_time = None
                self.last_process_state = None
                self.max_events = None
                self.max_interface_count = None
                self.monitoring_interval = None
                self.next_interval = None
                self.node_lc_count = None
                self.node_rp_count = None
                self.process_count = None
                self.protocol_config = YList()
                self.protocol_config.parent = self
                self.protocol_config.name = 'protocol_config'
                self.reports_archive_node = None
                self.reports_archive_path = None
                self.server_detail = YList()
                self.server_detail.parent = self
                self.server_detail.name = 'server_detail'
                self.spf_process_count = None
                self.status = None


            class ProtocolConfig(object):
                """
                Protocol level configuration
                
                .. attribute:: priority
                
                	Priority level configuration
                	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal.ProtocolConfig.Priority>`
                
                .. attribute:: protocol_name
                
                	Protocol Name
                	**type**\:  str
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.priority = YList()
                    self.priority.parent = self
                    self.priority.name = 'priority'
                    self.protocol_name = None


                class Priority(object):
                    """
                    Priority level configuration
                    
                    .. attribute:: disable
                    
                    	Enable/Disable cfg
                    	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
                    
                    .. attribute:: priority_name
                    
                    	Priority Level
                    	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                    
                    .. attribute:: threshold
                    
                    	threshold value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.disable = None
                        self.priority_name = None
                        self.threshold = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:normal/Cisco-IOS-XR-infra-rcmd-oper:protocol-config/Cisco-IOS-XR-infra-rcmd-oper:priority'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.disable is not None:
                            return True

                        if self.priority_name is not None:
                            return True

                        if self.threshold is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Server.Normal.ProtocolConfig.Priority']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:normal/Cisco-IOS-XR-infra-rcmd-oper:protocol-config'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.priority is not None:
                        for child_ref in self.priority:
                            if child_ref._has_data():
                                return True

                    if self.protocol_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Server.Normal.ProtocolConfig']['meta_info']


            class ServerDetail(object):
                """
                Detailed Information
                
                .. attribute:: memory_suspend
                
                	Memory Suspend
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: overload_suspend
                
                	Overload suspend
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: trace_information
                
                	Trace Information
                	**type**\: list of    :py:class:`TraceInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Normal.ServerDetail.TraceInformation>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.memory_suspend = None
                    self.overload_suspend = None
                    self.trace_information = YList()
                    self.trace_information.parent = self
                    self.trace_information.name = 'trace_information'


                class TraceInformation(object):
                    """
                    Trace Information
                    
                    .. attribute:: error_stats
                    
                    	Server Error Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_run_stats
                    
                    	Server Last Run Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_stats
                    
                    	Server Total Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: trace_name
                    
                    	Configured Hostname
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.error_stats = None
                        self.last_run_stats = None
                        self.total_stats = None
                        self.trace_name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:normal/Cisco-IOS-XR-infra-rcmd-oper:server-detail/Cisco-IOS-XR-infra-rcmd-oper:trace-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.error_stats is not None:
                            return True

                        if self.last_run_stats is not None:
                            return True

                        if self.total_stats is not None:
                            return True

                        if self.trace_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Server.Normal.ServerDetail.TraceInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:normal/Cisco-IOS-XR-infra-rcmd-oper:server-detail'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.memory_suspend is not None:
                        return True

                    if self.overload_suspend is not None:
                        return True

                    if self.trace_information is not None:
                        for child_ref in self.trace_information:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Server.Normal.ServerDetail']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:normal'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.archive_count is not None:
                    return True

                if self.diag_node_count is not None:
                    return True

                if self.diagnostics_archive_node is not None:
                    return True

                if self.diagnostics_archive_path is not None:
                    return True

                if self.disabled_node_count is not None:
                    return True

                if self.event_buffer_size is not None:
                    return True

                if self.host_name is not None:
                    return True

                if self.in_active_node_count is not None:
                    return True

                if self.interface_count is not None:
                    return True

                if self.last_archival_error is not None:
                    return True

                if self.last_archival_error_time is not None:
                    return True

                if self.last_archival_status is not None:
                    return True

                if self.last_process_duration is not None:
                    return True

                if self.last_process_start_time is not None:
                    return True

                if self.last_process_state is not None:
                    return True

                if self.max_events is not None:
                    return True

                if self.max_interface_count is not None:
                    return True

                if self.monitoring_interval is not None:
                    return True

                if self.next_interval is not None:
                    return True

                if self.node_lc_count is not None:
                    return True

                if self.node_rp_count is not None:
                    return True

                if self.process_count is not None:
                    return True

                if self.protocol_config is not None:
                    for child_ref in self.protocol_config:
                        if child_ref._has_data():
                            return True

                if self.reports_archive_node is not None:
                    return True

                if self.reports_archive_path is not None:
                    return True

                if self.server_detail is not None:
                    for child_ref in self.server_detail:
                        if child_ref._has_data():
                            return True

                if self.spf_process_count is not None:
                    return True

                if self.status is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Server.Normal']['meta_info']


        class Detail(object):
            """
            Server Info
            
            .. attribute:: archive_count
            
            	Archive Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diag_node_count
            
            	Diag Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diagnostics_archive_node
            
            	Diagnostics Archival Node (Applicable for local location)
            	**type**\:  str
            
            .. attribute:: diagnostics_archive_path
            
            	Diagnostics Archival Path
            	**type**\:  str
            
            .. attribute:: disabled_node_count
            
            	Disabled Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: event_buffer_size
            
            	Event Buffer Size
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: host_name
            
            	Configured Hostname
            	**type**\:  str
            
            .. attribute:: in_active_node_count
            
            	Disabled Node count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interface_count
            
            	Interface events count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: last_archival_error
            
            	Last Archival Error
            	**type**\:  str
            
            .. attribute:: last_archival_error_time
            
            	Last Archival Status
            	**type**\:  str
            
            .. attribute:: last_archival_status
            
            	Last Archival Status
            	**type**\:  str
            
            .. attribute:: last_process_duration
            
            	Last Processing Duration
            	**type**\:  str
            
            .. attribute:: last_process_start_time
            
            	Last Processing Start Time
            	**type**\:  str
            
            .. attribute:: last_process_state
            
            	Process state
            	**type**\:   :py:class:`RcmdShowPrcsStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowPrcsStateEnum>`
            
            .. attribute:: max_events
            
            	Maximum Events
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: max_interface_count
            
            	Max Interface events count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: monitoring_interval
            
            	Configured Monitor Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: next_interval
            
            	Time for next processing
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_lc_count
            
            	LC count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_rp_count
            
            	RP count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: process_count
            
            	Post Processing count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: protocol_config
            
            	Protocol level configuration
            	**type**\: list of    :py:class:`ProtocolConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail.ProtocolConfig>`
            
            .. attribute:: reports_archive_node
            
            	Reports Archival Node (Applicable for local location)
            	**type**\:  str
            
            .. attribute:: reports_archive_path
            
            	Reports Archival Path
            	**type**\:  str
            
            .. attribute:: server_detail
            
            	Detailed Information
            	**type**\: list of    :py:class:`ServerDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail.ServerDetail>`
            
            .. attribute:: spf_process_count
            
            	SPF Processing count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: status
            
            	Server Status
            	**type**\:   :py:class:`RcmdBagEnableDisableEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBagEnableDisableEnum>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.archive_count = None
                self.diag_node_count = None
                self.diagnostics_archive_node = None
                self.diagnostics_archive_path = None
                self.disabled_node_count = None
                self.event_buffer_size = None
                self.host_name = None
                self.in_active_node_count = None
                self.interface_count = None
                self.last_archival_error = None
                self.last_archival_error_time = None
                self.last_archival_status = None
                self.last_process_duration = None
                self.last_process_start_time = None
                self.last_process_state = None
                self.max_events = None
                self.max_interface_count = None
                self.monitoring_interval = None
                self.next_interval = None
                self.node_lc_count = None
                self.node_rp_count = None
                self.process_count = None
                self.protocol_config = YList()
                self.protocol_config.parent = self
                self.protocol_config.name = 'protocol_config'
                self.reports_archive_node = None
                self.reports_archive_path = None
                self.server_detail = YList()
                self.server_detail.parent = self
                self.server_detail.name = 'server_detail'
                self.spf_process_count = None
                self.status = None


            class ProtocolConfig(object):
                """
                Protocol level configuration
                
                .. attribute:: priority
                
                	Priority level configuration
                	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail.ProtocolConfig.Priority>`
                
                .. attribute:: protocol_name
                
                	Protocol Name
                	**type**\:  str
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.priority = YList()
                    self.priority.parent = self
                    self.priority.name = 'priority'
                    self.protocol_name = None


                class Priority(object):
                    """
                    Priority level configuration
                    
                    .. attribute:: disable
                    
                    	Enable/Disable cfg
                    	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
                    
                    .. attribute:: priority_name
                    
                    	Priority Level
                    	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                    
                    .. attribute:: threshold
                    
                    	threshold value
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.disable = None
                        self.priority_name = None
                        self.threshold = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:detail/Cisco-IOS-XR-infra-rcmd-oper:protocol-config/Cisco-IOS-XR-infra-rcmd-oper:priority'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.disable is not None:
                            return True

                        if self.priority_name is not None:
                            return True

                        if self.threshold is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Server.Detail.ProtocolConfig.Priority']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:detail/Cisco-IOS-XR-infra-rcmd-oper:protocol-config'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.priority is not None:
                        for child_ref in self.priority:
                            if child_ref._has_data():
                                return True

                    if self.protocol_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Server.Detail.ProtocolConfig']['meta_info']


            class ServerDetail(object):
                """
                Detailed Information
                
                .. attribute:: memory_suspend
                
                	Memory Suspend
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: overload_suspend
                
                	Overload suspend
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: trace_information
                
                	Trace Information
                	**type**\: list of    :py:class:`TraceInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Server.Detail.ServerDetail.TraceInformation>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.memory_suspend = None
                    self.overload_suspend = None
                    self.trace_information = YList()
                    self.trace_information.parent = self
                    self.trace_information.name = 'trace_information'


                class TraceInformation(object):
                    """
                    Trace Information
                    
                    .. attribute:: error_stats
                    
                    	Server Error Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_run_stats
                    
                    	Server Last Run Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_stats
                    
                    	Server Total Status
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: trace_name
                    
                    	Configured Hostname
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.error_stats = None
                        self.last_run_stats = None
                        self.total_stats = None
                        self.trace_name = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:detail/Cisco-IOS-XR-infra-rcmd-oper:server-detail/Cisco-IOS-XR-infra-rcmd-oper:trace-information'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.error_stats is not None:
                            return True

                        if self.last_run_stats is not None:
                            return True

                        if self.total_stats is not None:
                            return True

                        if self.trace_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Server.Detail.ServerDetail.TraceInformation']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:detail/Cisco-IOS-XR-infra-rcmd-oper:server-detail'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.memory_suspend is not None:
                        return True

                    if self.overload_suspend is not None:
                        return True

                    if self.trace_information is not None:
                        for child_ref in self.trace_information:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Server.Detail.ServerDetail']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server/Cisco-IOS-XR-infra-rcmd-oper:detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.archive_count is not None:
                    return True

                if self.diag_node_count is not None:
                    return True

                if self.diagnostics_archive_node is not None:
                    return True

                if self.diagnostics_archive_path is not None:
                    return True

                if self.disabled_node_count is not None:
                    return True

                if self.event_buffer_size is not None:
                    return True

                if self.host_name is not None:
                    return True

                if self.in_active_node_count is not None:
                    return True

                if self.interface_count is not None:
                    return True

                if self.last_archival_error is not None:
                    return True

                if self.last_archival_error_time is not None:
                    return True

                if self.last_archival_status is not None:
                    return True

                if self.last_process_duration is not None:
                    return True

                if self.last_process_start_time is not None:
                    return True

                if self.last_process_state is not None:
                    return True

                if self.max_events is not None:
                    return True

                if self.max_interface_count is not None:
                    return True

                if self.monitoring_interval is not None:
                    return True

                if self.next_interval is not None:
                    return True

                if self.node_lc_count is not None:
                    return True

                if self.node_rp_count is not None:
                    return True

                if self.process_count is not None:
                    return True

                if self.protocol_config is not None:
                    for child_ref in self.protocol_config:
                        if child_ref._has_data():
                            return True

                if self.reports_archive_node is not None:
                    return True

                if self.reports_archive_path is not None:
                    return True

                if self.server_detail is not None:
                    for child_ref in self.server_detail:
                        if child_ref._has_data():
                            return True

                if self.spf_process_count is not None:
                    return True

                if self.status is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Server.Detail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:server'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.detail is not None and self.detail._has_data():
                return True

            if self.normal is not None and self.normal._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
            return meta._meta_table['Rcmd.Server']['meta_info']


    class Node(object):
        """
        Node Info
        
        .. attribute:: node_information
        
        	Node Info
        	**type**\: list of    :py:class:`NodeInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Node.NodeInformation>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.node_information = YList()
            self.node_information.parent = self
            self.node_information.name = 'node_information'


        class NodeInformation(object):
            """
            Node Info
            
            .. attribute:: card_state
            
            	Card State
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: diag_mode
            
            	Diag Mode
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: fwd_referenced
            
            	Forward Referenced
            	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
            
            .. attribute:: last_update_time
            
            	Last Updated Time
            	**type**\:  str
            
            .. attribute:: node_id
            
            	Node Id
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: node_name
            
            	Node Name
            	**type**\:  str
            
            .. attribute:: node_state
            
            	Node State
            	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
            
            .. attribute:: node_type
            
            	Node Type
            	**type**\:   :py:class:`RcmdShowNodeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowNodeEnum>`
            
            .. attribute:: rack_id
            
            	Rack Id
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: redundancy_state
            
            	Redundancy State
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: software_state
            
            	Software State
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: status
            
            	Status
            	**type**\:   :py:class:`RcmdBagEnblDsblEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBagEnblDsblEnum>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.card_state = None
                self.diag_mode = None
                self.fwd_referenced = None
                self.last_update_time = None
                self.node_id = None
                self.node_name = None
                self.node_state = None
                self.node_type = None
                self.rack_id = None
                self.redundancy_state = None
                self.software_state = None
                self.status = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:node/Cisco-IOS-XR-infra-rcmd-oper:node-information'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.card_state is not None:
                    return True

                if self.diag_mode is not None:
                    return True

                if self.fwd_referenced is not None:
                    return True

                if self.last_update_time is not None:
                    return True

                if self.node_id is not None:
                    return True

                if self.node_name is not None:
                    return True

                if self.node_state is not None:
                    return True

                if self.node_type is not None:
                    return True

                if self.rack_id is not None:
                    return True

                if self.redundancy_state is not None:
                    return True

                if self.software_state is not None:
                    return True

                if self.status is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Node.NodeInformation']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:node'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.node_information is not None:
                for child_ref in self.node_information:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
            return meta._meta_table['Rcmd.Node']['meta_info']


    class Isis(object):
        """
        Operational data for ISIS
        
        .. attribute:: instances
        
        	Operational data
        	**type**\:   :py:class:`Instances <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.instances = Rcmd.Isis.Instances()
            self.instances.parent = self


        class Instances(object):
            """
            Operational data
            
            .. attribute:: instance
            
            	Operational data for a particular instance
            	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.instance = YList()
                self.instance.parent = self
                self.instance.name = 'instance'


            class Instance(object):
                """
                Operational data for a particular instance
                
                .. attribute:: instance_name  <key>
                
                	Operational data for a particular instance
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: ipfrr_event_offlines
                
                	ISIS IP\-FRR Event offline data
                	**type**\:   :py:class:`IpfrrEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines>`
                
                .. attribute:: ipfrr_event_summaries
                
                	ISIS IP\-FRR events summary data
                	**type**\:   :py:class:`IpfrrEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries>`
                
                .. attribute:: lsp_regenerateds
                
                	Regenerated LSP data
                	**type**\:   :py:class:`LspRegenerateds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.LspRegenerateds>`
                
                .. attribute:: prefix_event_offlines
                
                	ISIS Prefix events offline data
                	**type**\:   :py:class:`PrefixEventOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines>`
                
                .. attribute:: prefix_event_statistics
                
                	ISIS Prefix events statistics data
                	**type**\:   :py:class:`PrefixEventStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventStatistics>`
                
                .. attribute:: prefix_event_summaries
                
                	ISIS Prefix events summary data
                	**type**\:   :py:class:`PrefixEventSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries>`
                
                .. attribute:: spf_run_offlines
                
                	ISIS SPF run offline data
                	**type**\:   :py:class:`SpfRunOfflines <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines>`
                
                .. attribute:: spf_run_summaries
                
                	ISIS SPF run summary data
                	**type**\:   :py:class:`SpfRunSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.instance_name = None
                    self.ipfrr_event_offlines = Rcmd.Isis.Instances.Instance.IpfrrEventOfflines()
                    self.ipfrr_event_offlines.parent = self
                    self.ipfrr_event_summaries = Rcmd.Isis.Instances.Instance.IpfrrEventSummaries()
                    self.ipfrr_event_summaries.parent = self
                    self.lsp_regenerateds = Rcmd.Isis.Instances.Instance.LspRegenerateds()
                    self.lsp_regenerateds.parent = self
                    self.prefix_event_offlines = Rcmd.Isis.Instances.Instance.PrefixEventOfflines()
                    self.prefix_event_offlines.parent = self
                    self.prefix_event_statistics = Rcmd.Isis.Instances.Instance.PrefixEventStatistics()
                    self.prefix_event_statistics.parent = self
                    self.prefix_event_summaries = Rcmd.Isis.Instances.Instance.PrefixEventSummaries()
                    self.prefix_event_summaries.parent = self
                    self.spf_run_offlines = Rcmd.Isis.Instances.Instance.SpfRunOfflines()
                    self.spf_run_offlines.parent = self
                    self.spf_run_summaries = Rcmd.Isis.Instances.Instance.SpfRunSummaries()
                    self.spf_run_summaries.parent = self


                class IpfrrEventSummaries(object):
                    """
                    ISIS IP\-FRR events summary data
                    
                    .. attribute:: ipfrr_event_summary
                    
                    	IP\-FRR Event data
                    	**type**\: list of    :py:class:`IpfrrEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipfrr_event_summary = YList()
                        self.ipfrr_event_summary.parent = self
                        self.ipfrr_event_summary.name = 'ipfrr_event_summary'


                    class IpfrrEventSummary(object):
                        """
                        IP\-FRR Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific IP\-FRR Event
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: completed_spf_run
                        
                        	IP\-Frr Completed reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coverage
                        
                        	Coverage in percentage for all priorities
                        	**type**\:  str
                        
                        	**units**\: percentage
                        
                        .. attribute:: duration
                        
                        	Duration for the calculation (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: event_id_xr
                        
                        	IP\-Frr Event ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fully_protected_routes
                        
                        	Cumulative Number of Fully Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipfrr_statistic
                        
                        	IP\-Frr Statistics categorized by priority
                        	**type**\: list of    :py:class:`IpfrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic>`
                        
                        .. attribute:: partially_protected_routes
                        
                        	Cumulative Number of Partially Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: remote_node
                        
                        	Remote Node Information
                        	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode>`
                        
                        .. attribute:: start_time_offset
                        
                        	Start Time offset from trigger time (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: total_routes
                        
                        	Cumulative Number of Routes for all priorities
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_spf_run
                        
                        	IP\-Frr Triggered reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_time
                        
                        	Trigger time  (eg\: Apr 24 13\:16\:04.961)
                        	**type**\:  str
                        
                        .. attribute:: wait_time
                        
                        	Waiting Time (in milliseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.completed_spf_run = None
                            self.coverage = None
                            self.duration = None
                            self.event_id_xr = None
                            self.fully_protected_routes = None
                            self.ipfrr_statistic = YList()
                            self.ipfrr_statistic.parent = self
                            self.ipfrr_statistic.name = 'ipfrr_statistic'
                            self.partially_protected_routes = None
                            self.remote_node = YList()
                            self.remote_node.parent = self
                            self.remote_node.name = 'remote_node'
                            self.start_time_offset = None
                            self.total_routes = None
                            self.trigger_spf_run = None
                            self.trigger_time = None
                            self.wait_time = None


                        class IpfrrStatistic(object):
                            """
                            IP\-Frr Statistics categorized by priority
                            
                            .. attribute:: below_threshold
                            
                            	Covearge is below Configured Threshold
                            	**type**\:  bool
                            
                            .. attribute:: coverage
                            
                            	Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: fully_protected_routes
                            
                            	Fully Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_lfa_coverage
                            
                            	Local LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: partially_protected_routes
                            
                            	Partially Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: priority
                            
                            	Priority
                            	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                            
                            .. attribute:: remote_lfa_coverage
                            
                            	Remote LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: total_routes
                            
                            	Total Number of Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.below_threshold = None
                                self.coverage = None
                                self.fully_protected_routes = None
                                self.local_lfa_coverage = None
                                self.partially_protected_routes = None
                                self.priority = None
                                self.remote_lfa_coverage = None
                                self.total_routes = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-statistic'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.below_threshold is not None:
                                    return True

                                if self.coverage is not None:
                                    return True

                                if self.fully_protected_routes is not None:
                                    return True

                                if self.local_lfa_coverage is not None:
                                    return True

                                if self.partially_protected_routes is not None:
                                    return True

                                if self.priority is not None:
                                    return True

                                if self.remote_lfa_coverage is not None:
                                    return True

                                if self.total_routes is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.IpfrrStatistic']['meta_info']


                        class RemoteNode(object):
                            """
                            Remote Node Information
                            
                            .. attribute:: in_use_time
                            
                            	Inuse time of the Remote Node (eg\: Apr 24 13\:16 \:04.961)
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_count
                            
                            	Number of paths protected by this Remote Node
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: primary_path
                            
                            	Protected Primary Paths
                            	**type**\: list of    :py:class:`PrimaryPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath>`
                            
                            .. attribute:: remote_node_id
                            
                            	Remote\-LFA Node ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.in_use_time = None
                                self.interface_name = None
                                self.neighbour_address = None
                                self.path_count = None
                                self.primary_path = YList()
                                self.primary_path.parent = self
                                self.primary_path.name = 'primary_path'
                                self.remote_node_id = None


                            class PrimaryPath(object):
                                """
                                Protected Primary Paths
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None
                                    self.neighbour_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:primary-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode.PrimaryPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:remote-node'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.in_use_time is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_count is not None:
                                    return True

                                if self.primary_path is not None:
                                    for child_ref in self.primary_path:
                                        if child_ref._has_data():
                                            return True

                                if self.remote_node_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary.RemoteNode']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-event-summary[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.completed_spf_run is not None:
                                return True

                            if self.coverage is not None:
                                return True

                            if self.duration is not None:
                                return True

                            if self.event_id_xr is not None:
                                return True

                            if self.fully_protected_routes is not None:
                                return True

                            if self.ipfrr_statistic is not None:
                                for child_ref in self.ipfrr_statistic:
                                    if child_ref._has_data():
                                        return True

                            if self.partially_protected_routes is not None:
                                return True

                            if self.remote_node is not None:
                                for child_ref in self.remote_node:
                                    if child_ref._has_data():
                                        return True

                            if self.start_time_offset is not None:
                                return True

                            if self.total_routes is not None:
                                return True

                            if self.trigger_spf_run is not None:
                                return True

                            if self.trigger_time is not None:
                                return True

                            if self.wait_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventSummaries.IpfrrEventSummary']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-event-summaries'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipfrr_event_summary is not None:
                            for child_ref in self.ipfrr_event_summary:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventSummaries']['meta_info']


                class PrefixEventStatistics(object):
                    """
                    ISIS Prefix events statistics data
                    
                    .. attribute:: prefix_event_statistic
                    
                    	Monitoring Statistics
                    	**type**\: list of    :py:class:`PrefixEventStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.prefix_event_statistic = YList()
                        self.prefix_event_statistic.parent = self
                        self.prefix_event_statistic.name = 'prefix_event_statistic'


                    class PrefixEventStatistic(object):
                        """
                        Monitoring Statistics
                        
                        .. attribute:: prefix_info  <key>
                        
                        	Events with Prefix
                        	**type**\: one of the below types:
                        
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        
                        ----
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        
                        ----
                        .. attribute:: add_count
                        
                        	No. of times route gets Added
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: critical_priority
                        
                        	No. of times processed under Critical Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: delete_count
                        
                        	No. of times route gets Deleted
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: high_priority
                        
                        	No. of times processed under High Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_change_type
                        
                        	Last event Add/Delete
                        	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                        
                        .. attribute:: last_cost
                        
                        	Last Known Cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_event_time
                        
                        	Last event trigger time
                        	**type**\:  str
                        
                        .. attribute:: last_priority
                        
                        	Last event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                        
                        .. attribute:: last_route_type
                        
                        	Last event Route Type
                        	**type**\:   :py:class:`RcmdShowRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRouteEnum>`
                        
                        .. attribute:: low_priority
                        
                        	No. of times processed under Low Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: medium_priority
                        
                        	No. of times processed under Medium Priority
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: modify_count
                        
                        	No. of times route gets Deleted
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceed_count
                        
                        	No. of times threshold got exceeded
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.prefix_info = None
                            self.add_count = None
                            self.critical_priority = None
                            self.delete_count = None
                            self.high_priority = None
                            self.last_change_type = None
                            self.last_cost = None
                            self.last_event_time = None
                            self.last_priority = None
                            self.last_route_type = None
                            self.low_priority = None
                            self.medium_priority = None
                            self.modify_count = None
                            self.prefix = None
                            self.prefix_lenth = None
                            self.threshold_exceed_count = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.prefix_info is None:
                                raise YPYModelError('Key property prefix_info is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-statistic[Cisco-IOS-XR-infra-rcmd-oper:prefix-info = ' + str(self.prefix_info) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.prefix_info is not None:
                                return True

                            if self.add_count is not None:
                                return True

                            if self.critical_priority is not None:
                                return True

                            if self.delete_count is not None:
                                return True

                            if self.high_priority is not None:
                                return True

                            if self.last_change_type is not None:
                                return True

                            if self.last_cost is not None:
                                return True

                            if self.last_event_time is not None:
                                return True

                            if self.last_priority is not None:
                                return True

                            if self.last_route_type is not None:
                                return True

                            if self.low_priority is not None:
                                return True

                            if self.medium_priority is not None:
                                return True

                            if self.modify_count is not None:
                                return True

                            if self.prefix is not None:
                                return True

                            if self.prefix_lenth is not None:
                                return True

                            if self.threshold_exceed_count is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventStatistics.PrefixEventStatistic']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-statistics'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.prefix_event_statistic is not None:
                            for child_ref in self.prefix_event_statistic:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventStatistics']['meta_info']


                class SpfRunSummaries(object):
                    """
                    ISIS SPF run summary data
                    
                    .. attribute:: spf_run_summary
                    
                    	SPF Event data
                    	**type**\: list of    :py:class:`SpfRunSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.spf_run_summary = YList()
                        self.spf_run_summary.parent = self
                        self.spf_run_summary.name = 'spf_run_summary'


                    class SpfRunSummary(object):
                        """
                        SPF Event data
                        
                        .. attribute:: spf_run_number  <key>
                        
                        	Specific SPF run
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: lsp_processed
                        
                        	List of LSP changes processed
                        	**type**\: list of    :py:class:`LspProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspProcessed>`
                        
                        .. attribute:: lsp_regenerated
                        
                        	List of LSP regenerated
                        	**type**\: list of    :py:class:`LspRegenerated <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspRegenerated>`
                        
                        .. attribute:: node_statistics
                        
                        	SPF Node statistics
                        	**type**\:   :py:class:`NodeStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.NodeStatistics>`
                        
                        .. attribute:: priority
                        
                        	Convergence information on per\-priority basis
                        	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority>`
                        
                        .. attribute:: reason
                        
                        	Trigger reasons for SPF run. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                        	**type**\:  str
                        
                        .. attribute:: spf_summary
                        
                        	SPF summary information
                        	**type**\:   :py:class:`SpfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary>`
                        
                        .. attribute:: start_time
                        
                        	Start time (offset from event trigger time in ss .msec)
                        	**type**\:  str
                        
                        .. attribute:: trigger_lsp
                        
                        	Trigger LSP
                        	**type**\: list of    :py:class:`TriggerLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.TriggerLsp>`
                        
                        .. attribute:: wait_time
                        
                        	Wait time applied at SPF schedule (in msec)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.spf_run_number = None
                            self.lsp_processed = YList()
                            self.lsp_processed.parent = self
                            self.lsp_processed.name = 'lsp_processed'
                            self.lsp_regenerated = YList()
                            self.lsp_regenerated.parent = self
                            self.lsp_regenerated.name = 'lsp_regenerated'
                            self.node_statistics = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.NodeStatistics()
                            self.node_statistics.parent = self
                            self.priority = YList()
                            self.priority.parent = self
                            self.priority.name = 'priority'
                            self.reason = None
                            self.spf_summary = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary()
                            self.spf_summary.parent = self
                            self.start_time = None
                            self.trigger_lsp = YList()
                            self.trigger_lsp.parent = self
                            self.trigger_lsp.name = 'trigger_lsp'
                            self.wait_time = None


                        class SpfSummary(object):
                            """
                            SPF summary information
                            
                            .. attribute:: duration
                            
                            	Duration of SPF calculation (in ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: is_data_complete
                            
                            	Whether the event has all information
                            	**type**\:  bool
                            
                            .. attribute:: isis_level
                            
                            	ISIS Level
                            	**type**\:   :py:class:`RcmdIsisLvlEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvlEnum>`
                            
                            .. attribute:: priority_summary
                            
                            	Convergence information summary on per\-priority basis
                            	**type**\: list of    :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary>`
                            
                            .. attribute:: state
                            
                            	SPF state
                            	**type**\:   :py:class:`RcmdSpfStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdSpfStateEnum>`
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: topology
                            
                            	Topology index (multi\-topology)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total_lsp_changes
                            
                            	Total number of LSP changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: type
                            
                            	Type of SPF
                            	**type**\:   :py:class:`RcmdIsisSpfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisSpfEnum>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.duration = None
                                self.is_data_complete = None
                                self.isis_level = None
                                self.priority_summary = YList()
                                self.priority_summary.parent = self
                                self.priority_summary.name = 'priority_summary'
                                self.state = None
                                self.threshold_exceeded = None
                                self.topology = None
                                self.total_lsp_changes = None
                                self.trigger_time = None
                                self.type = None


                            class PrioritySummary(object):
                                """
                                Convergence information summary on per\-priority
                                basis
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.frr_statistic = YList()
                                    self.frr_statistic.parent = self
                                    self.frr_statistic.name = 'frr_statistic'
                                    self.ip_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self.level = None
                                    self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self.route_statistics = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self.threshold_exceeded = None


                                class RouteStatistics(object):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.adds = None
                                        self.deletes = None
                                        self.modifies = None
                                        self.reachables = None
                                        self.touches = None
                                        self.unreachables = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.adds is not None:
                                            return True

                                        if self.deletes is not None:
                                            return True

                                        if self.modifies is not None:
                                            return True

                                        if self.reachables is not None:
                                            return True

                                        if self.touches is not None:
                                            return True

                                        if self.unreachables is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.RouteStatistics']['meta_info']


                                class IpConvergenceTime(object):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.IpConvergenceTime']['meta_info']


                                class MplsConvergenceTime(object):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.MplsConvergenceTime']['meta_info']


                                class FrrStatistic(object):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.coverage = None
                                        self.fully_protected_routes = None
                                        self.partially_protected_routes = None
                                        self.total_routes = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:frr-statistic'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.coverage is not None:
                                            return True

                                        if self.fully_protected_routes is not None:
                                            return True

                                        if self.partially_protected_routes is not None:
                                            return True

                                        if self.total_routes is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary.FrrStatistic']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.frr_statistic is not None:
                                        for child_ref in self.frr_statistic:
                                            if child_ref._has_data():
                                                return True

                                    if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                        return True

                                    if self.route_statistics is not None and self.route_statistics._has_data():
                                        return True

                                    if self.threshold_exceeded is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary.PrioritySummary']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-summary'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.duration is not None:
                                    return True

                                if self.is_data_complete is not None:
                                    return True

                                if self.isis_level is not None:
                                    return True

                                if self.priority_summary is not None:
                                    for child_ref in self.priority_summary:
                                        if child_ref._has_data():
                                            return True

                                if self.state is not None:
                                    return True

                                if self.threshold_exceeded is not None:
                                    return True

                                if self.topology is not None:
                                    return True

                                if self.total_lsp_changes is not None:
                                    return True

                                if self.trigger_time is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.SpfSummary']['meta_info']


                        class NodeStatistics(object):
                            """
                            SPF Node statistics
                            
                            .. attribute:: adds
                            
                            	Added
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: deletes
                            
                            	Deleted
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: modifies
                            
                            	Modified
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachables
                            
                            	Reachable
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: touches
                            
                            	Touched
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unreachables
                            
                            	Unreachable
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.adds = None
                                self.deletes = None
                                self.modifies = None
                                self.reachables = None
                                self.touches = None
                                self.unreachables = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:node-statistics'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.adds is not None:
                                    return True

                                if self.deletes is not None:
                                    return True

                                if self.modifies is not None:
                                    return True

                                if self.reachables is not None:
                                    return True

                                if self.touches is not None:
                                    return True

                                if self.unreachables is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.NodeStatistics']['meta_info']


                        class TriggerLsp(object):
                            """
                            Trigger LSP
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsp_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsp_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.TriggerLsp']['meta_info']


                        class Priority(object):
                            """
                            Convergence information on per\-priority basis
                            
                            .. attribute:: convergence_timeline
                            
                            	Convergence timeline details
                            	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline>`
                            
                            .. attribute:: leaf_networks_added
                            
                            	List of Leaf Networks Added
                            	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksAdded>`
                            
                            .. attribute:: leaf_networks_deleted
                            
                            	List of Leaf Networks Deleted
                            	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksDeleted>`
                            
                            .. attribute:: priority_summary
                            
                            	Summary of the priority
                            	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.convergence_timeline = YList()
                                self.convergence_timeline.parent = self
                                self.convergence_timeline.name = 'convergence_timeline'
                                self.leaf_networks_added = YList()
                                self.leaf_networks_added.parent = self
                                self.leaf_networks_added.name = 'leaf_networks_added'
                                self.leaf_networks_deleted = YList()
                                self.leaf_networks_deleted.parent = self
                                self.leaf_networks_deleted.name = 'leaf_networks_deleted'
                                self.priority_summary = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary()
                                self.priority_summary.parent = self


                            class PrioritySummary(object):
                                """
                                Summary of the priority
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.frr_statistic = YList()
                                    self.frr_statistic.parent = self
                                    self.frr_statistic.name = 'frr_statistic'
                                    self.ip_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self.level = None
                                    self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self.route_statistics = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self.threshold_exceeded = None


                                class RouteStatistics(object):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.adds = None
                                        self.deletes = None
                                        self.modifies = None
                                        self.reachables = None
                                        self.touches = None
                                        self.unreachables = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.adds is not None:
                                            return True

                                        if self.deletes is not None:
                                            return True

                                        if self.modifies is not None:
                                            return True

                                        if self.reachables is not None:
                                            return True

                                        if self.touches is not None:
                                            return True

                                        if self.unreachables is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.RouteStatistics']['meta_info']


                                class IpConvergenceTime(object):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.IpConvergenceTime']['meta_info']


                                class MplsConvergenceTime(object):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.MplsConvergenceTime']['meta_info']


                                class FrrStatistic(object):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.coverage = None
                                        self.fully_protected_routes = None
                                        self.partially_protected_routes = None
                                        self.total_routes = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:frr-statistic'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.coverage is not None:
                                            return True

                                        if self.fully_protected_routes is not None:
                                            return True

                                        if self.partially_protected_routes is not None:
                                            return True

                                        if self.total_routes is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary.FrrStatistic']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.frr_statistic is not None:
                                        for child_ref in self.frr_statistic:
                                            if child_ref._has_data():
                                                return True

                                    if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                        return True

                                    if self.route_statistics is not None and self.route_statistics._has_data():
                                        return True

                                    if self.threshold_exceeded is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.PrioritySummary']['meta_info']


                            class ConvergenceTimeline(object):
                                """
                                Convergence timeline details
                                
                                .. attribute:: lc_ip
                                
                                	List of Linecards' completion point for IP routes
                                	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp>`
                                
                                .. attribute:: lc_mpls
                                
                                	List of Linecards' completion point for MPLS labels
                                	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls>`
                                
                                .. attribute:: ldp_enter
                                
                                	Entry point of LDP
                                	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpEnter>`
                                
                                .. attribute:: ldp_exit
                                
                                	Exit point of LDP to LSD
                                	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpExit>`
                                
                                .. attribute:: lsd_enter
                                
                                	Entry point of LSD
                                	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdEnter>`
                                
                                .. attribute:: lsd_exit
                                
                                	Exit point of LSD to FIBs
                                	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdExit>`
                                
                                .. attribute:: ri_bv4_enter
                                
                                	Entry point of IPv4 RIB
                                	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Enter>`
                                
                                .. attribute:: ri_bv4_exit
                                
                                	Exit point from IPv4 RIB to FIBs
                                	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Exit>`
                                
                                .. attribute:: ri_bv4_redistribute
                                
                                	Route Redistribute point from IPv4 RIB to LDP
                                	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                
                                .. attribute:: route_origin
                                
                                	Route origin (routing protocol)
                                	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RouteOrigin>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.lc_ip = YList()
                                    self.lc_ip.parent = self
                                    self.lc_ip.name = 'lc_ip'
                                    self.lc_mpls = YList()
                                    self.lc_mpls.parent = self
                                    self.lc_mpls.name = 'lc_mpls'
                                    self.ldp_enter = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpEnter()
                                    self.ldp_enter.parent = self
                                    self.ldp_exit = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpExit()
                                    self.ldp_exit.parent = self
                                    self.lsd_enter = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdEnter()
                                    self.lsd_enter.parent = self
                                    self.lsd_exit = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdExit()
                                    self.lsd_exit.parent = self
                                    self.ri_bv4_enter = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Enter()
                                    self.ri_bv4_enter.parent = self
                                    self.ri_bv4_exit = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Exit()
                                    self.ri_bv4_exit.parent = self
                                    self.ri_bv4_redistribute = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                    self.ri_bv4_redistribute.parent = self
                                    self.route_origin = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RouteOrigin()
                                    self.route_origin.parent = self


                                class RouteOrigin(object):
                                    """
                                    Route origin (routing protocol)
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-origin'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RouteOrigin']['meta_info']


                                class RiBv4Enter(object):
                                    """
                                    Entry point of IPv4 RIB
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-enter'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Enter']['meta_info']


                                class RiBv4Exit(object):
                                    """
                                    Exit point from IPv4 RIB to FIBs
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-exit'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Exit']['meta_info']


                                class RiBv4Redistribute(object):
                                    """
                                    Route Redistribute point from IPv4 RIB to LDP
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-redistribute'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.RiBv4Redistribute']['meta_info']


                                class LdpEnter(object):
                                    """
                                    Entry point of LDP
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-enter'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpEnter']['meta_info']


                                class LdpExit(object):
                                    """
                                    Exit point of LDP to LSD
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-exit'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LdpExit']['meta_info']


                                class LsdEnter(object):
                                    """
                                    Entry point of LSD
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-enter'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdEnter']['meta_info']


                                class LsdExit(object):
                                    """
                                    Exit point of LSD to FIBs
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-exit'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LsdExit']['meta_info']


                                class LcIp(object):
                                    """
                                    List of Linecards' completion point for IP
                                    routes
                                    
                                    .. attribute:: fib_complete
                                    
                                    	Completion point of FIB
                                    	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                    
                                    .. attribute:: node_name
                                    
                                    	Linecard node name
                                    	**type**\:  str
                                    
                                    .. attribute:: speed
                                    
                                    	Relative convergence speed
                                    	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fib_complete = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                        self.fib_complete.parent = self
                                        self.node_name = None
                                        self.speed = None


                                    class FibComplete(object):
                                        """
                                        Completion point of FIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp.FibComplete']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fib_complete is not None and self.fib_complete._has_data():
                                            return True

                                        if self.node_name is not None:
                                            return True

                                        if self.speed is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcIp']['meta_info']


                                class LcMpls(object):
                                    """
                                    List of Linecards' completion point for MPLS
                                    labels
                                    
                                    .. attribute:: fib_complete
                                    
                                    	Completion point of FIB
                                    	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                    
                                    .. attribute:: node_name
                                    
                                    	Linecard node name
                                    	**type**\:  str
                                    
                                    .. attribute:: speed
                                    
                                    	Relative convergence speed
                                    	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fib_complete = Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                        self.fib_complete.parent = self
                                        self.node_name = None
                                        self.speed = None


                                    class FibComplete(object):
                                        """
                                        Completion point of FIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls.FibComplete']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fib_complete is not None and self.fib_complete._has_data():
                                            return True

                                        if self.node_name is not None:
                                            return True

                                        if self.speed is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline.LcMpls']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:convergence-timeline'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.lc_ip is not None:
                                        for child_ref in self.lc_ip:
                                            if child_ref._has_data():
                                                return True

                                    if self.lc_mpls is not None:
                                        for child_ref in self.lc_mpls:
                                            if child_ref._has_data():
                                                return True

                                    if self.ldp_enter is not None and self.ldp_enter._has_data():
                                        return True

                                    if self.ldp_exit is not None and self.ldp_exit._has_data():
                                        return True

                                    if self.lsd_enter is not None and self.lsd_enter._has_data():
                                        return True

                                    if self.lsd_exit is not None and self.lsd_exit._has_data():
                                        return True

                                    if self.ri_bv4_enter is not None and self.ri_bv4_enter._has_data():
                                        return True

                                    if self.ri_bv4_exit is not None and self.ri_bv4_exit._has_data():
                                        return True

                                    if self.ri_bv4_redistribute is not None and self.ri_bv4_redistribute._has_data():
                                        return True

                                    if self.route_origin is not None and self.route_origin._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.ConvergenceTimeline']['meta_info']


                            class LeafNetworksAdded(object):
                                """
                                List of Leaf Networks Added
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: net_mask
                                
                                	Mask
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.net_mask = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-added'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.net_mask is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksAdded']['meta_info']


                            class LeafNetworksDeleted(object):
                                """
                                List of Leaf Networks Deleted
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: net_mask
                                
                                	Mask
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.net_mask = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-deleted'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.net_mask is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority.LeafNetworksDeleted']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.convergence_timeline is not None:
                                    for child_ref in self.convergence_timeline:
                                        if child_ref._has_data():
                                            return True

                                if self.leaf_networks_added is not None:
                                    for child_ref in self.leaf_networks_added:
                                        if child_ref._has_data():
                                            return True

                                if self.leaf_networks_deleted is not None:
                                    for child_ref in self.leaf_networks_deleted:
                                        if child_ref._has_data():
                                            return True

                                if self.priority_summary is not None and self.priority_summary._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.Priority']['meta_info']


                        class LspProcessed(object):
                            """
                            List of LSP changes processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsp_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsp-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsp_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspProcessed']['meta_info']


                        class LspRegenerated(object):
                            """
                            List of LSP regenerated
                            
                            .. attribute:: isis_level
                            
                            	ISIS Level
                            	**type**\:   :py:class:`RcmdIsisLvlEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvlEnum>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reason
                            
                            	Trigger reasons for LSP regeneration. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: serial_number_xr
                            
                            	Serial Number of the session event
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: spf_run_number
                            
                            	SPF Run Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.isis_level = None
                                self.lsp_id = None
                                self.reason = None
                                self.reception_time = None
                                self.sequence_number = None
                                self.serial_number_xr = None
                                self.spf_run_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsp-regenerated'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.isis_level is not None:
                                    return True

                                if self.lsp_id is not None:
                                    return True

                                if self.reason is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                if self.serial_number_xr is not None:
                                    return True

                                if self.spf_run_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary.LspRegenerated']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.spf_run_number is None:
                                raise YPYModelError('Key property spf_run_number is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-run-summary[Cisco-IOS-XR-infra-rcmd-oper:spf-run-number = ' + str(self.spf_run_number) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.spf_run_number is not None:
                                return True

                            if self.lsp_processed is not None:
                                for child_ref in self.lsp_processed:
                                    if child_ref._has_data():
                                        return True

                            if self.lsp_regenerated is not None:
                                for child_ref in self.lsp_regenerated:
                                    if child_ref._has_data():
                                        return True

                            if self.node_statistics is not None and self.node_statistics._has_data():
                                return True

                            if self.priority is not None:
                                for child_ref in self.priority:
                                    if child_ref._has_data():
                                        return True

                            if self.reason is not None:
                                return True

                            if self.spf_summary is not None and self.spf_summary._has_data():
                                return True

                            if self.start_time is not None:
                                return True

                            if self.trigger_lsp is not None:
                                for child_ref in self.trigger_lsp:
                                    if child_ref._has_data():
                                        return True

                            if self.wait_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries.SpfRunSummary']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-run-summaries'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.spf_run_summary is not None:
                            for child_ref in self.spf_run_summary:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunSummaries']['meta_info']


                class IpfrrEventOfflines(object):
                    """
                    ISIS IP\-FRR Event offline data
                    
                    .. attribute:: ipfrr_event_offline
                    
                    	Offline operational data for particular ISIS IP\-FRR Event
                    	**type**\: list of    :py:class:`IpfrrEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipfrr_event_offline = YList()
                        self.ipfrr_event_offline.parent = self
                        self.ipfrr_event_offline.name = 'ipfrr_event_offline'


                    class IpfrrEventOffline(object):
                        """
                        Offline operational data for particular ISIS
                        IP\-FRR Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific IP\-FRR Event
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: completed_spf_run
                        
                        	IP\-Frr Completed reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: coverage
                        
                        	Coverage in percentage for all priorities
                        	**type**\:  str
                        
                        	**units**\: percentage
                        
                        .. attribute:: duration
                        
                        	Duration for the calculation (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: event_id_xr
                        
                        	IP\-Frr Event ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fully_protected_routes
                        
                        	Cumulative Number of Fully Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ipfrr_statistic
                        
                        	IP\-Frr Statistics categorized by priority
                        	**type**\: list of    :py:class:`IpfrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic>`
                        
                        .. attribute:: partially_protected_routes
                        
                        	Cumulative Number of Partially Protected Routes
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: remote_node
                        
                        	Remote Node Information
                        	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode>`
                        
                        .. attribute:: start_time_offset
                        
                        	Start Time offset from trigger time (in milliseconds)
                        	**type**\:  str
                        
                        	**units**\: millisecond
                        
                        .. attribute:: total_routes
                        
                        	Cumulative Number of Routes for all priorities
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_spf_run
                        
                        	IP\-Frr Triggered reference SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: trigger_time
                        
                        	Trigger time  (eg\: Apr 24 13\:16\:04.961)
                        	**type**\:  str
                        
                        .. attribute:: wait_time
                        
                        	Waiting Time (in milliseconds)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.completed_spf_run = None
                            self.coverage = None
                            self.duration = None
                            self.event_id_xr = None
                            self.fully_protected_routes = None
                            self.ipfrr_statistic = YList()
                            self.ipfrr_statistic.parent = self
                            self.ipfrr_statistic.name = 'ipfrr_statistic'
                            self.partially_protected_routes = None
                            self.remote_node = YList()
                            self.remote_node.parent = self
                            self.remote_node.name = 'remote_node'
                            self.start_time_offset = None
                            self.total_routes = None
                            self.trigger_spf_run = None
                            self.trigger_time = None
                            self.wait_time = None


                        class IpfrrStatistic(object):
                            """
                            IP\-Frr Statistics categorized by priority
                            
                            .. attribute:: below_threshold
                            
                            	Covearge is below Configured Threshold
                            	**type**\:  bool
                            
                            .. attribute:: coverage
                            
                            	Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: fully_protected_routes
                            
                            	Fully Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_lfa_coverage
                            
                            	Local LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: partially_protected_routes
                            
                            	Partially Protected Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: priority
                            
                            	Priority
                            	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                            
                            .. attribute:: remote_lfa_coverage
                            
                            	Remote LFA Coverage in percentage
                            	**type**\:  str
                            
                            	**units**\: percentage
                            
                            .. attribute:: total_routes
                            
                            	Total Number of Routes
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.below_threshold = None
                                self.coverage = None
                                self.fully_protected_routes = None
                                self.local_lfa_coverage = None
                                self.partially_protected_routes = None
                                self.priority = None
                                self.remote_lfa_coverage = None
                                self.total_routes = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-statistic'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.below_threshold is not None:
                                    return True

                                if self.coverage is not None:
                                    return True

                                if self.fully_protected_routes is not None:
                                    return True

                                if self.local_lfa_coverage is not None:
                                    return True

                                if self.partially_protected_routes is not None:
                                    return True

                                if self.priority is not None:
                                    return True

                                if self.remote_lfa_coverage is not None:
                                    return True

                                if self.total_routes is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.IpfrrStatistic']['meta_info']


                        class RemoteNode(object):
                            """
                            Remote Node Information
                            
                            .. attribute:: in_use_time
                            
                            	Inuse time of the Remote Node (eg\: Apr 24 13\:16 \:04.961)
                            	**type**\:  str
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_count
                            
                            	Number of paths protected by this Remote Node
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: primary_path
                            
                            	Protected Primary Paths
                            	**type**\: list of    :py:class:`PrimaryPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath>`
                            
                            .. attribute:: remote_node_id
                            
                            	Remote\-LFA Node ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.in_use_time = None
                                self.interface_name = None
                                self.neighbour_address = None
                                self.path_count = None
                                self.primary_path = YList()
                                self.primary_path.parent = self
                                self.primary_path.name = 'primary_path'
                                self.remote_node_id = None


                            class PrimaryPath(object):
                                """
                                Protected Primary Paths
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None
                                    self.neighbour_address = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:primary-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode.PrimaryPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:remote-node'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.in_use_time is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_count is not None:
                                    return True

                                if self.primary_path is not None:
                                    for child_ref in self.primary_path:
                                        if child_ref._has_data():
                                            return True

                                if self.remote_node_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline.RemoteNode']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-event-offline[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.completed_spf_run is not None:
                                return True

                            if self.coverage is not None:
                                return True

                            if self.duration is not None:
                                return True

                            if self.event_id_xr is not None:
                                return True

                            if self.fully_protected_routes is not None:
                                return True

                            if self.ipfrr_statistic is not None:
                                for child_ref in self.ipfrr_statistic:
                                    if child_ref._has_data():
                                        return True

                            if self.partially_protected_routes is not None:
                                return True

                            if self.remote_node is not None:
                                for child_ref in self.remote_node:
                                    if child_ref._has_data():
                                        return True

                            if self.start_time_offset is not None:
                                return True

                            if self.total_routes is not None:
                                return True

                            if self.trigger_spf_run is not None:
                                return True

                            if self.trigger_time is not None:
                                return True

                            if self.wait_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventOfflines.IpfrrEventOffline']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ipfrr-event-offlines'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipfrr_event_offline is not None:
                            for child_ref in self.ipfrr_event_offline:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Isis.Instances.Instance.IpfrrEventOfflines']['meta_info']


                class SpfRunOfflines(object):
                    """
                    ISIS SPF run offline data
                    
                    .. attribute:: spf_run_offline
                    
                    	Offline operational data for particular ISIS SPF run
                    	**type**\: list of    :py:class:`SpfRunOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.spf_run_offline = YList()
                        self.spf_run_offline.parent = self
                        self.spf_run_offline.name = 'spf_run_offline'


                    class SpfRunOffline(object):
                        """
                        Offline operational data for particular ISIS
                        SPF run
                        
                        .. attribute:: spf_run_number  <key>
                        
                        	Specific SPF run
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: lsp_processed
                        
                        	List of LSP changes processed
                        	**type**\: list of    :py:class:`LspProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspProcessed>`
                        
                        .. attribute:: lsp_regenerated
                        
                        	List of LSP regenerated
                        	**type**\: list of    :py:class:`LspRegenerated <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspRegenerated>`
                        
                        .. attribute:: node_statistics
                        
                        	SPF Node statistics
                        	**type**\:   :py:class:`NodeStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.NodeStatistics>`
                        
                        .. attribute:: priority
                        
                        	Convergence information on per\-priority basis
                        	**type**\: list of    :py:class:`Priority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority>`
                        
                        .. attribute:: reason
                        
                        	Trigger reasons for SPF run. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                        	**type**\:  str
                        
                        .. attribute:: spf_summary
                        
                        	SPF summary information
                        	**type**\:   :py:class:`SpfSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary>`
                        
                        .. attribute:: start_time
                        
                        	Start time (offset from event trigger time in ss .msec)
                        	**type**\:  str
                        
                        .. attribute:: trigger_lsp
                        
                        	Trigger LSP
                        	**type**\: list of    :py:class:`TriggerLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.TriggerLsp>`
                        
                        .. attribute:: wait_time
                        
                        	Wait time applied at SPF schedule (in msec)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.spf_run_number = None
                            self.lsp_processed = YList()
                            self.lsp_processed.parent = self
                            self.lsp_processed.name = 'lsp_processed'
                            self.lsp_regenerated = YList()
                            self.lsp_regenerated.parent = self
                            self.lsp_regenerated.name = 'lsp_regenerated'
                            self.node_statistics = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.NodeStatistics()
                            self.node_statistics.parent = self
                            self.priority = YList()
                            self.priority.parent = self
                            self.priority.name = 'priority'
                            self.reason = None
                            self.spf_summary = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary()
                            self.spf_summary.parent = self
                            self.start_time = None
                            self.trigger_lsp = YList()
                            self.trigger_lsp.parent = self
                            self.trigger_lsp.name = 'trigger_lsp'
                            self.wait_time = None


                        class SpfSummary(object):
                            """
                            SPF summary information
                            
                            .. attribute:: duration
                            
                            	Duration of SPF calculation (in ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: is_data_complete
                            
                            	Whether the event has all information
                            	**type**\:  bool
                            
                            .. attribute:: isis_level
                            
                            	ISIS Level
                            	**type**\:   :py:class:`RcmdIsisLvlEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvlEnum>`
                            
                            .. attribute:: priority_summary
                            
                            	Convergence information summary on per\-priority basis
                            	**type**\: list of    :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary>`
                            
                            .. attribute:: state
                            
                            	SPF state
                            	**type**\:   :py:class:`RcmdSpfStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdSpfStateEnum>`
                            
                            .. attribute:: threshold_exceeded
                            
                            	Threshold exceeded
                            	**type**\:  bool
                            
                            .. attribute:: topology
                            
                            	Topology index (multi\-topology)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total_lsp_changes
                            
                            	Total number of LSP changes processed
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: trigger_time
                            
                            	Trigger time (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: type
                            
                            	Type of SPF
                            	**type**\:   :py:class:`RcmdIsisSpfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisSpfEnum>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.duration = None
                                self.is_data_complete = None
                                self.isis_level = None
                                self.priority_summary = YList()
                                self.priority_summary.parent = self
                                self.priority_summary.name = 'priority_summary'
                                self.state = None
                                self.threshold_exceeded = None
                                self.topology = None
                                self.total_lsp_changes = None
                                self.trigger_time = None
                                self.type = None


                            class PrioritySummary(object):
                                """
                                Convergence information summary on per\-priority
                                basis
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.frr_statistic = YList()
                                    self.frr_statistic.parent = self
                                    self.frr_statistic.name = 'frr_statistic'
                                    self.ip_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self.level = None
                                    self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self.route_statistics = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self.threshold_exceeded = None


                                class RouteStatistics(object):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.adds = None
                                        self.deletes = None
                                        self.modifies = None
                                        self.reachables = None
                                        self.touches = None
                                        self.unreachables = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.adds is not None:
                                            return True

                                        if self.deletes is not None:
                                            return True

                                        if self.modifies is not None:
                                            return True

                                        if self.reachables is not None:
                                            return True

                                        if self.touches is not None:
                                            return True

                                        if self.unreachables is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.RouteStatistics']['meta_info']


                                class IpConvergenceTime(object):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.IpConvergenceTime']['meta_info']


                                class MplsConvergenceTime(object):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.MplsConvergenceTime']['meta_info']


                                class FrrStatistic(object):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.coverage = None
                                        self.fully_protected_routes = None
                                        self.partially_protected_routes = None
                                        self.total_routes = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:frr-statistic'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.coverage is not None:
                                            return True

                                        if self.fully_protected_routes is not None:
                                            return True

                                        if self.partially_protected_routes is not None:
                                            return True

                                        if self.total_routes is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary.FrrStatistic']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.frr_statistic is not None:
                                        for child_ref in self.frr_statistic:
                                            if child_ref._has_data():
                                                return True

                                    if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                        return True

                                    if self.route_statistics is not None and self.route_statistics._has_data():
                                        return True

                                    if self.threshold_exceeded is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary.PrioritySummary']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-summary'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.duration is not None:
                                    return True

                                if self.is_data_complete is not None:
                                    return True

                                if self.isis_level is not None:
                                    return True

                                if self.priority_summary is not None:
                                    for child_ref in self.priority_summary:
                                        if child_ref._has_data():
                                            return True

                                if self.state is not None:
                                    return True

                                if self.threshold_exceeded is not None:
                                    return True

                                if self.topology is not None:
                                    return True

                                if self.total_lsp_changes is not None:
                                    return True

                                if self.trigger_time is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.SpfSummary']['meta_info']


                        class NodeStatistics(object):
                            """
                            SPF Node statistics
                            
                            .. attribute:: adds
                            
                            	Added
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: deletes
                            
                            	Deleted
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: modifies
                            
                            	Modified
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachables
                            
                            	Reachable
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: touches
                            
                            	Touched
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unreachables
                            
                            	Unreachable
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.adds = None
                                self.deletes = None
                                self.modifies = None
                                self.reachables = None
                                self.touches = None
                                self.unreachables = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:node-statistics'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.adds is not None:
                                    return True

                                if self.deletes is not None:
                                    return True

                                if self.modifies is not None:
                                    return True

                                if self.reachables is not None:
                                    return True

                                if self.touches is not None:
                                    return True

                                if self.unreachables is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.NodeStatistics']['meta_info']


                        class TriggerLsp(object):
                            """
                            Trigger LSP
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsp_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsp'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsp_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.TriggerLsp']['meta_info']


                        class Priority(object):
                            """
                            Convergence information on per\-priority basis
                            
                            .. attribute:: convergence_timeline
                            
                            	Convergence timeline details
                            	**type**\: list of    :py:class:`ConvergenceTimeline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline>`
                            
                            .. attribute:: leaf_networks_added
                            
                            	List of Leaf Networks Added
                            	**type**\: list of    :py:class:`LeafNetworksAdded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksAdded>`
                            
                            .. attribute:: leaf_networks_deleted
                            
                            	List of Leaf Networks Deleted
                            	**type**\: list of    :py:class:`LeafNetworksDeleted <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksDeleted>`
                            
                            .. attribute:: priority_summary
                            
                            	Summary of the priority
                            	**type**\:   :py:class:`PrioritySummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary>`
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.convergence_timeline = YList()
                                self.convergence_timeline.parent = self
                                self.convergence_timeline.name = 'convergence_timeline'
                                self.leaf_networks_added = YList()
                                self.leaf_networks_added.parent = self
                                self.leaf_networks_added.name = 'leaf_networks_added'
                                self.leaf_networks_deleted = YList()
                                self.leaf_networks_deleted.parent = self
                                self.leaf_networks_deleted.name = 'leaf_networks_deleted'
                                self.priority_summary = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary()
                                self.priority_summary.parent = self


                            class PrioritySummary(object):
                                """
                                Summary of the priority
                                
                                .. attribute:: frr_statistic
                                
                                	Fast Re\-Route Statistics
                                	**type**\: list of    :py:class:`FrrStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.FrrStatistic>`
                                
                                .. attribute:: ip_convergence_time
                                
                                	Convergence time for IP route programming
                                	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.IpConvergenceTime>`
                                
                                .. attribute:: level
                                
                                	Critical, High, Medium or Low
                                	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                                
                                .. attribute:: mpls_convergence_time
                                
                                	Convergence time for MPLS label programming
                                	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.MplsConvergenceTime>`
                                
                                .. attribute:: route_statistics
                                
                                	Route statistics
                                	**type**\:   :py:class:`RouteStatistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.RouteStatistics>`
                                
                                .. attribute:: threshold_exceeded
                                
                                	Threshold exceeded
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.frr_statistic = YList()
                                    self.frr_statistic.parent = self
                                    self.frr_statistic.name = 'frr_statistic'
                                    self.ip_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.IpConvergenceTime()
                                    self.ip_convergence_time.parent = self
                                    self.level = None
                                    self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.MplsConvergenceTime()
                                    self.mpls_convergence_time.parent = self
                                    self.route_statistics = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.RouteStatistics()
                                    self.route_statistics.parent = self
                                    self.threshold_exceeded = None


                                class RouteStatistics(object):
                                    """
                                    Route statistics
                                    
                                    .. attribute:: adds
                                    
                                    	Added
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: deletes
                                    
                                    	Deleted
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: modifies
                                    
                                    	Modified
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: reachables
                                    
                                    	Reachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: touches
                                    
                                    	Touched
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: unreachables
                                    
                                    	Unreachable
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.adds = None
                                        self.deletes = None
                                        self.modifies = None
                                        self.reachables = None
                                        self.touches = None
                                        self.unreachables = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-statistics'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.adds is not None:
                                            return True

                                        if self.deletes is not None:
                                            return True

                                        if self.modifies is not None:
                                            return True

                                        if self.reachables is not None:
                                            return True

                                        if self.touches is not None:
                                            return True

                                        if self.unreachables is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.RouteStatistics']['meta_info']


                                class IpConvergenceTime(object):
                                    """
                                    Convergence time for IP route programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.IpConvergenceTime']['meta_info']


                                class MplsConvergenceTime(object):
                                    """
                                    Convergence time for MPLS label programming
                                    
                                    .. attribute:: fastest_node_name
                                    
                                    	Linecard node name which took the minimum time
                                    	**type**\:  str
                                    
                                    .. attribute:: maximum_time
                                    
                                    	Maximum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: minimum_time
                                    
                                    	Minimum time(in seconds.milliseconds)
                                    	**type**\:  str
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: slowest_node_name
                                    
                                    	Linecard node name which took the maximum time
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fastest_node_name = None
                                        self.maximum_time = None
                                        self.minimum_time = None
                                        self.slowest_node_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fastest_node_name is not None:
                                            return True

                                        if self.maximum_time is not None:
                                            return True

                                        if self.minimum_time is not None:
                                            return True

                                        if self.slowest_node_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.MplsConvergenceTime']['meta_info']


                                class FrrStatistic(object):
                                    """
                                    Fast Re\-Route Statistics
                                    
                                    .. attribute:: coverage
                                    
                                    	Coverage in percentage
                                    	**type**\:  str
                                    
                                    	**units**\: percentage
                                    
                                    .. attribute:: fully_protected_routes
                                    
                                    	Fully Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: partially_protected_routes
                                    
                                    	Partially Protected Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: total_routes
                                    
                                    	Total Number of Routes
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.coverage = None
                                        self.fully_protected_routes = None
                                        self.partially_protected_routes = None
                                        self.total_routes = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:frr-statistic'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.coverage is not None:
                                            return True

                                        if self.fully_protected_routes is not None:
                                            return True

                                        if self.partially_protected_routes is not None:
                                            return True

                                        if self.total_routes is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary.FrrStatistic']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority-summary'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.frr_statistic is not None:
                                        for child_ref in self.frr_statistic:
                                            if child_ref._has_data():
                                                return True

                                    if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                        return True

                                    if self.level is not None:
                                        return True

                                    if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                        return True

                                    if self.route_statistics is not None and self.route_statistics._has_data():
                                        return True

                                    if self.threshold_exceeded is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.PrioritySummary']['meta_info']


                            class ConvergenceTimeline(object):
                                """
                                Convergence timeline details
                                
                                .. attribute:: lc_ip
                                
                                	List of Linecards' completion point for IP routes
                                	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp>`
                                
                                .. attribute:: lc_mpls
                                
                                	List of Linecards' completion point for MPLS labels
                                	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls>`
                                
                                .. attribute:: ldp_enter
                                
                                	Entry point of LDP
                                	**type**\:   :py:class:`LdpEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpEnter>`
                                
                                .. attribute:: ldp_exit
                                
                                	Exit point of LDP to LSD
                                	**type**\:   :py:class:`LdpExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpExit>`
                                
                                .. attribute:: lsd_enter
                                
                                	Entry point of LSD
                                	**type**\:   :py:class:`LsdEnter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdEnter>`
                                
                                .. attribute:: lsd_exit
                                
                                	Exit point of LSD to FIBs
                                	**type**\:   :py:class:`LsdExit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdExit>`
                                
                                .. attribute:: ri_bv4_enter
                                
                                	Entry point of IPv4 RIB
                                	**type**\:   :py:class:`RiBv4Enter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Enter>`
                                
                                .. attribute:: ri_bv4_exit
                                
                                	Exit point from IPv4 RIB to FIBs
                                	**type**\:   :py:class:`RiBv4Exit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Exit>`
                                
                                .. attribute:: ri_bv4_redistribute
                                
                                	Route Redistribute point from IPv4 RIB to LDP
                                	**type**\:   :py:class:`RiBv4Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Redistribute>`
                                
                                .. attribute:: route_origin
                                
                                	Route origin (routing protocol)
                                	**type**\:   :py:class:`RouteOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RouteOrigin>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.lc_ip = YList()
                                    self.lc_ip.parent = self
                                    self.lc_ip.name = 'lc_ip'
                                    self.lc_mpls = YList()
                                    self.lc_mpls.parent = self
                                    self.lc_mpls.name = 'lc_mpls'
                                    self.ldp_enter = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpEnter()
                                    self.ldp_enter.parent = self
                                    self.ldp_exit = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpExit()
                                    self.ldp_exit.parent = self
                                    self.lsd_enter = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdEnter()
                                    self.lsd_enter.parent = self
                                    self.lsd_exit = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdExit()
                                    self.lsd_exit.parent = self
                                    self.ri_bv4_enter = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Enter()
                                    self.ri_bv4_enter.parent = self
                                    self.ri_bv4_exit = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Exit()
                                    self.ri_bv4_exit.parent = self
                                    self.ri_bv4_redistribute = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Redistribute()
                                    self.ri_bv4_redistribute.parent = self
                                    self.route_origin = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RouteOrigin()
                                    self.route_origin.parent = self


                                class RouteOrigin(object):
                                    """
                                    Route origin (routing protocol)
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:route-origin'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RouteOrigin']['meta_info']


                                class RiBv4Enter(object):
                                    """
                                    Entry point of IPv4 RIB
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-enter'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Enter']['meta_info']


                                class RiBv4Exit(object):
                                    """
                                    Exit point from IPv4 RIB to FIBs
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-exit'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Exit']['meta_info']


                                class RiBv4Redistribute(object):
                                    """
                                    Route Redistribute point from IPv4 RIB to LDP
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ri-bv4-redistribute'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.RiBv4Redistribute']['meta_info']


                                class LdpEnter(object):
                                    """
                                    Entry point of LDP
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-enter'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpEnter']['meta_info']


                                class LdpExit(object):
                                    """
                                    Exit point of LDP to LSD
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ldp-exit'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LdpExit']['meta_info']


                                class LsdEnter(object):
                                    """
                                    Entry point of LSD
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-enter'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdEnter']['meta_info']


                                class LsdExit(object):
                                    """
                                    Exit point of LSD to FIBs
                                    
                                    .. attribute:: duration
                                    
                                    	Duration of processing (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: end_time
                                    
                                    	Last route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    .. attribute:: start_time
                                    
                                    	First route process time relative to event trigger time (in ss.msec)
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.duration = None
                                        self.end_time = None
                                        self.start_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsd-exit'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.duration is not None:
                                            return True

                                        if self.end_time is not None:
                                            return True

                                        if self.start_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LsdExit']['meta_info']


                                class LcIp(object):
                                    """
                                    List of Linecards' completion point for IP
                                    routes
                                    
                                    .. attribute:: fib_complete
                                    
                                    	Completion point of FIB
                                    	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp.FibComplete>`
                                    
                                    .. attribute:: node_name
                                    
                                    	Linecard node name
                                    	**type**\:  str
                                    
                                    .. attribute:: speed
                                    
                                    	Relative convergence speed
                                    	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fib_complete = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp.FibComplete()
                                        self.fib_complete.parent = self
                                        self.node_name = None
                                        self.speed = None


                                    class FibComplete(object):
                                        """
                                        Completion point of FIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp.FibComplete']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fib_complete is not None and self.fib_complete._has_data():
                                            return True

                                        if self.node_name is not None:
                                            return True

                                        if self.speed is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcIp']['meta_info']


                                class LcMpls(object):
                                    """
                                    List of Linecards' completion point for MPLS
                                    labels
                                    
                                    .. attribute:: fib_complete
                                    
                                    	Completion point of FIB
                                    	**type**\:   :py:class:`FibComplete <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls.FibComplete>`
                                    
                                    .. attribute:: node_name
                                    
                                    	Linecard node name
                                    	**type**\:  str
                                    
                                    .. attribute:: speed
                                    
                                    	Relative convergence speed
                                    	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                    
                                    

                                    """

                                    _prefix = 'infra-rcmd-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        self.parent = None
                                        self.fib_complete = Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls.FibComplete()
                                        self.fib_complete.parent = self
                                        self.node_name = None
                                        self.speed = None


                                    class FibComplete(object):
                                        """
                                        Completion point of FIB
                                        
                                        .. attribute:: duration
                                        
                                        	Duration of processing (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: end_time
                                        
                                        	Last route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        .. attribute:: start_time
                                        
                                        	First route process time relative to event trigger time (in ss.msec)
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'infra-rcmd-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            self.parent = None
                                            self.duration = None
                                            self.end_time = None
                                            self.start_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:fib-complete'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return False

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.duration is not None:
                                                return True

                                            if self.end_time is not None:
                                                return True

                                            if self.start_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                            return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls.FibComplete']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return False

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.fib_complete is not None and self.fib_complete._has_data():
                                            return True

                                        if self.node_name is not None:
                                            return True

                                        if self.speed is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline.LcMpls']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:convergence-timeline'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.lc_ip is not None:
                                        for child_ref in self.lc_ip:
                                            if child_ref._has_data():
                                                return True

                                    if self.lc_mpls is not None:
                                        for child_ref in self.lc_mpls:
                                            if child_ref._has_data():
                                                return True

                                    if self.ldp_enter is not None and self.ldp_enter._has_data():
                                        return True

                                    if self.ldp_exit is not None and self.ldp_exit._has_data():
                                        return True

                                    if self.lsd_enter is not None and self.lsd_enter._has_data():
                                        return True

                                    if self.lsd_exit is not None and self.lsd_exit._has_data():
                                        return True

                                    if self.ri_bv4_enter is not None and self.ri_bv4_enter._has_data():
                                        return True

                                    if self.ri_bv4_exit is not None and self.ri_bv4_exit._has_data():
                                        return True

                                    if self.ri_bv4_redistribute is not None and self.ri_bv4_redistribute._has_data():
                                        return True

                                    if self.route_origin is not None and self.route_origin._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.ConvergenceTimeline']['meta_info']


                            class LeafNetworksAdded(object):
                                """
                                List of Leaf Networks Added
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: net_mask
                                
                                	Mask
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.net_mask = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-added'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.net_mask is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksAdded']['meta_info']


                            class LeafNetworksDeleted(object):
                                """
                                List of Leaf Networks Deleted
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: net_mask
                                
                                	Mask
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.net_mask = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:leaf-networks-deleted'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.net_mask is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority.LeafNetworksDeleted']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:priority'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.convergence_timeline is not None:
                                    for child_ref in self.convergence_timeline:
                                        if child_ref._has_data():
                                            return True

                                if self.leaf_networks_added is not None:
                                    for child_ref in self.leaf_networks_added:
                                        if child_ref._has_data():
                                            return True

                                if self.leaf_networks_deleted is not None:
                                    for child_ref in self.leaf_networks_deleted:
                                        if child_ref._has_data():
                                            return True

                                if self.priority_summary is not None and self.priority_summary._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.Priority']['meta_info']


                        class LspProcessed(object):
                            """
                            List of LSP changes processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsp_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsp-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsp_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspProcessed']['meta_info']


                        class LspRegenerated(object):
                            """
                            List of LSP regenerated
                            
                            .. attribute:: isis_level
                            
                            	ISIS Level
                            	**type**\:   :py:class:`RcmdIsisLvlEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvlEnum>`
                            
                            .. attribute:: lsp_id
                            
                            	LSP ID
                            	**type**\:  str
                            
                            .. attribute:: reason
                            
                            	Trigger reasons for LSP regeneration. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                            	**type**\:  str
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: serial_number_xr
                            
                            	Serial Number of the session event
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: spf_run_number
                            
                            	SPF Run Number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.isis_level = None
                                self.lsp_id = None
                                self.reason = None
                                self.reception_time = None
                                self.sequence_number = None
                                self.serial_number_xr = None
                                self.spf_run_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsp-regenerated'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.isis_level is not None:
                                    return True

                                if self.lsp_id is not None:
                                    return True

                                if self.reason is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                if self.serial_number_xr is not None:
                                    return True

                                if self.spf_run_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline.LspRegenerated']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.spf_run_number is None:
                                raise YPYModelError('Key property spf_run_number is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-run-offline[Cisco-IOS-XR-infra-rcmd-oper:spf-run-number = ' + str(self.spf_run_number) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.spf_run_number is not None:
                                return True

                            if self.lsp_processed is not None:
                                for child_ref in self.lsp_processed:
                                    if child_ref._has_data():
                                        return True

                            if self.lsp_regenerated is not None:
                                for child_ref in self.lsp_regenerated:
                                    if child_ref._has_data():
                                        return True

                            if self.node_statistics is not None and self.node_statistics._has_data():
                                return True

                            if self.priority is not None:
                                for child_ref in self.priority:
                                    if child_ref._has_data():
                                        return True

                            if self.reason is not None:
                                return True

                            if self.spf_summary is not None and self.spf_summary._has_data():
                                return True

                            if self.start_time is not None:
                                return True

                            if self.trigger_lsp is not None:
                                for child_ref in self.trigger_lsp:
                                    if child_ref._has_data():
                                        return True

                            if self.wait_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines.SpfRunOffline']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:spf-run-offlines'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.spf_run_offline is not None:
                            for child_ref in self.spf_run_offline:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Isis.Instances.Instance.SpfRunOfflines']['meta_info']


                class PrefixEventSummaries(object):
                    """
                    ISIS Prefix events summary data
                    
                    .. attribute:: prefix_event_summary
                    
                    	Prefix Event data
                    	**type**\: list of    :py:class:`PrefixEventSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.prefix_event_summary = YList()
                        self.prefix_event_summary.parent = self
                        self.prefix_event_summary.name = 'prefix_event_summary'


                    class PrefixEventSummary(object):
                        """
                        Prefix Event data
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChangeEnum>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRouteEnum>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.change_type = None
                            self.cost = None
                            self.ip_convergence_time = Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self.ipfrr_event_id = None
                            self.lsa_processed = YList()
                            self.lsa_processed.parent = self
                            self.lsa_processed.name = 'lsa_processed'
                            self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self.path = YList()
                            self.path.parent = self
                            self.path.name = 'path'
                            self.prefix = None
                            self.prefix_lenth = None
                            self.priority = None
                            self.route_path_change_type = None
                            self.route_type = None
                            self.spf_run_no = None
                            self.threshold_exceeded = None
                            self.time_line = YList()
                            self.time_line.parent = self
                            self.time_line.name = 'time_line'
                            self.trigger_lsa = YList()
                            self.trigger_lsa.parent = self
                            self.trigger_lsa.name = 'trigger_lsa'
                            self.trigger_time = None


                        class IpConvergenceTime(object):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.IpConvergenceTime']['meta_info']


                        class MplsConvergenceTime(object):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.MplsConvergenceTime']['meta_info']


                        class Path(object):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.interface_name = None
                                self.lfa_path = YList()
                                self.lfa_path.parent = self
                                self.lfa_path.name = 'lfa_path'
                                self.neighbour_address = None
                                self.path_metric = None


                            class LfaPath(object):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfaEnum>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.interface_name = None
                                    self.lfa_type = None
                                    self.neighbour_address = None
                                    self.path_metric = None
                                    self.remote_node_id = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lfa-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.interface_name is not None:
                                        return True

                                    if self.lfa_type is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    if self.path_metric is not None:
                                        return True

                                    if self.remote_node_id is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path.LfaPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:path'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.lfa_path is not None:
                                    for child_ref in self.lfa_path:
                                        if child_ref._has_data():
                                            return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.Path']['meta_info']


                        class TriggerLsa(object):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsa'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TriggerLsa']['meta_info']


                        class TimeLine(object):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.lc_ip = YList()
                                self.lc_ip.parent = self
                                self.lc_ip.name = 'lc_ip'
                                self.lc_mpls = YList()
                                self.lc_mpls.parent = self
                                self.lc_mpls.name = 'lc_mpls'
                                self.ldp_enter = None
                                self.ldp_exit = None
                                self.lsd_enter = None
                                self.lsd_exit = None
                                self.ri_bv4_enter = None
                                self.ri_bv4_exit = None
                                self.ri_bv4_redistribute = None
                                self.route_origin = None


                            class LcIp(object):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcIp']['meta_info']


                            class LcMpls(object):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine.LcMpls']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:time-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.lc_ip is not None:
                                    for child_ref in self.lc_ip:
                                        if child_ref._has_data():
                                            return True

                                if self.lc_mpls is not None:
                                    for child_ref in self.lc_mpls:
                                        if child_ref._has_data():
                                            return True

                                if self.ldp_enter is not None:
                                    return True

                                if self.ldp_exit is not None:
                                    return True

                                if self.lsd_enter is not None:
                                    return True

                                if self.lsd_exit is not None:
                                    return True

                                if self.ri_bv4_enter is not None:
                                    return True

                                if self.ri_bv4_exit is not None:
                                    return True

                                if self.ri_bv4_redistribute is not None:
                                    return True

                                if self.route_origin is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.TimeLine']['meta_info']


                        class LsaProcessed(object):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsa-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary.LsaProcessed']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-summary[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.change_type is not None:
                                return True

                            if self.cost is not None:
                                return True

                            if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                return True

                            if self.ipfrr_event_id is not None:
                                return True

                            if self.lsa_processed is not None:
                                for child_ref in self.lsa_processed:
                                    if child_ref._has_data():
                                        return True

                            if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                return True

                            if self.path is not None:
                                for child_ref in self.path:
                                    if child_ref._has_data():
                                        return True

                            if self.prefix is not None:
                                return True

                            if self.prefix_lenth is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.route_path_change_type is not None:
                                return True

                            if self.route_type is not None:
                                return True

                            if self.spf_run_no is not None:
                                return True

                            if self.threshold_exceeded is not None:
                                return True

                            if self.time_line is not None:
                                for child_ref in self.time_line:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_lsa is not None:
                                for child_ref in self.trigger_lsa:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries.PrefixEventSummary']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-summaries'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.prefix_event_summary is not None:
                            for child_ref in self.prefix_event_summary:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventSummaries']['meta_info']


                class PrefixEventOfflines(object):
                    """
                    ISIS Prefix events offline data
                    
                    .. attribute:: prefix_event_offline
                    
                    	Offline operational data for particular ISIS Prefix Event
                    	**type**\: list of    :py:class:`PrefixEventOffline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.prefix_event_offline = YList()
                        self.prefix_event_offline.parent = self
                        self.prefix_event_offline.name = 'prefix_event_offline'


                    class PrefixEventOffline(object):
                        """
                        Offline operational data for particular ISIS
                        Prefix Event
                        
                        .. attribute:: event_id  <key>
                        
                        	Specific Event ID
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: change_type
                        
                        	Event Add/Delete
                        	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                        
                        .. attribute:: cost
                        
                        	Protocol route cost
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: ip_convergence_time
                        
                        	Convergence time for IP route programming
                        	**type**\:   :py:class:`IpConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime>`
                        
                        .. attribute:: ipfrr_event_id
                        
                        	Referenced IP\-FRR Event ID (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lsa_processed
                        
                        	List of LSAs processed
                        	**type**\: list of    :py:class:`LsaProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed>`
                        
                        .. attribute:: mpls_convergence_time
                        
                        	Convergence time for MPLS label programming
                        	**type**\:   :py:class:`MplsConvergenceTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime>`
                        
                        .. attribute:: path
                        
                        	Path information
                        	**type**\: list of    :py:class:`Path <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path>`
                        
                        .. attribute:: prefix
                        
                        	Prefix
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: prefix_lenth
                        
                        	Prefix length
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: priority
                        
                        	Event processed priority
                        	**type**\:   :py:class:`RcmdPriorityLevelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdPriorityLevelEnum>`
                        
                        .. attribute:: route_path_change_type
                        
                        	Route Path Change Type
                        	**type**\:   :py:class:`RcmdShowRoutePathChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRoutePathChangeEnum>`
                        
                        .. attribute:: route_type
                        
                        	Route Type intra/inter/l1/l2
                        	**type**\:   :py:class:`RcmdShowRouteEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowRouteEnum>`
                        
                        .. attribute:: spf_run_no
                        
                        	Referenced SPF Run No (0 \- Not Applicable)
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: threshold_exceeded
                        
                        	Threshold exceeded
                        	**type**\:  bool
                        
                        .. attribute:: time_line
                        
                        	Timeline information
                        	**type**\: list of    :py:class:`TimeLine <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine>`
                        
                        .. attribute:: trigger_lsa
                        
                        	LSA that triggered this event
                        	**type**\: list of    :py:class:`TriggerLsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa>`
                        
                        .. attribute:: trigger_time
                        
                        	Event trigger time
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.event_id = None
                            self.change_type = None
                            self.cost = None
                            self.ip_convergence_time = Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime()
                            self.ip_convergence_time.parent = self
                            self.ipfrr_event_id = None
                            self.lsa_processed = YList()
                            self.lsa_processed.parent = self
                            self.lsa_processed.name = 'lsa_processed'
                            self.mpls_convergence_time = Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime()
                            self.mpls_convergence_time.parent = self
                            self.path = YList()
                            self.path.parent = self
                            self.path.name = 'path'
                            self.prefix = None
                            self.prefix_lenth = None
                            self.priority = None
                            self.route_path_change_type = None
                            self.route_type = None
                            self.spf_run_no = None
                            self.threshold_exceeded = None
                            self.time_line = YList()
                            self.time_line.parent = self
                            self.time_line.name = 'time_line'
                            self.trigger_lsa = YList()
                            self.trigger_lsa.parent = self
                            self.trigger_lsa.name = 'trigger_lsa'
                            self.trigger_time = None


                        class IpConvergenceTime(object):
                            """
                            Convergence time for IP route programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:ip-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.IpConvergenceTime']['meta_info']


                        class MplsConvergenceTime(object):
                            """
                            Convergence time for MPLS label programming
                            
                            .. attribute:: fastest_node_name
                            
                            	Linecard node name which took the minimum time
                            	**type**\:  str
                            
                            .. attribute:: maximum_time
                            
                            	Maximum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_time
                            
                            	Minimum time(in seconds.milliseconds)
                            	**type**\:  str
                            
                            	**units**\: millisecond
                            
                            .. attribute:: slowest_node_name
                            
                            	Linecard node name which took the maximum time
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.fastest_node_name = None
                                self.maximum_time = None
                                self.minimum_time = None
                                self.slowest_node_name = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:mpls-convergence-time'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.fastest_node_name is not None:
                                    return True

                                if self.maximum_time is not None:
                                    return True

                                if self.minimum_time is not None:
                                    return True

                                if self.slowest_node_name is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.MplsConvergenceTime']['meta_info']


                        class Path(object):
                            """
                            Path information
                            
                            .. attribute:: change_type
                            
                            	Event Add/Delete
                            	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                            
                            .. attribute:: interface_name
                            
                            	Interface Name
                            	**type**\:  str
                            
                            .. attribute:: lfa_path
                            
                            	Backup Path Informatoin
                            	**type**\: list of    :py:class:`LfaPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath>`
                            
                            .. attribute:: neighbour_address
                            
                            	Nexthop Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: path_metric
                            
                            	Path Metric
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.interface_name = None
                                self.lfa_path = YList()
                                self.lfa_path.parent = self
                                self.lfa_path.name = 'lfa_path'
                                self.neighbour_address = None
                                self.path_metric = None


                            class LfaPath(object):
                                """
                                Backup Path Informatoin
                                
                                .. attribute:: change_type
                                
                                	Event Add/Delete
                                	**type**\:   :py:class:`RcmdChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdChangeEnum>`
                                
                                .. attribute:: interface_name
                                
                                	Interface Name
                                	**type**\:  str
                                
                                .. attribute:: lfa_type
                                
                                	Type of LFA
                                	**type**\:   :py:class:`RcmdShowIpfrrLfaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIpfrrLfaEnum>`
                                
                                .. attribute:: neighbour_address
                                
                                	Nexthop Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: path_metric
                                
                                	Path Metric
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: remote_node_id
                                
                                	Remote Node ID, in case of Remote LFA
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.change_type = None
                                    self.interface_name = None
                                    self.lfa_type = None
                                    self.neighbour_address = None
                                    self.path_metric = None
                                    self.remote_node_id = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lfa-path'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.change_type is not None:
                                        return True

                                    if self.interface_name is not None:
                                        return True

                                    if self.lfa_type is not None:
                                        return True

                                    if self.neighbour_address is not None:
                                        return True

                                    if self.path_metric is not None:
                                        return True

                                    if self.remote_node_id is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path.LfaPath']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:path'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.interface_name is not None:
                                    return True

                                if self.lfa_path is not None:
                                    for child_ref in self.lfa_path:
                                        if child_ref._has_data():
                                            return True

                                if self.neighbour_address is not None:
                                    return True

                                if self.path_metric is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.Path']['meta_info']


                        class TriggerLsa(object):
                            """
                            LSA that triggered this event
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:trigger-lsa'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TriggerLsa']['meta_info']


                        class TimeLine(object):
                            """
                            Timeline information
                            
                            .. attribute:: lc_ip
                            
                            	List of Linecards' completion point for IP routes
                            	**type**\: list of    :py:class:`LcIp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp>`
                            
                            .. attribute:: lc_mpls
                            
                            	List of Linecards' completion point for MPLS labels
                            	**type**\: list of    :py:class:`LcMpls <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls>`
                            
                            .. attribute:: ldp_enter
                            
                            	Entry point of LDP
                            	**type**\:  str
                            
                            .. attribute:: ldp_exit
                            
                            	Exit point of LDP to LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_enter
                            
                            	Entry point of LSD
                            	**type**\:  str
                            
                            .. attribute:: lsd_exit
                            
                            	Exit point of LSD to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_enter
                            
                            	Entry point of IPv4 RIB
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_exit
                            
                            	Exit point from IPv4 RIB to FIBs
                            	**type**\:  str
                            
                            .. attribute:: ri_bv4_redistribute
                            
                            	Route Redistribute point from IPv4 RIB to LDP
                            	**type**\:  str
                            
                            .. attribute:: route_origin
                            
                            	Route origin (routing protocol)
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.lc_ip = YList()
                                self.lc_ip.parent = self
                                self.lc_ip.name = 'lc_ip'
                                self.lc_mpls = YList()
                                self.lc_mpls.parent = self
                                self.lc_mpls.name = 'lc_mpls'
                                self.ldp_enter = None
                                self.ldp_exit = None
                                self.lsd_enter = None
                                self.lsd_exit = None
                                self.ri_bv4_enter = None
                                self.ri_bv4_exit = None
                                self.ri_bv4_redistribute = None
                                self.route_origin = None


                            class LcIp(object):
                                """
                                List of Linecards' completion point for IP
                                routes
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-ip'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcIp']['meta_info']


                            class LcMpls(object):
                                """
                                List of Linecards' completion point for MPLS
                                labels
                                
                                .. attribute:: fib_complete
                                
                                	Completion point of FIB
                                	**type**\:  str
                                
                                .. attribute:: node_name
                                
                                	Linecard node name
                                	**type**\:  str
                                
                                .. attribute:: speed
                                
                                	Relative convergence speed
                                	**type**\:   :py:class:`RcmdLinecardSpeedEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLinecardSpeedEnum>`
                                
                                

                                """

                                _prefix = 'infra-rcmd-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.fib_complete = None
                                    self.node_name = None
                                    self.speed = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lc-mpls'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.fib_complete is not None:
                                        return True

                                    if self.node_name is not None:
                                        return True

                                    if self.speed is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                    return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine.LcMpls']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:time-line'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.lc_ip is not None:
                                    for child_ref in self.lc_ip:
                                        if child_ref._has_data():
                                            return True

                                if self.lc_mpls is not None:
                                    for child_ref in self.lc_mpls:
                                        if child_ref._has_data():
                                            return True

                                if self.ldp_enter is not None:
                                    return True

                                if self.ldp_exit is not None:
                                    return True

                                if self.lsd_enter is not None:
                                    return True

                                if self.lsd_exit is not None:
                                    return True

                                if self.ri_bv4_enter is not None:
                                    return True

                                if self.ri_bv4_exit is not None:
                                    return True

                                if self.ri_bv4_redistribute is not None:
                                    return True

                                if self.route_origin is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.TimeLine']['meta_info']


                        class LsaProcessed(object):
                            """
                            List of LSAs processed
                            
                            .. attribute:: change_type
                            
                            	Add, Delete, Modify
                            	**type**\:   :py:class:`RcmdLsChangeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsChangeEnum>`
                            
                            .. attribute:: lsa_id
                            
                            	LSA ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: lsa_type
                            
                            	LSA type
                            	**type**\:   :py:class:`RcmdLsaEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLsaEnum>`
                            
                            .. attribute:: origin_router_id
                            
                            	Originating Router ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: reception_time
                            
                            	Reception Time on router (in hh\:mm\:ss.msec)
                            	**type**\:  str
                            
                            .. attribute:: sequence_number
                            
                            	Sequence Number
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'infra-rcmd-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.change_type = None
                                self.lsa_id = None
                                self.lsa_type = None
                                self.origin_router_id = None
                                self.reception_time = None
                                self.sequence_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsa-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.change_type is not None:
                                    return True

                                if self.lsa_id is not None:
                                    return True

                                if self.lsa_type is not None:
                                    return True

                                if self.origin_router_id is not None:
                                    return True

                                if self.reception_time is not None:
                                    return True

                                if self.sequence_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                                return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline.LsaProcessed']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.event_id is None:
                                raise YPYModelError('Key property event_id is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-offline[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.event_id is not None:
                                return True

                            if self.change_type is not None:
                                return True

                            if self.cost is not None:
                                return True

                            if self.ip_convergence_time is not None and self.ip_convergence_time._has_data():
                                return True

                            if self.ipfrr_event_id is not None:
                                return True

                            if self.lsa_processed is not None:
                                for child_ref in self.lsa_processed:
                                    if child_ref._has_data():
                                        return True

                            if self.mpls_convergence_time is not None and self.mpls_convergence_time._has_data():
                                return True

                            if self.path is not None:
                                for child_ref in self.path:
                                    if child_ref._has_data():
                                        return True

                            if self.prefix is not None:
                                return True

                            if self.prefix_lenth is not None:
                                return True

                            if self.priority is not None:
                                return True

                            if self.route_path_change_type is not None:
                                return True

                            if self.route_type is not None:
                                return True

                            if self.spf_run_no is not None:
                                return True

                            if self.threshold_exceeded is not None:
                                return True

                            if self.time_line is not None:
                                for child_ref in self.time_line:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_lsa is not None:
                                for child_ref in self.trigger_lsa:
                                    if child_ref._has_data():
                                        return True

                            if self.trigger_time is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines.PrefixEventOffline']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:prefix-event-offlines'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.prefix_event_offline is not None:
                            for child_ref in self.prefix_event_offline:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Isis.Instances.Instance.PrefixEventOfflines']['meta_info']


                class LspRegenerateds(object):
                    """
                    Regenerated LSP data
                    
                    .. attribute:: lsp_regenerated
                    
                    	Regenerated LSP data
                    	**type**\: list of    :py:class:`LspRegenerated <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Isis.Instances.Instance.LspRegenerateds.LspRegenerated>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.lsp_regenerated = YList()
                        self.lsp_regenerated.parent = self
                        self.lsp_regenerated.name = 'lsp_regenerated'


                    class LspRegenerated(object):
                        """
                        Regenerated LSP data
                        
                        .. attribute:: serial_number  <key>
                        
                        	Data for a particular regenerated LSP
                        	**type**\:  int
                        
                        	**range:** \-2147483648..2147483647
                        
                        .. attribute:: isis_level
                        
                        	ISIS Level
                        	**type**\:   :py:class:`RcmdIsisLvlEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdIsisLvlEnum>`
                        
                        .. attribute:: lsp_id
                        
                        	LSP ID
                        	**type**\:  str
                        
                        .. attribute:: reason
                        
                        	Trigger reasons for LSP regeneration. Example\: pr^ \- periodic, cr^ \- clear (Check the documentation for the entire list)
                        	**type**\:  str
                        
                        .. attribute:: reception_time
                        
                        	Reception Time on router (in hh\:mm\:ss.msec)
                        	**type**\:  str
                        
                        .. attribute:: sequence_number
                        
                        	Sequence Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: serial_number_xr
                        
                        	Serial Number of the session event
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: spf_run_number
                        
                        	SPF Run Number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.serial_number = None
                            self.isis_level = None
                            self.lsp_id = None
                            self.reason = None
                            self.reception_time = None
                            self.sequence_number = None
                            self.serial_number_xr = None
                            self.spf_run_number = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.serial_number is None:
                                raise YPYModelError('Key property serial_number is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsp-regenerated[Cisco-IOS-XR-infra-rcmd-oper:serial-number = ' + str(self.serial_number) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.serial_number is not None:
                                return True

                            if self.isis_level is not None:
                                return True

                            if self.lsp_id is not None:
                                return True

                            if self.reason is not None:
                                return True

                            if self.reception_time is not None:
                                return True

                            if self.sequence_number is not None:
                                return True

                            if self.serial_number_xr is not None:
                                return True

                            if self.spf_run_number is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Isis.Instances.Instance.LspRegenerateds.LspRegenerated']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:lsp-regenerateds'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.lsp_regenerated is not None:
                            for child_ref in self.lsp_regenerated:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Isis.Instances.Instance.LspRegenerateds']['meta_info']

                @property
                def _common_path(self):
                    if self.instance_name is None:
                        raise YPYModelError('Key property instance_name is None')

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:isis/Cisco-IOS-XR-infra-rcmd-oper:instances/Cisco-IOS-XR-infra-rcmd-oper:instance[Cisco-IOS-XR-infra-rcmd-oper:instance-name = ' + str(self.instance_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.instance_name is not None:
                        return True

                    if self.ipfrr_event_offlines is not None and self.ipfrr_event_offlines._has_data():
                        return True

                    if self.ipfrr_event_summaries is not None and self.ipfrr_event_summaries._has_data():
                        return True

                    if self.lsp_regenerateds is not None and self.lsp_regenerateds._has_data():
                        return True

                    if self.prefix_event_offlines is not None and self.prefix_event_offlines._has_data():
                        return True

                    if self.prefix_event_statistics is not None and self.prefix_event_statistics._has_data():
                        return True

                    if self.prefix_event_summaries is not None and self.prefix_event_summaries._has_data():
                        return True

                    if self.spf_run_offlines is not None and self.spf_run_offlines._has_data():
                        return True

                    if self.spf_run_summaries is not None and self.spf_run_summaries._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Isis.Instances.Instance']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:isis/Cisco-IOS-XR-infra-rcmd-oper:instances'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.instance is not None:
                    for child_ref in self.instance:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Isis.Instances']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:isis'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instances is not None and self.instances._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
            return meta._meta_table['Rcmd.Isis']['meta_info']


    class Memory(object):
        """
        Memory Info
        
        .. attribute:: edm_memory_info
        
        	Memory Info
        	**type**\: list of    :py:class:`EdmMemoryInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Memory.EdmMemoryInfo>`
        
        .. attribute:: memory_info
        
        	Memory Info
        	**type**\: list of    :py:class:`MemoryInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Memory.MemoryInfo>`
        
        .. attribute:: string_memory_info
        
        	Memory Info
        	**type**\: list of    :py:class:`StringMemoryInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Memory.StringMemoryInfo>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.edm_memory_info = YList()
            self.edm_memory_info.parent = self
            self.edm_memory_info.name = 'edm_memory_info'
            self.memory_info = YList()
            self.memory_info.parent = self
            self.memory_info.name = 'memory_info'
            self.string_memory_info = YList()
            self.string_memory_info.parent = self
            self.string_memory_info.name = 'string_memory_info'


        class MemoryInfo(object):
            """
            Memory Info
            
            .. attribute:: alloc_count
            
            	Allocated count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: alloc_fails
            
            	Allocation Fails
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: current_count
            
            	Current Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: freed_count
            
            	Freed Count
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: memory_type
            
            	Memory Type
            	**type**\:   :py:class:`RcmdShowMemEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowMemEnum>`
            
            .. attribute:: size
            
            	Size of the datastructure
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: structure_name
            
            	Structure Name
            	**type**\:  str
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.alloc_count = None
                self.alloc_fails = None
                self.current_count = None
                self.freed_count = None
                self.memory_type = None
                self.size = None
                self.structure_name = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:memory/Cisco-IOS-XR-infra-rcmd-oper:memory-info'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.alloc_count is not None:
                    return True

                if self.alloc_fails is not None:
                    return True

                if self.current_count is not None:
                    return True

                if self.freed_count is not None:
                    return True

                if self.memory_type is not None:
                    return True

                if self.size is not None:
                    return True

                if self.structure_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Memory.MemoryInfo']['meta_info']


        class EdmMemoryInfo(object):
            """
            Memory Info
            
            .. attribute:: failure
            
            	Cache\-hit failure
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: size
            
            	Size of the block
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: success
            
            	Cache\-hit success
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total
            
            	Total request
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.failure = None
                self.size = None
                self.success = None
                self.total = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:memory/Cisco-IOS-XR-infra-rcmd-oper:edm-memory-info'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.failure is not None:
                    return True

                if self.size is not None:
                    return True

                if self.success is not None:
                    return True

                if self.total is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Memory.EdmMemoryInfo']['meta_info']


        class StringMemoryInfo(object):
            """
            Memory Info
            
            .. attribute:: failure
            
            	Cache\-hit failure
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: size
            
            	Size of the block
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: success
            
            	Cache\-hit success
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total
            
            	Total request
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.failure = None
                self.size = None
                self.success = None
                self.total = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:memory/Cisco-IOS-XR-infra-rcmd-oper:string-memory-info'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.failure is not None:
                    return True

                if self.size is not None:
                    return True

                if self.success is not None:
                    return True

                if self.total is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Memory.StringMemoryInfo']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:memory'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.edm_memory_info is not None:
                for child_ref in self.edm_memory_info:
                    if child_ref._has_data():
                        return True

            if self.memory_info is not None:
                for child_ref in self.memory_info:
                    if child_ref._has_data():
                        return True

            if self.string_memory_info is not None:
                for child_ref in self.string_memory_info:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
            return meta._meta_table['Rcmd.Memory']['meta_info']


    class Ldp(object):
        """
        LDP data
        
        .. attribute:: remote_lfa_s
        
        	Remote LFA Coverage Events
        	**type**\:   :py:class:`RemoteLfaS <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS>`
        
        .. attribute:: remote_lfa_summaries
        
        	Remote LFA Coverage Events
        	**type**\:   :py:class:`RemoteLfaSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries>`
        
        .. attribute:: sessions
        
        	Session Events
        	**type**\:   :py:class:`Sessions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.Sessions>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.remote_lfa_s = Rcmd.Ldp.RemoteLfaS()
            self.remote_lfa_s.parent = self
            self.remote_lfa_summaries = Rcmd.Ldp.RemoteLfaSummaries()
            self.remote_lfa_summaries.parent = self
            self.sessions = Rcmd.Ldp.Sessions()
            self.sessions.parent = self


        class Sessions(object):
            """
            Session Events
            
            .. attribute:: session
            
            	Session
            	**type**\: list of    :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.Sessions.Session>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.session = YList()
                self.session.parent = self
                self.session.name = 'session'


            class Session(object):
                """
                Session
                
                .. attribute:: event_id  <key>
                
                	Specific Event ID
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: address
                
                	transport address or adjacency address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: event_id_xr
                
                	Event ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: event_time
                
                	Event Time
                	**type**\:  str
                
                .. attribute:: event_type
                
                	Type of event
                	**type**\:   :py:class:`RcmdLdpEventEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdLdpEventEnum>`
                
                .. attribute:: interface_name
                
                	Interface Name
                	**type**\:  str
                
                .. attribute:: lsr_id
                
                	Label Space Router ID
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: state
                
                	Adjacency Session Status
                	**type**\:   :py:class:`RcmdShowLdpNeighbourStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpNeighbourStatusEnum>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.event_id = None
                    self.address = None
                    self.event_id_xr = None
                    self.event_time = None
                    self.event_type = None
                    self.interface_name = None
                    self.lsr_id = None
                    self.state = None

                @property
                def _common_path(self):
                    if self.event_id is None:
                        raise YPYModelError('Key property event_id is None')

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:sessions/Cisco-IOS-XR-infra-rcmd-oper:session[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.event_id is not None:
                        return True

                    if self.address is not None:
                        return True

                    if self.event_id_xr is not None:
                        return True

                    if self.event_time is not None:
                        return True

                    if self.event_type is not None:
                        return True

                    if self.interface_name is not None:
                        return True

                    if self.lsr_id is not None:
                        return True

                    if self.state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Ldp.Sessions.Session']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:sessions'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.session is not None:
                    for child_ref in self.session:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Ldp.Sessions']['meta_info']


        class RemoteLfaS(object):
            """
            Remote LFA Coverage Events
            
            .. attribute:: remote_lfa
            
            	RemoteLFA
            	**type**\: list of    :py:class:`RemoteLfa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS.RemoteLfa>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.remote_lfa = YList()
                self.remote_lfa.parent = self
                self.remote_lfa.name = 'remote_lfa'


            class RemoteLfa(object):
                """
                RemoteLFA
                
                .. attribute:: event_id  <key>
                
                	Specific Event ID
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: below_threshold
                
                	Coverage Below Threshold
                	**type**\:  bool
                
                .. attribute:: end_of_calculation_time
                
                	End of IGP LFA Calculation Time (eg\: Apr 24 13 \:16\:04.961)
                	**type**\:  str
                
                .. attribute:: event_id_xr
                
                	LDP\-rLFA Event ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: igp_protocol
                
                	IGP Protocol
                	**type**\:   :py:class:`RcmdProtocolIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolIdEnum>`
                
                .. attribute:: ipfrr_event_id
                
                	IGP IP\-FRR Event ID (ref\: rcmd\_show\_ipfrr\_event\_info(EventID))
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: logs
                
                	Logs Information
                	**type**\: list of    :py:class:`Logs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS.RemoteLfa.Logs>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: remote_node
                
                	Remote Node Information
                	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS.RemoteLfa.RemoteNode>`
                
                .. attribute:: session_statistic
                
                	RLFA Statistics categorized by session state
                	**type**\: list of    :py:class:`SessionStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaS.RemoteLfa.SessionStatistic>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.event_id = None
                    self.below_threshold = None
                    self.end_of_calculation_time = None
                    self.event_id_xr = None
                    self.igp_protocol = None
                    self.ipfrr_event_id = None
                    self.logs = YList()
                    self.logs.parent = self
                    self.logs.name = 'logs'
                    self.process_name = None
                    self.remote_node = YList()
                    self.remote_node.parent = self
                    self.remote_node.name = 'remote_node'
                    self.session_statistic = YList()
                    self.session_statistic.parent = self
                    self.session_statistic.name = 'session_statistic'


                class SessionStatistic(object):
                    """
                    RLFA Statistics categorized by session state
                    
                    .. attribute:: path_count
                    
                    	Total Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_path_count
                    
                    	Protected Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_route_count
                    
                    	Protected Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_count
                    
                    	LDP Session Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_state
                    
                    	Session State
                    	**type**\:   :py:class:`RcmdShowLdpSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpSessionStateEnum>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.path_count = None
                        self.protected_path_count = None
                        self.protected_route_count = None
                        self.remote_label_count = None
                        self.route_count = None
                        self.session_count = None
                        self.session_state = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:session-statistic'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.path_count is not None:
                            return True

                        if self.protected_path_count is not None:
                            return True

                        if self.protected_route_count is not None:
                            return True

                        if self.remote_label_count is not None:
                            return True

                        if self.route_count is not None:
                            return True

                        if self.session_count is not None:
                            return True

                        if self.session_state is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ldp.RemoteLfaS.RemoteLfa.SessionStatistic']['meta_info']


                class RemoteNode(object):
                    """
                    Remote Node Information
                    
                    .. attribute:: in_use_time
                    
                    	Inuse time of the Session
                    	**type**\:  str
                    
                    .. attribute:: lsr_id
                    
                    	Label Space Router ID
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: path_count
                    
                    	Total Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_path_count
                    
                    	Protected Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_route_count
                    
                    	Protected Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_node_id
                    
                    	Remote Node ID
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_state
                    
                    	Session State
                    	**type**\:   :py:class:`RcmdShowLdpSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpSessionStateEnum>`
                    
                    .. attribute:: transport_address
                    
                    	Transport Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.in_use_time = None
                        self.lsr_id = None
                        self.path_count = None
                        self.protected_path_count = None
                        self.protected_route_count = None
                        self.remote_label_count = None
                        self.remote_node_id = None
                        self.route_count = None
                        self.session_state = None
                        self.transport_address = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:remote-node'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.in_use_time is not None:
                            return True

                        if self.lsr_id is not None:
                            return True

                        if self.path_count is not None:
                            return True

                        if self.protected_path_count is not None:
                            return True

                        if self.protected_route_count is not None:
                            return True

                        if self.remote_label_count is not None:
                            return True

                        if self.remote_node_id is not None:
                            return True

                        if self.route_count is not None:
                            return True

                        if self.session_state is not None:
                            return True

                        if self.transport_address is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ldp.RemoteLfaS.RemoteLfa.RemoteNode']['meta_info']


                class Logs(object):
                    """
                    Logs Information
                    
                    .. attribute:: label_coverage_state
                    
                    	Label Coverage State
                    	**type**\:   :py:class:`RcmdShowLdpConvStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpConvStateEnum>`
                    
                    .. attribute:: log_time
                    
                    	Event Time (eg\: Apr 24 13\:16\:04.961)
                    	**type**\:  str
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.label_coverage_state = None
                        self.log_time = None
                        self.remote_label_count = None
                        self.route_count = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:logs'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.label_coverage_state is not None:
                            return True

                        if self.log_time is not None:
                            return True

                        if self.remote_label_count is not None:
                            return True

                        if self.route_count is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ldp.RemoteLfaS.RemoteLfa.Logs']['meta_info']

                @property
                def _common_path(self):
                    if self.event_id is None:
                        raise YPYModelError('Key property event_id is None')

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:remote-lfa-s/Cisco-IOS-XR-infra-rcmd-oper:remote-lfa[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.event_id is not None:
                        return True

                    if self.below_threshold is not None:
                        return True

                    if self.end_of_calculation_time is not None:
                        return True

                    if self.event_id_xr is not None:
                        return True

                    if self.igp_protocol is not None:
                        return True

                    if self.ipfrr_event_id is not None:
                        return True

                    if self.logs is not None:
                        for child_ref in self.logs:
                            if child_ref._has_data():
                                return True

                    if self.process_name is not None:
                        return True

                    if self.remote_node is not None:
                        for child_ref in self.remote_node:
                            if child_ref._has_data():
                                return True

                    if self.session_statistic is not None:
                        for child_ref in self.session_statistic:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Ldp.RemoteLfaS.RemoteLfa']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:remote-lfa-s'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.remote_lfa is not None:
                    for child_ref in self.remote_lfa:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Ldp.RemoteLfaS']['meta_info']


        class RemoteLfaSummaries(object):
            """
            Remote LFA Coverage Events
            
            .. attribute:: remote_lfa_summary
            
            	Summary operational data for Remote LFA
            	**type**\: list of    :py:class:`RemoteLfaSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.remote_lfa_summary = YList()
                self.remote_lfa_summary.parent = self
                self.remote_lfa_summary.name = 'remote_lfa_summary'


            class RemoteLfaSummary(object):
                """
                Summary operational data for Remote LFA
                
                .. attribute:: event_id  <key>
                
                	Specific Event ID
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: below_threshold
                
                	Coverage Below Threshold
                	**type**\:  bool
                
                .. attribute:: end_of_calculation_time
                
                	End of IGP LFA Calculation Time (eg\: Apr 24 13 \:16\:04.961)
                	**type**\:  str
                
                .. attribute:: event_id_xr
                
                	LDP\-rLFA Event ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: igp_protocol
                
                	IGP Protocol
                	**type**\:   :py:class:`RcmdProtocolIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolIdEnum>`
                
                .. attribute:: ipfrr_event_id
                
                	IGP IP\-FRR Event ID (ref\: rcmd\_show\_ipfrr\_event\_info(EventID))
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: logs
                
                	Logs Information
                	**type**\: list of    :py:class:`Logs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.Logs>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: remote_node
                
                	Remote Node Information
                	**type**\: list of    :py:class:`RemoteNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.RemoteNode>`
                
                .. attribute:: session_statistic
                
                	RLFA Statistics categorized by session state
                	**type**\: list of    :py:class:`SessionStatistic <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.SessionStatistic>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.event_id = None
                    self.below_threshold = None
                    self.end_of_calculation_time = None
                    self.event_id_xr = None
                    self.igp_protocol = None
                    self.ipfrr_event_id = None
                    self.logs = YList()
                    self.logs.parent = self
                    self.logs.name = 'logs'
                    self.process_name = None
                    self.remote_node = YList()
                    self.remote_node.parent = self
                    self.remote_node.name = 'remote_node'
                    self.session_statistic = YList()
                    self.session_statistic.parent = self
                    self.session_statistic.name = 'session_statistic'


                class SessionStatistic(object):
                    """
                    RLFA Statistics categorized by session state
                    
                    .. attribute:: path_count
                    
                    	Total Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_path_count
                    
                    	Protected Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_route_count
                    
                    	Protected Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_count
                    
                    	LDP Session Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_state
                    
                    	Session State
                    	**type**\:   :py:class:`RcmdShowLdpSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpSessionStateEnum>`
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.path_count = None
                        self.protected_path_count = None
                        self.protected_route_count = None
                        self.remote_label_count = None
                        self.route_count = None
                        self.session_count = None
                        self.session_state = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:session-statistic'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.path_count is not None:
                            return True

                        if self.protected_path_count is not None:
                            return True

                        if self.protected_route_count is not None:
                            return True

                        if self.remote_label_count is not None:
                            return True

                        if self.route_count is not None:
                            return True

                        if self.session_count is not None:
                            return True

                        if self.session_state is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.SessionStatistic']['meta_info']


                class RemoteNode(object):
                    """
                    Remote Node Information
                    
                    .. attribute:: in_use_time
                    
                    	Inuse time of the Session
                    	**type**\:  str
                    
                    .. attribute:: lsr_id
                    
                    	Label Space Router ID
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: path_count
                    
                    	Total Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_path_count
                    
                    	Protected Path Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: protected_route_count
                    
                    	Protected Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: remote_node_id
                    
                    	Remote Node ID
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: session_state
                    
                    	Session State
                    	**type**\:   :py:class:`RcmdShowLdpSessionStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpSessionStateEnum>`
                    
                    .. attribute:: transport_address
                    
                    	Transport Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.in_use_time = None
                        self.lsr_id = None
                        self.path_count = None
                        self.protected_path_count = None
                        self.protected_route_count = None
                        self.remote_label_count = None
                        self.remote_node_id = None
                        self.route_count = None
                        self.session_state = None
                        self.transport_address = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:remote-node'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.in_use_time is not None:
                            return True

                        if self.lsr_id is not None:
                            return True

                        if self.path_count is not None:
                            return True

                        if self.protected_path_count is not None:
                            return True

                        if self.protected_route_count is not None:
                            return True

                        if self.remote_label_count is not None:
                            return True

                        if self.remote_node_id is not None:
                            return True

                        if self.route_count is not None:
                            return True

                        if self.session_state is not None:
                            return True

                        if self.transport_address is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.RemoteNode']['meta_info']


                class Logs(object):
                    """
                    Logs Information
                    
                    .. attribute:: label_coverage_state
                    
                    	Label Coverage State
                    	**type**\:   :py:class:`RcmdShowLdpConvStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowLdpConvStateEnum>`
                    
                    .. attribute:: log_time
                    
                    	Event Time (eg\: Apr 24 13\:16\:04.961)
                    	**type**\:  str
                    
                    .. attribute:: remote_label_count
                    
                    	Remote Label Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_count
                    
                    	Total Route Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.label_coverage_state = None
                        self.log_time = None
                        self.remote_label_count = None
                        self.route_count = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-infra-rcmd-oper:logs'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.label_coverage_state is not None:
                            return True

                        if self.log_time is not None:
                            return True

                        if self.remote_label_count is not None:
                            return True

                        if self.route_count is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary.Logs']['meta_info']

                @property
                def _common_path(self):
                    if self.event_id is None:
                        raise YPYModelError('Key property event_id is None')

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:remote-lfa-summaries/Cisco-IOS-XR-infra-rcmd-oper:remote-lfa-summary[Cisco-IOS-XR-infra-rcmd-oper:event-id = ' + str(self.event_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.event_id is not None:
                        return True

                    if self.below_threshold is not None:
                        return True

                    if self.end_of_calculation_time is not None:
                        return True

                    if self.event_id_xr is not None:
                        return True

                    if self.igp_protocol is not None:
                        return True

                    if self.ipfrr_event_id is not None:
                        return True

                    if self.logs is not None:
                        for child_ref in self.logs:
                            if child_ref._has_data():
                                return True

                    if self.process_name is not None:
                        return True

                    if self.remote_node is not None:
                        for child_ref in self.remote_node:
                            if child_ref._has_data():
                                return True

                    if self.session_statistic is not None:
                        for child_ref in self.session_statistic:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Ldp.RemoteLfaSummaries.RemoteLfaSummary']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:remote-lfa-summaries'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.remote_lfa_summary is not None:
                    for child_ref in self.remote_lfa_summary:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Ldp.RemoteLfaSummaries']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:ldp'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.remote_lfa_s is not None and self.remote_lfa_s._has_data():
                return True

            if self.remote_lfa_summaries is not None and self.remote_lfa_summaries._has_data():
                return True

            if self.sessions is not None and self.sessions._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
            return meta._meta_table['Rcmd.Ldp']['meta_info']


    class Intf(object):
        """
        Interface data
        
        .. attribute:: events
        
        	Events
        	**type**\:   :py:class:`Events <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Intf.Events>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.events = Rcmd.Intf.Events()
            self.events.parent = self


        class Events(object):
            """
            Events
            
            .. attribute:: event
            
            	Events
            	**type**\: list of    :py:class:`Event <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Intf.Events.Event>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.event = YList()
                self.event.parent = self
                self.event.name = 'event'


            class Event(object):
                """
                Events
                
                .. attribute:: event_no  <key>
                
                	Specific Event No
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: component
                
                	Component info
                	**type**\:   :py:class:`RcmdShowCompIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowCompIdEnum>`
                
                .. attribute:: event_time
                
                	Event Time
                	**type**\:  str
                
                .. attribute:: event_type
                
                	Event Info
                	**type**\:   :py:class:`RcmdShowIntfEventEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowIntfEventEnum>`
                
                .. attribute:: interface_name
                
                	Interface Name
                	**type**\:  str
                
                .. attribute:: primary_address
                
                	Primary Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: sequence_no
                
                	Sequence No
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.event_no = None
                    self.component = None
                    self.event_time = None
                    self.event_type = None
                    self.interface_name = None
                    self.primary_address = None
                    self.sequence_no = None

                @property
                def _common_path(self):
                    if self.event_no is None:
                        raise YPYModelError('Key property event_no is None')

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:intf/Cisco-IOS-XR-infra-rcmd-oper:events/Cisco-IOS-XR-infra-rcmd-oper:event[Cisco-IOS-XR-infra-rcmd-oper:event-no = ' + str(self.event_no) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.event_no is not None:
                        return True

                    if self.component is not None:
                        return True

                    if self.event_time is not None:
                        return True

                    if self.event_type is not None:
                        return True

                    if self.interface_name is not None:
                        return True

                    if self.primary_address is not None:
                        return True

                    if self.sequence_no is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Intf.Events.Event']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:intf/Cisco-IOS-XR-infra-rcmd-oper:events'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.event is not None:
                    for child_ref in self.event:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Intf.Events']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:intf'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.events is not None and self.events._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
            return meta._meta_table['Rcmd.Intf']['meta_info']


    class Process(object):
        """
        Process information
        
        .. attribute:: isis
        
        	ISIS Process Information
        	**type**\:   :py:class:`Isis <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Isis>`
        
        .. attribute:: ldp
        
        	LDP Process Information
        	**type**\:   :py:class:`Ldp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ldp>`
        
        .. attribute:: ospf
        
        	OSPF Process Information
        	**type**\:   :py:class:`Ospf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ospf>`
        
        

        """

        _prefix = 'infra-rcmd-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.isis = Rcmd.Process.Isis()
            self.isis.parent = self
            self.ldp = Rcmd.Process.Ldp()
            self.ldp.parent = self
            self.ospf = Rcmd.Process.Ospf()
            self.ospf.parent = self


        class Isis(object):
            """
            ISIS Process Information
            
            .. attribute:: process
            
            	Process Information
            	**type**\: list of    :py:class:`Process_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Isis.Process_>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.process = YList()
                self.process.parent = self
                self.process.name = 'process'


            class Process_(object):
                """
                Process Information
                
                .. attribute:: instance_name
                
                	Instance/VRF Name
                	**type**\: list of    :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Isis.Process_.InstanceName>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: protocol_id
                
                	Protocol id
                	**type**\:   :py:class:`RcmdProtocolIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolIdEnum>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.instance_name = YList()
                    self.instance_name.parent = self
                    self.instance_name.name = 'instance_name'
                    self.process_name = None
                    self.protocol_id = None


                class InstanceName(object):
                    """
                    Instance/VRF Name
                    
                    .. attribute:: arch_lsp_regeneration
                    
                    	Archive Lsp regen
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arch_spf_event
                    
                    	Archive SPF event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: instance
                    
                    	Instance Information
                    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Isis.Process_.InstanceName.Instance>`
                    
                    .. attribute:: last_update_time
                    
                    	Last Updated Time
                    	**type**\:  str
                    
                    .. attribute:: lsp_regeneration_count
                    
                    	LSP Regen Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_regeneration_serial
                    
                    	Last Serial
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Instance Name
                    	**type**\:  str
                    
                    .. attribute:: no_route_change_spf_nos
                    
                    	No Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: not_interested_spf_nos
                    
                    	Not Interested SPF nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_change_spf_nos
                    
                    	Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_spf_nos
                    
                    	Total spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.arch_lsp_regeneration = None
                        self.arch_spf_event = None
                        self.instance = YList()
                        self.instance.parent = self
                        self.instance.name = 'instance'
                        self.last_update_time = None
                        self.lsp_regeneration_count = None
                        self.lsp_regeneration_serial = None
                        self.name = None
                        self.no_route_change_spf_nos = None
                        self.not_interested_spf_nos = None
                        self.route_change_spf_nos = None
                        self.total_spf_nos = None


                    class Instance(object):
                        """
                        Instance Information
                        
                        .. attribute:: arch_spf_run
                        
                        	spf run can be archived
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fwd_referenced
                        
                        	Forward Referenced
                        	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
                        
                        .. attribute:: instance_deleted
                        
                        	Instance Deleted
                        	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
                        
                        .. attribute:: instance_id
                        
                        	Instance Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: instance_state
                        
                        	Instance State
                        	**type**\:   :py:class:`RcmdShowInstStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowInstStateEnum>`
                        
                        .. attribute:: last_update_time
                        
                        	Last Updated Time
                        	**type**\:  str
                        
                        .. attribute:: no_route_change_spf_nos
                        
                        	No Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: node_id
                        
                        	Node Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: not_interested_spf_nos
                        
                        	Not Interested SPF nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: route_change_spf_nos
                        
                        	Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: spf_offset
                        
                        	SPF Offset
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spf_nos
                        
                        	Total spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spt_nos
                        
                        	Total spt nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.arch_spf_run = None
                            self.fwd_referenced = None
                            self.instance_deleted = None
                            self.instance_id = None
                            self.instance_state = None
                            self.last_update_time = None
                            self.no_route_change_spf_nos = None
                            self.node_id = None
                            self.not_interested_spf_nos = None
                            self.route_change_spf_nos = None
                            self.spf_offset = None
                            self.total_spf_nos = None
                            self.total_spt_nos = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:isis/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:instance-name/Cisco-IOS-XR-infra-rcmd-oper:instance'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.arch_spf_run is not None:
                                return True

                            if self.fwd_referenced is not None:
                                return True

                            if self.instance_deleted is not None:
                                return True

                            if self.instance_id is not None:
                                return True

                            if self.instance_state is not None:
                                return True

                            if self.last_update_time is not None:
                                return True

                            if self.no_route_change_spf_nos is not None:
                                return True

                            if self.node_id is not None:
                                return True

                            if self.not_interested_spf_nos is not None:
                                return True

                            if self.route_change_spf_nos is not None:
                                return True

                            if self.spf_offset is not None:
                                return True

                            if self.total_spf_nos is not None:
                                return True

                            if self.total_spt_nos is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Process.Isis.Process_.InstanceName.Instance']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:isis/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:instance-name'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.arch_lsp_regeneration is not None:
                            return True

                        if self.arch_spf_event is not None:
                            return True

                        if self.instance is not None:
                            for child_ref in self.instance:
                                if child_ref._has_data():
                                    return True

                        if self.last_update_time is not None:
                            return True

                        if self.lsp_regeneration_count is not None:
                            return True

                        if self.lsp_regeneration_serial is not None:
                            return True

                        if self.name is not None:
                            return True

                        if self.no_route_change_spf_nos is not None:
                            return True

                        if self.not_interested_spf_nos is not None:
                            return True

                        if self.route_change_spf_nos is not None:
                            return True

                        if self.total_spf_nos is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Process.Isis.Process_.InstanceName']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:isis/Cisco-IOS-XR-infra-rcmd-oper:process'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.instance_name is not None:
                        for child_ref in self.instance_name:
                            if child_ref._has_data():
                                return True

                    if self.process_name is not None:
                        return True

                    if self.protocol_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Process.Isis.Process_']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:isis'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.process is not None:
                    for child_ref in self.process:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Process.Isis']['meta_info']


        class Ospf(object):
            """
            OSPF Process Information
            
            .. attribute:: process
            
            	Process Information
            	**type**\: list of    :py:class:`Process_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ospf.Process_>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.process = YList()
                self.process.parent = self
                self.process.name = 'process'


            class Process_(object):
                """
                Process Information
                
                .. attribute:: instance_name
                
                	Instance/VRF Name
                	**type**\: list of    :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ospf.Process_.InstanceName>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: protocol_id
                
                	Protocol id
                	**type**\:   :py:class:`RcmdProtocolIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolIdEnum>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.instance_name = YList()
                    self.instance_name.parent = self
                    self.instance_name.name = 'instance_name'
                    self.process_name = None
                    self.protocol_id = None


                class InstanceName(object):
                    """
                    Instance/VRF Name
                    
                    .. attribute:: arch_lsp_regeneration
                    
                    	Archive Lsp regen
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arch_spf_event
                    
                    	Archive SPF event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: instance
                    
                    	Instance Information
                    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ospf.Process_.InstanceName.Instance>`
                    
                    .. attribute:: last_update_time
                    
                    	Last Updated Time
                    	**type**\:  str
                    
                    .. attribute:: lsp_regeneration_count
                    
                    	LSP Regen Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_regeneration_serial
                    
                    	Last Serial
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Instance Name
                    	**type**\:  str
                    
                    .. attribute:: no_route_change_spf_nos
                    
                    	No Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: not_interested_spf_nos
                    
                    	Not Interested SPF nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_change_spf_nos
                    
                    	Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_spf_nos
                    
                    	Total spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.arch_lsp_regeneration = None
                        self.arch_spf_event = None
                        self.instance = YList()
                        self.instance.parent = self
                        self.instance.name = 'instance'
                        self.last_update_time = None
                        self.lsp_regeneration_count = None
                        self.lsp_regeneration_serial = None
                        self.name = None
                        self.no_route_change_spf_nos = None
                        self.not_interested_spf_nos = None
                        self.route_change_spf_nos = None
                        self.total_spf_nos = None


                    class Instance(object):
                        """
                        Instance Information
                        
                        .. attribute:: arch_spf_run
                        
                        	spf run can be archived
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fwd_referenced
                        
                        	Forward Referenced
                        	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
                        
                        .. attribute:: instance_deleted
                        
                        	Instance Deleted
                        	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
                        
                        .. attribute:: instance_id
                        
                        	Instance Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: instance_state
                        
                        	Instance State
                        	**type**\:   :py:class:`RcmdShowInstStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowInstStateEnum>`
                        
                        .. attribute:: last_update_time
                        
                        	Last Updated Time
                        	**type**\:  str
                        
                        .. attribute:: no_route_change_spf_nos
                        
                        	No Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: node_id
                        
                        	Node Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: not_interested_spf_nos
                        
                        	Not Interested SPF nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: route_change_spf_nos
                        
                        	Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: spf_offset
                        
                        	SPF Offset
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spf_nos
                        
                        	Total spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spt_nos
                        
                        	Total spt nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.arch_spf_run = None
                            self.fwd_referenced = None
                            self.instance_deleted = None
                            self.instance_id = None
                            self.instance_state = None
                            self.last_update_time = None
                            self.no_route_change_spf_nos = None
                            self.node_id = None
                            self.not_interested_spf_nos = None
                            self.route_change_spf_nos = None
                            self.spf_offset = None
                            self.total_spf_nos = None
                            self.total_spt_nos = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:ospf/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:instance-name/Cisco-IOS-XR-infra-rcmd-oper:instance'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.arch_spf_run is not None:
                                return True

                            if self.fwd_referenced is not None:
                                return True

                            if self.instance_deleted is not None:
                                return True

                            if self.instance_id is not None:
                                return True

                            if self.instance_state is not None:
                                return True

                            if self.last_update_time is not None:
                                return True

                            if self.no_route_change_spf_nos is not None:
                                return True

                            if self.node_id is not None:
                                return True

                            if self.not_interested_spf_nos is not None:
                                return True

                            if self.route_change_spf_nos is not None:
                                return True

                            if self.spf_offset is not None:
                                return True

                            if self.total_spf_nos is not None:
                                return True

                            if self.total_spt_nos is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Process.Ospf.Process_.InstanceName.Instance']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:ospf/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:instance-name'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.arch_lsp_regeneration is not None:
                            return True

                        if self.arch_spf_event is not None:
                            return True

                        if self.instance is not None:
                            for child_ref in self.instance:
                                if child_ref._has_data():
                                    return True

                        if self.last_update_time is not None:
                            return True

                        if self.lsp_regeneration_count is not None:
                            return True

                        if self.lsp_regeneration_serial is not None:
                            return True

                        if self.name is not None:
                            return True

                        if self.no_route_change_spf_nos is not None:
                            return True

                        if self.not_interested_spf_nos is not None:
                            return True

                        if self.route_change_spf_nos is not None:
                            return True

                        if self.total_spf_nos is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Process.Ospf.Process_.InstanceName']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:ospf/Cisco-IOS-XR-infra-rcmd-oper:process'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.instance_name is not None:
                        for child_ref in self.instance_name:
                            if child_ref._has_data():
                                return True

                    if self.process_name is not None:
                        return True

                    if self.protocol_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Process.Ospf.Process_']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:ospf'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.process is not None:
                    for child_ref in self.process:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Process.Ospf']['meta_info']


        class Ldp(object):
            """
            LDP Process Information
            
            .. attribute:: process
            
            	Process Information
            	**type**\: list of    :py:class:`Process_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ldp.Process_>`
            
            

            """

            _prefix = 'infra-rcmd-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.process = YList()
                self.process.parent = self
                self.process.name = 'process'


            class Process_(object):
                """
                Process Information
                
                .. attribute:: instance_name
                
                	Instance/VRF Name
                	**type**\: list of    :py:class:`InstanceName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ldp.Process_.InstanceName>`
                
                .. attribute:: process_name
                
                	Process Name
                	**type**\:  str
                
                .. attribute:: protocol_id
                
                	Protocol id
                	**type**\:   :py:class:`RcmdProtocolIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdProtocolIdEnum>`
                
                

                """

                _prefix = 'infra-rcmd-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.instance_name = YList()
                    self.instance_name.parent = self
                    self.instance_name.name = 'instance_name'
                    self.process_name = None
                    self.protocol_id = None


                class InstanceName(object):
                    """
                    Instance/VRF Name
                    
                    .. attribute:: arch_lsp_regeneration
                    
                    	Archive Lsp regen
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: arch_spf_event
                    
                    	Archive SPF event
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: instance
                    
                    	Instance Information
                    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.Rcmd.Process.Ldp.Process_.InstanceName.Instance>`
                    
                    .. attribute:: last_update_time
                    
                    	Last Updated Time
                    	**type**\:  str
                    
                    .. attribute:: lsp_regeneration_count
                    
                    	LSP Regen Count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_regeneration_serial
                    
                    	Last Serial
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: name
                    
                    	Instance Name
                    	**type**\:  str
                    
                    .. attribute:: no_route_change_spf_nos
                    
                    	No Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: not_interested_spf_nos
                    
                    	Not Interested SPF nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: route_change_spf_nos
                    
                    	Route change spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_spf_nos
                    
                    	Total spf nos
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'infra-rcmd-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.arch_lsp_regeneration = None
                        self.arch_spf_event = None
                        self.instance = YList()
                        self.instance.parent = self
                        self.instance.name = 'instance'
                        self.last_update_time = None
                        self.lsp_regeneration_count = None
                        self.lsp_regeneration_serial = None
                        self.name = None
                        self.no_route_change_spf_nos = None
                        self.not_interested_spf_nos = None
                        self.route_change_spf_nos = None
                        self.total_spf_nos = None


                    class Instance(object):
                        """
                        Instance Information
                        
                        .. attribute:: arch_spf_run
                        
                        	spf run can be archived
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fwd_referenced
                        
                        	Forward Referenced
                        	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
                        
                        .. attribute:: instance_deleted
                        
                        	Instance Deleted
                        	**type**\:   :py:class:`RcmdBoolYesNoEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdBoolYesNoEnum>`
                        
                        .. attribute:: instance_id
                        
                        	Instance Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: instance_state
                        
                        	Instance State
                        	**type**\:   :py:class:`RcmdShowInstStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_infra_rcmd_oper.RcmdShowInstStateEnum>`
                        
                        .. attribute:: last_update_time
                        
                        	Last Updated Time
                        	**type**\:  str
                        
                        .. attribute:: no_route_change_spf_nos
                        
                        	No Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: node_id
                        
                        	Node Id
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: not_interested_spf_nos
                        
                        	Not Interested SPF nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: route_change_spf_nos
                        
                        	Route change spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: spf_offset
                        
                        	SPF Offset
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spf_nos
                        
                        	Total spf nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total_spt_nos
                        
                        	Total spt nos
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'infra-rcmd-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.arch_spf_run = None
                            self.fwd_referenced = None
                            self.instance_deleted = None
                            self.instance_id = None
                            self.instance_state = None
                            self.last_update_time = None
                            self.no_route_change_spf_nos = None
                            self.node_id = None
                            self.not_interested_spf_nos = None
                            self.route_change_spf_nos = None
                            self.spf_offset = None
                            self.total_spf_nos = None
                            self.total_spt_nos = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:instance-name/Cisco-IOS-XR-infra-rcmd-oper:instance'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.arch_spf_run is not None:
                                return True

                            if self.fwd_referenced is not None:
                                return True

                            if self.instance_deleted is not None:
                                return True

                            if self.instance_id is not None:
                                return True

                            if self.instance_state is not None:
                                return True

                            if self.last_update_time is not None:
                                return True

                            if self.no_route_change_spf_nos is not None:
                                return True

                            if self.node_id is not None:
                                return True

                            if self.not_interested_spf_nos is not None:
                                return True

                            if self.route_change_spf_nos is not None:
                                return True

                            if self.spf_offset is not None:
                                return True

                            if self.total_spf_nos is not None:
                                return True

                            if self.total_spt_nos is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                            return meta._meta_table['Rcmd.Process.Ldp.Process_.InstanceName.Instance']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:instance-name'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.arch_lsp_regeneration is not None:
                            return True

                        if self.arch_spf_event is not None:
                            return True

                        if self.instance is not None:
                            for child_ref in self.instance:
                                if child_ref._has_data():
                                    return True

                        if self.last_update_time is not None:
                            return True

                        if self.lsp_regeneration_count is not None:
                            return True

                        if self.lsp_regeneration_serial is not None:
                            return True

                        if self.name is not None:
                            return True

                        if self.no_route_change_spf_nos is not None:
                            return True

                        if self.not_interested_spf_nos is not None:
                            return True

                        if self.route_change_spf_nos is not None:
                            return True

                        if self.total_spf_nos is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                        return meta._meta_table['Rcmd.Process.Ldp.Process_.InstanceName']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:ldp/Cisco-IOS-XR-infra-rcmd-oper:process'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.instance_name is not None:
                        for child_ref in self.instance_name:
                            if child_ref._has_data():
                                return True

                    if self.process_name is not None:
                        return True

                    if self.protocol_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                    return meta._meta_table['Rcmd.Process.Ldp.Process_']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process/Cisco-IOS-XR-infra-rcmd-oper:ldp'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.process is not None:
                    for child_ref in self.process:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
                return meta._meta_table['Rcmd.Process.Ldp']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd/Cisco-IOS-XR-infra-rcmd-oper:process'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.isis is not None and self.isis._has_data():
                return True

            if self.ldp is not None and self.ldp._has_data():
                return True

            if self.ospf is not None and self.ospf._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
            return meta._meta_table['Rcmd.Process']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-infra-rcmd-oper:rcmd'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.intf is not None and self.intf._has_data():
            return True

        if self.isis is not None and self.isis._has_data():
            return True

        if self.ldp is not None and self.ldp._has_data():
            return True

        if self.memory is not None and self.memory._has_data():
            return True

        if self.node is not None and self.node._has_data():
            return True

        if self.ospf is not None and self.ospf._has_data():
            return True

        if self.process is not None and self.process._has_data():
            return True

        if self.server is not None and self.server._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_infra_rcmd_oper as meta
        return meta._meta_table['Rcmd']['meta_info']


